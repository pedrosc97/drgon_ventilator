
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e28  08009e28  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e30  08009e30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e30  08009e30  00019e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e34  08009e34  00019e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004434  20000074  08009eac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044a8  08009eac  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c151  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c43  00000000  00000000  0003c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e8  00000000  00000000  0003fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00041720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002579a  00000000  00000000  00042e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014f59  00000000  00000000  000685ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcb61  00000000  00000000  0007d523  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bec  00000000  00000000  0015a100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ba0 	.word	0x08009ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009ba0 	.word	0x08009ba0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <BuzzerInit>:
 */
#include "stm32f4xx_hal.h"
#include "buzzer_api.h"

void BuzzerInit(Buzzer_S *buzzer_)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	buzzer_->cycle_time = DEFAULT_BUZZER_CYCLE_TIME_MS;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6a:	605a      	str	r2, [r3, #4]
	buzzer_->duty_cycle = DEFAULT_BUZZER_DUTY_CYCLE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000d72:	601a      	str	r2, [r3, #0]
	buzzer_->period = DEFAULT_BUZZER_PERIOD_MS;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7a:	811a      	strh	r2, [r3, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DCMotorInit>:
#include "stm32f4xx_hal.h"
#include "dc_motor_api.h"
#include "main.h"

void DCMotorInit(DCMotor_S *dc_motor_, TIM_HandleTypeDef *timer_handler_)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	dc_motor_->motor_pwm_ctrl = timer_handler_;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	601a      	str	r2, [r3, #0]
	dc_motor_->pwm_value = 0;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	811a      	strh	r2, [r3, #8]
	dc_motor_->direction_flag = MOTOR_SPIN_CW;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	729a      	strb	r2, [r3, #10]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DCMotorRPMSet>:

void DCMotorRPMSet(DCMotor_S *dc_motor_)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db8:	2360      	movs	r3, #96	; 0x60
 8000dba:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = dc_motor_->pwm_value - 1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	891b      	ldrh	r3, [r3, #8]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f005 fa8a 	bl	80062f8 <HAL_TIM_PWM_Stop>

    if (dc_motor_->direction_flag == MOTOR_SPIN_CW)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7a9b      	ldrb	r3, [r3, #10]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10a      	bne.n	8000e02 <DCMotorRPMSet+0x52>
    {
		HAL_GPIO_WritePin(GPIOB, MotorCW_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4819      	ldr	r0, [pc, #100]	; (8000e58 <DCMotorRPMSet+0xa8>)
 8000df2:	f003 fc2d 	bl	8004650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MotorCCW_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4817      	ldr	r0, [pc, #92]	; (8000e58 <DCMotorRPMSet+0xa8>)
 8000dfc:	f003 fc28 	bl	8004650 <HAL_GPIO_WritePin>
 8000e00:	e018      	b.n	8000e34 <DCMotorRPMSet+0x84>
    }
	else if (dc_motor_->direction_flag == MOTOR_SPIN_CCW)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7a9b      	ldrb	r3, [r3, #10]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d10a      	bne.n	8000e20 <DCMotorRPMSet+0x70>
	{
			HAL_GPIO_WritePin(GPIOB, MotorCW_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4812      	ldr	r0, [pc, #72]	; (8000e58 <DCMotorRPMSet+0xa8>)
 8000e10:	f003 fc1e 	bl	8004650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MotorCCW_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2120      	movs	r1, #32
 8000e18:	480f      	ldr	r0, [pc, #60]	; (8000e58 <DCMotorRPMSet+0xa8>)
 8000e1a:	f003 fc19 	bl	8004650 <HAL_GPIO_WritePin>
 8000e1e:	e009      	b.n	8000e34 <DCMotorRPMSet+0x84>
    }
	else
	{
			HAL_GPIO_WritePin(GPIOB, MotorCW_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <DCMotorRPMSet+0xa8>)
 8000e26:	f003 fc13 	bl	8004650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MotorCCW_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	480a      	ldr	r0, [pc, #40]	; (8000e58 <DCMotorRPMSet+0xa8>)
 8000e30:	f003 fc0e 	bl	8004650 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f107 010c 	add.w	r1, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 fc4c 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f005 fa16 	bl	800627c <HAL_TIM_PWM_Start>
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40020400 	.word	0x40020400

08000e5c <EncoderInit>:
 */

#include "encoder_api.h"

void EncoderInit(Encoder_S *encoder_, EncoderModel_E model_)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
	encoder_->model = model_;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	809a      	strh	r2, [r3, #4]
	encoder_->rpm = 0;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	encoder_->prev_pulse_count = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	80da      	strh	r2, [r3, #6]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000090 	.word	0x20000090
 8000eb8:	200000e4 	.word	0x200000e4

08000ebc <LCDSendCmd>:

#include "stm32f4xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	f023 030f 	bic.w	r3, r3, #15
 8000ece:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f043 030c 	orr.w	r3, r3, #12
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	f043 030c 	orr.w	r3, r3, #12
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	b299      	uxth	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7a1b      	ldrb	r3, [r3, #8]
 8000f0c:	b29c      	uxth	r4, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	88db      	ldrh	r3, [r3, #6]
 8000f12:	f107 0208 	add.w	r2, r7, #8
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4623      	mov	r3, r4
 8000f1a:	f003 fd03 	bl	8004924 <HAL_I2C_Master_Transmit>
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}

08000f26 <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 8000f26:	b590      	push	{r4, r7, lr}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af02      	add	r7, sp, #8
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 030d 	orr.w	r3, r3, #13
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	f043 0309 	orr.w	r3, r3, #9
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	f043 030d 	orr.w	r3, r3, #13
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	f043 0309 	orr.w	r3, r3, #9
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7a1b      	ldrb	r3, [r3, #8]
 8000f76:	b29c      	uxth	r4, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	88db      	ldrh	r3, [r3, #6]
 8000f7c:	f107 0208 	add.w	r2, r7, #8
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4623      	mov	r3, r4
 8000f84:	f003 fcce 	bl	8004924 <HAL_I2C_Master_Transmit>
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}

08000f90 <LCDClear>:

void LCDClear(LCDDisplay_S *lcd_disp_)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	LCDSendCmd(lcd_disp_, 0x80);
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff8e 	bl	8000ebc <LCDSendCmd>
	for (int i = 0; i < 70; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e006      	b.n	8000fb4 <LCDClear+0x24>
	{
		LCDSendData(lcd_disp_, ' ');
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffbc 	bl	8000f26 <LCDSendData>
	for (int i = 0; i < 70; i++)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b45      	cmp	r3, #69	; 0x45
 8000fb8:	ddf5      	ble.n	8000fa6 <LCDClear+0x16>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <LCDSetCursorPos>:

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <LCDSetCursorPos+0x50>)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fde:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	f107 0210 	add.w	r2, r7, #16
 8000fea:	4413      	add	r3, r2
 8000fec:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4619      	mov	r1, r3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff59 	bl	8000ebc <LCDSendCmd>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	08009bb8 	.word	0x08009bb8

08001018 <LCDInit>:

void LCDInit(LCDDisplay_S *lcd_disp_, I2C_HandleTypeDef *i2c_handler_)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	lcd_disp_->i2c_handler = i2c_handler_;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	601a      	str	r2, [r3, #0]
	lcd_disp_->byte_mode = LCD_DISP_4_BYTE_MODE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2204      	movs	r2, #4
 800102c:	721a      	strb	r2, [r3, #8]
	lcd_disp_->i2c_address = LCD_I2C_ADDRESS;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	224e      	movs	r2, #78	; 0x4e
 8001032:	711a      	strb	r2, [r3, #4]
	lcd_disp_->i2c_timeout = LCD_DISP_I2C_TIMEOUT_MS;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2264      	movs	r2, #100	; 0x64
 8001038:	80da      	strh	r2, [r3, #6]

	HAL_Delay(50);
 800103a:	2032      	movs	r0, #50	; 0x32
 800103c:	f001 ff92 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 8001040:	2130      	movs	r1, #48	; 0x30
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff3a 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(5);
 8001048:	2005      	movs	r0, #5
 800104a:	f001 ff8b 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 800104e:	2130      	movs	r1, #48	; 0x30
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff33 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 ff84 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 800105c:	2130      	movs	r1, #48	; 0x30
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff2c 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f001 ff7d 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x20);
 800106a:	2120      	movs	r1, #32
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff25 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f001 ff76 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001078:	2128      	movs	r1, #40	; 0x28
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff1e 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 ff6f 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001086:	2108      	movs	r1, #8
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff17 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f001 ff68 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x01); // clear display
 8001094:	2101      	movs	r1, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff10 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f001 ff61 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010a2:	2106      	movs	r1, #6
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff09 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 ff5a 	bl	8002f64 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010b0:	210c      	movs	r1, #12
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff02 	bl	8000ebc <LCDSendCmd>
	HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f001 ff53 	bl	8002f64 <HAL_Delay>
	LCDClear(lcd_disp_);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff66 	bl	8000f90 <LCDClear>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LCDSendString>:

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	while (*str)
 80010d6:	e007      	b.n	80010e8 <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	603a      	str	r2, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff1f 	bl	8000f26 <LCDSendData>
	while (*str)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f3      	bne.n	80010d8 <LCDSendString+0xc>
	}
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == EditBtnIn_Pin)
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001108:	d104      	bne.n	8001114 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osThreadResume(userInputHandle);
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xcc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f006 fc3e 	bl	8007990 <osThreadResume>
	}

	if (GPIO_Pin == CalibrationBtnIn_Pin)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800111a:	d114      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		uint32_t	WakeTime = osKernelSysTick();
 800111c:	f006 fbaf 	bl	800787e <osKernelSysTick>
 8001120:	6178      	str	r0, [r7, #20]

		if ((WakeTime - prev_systick) > 500)
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800112e:	d90a      	bls.n	8001146 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ToggleCalibrationParam(&ventilator);
 8001130:	4826      	ldr	r0, [pc, #152]	; (80011cc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001132:	f001 fe7b 	bl	8002e2c <ToggleCalibrationParam>
			prev_systick = WakeTime;
 8001136:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	6013      	str	r3, [r2, #0]
			osThreadResume(calibRoutineHandle);
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fc25 	bl	8007990 <osThreadResume>
		}
	}

	if (GPIO_Pin == AlarmSilenceBtnIn_Pin)
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800114c:	d121      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x9a>
	{
		uint32_t	WakeTime = osKernelSysTick();
 800114e:	f006 fb96 	bl	800787e <osKernelSysTick>
 8001152:	6138      	str	r0, [r7, #16]
		if ((WakeTime - prev_systick) > 500)
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001160:	d917      	bls.n	8001192 <HAL_GPIO_EXTI_Callback+0x9a>
		{
			//ToggleSilenceAlarmParam(&ventilator);
			if (unwind_flag == 0)
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d103      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x7c>
			{
				unwind_flag = 1;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e00b      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x94>
			}
			else if (unwind_flag == 1)
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <HAL_GPIO_EXTI_Callback+0x8e>
			{
				unwind_flag = 2;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001180:	2202      	movs	r2, #2
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e002      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x94>
			}
			else
			{
				unwind_flag = 0;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
			}
			prev_systick = WakeTime;
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6013      	str	r3, [r2, #0]
		}
	}

	if (GPIO_Pin == StartStopBtnIn_Pin)
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001198:	d10f      	bne.n	80011ba <HAL_GPIO_EXTI_Callback+0xc2>
	{
		uint32_t	WakeTime = osKernelSysTick();
 800119a:	f006 fb70 	bl	800787e <osKernelSysTick>
 800119e:	60f8      	str	r0, [r7, #12]
		if ((WakeTime - prev_systick) > 500)
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011ac:	d905      	bls.n	80011ba <HAL_GPIO_EXTI_Callback+0xc2>
		{
			ToggleRoutineEnaParam(&ventilator);
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <HAL_GPIO_EXTI_Callback+0xd4>)
 80011b0:	f001 fe1a 	bl	8002de8 <ToggleRoutineEnaParam>
			prev_systick = WakeTime;
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20004044 	.word	0x20004044
 80011c8:	200002e4 	.word	0x200002e4
 80011cc:	20004288 	.word	0x20004288
 80011d0:	200041fc 	.word	0x200041fc
 80011d4:	200002e8 	.word	0x200002e8

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b0c6      	sub	sp, #280	; 0x118
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f001 fe7f 	bl	8002ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f925 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 fc15 	bl	8001a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ea:	f000 fbe3 	bl	80019b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80011ee:	f000 f989 	bl	8001504 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011f2:	f000 fa03 	bl	80015fc <MX_I2C1_Init>
  MX_SPI1_Init();
 80011f6:	f000 fa2f 	bl	8001658 <MX_SPI1_Init>
  MX_TIM3_Init();
 80011fa:	f000 fa63 	bl	80016c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011fe:	f000 fab5 	bl	800176c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001202:	f000 fb07 	bl	8001814 <MX_TIM5_Init>
  MX_TIM10_Init();
 8001206:	f000 fb5f 	bl	80018c8 <MX_TIM10_Init>
  MX_UART5_Init();
 800120a:	f000 fba9 	bl	8001960 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  DCMotorInit(&dc_motor, &htim5);
 800120e:	496b      	ldr	r1, [pc, #428]	; (80013bc <main+0x1e4>)
 8001210:	486b      	ldr	r0, [pc, #428]	; (80013c0 <main+0x1e8>)
 8001212:	f7ff fdb9 	bl	8000d88 <DCMotorInit>
  EncoderInit(&motor_encoder, HD_MODEL);
 8001216:	f44f 7116 	mov.w	r1, #600	; 0x258
 800121a:	486a      	ldr	r0, [pc, #424]	; (80013c4 <main+0x1ec>)
 800121c:	f7ff fe1e 	bl	8000e5c <EncoderInit>
  LCDInit(&lcd_display, &hi2c1);
 8001220:	4969      	ldr	r1, [pc, #420]	; (80013c8 <main+0x1f0>)
 8001222:	486a      	ldr	r0, [pc, #424]	; (80013cc <main+0x1f4>)
 8001224:	f7ff fef8 	bl	8001018 <LCDInit>
  PotControlsInit(pot_controls_a);
 8001228:	4869      	ldr	r0, [pc, #420]	; (80013d0 <main+0x1f8>)
 800122a:	f000 ff86 	bl	800213a <PotControlsInit>
  BuzzerInit(&buzzer);
 800122e:	4869      	ldr	r0, [pc, #420]	; (80013d4 <main+0x1fc>)
 8001230:	f7ff fd94 	bl	8000d5c <BuzzerInit>
  SPIPrsrSnsrInit(&pressure_sensor, &hspi1);
 8001234:	4968      	ldr	r1, [pc, #416]	; (80013d8 <main+0x200>)
 8001236:	4869      	ldr	r0, [pc, #420]	; (80013dc <main+0x204>)
 8001238:	f000 ffce 	bl	80021d8 <SPIPrsrSnsrInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of initTask */
  osThreadDef(initTask, initTaskFn, osPriorityRealtime, 0, 128);
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <main+0x208>)
 800123e:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8001242:	461d      	mov	r5, r3
 8001244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800124c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(initTask), NULL);
 8001250:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f006 fb21 	bl	800789e <osThreadCreate>
 800125c:	4602      	mov	r2, r0
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <main+0x20c>)
 8001260:	601a      	str	r2, [r3, #0]

  /* definition and creation of mainRoutine */
  osThreadDef(mainRoutine, mainRoutineFn, osPriorityHigh, 0, 128);
 8001262:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <main+0x210>)
 8001264:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainRoutineHandle = osThreadCreate(osThread(mainRoutine), NULL);
 8001276:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f006 fb0e 	bl	800789e <osThreadCreate>
 8001282:	4602      	mov	r2, r0
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <main+0x214>)
 8001286:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUI */
  osThreadDef(displayUI, displayUIFn, osPriorityHigh, 0, 128);
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <main+0x218>)
 800128a:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800128e:	461d      	mov	r5, r3
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUIHandle = osThreadCreate(osThread(displayUI), NULL);
 800129c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f006 fafb 	bl	800789e <osThreadCreate>
 80012a8:	4602      	mov	r2, r0
 80012aa:	4b52      	ldr	r3, [pc, #328]	; (80013f4 <main+0x21c>)
 80012ac:	601a      	str	r2, [r3, #0]

  /* definition and creation of motorEncoder */
  osThreadDef(motorEncoder, motorEncoderFn, osPriorityHigh, 0, 128);
 80012ae:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <main+0x220>)
 80012b0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80012b4:	461d      	mov	r5, r3
 80012b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorEncoderHandle = osThreadCreate(osThread(motorEncoder), NULL);
 80012c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fae8 	bl	800789e <osThreadCreate>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <main+0x224>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* definition and creation of armEncoder */
  osThreadDef(armEncoder, armEncoderFn, osPriorityHigh, 0, 128);
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <main+0x228>)
 80012d6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80012da:	461d      	mov	r5, r3
 80012dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armEncoderHandle = osThreadCreate(osThread(armEncoder), NULL);
 80012e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fad5 	bl	800789e <osThreadCreate>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <main+0x22c>)
 80012f8:	601a      	str	r2, [r3, #0]

  /* definition and creation of calibRoutine */
  osThreadDef(calibRoutine, calibRoutineFn, osPriorityRealtime, 0, 128);
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <main+0x230>)
 80012fc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001300:	461d      	mov	r5, r3
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calibRoutineHandle = osThreadCreate(osThread(calibRoutine), NULL);
 800130e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fac2 	bl	800789e <osThreadCreate>
 800131a:	4602      	mov	r2, r0
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <main+0x234>)
 800131e:	601a      	str	r2, [r3, #0]

  /* definition and creation of diagnosticsSrv */
  osThreadDef(diagnosticsSrv, diagnosticsSrvFn, osPriorityHigh, 0, 128);
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <main+0x238>)
 8001322:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001326:	461d      	mov	r5, r3
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diagnosticsSrvHandle = osThreadCreate(osThread(diagnosticsSrv), NULL);
 8001334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f006 faaf 	bl	800789e <osThreadCreate>
 8001340:	4602      	mov	r2, r0
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <main+0x23c>)
 8001344:	601a      	str	r2, [r3, #0]

  /* definition and creation of userInput */
  osThreadDef(userInput, userInputFn, osPriorityHigh, 0, 128);
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <main+0x240>)
 8001348:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800134c:	461d      	mov	r5, r3
 800134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001352:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001356:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userInputHandle = osThreadCreate(osThread(userInput), NULL);
 800135a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f006 fa9c 	bl	800789e <osThreadCreate>
 8001366:	4602      	mov	r2, r0
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <main+0x244>)
 800136a:	601a      	str	r2, [r3, #0]

  /* definition and creation of alarmMonitor */
  osThreadDef(alarmMonitor, alarmMonitorFn, osPriorityRealtime, 0, 128);
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <main+0x248>)
 800136e:	f107 041c 	add.w	r4, r7, #28
 8001372:	461d      	mov	r5, r3
 8001374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800137c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmMonitorHandle = osThreadCreate(osThread(alarmMonitor), NULL);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f006 fa89 	bl	800789e <osThreadCreate>
 800138c:	4602      	mov	r2, r0
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <main+0x24c>)
 8001390:	601a      	str	r2, [r3, #0]

  /* definition and creation of pressureSnsr */
  osThreadDef(pressureSnsr, pressureSnsrFn, osPriorityHigh, 0, 128);
 8001392:	463b      	mov	r3, r7
 8001394:	4a24      	ldr	r2, [pc, #144]	; (8001428 <main+0x250>)
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSnsrHandle = osThreadCreate(osThread(pressureSnsr), NULL);
 80013a6:	463b      	mov	r3, r7
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 fa77 	bl	800789e <osThreadCreate>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <main+0x254>)
 80013b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013b6:	f006 fa5b 	bl	8007870 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <main+0x1e2>
 80013bc:	2000417c 	.word	0x2000417c
 80013c0:	200042b4 	.word	0x200042b4
 80013c4:	200042a8 	.word	0x200042a8
 80013c8:	2000408c 	.word	0x2000408c
 80013cc:	20004120 	.word	0x20004120
 80013d0:	2000438c 	.word	0x2000438c
 80013d4:	2000429c 	.word	0x2000429c
 80013d8:	20004334 	.word	0x20004334
 80013dc:	2000412c 	.word	0x2000412c
 80013e0:	08009bcc 	.word	0x08009bcc
 80013e4:	200043fc 	.word	0x200043fc
 80013e8:	08009bf4 	.word	0x08009bf4
 80013ec:	20004328 	.word	0x20004328
 80013f0:	08009c1c 	.word	0x08009c1c
 80013f4:	200042c4 	.word	0x200042c4
 80013f8:	08009c48 	.word	0x08009c48
 80013fc:	200042b0 	.word	0x200042b0
 8001400:	08009c70 	.word	0x08009c70
 8001404:	200042c0 	.word	0x200042c0
 8001408:	08009c9c 	.word	0x08009c9c
 800140c:	200041fc 	.word	0x200041fc
 8001410:	08009cc8 	.word	0x08009cc8
 8001414:	20004048 	.word	0x20004048
 8001418:	08009cf0 	.word	0x08009cf0
 800141c:	20004044 	.word	0x20004044
 8001420:	08009d1c 	.word	0x08009d1c
 8001424:	20004330 	.word	0x20004330
 8001428:	08009d48 	.word	0x08009d48
 800142c:	2000432c 	.word	0x2000432c

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f007 ffa9 	bl	8009396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <SystemClock_Config+0xcc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <SystemClock_Config+0xcc>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <SystemClock_Config+0xcc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <SystemClock_Config+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <SystemClock_Config+0xd0>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fd3d 	bl	8004f34 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c0:	f000 fe34 	bl	800212c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2105      	movs	r1, #5
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 ff96 	bl	8005414 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ee:	f000 fe1d 	bl	800212c <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001516:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001518:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <MX_ADC1_Init+0xf0>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <MX_ADC1_Init+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <MX_ADC1_Init+0xec>)
 800152a:	2201      	movs	r2, #1
 800152c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <MX_ADC1_Init+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001544:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <MX_ADC1_Init+0xf4>)
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_ADC1_Init+0xec>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001550:	2204      	movs	r2, #4
 8001552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <MX_ADC1_Init+0xec>)
 800155e:	2201      	movs	r2, #1
 8001560:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001562:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001564:	f001 fd20 	bl	8002fa8 <HAL_ADC_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800156e:	f000 fddd 	bl	800212c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001572:	2306      	movs	r3, #6
 8001574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001576:	2301      	movs	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800157a:	2301      	movs	r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	481b      	ldr	r0, [pc, #108]	; (80015f0 <MX_ADC1_Init+0xec>)
 8001584:	f001 ffae 	bl	80034e4 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800158e:	f000 fdcd 	bl	800212c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001592:	2307      	movs	r3, #7
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001596:	2302      	movs	r3, #2
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4814      	ldr	r0, [pc, #80]	; (80015f0 <MX_ADC1_Init+0xec>)
 80015a0:	f001 ffa0 	bl	80034e4 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80015aa:	f000 fdbf 	bl	800212c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015ae:	2308      	movs	r3, #8
 80015b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015b2:	2303      	movs	r3, #3
 80015b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_ADC1_Init+0xec>)
 80015bc:	f001 ff92 	bl	80034e4 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80015c6:	f000 fdb1 	bl	800212c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015ca:	2309      	movs	r3, #9
 80015cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015ce:	2304      	movs	r3, #4
 80015d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_ADC1_Init+0xec>)
 80015d8:	f001 ff84 	bl	80034e4 <HAL_ADC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80015e2:	f000 fda3 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20004240 	.word	0x20004240
 80015f4:	40012000 	.word	0x40012000
 80015f8:	0f000001 	.word	0x0f000001

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_I2C1_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_I2C1_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_I2C1_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_I2C1_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C1_Init+0x50>)
 800163a:	f003 f83b 	bl	80046b4 <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 fd72 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000408c 	.word	0x2000408c
 8001650:	40005400 	.word	0x40005400
 8001654:	000186a0 	.word	0x000186a0

08001658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_SPI1_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <MX_SPI1_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_SPI1_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI1_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_SPI1_Init+0x64>)
 800168c:	2210      	movs	r2, #16
 800168e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_SPI1_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_SPI1_Init+0x64>)
 80016aa:	f004 f8d7 	bl	800585c <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b4:	f000 fd3a 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20004334 	.word	0x20004334
 80016c0:	40013000 	.word	0x40013000

080016c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fe5f 	bl	8009396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_TIM3_Init+0xa0>)
 80016e2:	4a21      	ldr	r2, [pc, #132]	; (8001768 <MX_TIM3_Init+0xa4>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_TIM3_Init+0xa0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_TIM3_Init+0xa0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_TIM3_Init+0xa0>)
 80016f4:	f240 623f 	movw	r2, #1599	; 0x63f
 80016f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_TIM3_Init+0xa0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_TIM3_Init+0xa0>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001706:	2303      	movs	r3, #3
 8001708:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001716:	2302      	movs	r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800171e:	2301      	movs	r3, #1
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001726:	2302      	movs	r3, #2
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_TIM3_Init+0xa0>)
 8001732:	f004 fe39 	bl	80063a8 <HAL_TIM_Encoder_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800173c:	f000 fcf6 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_TIM3_Init+0xa0>)
 800174e:	f005 fb29 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001758:	f000 fce8 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3730      	adds	r7, #48	; 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200041bc 	.word	0x200041bc
 8001768:	40000400 	.word	0x40000400

0800176c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f007 fe0b 	bl	8009396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <MX_TIM4_Init+0xa0>)
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <MX_TIM4_Init+0xa4>)
 800178c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <MX_TIM4_Init+0xa0>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM4_Init+0xa0>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2400-1;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_TIM4_Init+0xa0>)
 800179c:	f640 125f 	movw	r2, #2399	; 0x95f
 80017a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM4_Init+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_TIM4_Init+0xa0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ae:	2303      	movs	r3, #3
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80017be:	2302      	movs	r3, #2
 80017c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <MX_TIM4_Init+0xa0>)
 80017da:	f004 fde5 	bl	80063a8 <HAL_TIM_Encoder_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017e4:	f000 fca2 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_TIM4_Init+0xa0>)
 80017f6:	f005 fad5 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001800:	f000 fc94 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000404c 	.word	0x2000404c
 8001810:	40000800 	.word	0x40000800

08001814 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_TIM5_Init+0xac>)
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <MX_TIM5_Init+0xb0>)
 800183a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_TIM5_Init+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_TIM5_Init+0xac>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8000-1;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM5_Init+0xac>)
 800184a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800184e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_TIM5_Init+0xac>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM5_Init+0xac>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <MX_TIM5_Init+0xac>)
 800185e:	f004 fce2 	bl	8006226 <HAL_TIM_PWM_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001868:	f000 fc60 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	4619      	mov	r1, r3
 800187a:	4811      	ldr	r0, [pc, #68]	; (80018c0 <MX_TIM5_Init+0xac>)
 800187c:	f005 fa92 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001886:	f000 fc51 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	; 0x60
 800188c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2204      	movs	r2, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4807      	ldr	r0, [pc, #28]	; (80018c0 <MX_TIM5_Init+0xac>)
 80018a2:	f004 ff1b 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80018ac:	f000 fc3e 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <MX_TIM5_Init+0xac>)
 80018b2:	f000 ff55 	bl	8002760 <HAL_TIM_MspPostInit>

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000417c 	.word	0x2000417c
 80018c4:	40000c00 	.word	0x40000c00

080018c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <MX_TIM10_Init+0x90>)
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <MX_TIM10_Init+0x94>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_TIM10_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <MX_TIM10_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_TIM10_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_TIM10_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_TIM10_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001904:	4814      	ldr	r0, [pc, #80]	; (8001958 <MX_TIM10_Init+0x90>)
 8001906:	f004 fc3f 	bl	8006188 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001910:	f000 fc0c 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <MX_TIM10_Init+0x90>)
 8001916:	f004 fc86 	bl	8006226 <HAL_TIM_PWM_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001920:	f000 fc04 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001924:	2360      	movs	r3, #96	; 0x60
 8001926:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM10_Init+0x90>)
 800193c:	f004 fece 	bl	80066dc <HAL_TIM_PWM_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001946:	f000 fbf1 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800194a:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM10_Init+0x90>)
 800194c:	f000 ff08 	bl	8002760 <HAL_TIM_MspPostInit>

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200040e0 	.word	0x200040e0
 800195c:	40014400 	.word	0x40014400

08001960 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_UART5_Init+0x4c>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_UART5_Init+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_UART5_Init+0x4c>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_UART5_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_UART5_Init+0x4c>)
 800197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_UART5_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_UART5_Init+0x4c>)
 8001988:	220c      	movs	r2, #12
 800198a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_UART5_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_UART5_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_UART5_Init+0x4c>)
 800199a:	f005 fa93 	bl	8006ec4 <HAL_UART_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 80019a4:	f000 fbc2 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20004200 	.word	0x20004200
 80019b0:	40005000 	.word	0x40005000

080019b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_DMA_Init+0x5c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <MX_DMA_Init+0x5c>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_DMA_Init+0x5c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2105      	movs	r1, #5
 80019da:	2038      	movs	r0, #56	; 0x38
 80019dc:	f002 f8e4 	bl	8003ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019e0:	2038      	movs	r0, #56	; 0x38
 80019e2:	f002 f8fd 	bl	8003be0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	203a      	movs	r0, #58	; 0x3a
 80019ec:	f002 f8dc 	bl	8003ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019f0:	203a      	movs	r0, #58	; 0x3a
 80019f2:	f002 f8f5 	bl	8003be0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2105      	movs	r1, #5
 80019fa:	203b      	movs	r0, #59	; 0x3b
 80019fc:	f002 f8d4 	bl	8003ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a00:	203b      	movs	r0, #59	; 0x3b
 8001a02:	f002 f8ed 	bl	8003be0 <HAL_NVIC_EnableIRQ>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a5c      	ldr	r2, [pc, #368]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a55      	ldr	r2, [pc, #340]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a40      	ldr	r2, [pc, #256]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a39      	ldr	r2, [pc, #228]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <MX_GPIO_Init+0x190>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AlarmLED3_Pin|AlarmLED4_Pin|AlarmLED5_Pin|AlarmLED6_Pin 
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	217f      	movs	r1, #127	; 0x7f
 8001ad6:	4834      	ldr	r0, [pc, #208]	; (8001ba8 <MX_GPIO_Init+0x194>)
 8001ad8:	f002 fdba 	bl	8004650 <HAL_GPIO_WritePin>
                          |AlarmLED7_Pin|AlarmLED1_Pin|AlarmLED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AlarmLED8_Pin|SysOnLED_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2103      	movs	r1, #3
 8001ae0:	4832      	ldr	r0, [pc, #200]	; (8001bac <MX_GPIO_Init+0x198>)
 8001ae2:	f002 fdb5 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorCW_Pin|MotorCCW_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2130      	movs	r1, #48	; 0x30
 8001aea:	4831      	ldr	r0, [pc, #196]	; (8001bb0 <MX_GPIO_Init+0x19c>)
 8001aec:	f002 fdb0 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PSnsrCSADCOut_Pin|PSnsrCSEEOut_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	21c0      	movs	r1, #192	; 0xc0
 8001af4:	482e      	ldr	r0, [pc, #184]	; (8001bb0 <MX_GPIO_Init+0x19c>)
 8001af6:	f002 fdab 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AlarmLED3_Pin AlarmLED4_Pin AlarmLED5_Pin AlarmLED6_Pin 
                           AlarmLED7_Pin AlarmLED1_Pin AlarmLED2_Pin */
  GPIO_InitStruct.Pin = AlarmLED3_Pin|AlarmLED4_Pin|AlarmLED5_Pin|AlarmLED6_Pin 
 8001afa:	237f      	movs	r3, #127	; 0x7f
 8001afc:	61fb      	str	r3, [r7, #28]
                          |AlarmLED7_Pin|AlarmLED1_Pin|AlarmLED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4825      	ldr	r0, [pc, #148]	; (8001ba8 <MX_GPIO_Init+0x194>)
 8001b12:	f002 fc03 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : AlarmLED8_Pin SysOnLED_Pin */
  GPIO_InitStruct.Pin = AlarmLED8_Pin|SysOnLED_Pin;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481f      	ldr	r0, [pc, #124]	; (8001bac <MX_GPIO_Init+0x198>)
 8001b2e:	f002 fbf5 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : PrsrSnsrDRDY_Pin */
  GPIO_InitStruct.Pin = PrsrSnsrDRDY_Pin;
 8001b32:	2310      	movs	r3, #16
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PrsrSnsrDRDY_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <MX_GPIO_Init+0x1a0>)
 8001b46:	f002 fbe9 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : StartStopBtnIn_Pin EditBtnIn_Pin CalibrationBtnIn_Pin AlarmSilenceBtnIn_Pin */
  GPIO_InitStruct.Pin = StartStopBtnIn_Pin|EditBtnIn_Pin|CalibrationBtnIn_Pin|AlarmSilenceBtnIn_Pin;
 8001b4a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_GPIO_Init+0x1a4>)
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <MX_GPIO_Init+0x194>)
 8001b60:	f002 fbdc 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorCW_Pin MotorCCW_Pin */
  GPIO_InitStruct.Pin = MotorCW_Pin|MotorCCW_Pin;
 8001b64:	2330      	movs	r3, #48	; 0x30
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_GPIO_Init+0x19c>)
 8001b7c:	f002 fbce 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : PSnsrCSADCOut_Pin PSnsrCSEEOut_Pin */
  GPIO_InitStruct.Pin = PSnsrCSADCOut_Pin|PSnsrCSEEOut_Pin;
 8001b80:	23c0      	movs	r3, #192	; 0xc0
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <MX_GPIO_Init+0x19c>)
 8001b98:	f002 fbc0 	bl	800431c <HAL_GPIO_Init>

}
 8001b9c:	bf00      	nop
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	10110000 	.word	0x10110000

08001bbc <initTaskFn>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_initTaskFn */
void initTaskFn(void const * argument)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	VentilatorInit(&ventilator);
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <initTaskFn+0x3c>)
 8001bc6:	f000 ff9f 	bl	8002b08 <VentilatorInit>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	2028      	movs	r0, #40	; 0x28
 8001bd0:	f001 ffea 	bl	8003ba8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f002 f803 	bl	8003be0 <HAL_NVIC_EnableIRQ>

	osThreadResume(userInputHandle);
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <initTaskFn+0x40>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fed6 	bl	8007990 <osThreadResume>
	osThreadTerminate(initTaskHandle);
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <initTaskFn+0x44>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fea4 	bl	8007936 <osThreadTerminate>
  /* USER CODE END 5 */ 
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20004288 	.word	0x20004288
 8001bfc:	20004044 	.word	0x20004044
 8001c00:	200043fc 	.word	0x200043fc

08001c04 <mainRoutineFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mainRoutineFn */
void mainRoutineFn(void const * argument)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainRoutineFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001c0c:	f005 fe37 	bl	800787e <osKernelSysTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if (((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE) && !((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION))
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <mainRoutineFn+0x110>)
 8001c16:	7c9b      	ldrb	r3, [r3, #18]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d159      	bne.n	8001cd6 <mainRoutineFn+0xd2>
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <mainRoutineFn+0x110>)
 8001c24:	7c9b      	ldrb	r3, [r3, #18]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d052      	beq.n	8001cd6 <mainRoutineFn+0xd2>
		{
			dc_motor.pwm_value = ventilator.motor_pwm_value_in;
 8001c30:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <mainRoutineFn+0x110>)
 8001c32:	89da      	ldrh	r2, [r3, #14]
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <mainRoutineFn+0x114>)
 8001c36:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_CCW;
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <mainRoutineFn+0x114>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001c3e:	4836      	ldr	r0, [pc, #216]	; (8001d18 <mainRoutineFn+0x114>)
 8001c40:	f7ff f8b6 	bl	8000db0 <DCMotorRPMSet>

			if (TIM4->CNT < (ventilator.end_angle_pulse - 3))
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <mainRoutineFn+0x118>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <mainRoutineFn+0x110>)
 8001c4a:	8992      	ldrh	r2, [r2, #12]
 8001c4c:	3a03      	subs	r2, #3
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d205      	bcs.n	8001c5e <mainRoutineFn+0x5a>
			{
				osDelayUntil(&PreviousWakeTime, 10);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	210a      	movs	r1, #10
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f005 febb 	bl	80079d4 <osDelayUntil>
			}

			dc_motor.pwm_value = 0;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <mainRoutineFn+0x114>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <mainRoutineFn+0x114>)
 8001c66:	2202      	movs	r2, #2
 8001c68:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001c6a:	482b      	ldr	r0, [pc, #172]	; (8001d18 <mainRoutineFn+0x114>)
 8001c6c:	f7ff f8a0 	bl	8000db0 <DCMotorRPMSet>
			osDelayUntil(&PreviousWakeTime, 100);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2164      	movs	r1, #100	; 0x64
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 feac 	bl	80079d4 <osDelayUntil>

			dc_motor.pwm_value = ventilator.motor_pwm_value_out;
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <mainRoutineFn+0x110>)
 8001c7e:	8a1a      	ldrh	r2, [r3, #16]
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <mainRoutineFn+0x114>)
 8001c82:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_CW;
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <mainRoutineFn+0x114>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001c8a:	4823      	ldr	r0, [pc, #140]	; (8001d18 <mainRoutineFn+0x114>)
 8001c8c:	f7ff f890 	bl	8000db0 <DCMotorRPMSet>
			osDelayUntil(&PreviousWakeTime, ventilator.exhalation_period_ms);
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <mainRoutineFn+0x110>)
 8001c92:	895b      	ldrh	r3, [r3, #10]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f005 fe99 	bl	80079d4 <osDelayUntil>

			if (TIM4->CNT > (10))
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <mainRoutineFn+0x118>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b0a      	cmp	r3, #10
 8001ca8:	d905      	bls.n	8001cb6 <mainRoutineFn+0xb2>
			{
				osDelayUntil(&PreviousWakeTime, 10);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	210a      	movs	r1, #10
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fe8f 	bl	80079d4 <osDelayUntil>
			}

			dc_motor.pwm_value = 0;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <mainRoutineFn+0x114>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <mainRoutineFn+0x114>)
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001cc2:	4815      	ldr	r0, [pc, #84]	; (8001d18 <mainRoutineFn+0x114>)
 8001cc4:	f7ff f874 	bl	8000db0 <DCMotorRPMSet>
			osDelayUntil(&PreviousWakeTime, 100);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2164      	movs	r1, #100	; 0x64
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 fe80 	bl	80079d4 <osDelayUntil>
 8001cd4:	e01c      	b.n	8001d10 <mainRoutineFn+0x10c>
		}
		else if ((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION)
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <mainRoutineFn+0x110>)
 8001cd8:	7c9b      	ldrb	r3, [r3, #18]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d106      	bne.n	8001cf2 <mainRoutineFn+0xee>
		{
			osDelayUntil(&PreviousWakeTime, 10);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	210a      	movs	r1, #10
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fe72 	bl	80079d4 <osDelayUntil>
 8001cf0:	e790      	b.n	8001c14 <mainRoutineFn+0x10>
		}
		else
		{
			dc_motor.pwm_value = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <mainRoutineFn+0x114>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <mainRoutineFn+0x114>)
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <mainRoutineFn+0x114>)
 8001d00:	f7ff f856 	bl	8000db0 <DCMotorRPMSet>
			osDelayUntil(&PreviousWakeTime, 10);
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	210a      	movs	r1, #10
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 fe62 	bl	80079d4 <osDelayUntil>
		if (((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE) && !((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION))
 8001d10:	e780      	b.n	8001c14 <mainRoutineFn+0x10>
 8001d12:	bf00      	nop
 8001d14:	20004288 	.word	0x20004288
 8001d18:	200042b4 	.word	0x200042b4
 8001d1c:	40000800 	.word	0x40000800

08001d20 <displayUIFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayUIFn */
void displayUIFn(void const * argument)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b08d      	sub	sp, #52	; 0x34
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUIFn */
	char buffer[32];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001d28:	f005 fda9 	bl	800787e <osKernelSysTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]
	osThreadResume(userInputHandle);
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <displayUIFn+0xd4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 fe2b 	bl	8007990 <osThreadResume>

  /* Infinite loop */
	for(;;)
	{
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	482e      	ldr	r0, [pc, #184]	; (8001df8 <displayUIFn+0xd8>)
 8001d40:	f7ff f940 	bl	8000fc4 <LCDSetCursorPos>
		sprintf(buffer, "I:E %03u  T %06lu", ventilator.i_e_ratio, HAL_GetTick());
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <displayUIFn+0xdc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461c      	mov	r4, r3
 8001d4a:	f001 f8ff 	bl	8002f4c <HAL_GetTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f107 0010 	add.w	r0, r7, #16
 8001d54:	4622      	mov	r2, r4
 8001d56:	492a      	ldr	r1, [pc, #168]	; (8001e00 <displayUIFn+0xe0>)
 8001d58:	f007 fb26 	bl	80093a8 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	4825      	ldr	r0, [pc, #148]	; (8001df8 <displayUIFn+0xd8>)
 8001d64:	f7ff f9b2 	bl	80010cc <LCDSendString>

		LCDSetCursorPos(&lcd_display, 1, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4822      	ldr	r0, [pc, #136]	; (8001df8 <displayUIFn+0xd8>)
 8001d6e:	f7ff f929 	bl	8000fc4 <LCDSetCursorPos>
		sprintf(buffer, "VOL %03u  PMOT %04lu", ventilator.tidal_volume, TIM3->CNT);
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <displayUIFn+0xdc>)
 8001d74:	889b      	ldrh	r3, [r3, #4]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <displayUIFn+0xe4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f107 0010 	add.w	r0, r7, #16
 8001d80:	4921      	ldr	r1, [pc, #132]	; (8001e08 <displayUIFn+0xe8>)
 8001d82:	f007 fb11 	bl	80093a8 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	481a      	ldr	r0, [pc, #104]	; (8001df8 <displayUIFn+0xd8>)
 8001d8e:	f7ff f99d 	bl	80010cc <LCDSendString>

		LCDSetCursorPos(&lcd_display, 2, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2102      	movs	r1, #2
 8001d96:	4818      	ldr	r0, [pc, #96]	; (8001df8 <displayUIFn+0xd8>)
 8001d98:	f7ff f914 	bl	8000fc4 <LCDSetCursorPos>
		sprintf(buffer, "PRS %03u  PARM %04lu", ventilator.pressure_level_alarm_value, TIM4->CNT);
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <displayUIFn+0xdc>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <displayUIFn+0xec>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f107 0010 	add.w	r0, r7, #16
 8001daa:	4919      	ldr	r1, [pc, #100]	; (8001e10 <displayUIFn+0xf0>)
 8001dac:	f007 fafc 	bl	80093a8 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	4810      	ldr	r0, [pc, #64]	; (8001df8 <displayUIFn+0xd8>)
 8001db8:	f7ff f988 	bl	80010cc <LCDSendString>

		LCDSetCursorPos(&lcd_display, 3, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <displayUIFn+0xd8>)
 8001dc2:	f7ff f8ff 	bl	8000fc4 <LCDSetCursorPos>
		sprintf(buffer, "RFQ %03u", ventilator.respiration_frequency);
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <displayUIFn+0xdc>)
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4910      	ldr	r1, [pc, #64]	; (8001e14 <displayUIFn+0xf4>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fae8 	bl	80093a8 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <displayUIFn+0xd8>)
 8001de0:	f7ff f974 	bl	80010cc <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_UPDATE_TIMESTEP_MS);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2164      	movs	r1, #100	; 0x64
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 fdf2 	bl	80079d4 <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001df0:	e7a3      	b.n	8001d3a <displayUIFn+0x1a>
 8001df2:	bf00      	nop
 8001df4:	20004044 	.word	0x20004044
 8001df8:	20004120 	.word	0x20004120
 8001dfc:	20004288 	.word	0x20004288
 8001e00:	08009d64 	.word	0x08009d64
 8001e04:	40000400 	.word	0x40000400
 8001e08:	08009d78 	.word	0x08009d78
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	08009d90 	.word	0x08009d90
 8001e14:	08009da8 	.word	0x08009da8

08001e18 <motorEncoderFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorEncoderFn */
void motorEncoderFn(void const * argument)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motorEncoderFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001e20:	f005 fd2d 	bl	800787e <osKernelSysTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	for(;;)
	{
		/* TODO: Refactor of encoder parameters update function */
		//UpdateEncoderParams(&motor_encoder, TIM3->CNT, MOTOR_RPM_CALCULATE_TIMESTEP_MS);
		osDelayUntil(&PreviousWakeTime, MOTOR_RPM_CALCULATE_TIMESTEP_MS);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	210a      	movs	r1, #10
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 fdd0 	bl	80079d4 <osDelayUntil>
 8001e34:	e7f8      	b.n	8001e28 <motorEncoderFn+0x10>

08001e36 <armEncoderFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_armEncoderFn */
void armEncoderFn(void const * argument)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN armEncoderFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001e3e:	f005 fd1e 	bl	800787e <osKernelSysTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	for(;;)
	{
		/* TODO: Refactor of encoder parameters update function */
		//UpdateEncoderParams(&motor_encoder, TIM4->CNT, ARM_RPM_CALCULATE_TIMESTEP_MS);
		osDelayUntil(&PreviousWakeTime, ARM_RPM_CALCULATE_TIMESTEP_MS);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	210a      	movs	r1, #10
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fdc1 	bl	80079d4 <osDelayUntil>
 8001e52:	e7f8      	b.n	8001e46 <armEncoderFn+0x10>

08001e54 <calibRoutineFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_calibRoutineFn */
void calibRoutineFn(void const * argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN calibRoutineFn */
	uint32_t	PreviousWakeTime = osKernelSysTick();
 8001e5c:	f005 fd0f 	bl	800787e <osKernelSysTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	60fb      	str	r3, [r7, #12]
	uint8_t 	process_flag = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]
	uint32_t init_count = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
	osThreadSuspend(calibRoutineHandle);
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <calibRoutineFn+0xe8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 fd80 	bl	8007976 <osThreadSuspend>

  /* Infinite loop */
	for(;;)
	{
		if (process_flag == 0)
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d133      	bne.n	8001ee4 <calibRoutineFn+0x90>
		{
			osThreadSuspend(mainRoutineHandle);
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <calibRoutineFn+0xec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f005 fd78 	bl	8007976 <osThreadSuspend>
			PreviousWakeTime = osKernelSysTick();
 8001e86:	f005 fcfa 	bl	800787e <osKernelSysTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]
			dc_motor.pwm_value = 1000;
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <calibRoutineFn+0xf0>)
 8001e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e94:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_CW;
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <calibRoutineFn+0xf0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001e9c:	4829      	ldr	r0, [pc, #164]	; (8001f44 <calibRoutineFn+0xf0>)
 8001e9e:	f7fe ff87 	bl	8000db0 <DCMotorRPMSet>
			osDelayUntil(&PreviousWakeTime, 3000);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f005 fd92 	bl	80079d4 <osDelayUntil>

			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <calibRoutineFn+0xf0>)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001eb6:	4823      	ldr	r0, [pc, #140]	; (8001f44 <calibRoutineFn+0xf0>)
 8001eb8:	f7fe ff7a 	bl	8000db0 <DCMotorRPMSet>
			osThreadSuspend(calibRoutineHandle);
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <calibRoutineFn+0xe8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 fd58 	bl	8007976 <osThreadSuspend>

			init_count = TIM4->CNT;
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <calibRoutineFn+0xf4>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	613b      	str	r3, [r7, #16]
			dc_motor.pwm_value = 1000;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <calibRoutineFn+0xf0>)
 8001ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed2:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_CCW;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <calibRoutineFn+0xf0>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001eda:	481a      	ldr	r0, [pc, #104]	; (8001f44 <calibRoutineFn+0xf0>)
 8001edc:	f7fe ff68 	bl	8000db0 <DCMotorRPMSet>
			process_flag = 1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]
		}

		if (TIM4->CNT != init_count)
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <calibRoutineFn+0xf4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d01e      	beq.n	8001f2c <calibRoutineFn+0xd8>
		{
			dc_motor.pwm_value = 0;
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <calibRoutineFn+0xf0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <calibRoutineFn+0xf0>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <calibRoutineFn+0xf0>)
 8001efc:	f7fe ff58 	bl	8000db0 <DCMotorRPMSet>
			process_flag = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]
			TIM3->CNT = 0;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <calibRoutineFn+0xf8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <calibRoutineFn+0xf4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
			ToggleCalibrationParam(&ventilator);
 8001f10:	480f      	ldr	r0, [pc, #60]	; (8001f50 <calibRoutineFn+0xfc>)
 8001f12:	f000 ff8b 	bl	8002e2c <ToggleCalibrationParam>
			osThreadResume(mainRoutineHandle);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <calibRoutineFn+0xec>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 fd38 	bl	8007990 <osThreadResume>
			osThreadSuspend(calibRoutineHandle);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <calibRoutineFn+0xe8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f005 fd26 	bl	8007976 <osThreadSuspend>
 8001f2a:	e7a4      	b.n	8001e76 <calibRoutineFn+0x22>
		}
		else
		{
			osDelayUntil(&PreviousWakeTime, 10);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	210a      	movs	r1, #10
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fd4e 	bl	80079d4 <osDelayUntil>
		if (process_flag == 0)
 8001f38:	e79d      	b.n	8001e76 <calibRoutineFn+0x22>
 8001f3a:	bf00      	nop
 8001f3c:	200041fc 	.word	0x200041fc
 8001f40:	20004328 	.word	0x20004328
 8001f44:	200042b4 	.word	0x200042b4
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	20004288 	.word	0x20004288

08001f54 <diagnosticsSrvFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diagnosticsSrvFn */
void diagnosticsSrvFn(void const * argument)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b08d      	sub	sp, #52	; 0x34
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diagnosticsSrvFn */
	osThreadSuspend(diagnosticsSrvHandle);
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <diagnosticsSrvFn+0x68>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fd08 	bl	8007976 <osThreadSuspend>
	char buffer[21];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001f66:	f005 fc8a 	bl	800787e <osKernelSysTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if ((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE)
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <diagnosticsSrvFn+0x6c>)
 8001f70:	7c9b      	ldrb	r3, [r3, #18]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d118      	bne.n	8001fae <diagnosticsSrvFn+0x5a>
		{
			sprintf(buffer, "%04lu,%04lu,%04lu,%04u", HAL_GetTick(), TIM3->CNT, TIM4->CNT, dc_motor.pwm_value);
 8001f7c:	f000 ffe6 	bl	8002f4c <HAL_GetTick>
 8001f80:	4604      	mov	r4, r0
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <diagnosticsSrvFn+0x70>)
 8001f84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <diagnosticsSrvFn+0x74>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <diagnosticsSrvFn+0x78>)
 8001f8c:	8912      	ldrh	r2, [r2, #8]
 8001f8e:	f107 0010 	add.w	r0, r7, #16
 8001f92:	9201      	str	r2, [sp, #4]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	460b      	mov	r3, r1
 8001f98:	4622      	mov	r2, r4
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <diagnosticsSrvFn+0x7c>)
 8001f9c:	f007 fa04 	bl	80093a8 <siprintf>
			HAL_UART_Transmit(&huart5, (uint8_t *) buffer, sizeof(buffer), 100);
 8001fa0:	f107 0110 	add.w	r1, r7, #16
 8001fa4:	2364      	movs	r3, #100	; 0x64
 8001fa6:	2215      	movs	r2, #21
 8001fa8:	480a      	ldr	r0, [pc, #40]	; (8001fd4 <diagnosticsSrvFn+0x80>)
 8001faa:	f004 ffd8 	bl	8006f5e <HAL_UART_Transmit>
		}
		osDelayUntil(&PreviousWakeTime, 10);
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	210a      	movs	r1, #10
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 fd0d 	bl	80079d4 <osDelayUntil>
		if ((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE)
 8001fba:	e7d8      	b.n	8001f6e <diagnosticsSrvFn+0x1a>
 8001fbc:	20004048 	.word	0x20004048
 8001fc0:	20004288 	.word	0x20004288
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	200042b4 	.word	0x200042b4
 8001fd0:	08009db4 	.word	0x08009db4
 8001fd4:	20004200 	.word	0x20004200

08001fd8 <userInputFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_userInputFn */
void userInputFn(void const * argument)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN userInputFn */
  /* Infinite loop */
	for(;;)
	{
	  uint16_t adc_values[TOTAL_CONTROLS_COUNT] = {0,0,0,0};
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, TOTAL_CONTROLS_COUNT);
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4809      	ldr	r0, [pc, #36]	; (8002018 <userInputFn+0x40>)
 8001ff4:	f001 f95c 	bl	80032b0 <HAL_ADC_Start_DMA>
	  PotControlsValueUpdate(pot_controls_a, adc_values);
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4807      	ldr	r0, [pc, #28]	; (800201c <userInputFn+0x44>)
 8002000:	f000 f8b4 	bl	800216c <PotControlsValueUpdate>
	  UpdateVentilatorParams(&ventilator, pot_controls_a);
 8002004:	4905      	ldr	r1, [pc, #20]	; (800201c <userInputFn+0x44>)
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <userInputFn+0x48>)
 8002008:	f000 fd8e 	bl	8002b28 <UpdateVentilatorParams>
	  osThreadSuspend(userInputHandle);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <userInputFn+0x4c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f005 fcb0 	bl	8007976 <osThreadSuspend>
	{
 8002016:	e7e3      	b.n	8001fe0 <userInputFn+0x8>
 8002018:	20004240 	.word	0x20004240
 800201c:	2000438c 	.word	0x2000438c
 8002020:	20004288 	.word	0x20004288
 8002024:	20004044 	.word	0x20004044

08002028 <alarmMonitorFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alarmMonitorFn */
void alarmMonitorFn(void const * argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN alarmMonitorFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8002030:	f005 fc25 	bl	800787e <osKernelSysTick>
 8002034:	4603      	mov	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]
	//osDelayUntil(&PreviousWakeTime, 1000);

  /* Infinite loop */
	for(;;)
	{
		if (((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE) && !((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION))
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <alarmMonitorFn+0x8c>)
 800203a:	7c9b      	ldrb	r3, [r3, #18]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d12f      	bne.n	80020a6 <alarmMonitorFn+0x7e>
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <alarmMonitorFn+0x8c>)
 8002048:	7c9b      	ldrb	r3, [r3, #18]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d028      	beq.n	80020a6 <alarmMonitorFn+0x7e>
		{
			if (unwind_flag == 0)
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <alarmMonitorFn+0x90>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <alarmMonitorFn+0x4a>
			{
				dc_motor.pwm_value = 0;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <alarmMonitorFn+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	811a      	strh	r2, [r3, #8]
				dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <alarmMonitorFn+0x94>)
 8002066:	2202      	movs	r2, #2
 8002068:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 800206a:	4814      	ldr	r0, [pc, #80]	; (80020bc <alarmMonitorFn+0x94>)
 800206c:	f7fe fea0 	bl	8000db0 <DCMotorRPMSet>
 8002070:	e019      	b.n	80020a6 <alarmMonitorFn+0x7e>
			}
			else if (unwind_flag == 1)
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <alarmMonitorFn+0x90>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10a      	bne.n	8002092 <alarmMonitorFn+0x6a>
			{
				dc_motor.pwm_value = 750;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <alarmMonitorFn+0x94>)
 800207e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002082:	811a      	strh	r2, [r3, #8]
				dc_motor.direction_flag = MOTOR_SPIN_CW;
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <alarmMonitorFn+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <alarmMonitorFn+0x94>)
 800208c:	f7fe fe90 	bl	8000db0 <DCMotorRPMSet>
 8002090:	e009      	b.n	80020a6 <alarmMonitorFn+0x7e>
			}
			else
			{
				dc_motor.pwm_value = 750;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <alarmMonitorFn+0x94>)
 8002094:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002098:	811a      	strh	r2, [r3, #8]
				dc_motor.direction_flag = MOTOR_SPIN_CCW;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <alarmMonitorFn+0x94>)
 800209c:	2201      	movs	r2, #1
 800209e:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <alarmMonitorFn+0x94>)
 80020a2:	f7fe fe85 	bl	8000db0 <DCMotorRPMSet>
			}
		}
		osDelayUntil(&PreviousWakeTime, 10);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	210a      	movs	r1, #10
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fc91 	bl	80079d4 <osDelayUntil>
		if (((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE) && !((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION))
 80020b2:	e7c1      	b.n	8002038 <alarmMonitorFn+0x10>
 80020b4:	20004288 	.word	0x20004288
 80020b8:	200002e8 	.word	0x200002e8
 80020bc:	200042b4 	.word	0x200042b4

080020c0 <pressureSnsrFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pressureSnsrFn */
void pressureSnsrFn(void const * argument)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pressureSnsrFn */
	HAL_GPIO_WritePin(PSnsrCSADCOut_GPIO_Port, PSnsrCSADCOut_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <pressureSnsrFn+0x40>)
 80020ce:	f002 fabf 	bl	8004650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PSnsrCSEEOut_GPIO_Port, PSnsrCSEEOut_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	480a      	ldr	r0, [pc, #40]	; (8002100 <pressureSnsrFn+0x40>)
 80020d8:	f002 faba 	bl	8004650 <HAL_GPIO_WritePin>

	uint8_t buffer_tx[2];
	uint8_t buffer_rx[13];

	buffer_tx[0] = EAD_EEPROM_CMD;
 80020dc:	2303      	movs	r3, #3
 80020de:	773b      	strb	r3, [r7, #28]
	buffer_tx[1] = PRESSURE_RANGE_BYTE_2;
 80020e0:	231d      	movs	r3, #29
 80020e2:	777b      	strb	r3, [r7, #29]

	HAL_SPI_TransmitReceive_DMA(pressure_sensor.spi_handle, buffer_tx, buffer_rx, 2);
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <pressureSnsrFn+0x44>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	f107 020c 	add.w	r2, r7, #12
 80020ec:	f107 011c 	add.w	r1, r7, #28
 80020f0:	2302      	movs	r3, #2
 80020f2:	f003 fc17 	bl	8005924 <HAL_SPI_TransmitReceive_DMA>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80020f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020fa:	f005 fc28 	bl	800794e <osDelay>
 80020fe:	e7fa      	b.n	80020f6 <pressureSnsrFn+0x36>
 8002100:	40020c00 	.word	0x40020c00
 8002104:	2000412c 	.word	0x2000412c

08002108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800211a:	f000 ff03 	bl	8002f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PotControlsInit>:

#include "stm32f4xx_hal.h"
#include "potentiometer_api.h"

void PotControlsInit(volatile Potentiometer_S *pot_array_)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	pot_array_[TIDAL_VOLUME_CONTROL].rank 				= PIN_A0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
	pot_array_[I_E_RATIO_CONTROL].rank 					= PIN_A1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	2203      	movs	r2, #3
 800214e:	701a      	strb	r2, [r3, #0]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank 		= PIN_A2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3308      	adds	r3, #8
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
	pot_array_[PRESSURE_VALUE_CONTROL].rank 			= PIN_A3;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	330c      	adds	r3, #12
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <PotControlsValueUpdate>:

void PotControlsValueUpdate(volatile Potentiometer_S *pot_array_, uint16_t *adc_values_)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	pot_array_[TIDAL_VOLUME_CONTROL].value 				= adc_values_[pot_array_[TIDAL_VOLUME_CONTROL].rank];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	805a      	strh	r2, [r3, #2]
	pot_array_[I_E_RATIO_CONTROL].value 				= adc_values_[pot_array_[I_E_RATIO_CONTROL].rank];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	8812      	ldrh	r2, [r2, #0]
 800219c:	805a      	strh	r2, [r3, #2]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].value 	= adc_values_[pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank];
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3308      	adds	r3, #8
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	441a      	add	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3308      	adds	r3, #8
 80021b0:	8812      	ldrh	r2, [r2, #0]
 80021b2:	805a      	strh	r2, [r3, #2]
	pot_array_[PRESSURE_VALUE_CONTROL].value 			= adc_values_[pot_array_[PRESSURE_VALUE_CONTROL].rank];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	330c      	adds	r3, #12
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	330c      	adds	r3, #12
 80021c6:	8812      	ldrh	r2, [r2, #0]
 80021c8:	805a      	strh	r2, [r3, #2]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SPIPrsrSnsrInit>:
#define PSnsrCSADCOut_GPIO_Port GPIOD
#define PSnsrCSEEOut_Pin GPIO_PIN_7
#define PSnsrCSEEOut_GPIO_Port GPIOD

void SPIPrsrSnsrInit(SPIPressureSensor_S *sensor_, SPI_HandleTypeDef *spi_)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	sensor_->spi_handle = spi_;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PSnsrCSADCOut_GPIO_Port, PSnsrCSADCOut_Pin, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <SPIPrsrSnsrInit+0x2c>)
 80021ee:	f002 fa2f 	bl	8004650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PSnsrCSEEOut_GPIO_Port, PSnsrCSEEOut_Pin, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	4803      	ldr	r0, [pc, #12]	; (8002204 <SPIPrsrSnsrInit+0x2c>)
 80021f8:	f002 fa2a 	bl	8004650 <HAL_GPIO_WritePin>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40020c00 	.word	0x40020c00

08002208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_MspInit+0x54>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_MspInit+0x54>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_MspInit+0x54>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_MspInit+0x54>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_MspInit+0x54>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_MspInit+0x54>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	210f      	movs	r1, #15
 800224a:	f06f 0001 	mvn.w	r0, #1
 800224e:	f001 fcab 	bl	8003ba8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a40      	ldr	r2, [pc, #256]	; (8002380 <HAL_ADC_MspInit+0x120>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d179      	bne.n	8002376 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_ADC_MspInit+0x124>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a3e      	ldr	r2, [pc, #248]	; (8002384 <HAL_ADC_MspInit+0x124>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <HAL_ADC_MspInit+0x124>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_ADC_MspInit+0x124>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a37      	ldr	r2, [pc, #220]	; (8002384 <HAL_ADC_MspInit+0x124>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_ADC_MspInit+0x124>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_ADC_MspInit+0x124>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_ADC_MspInit+0x124>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_ADC_MspInit+0x124>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VolumePotIn_Pin|IERatioPotIn_Pin;
 80022d6:	23c0      	movs	r3, #192	; 0xc0
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <HAL_ADC_MspInit+0x128>)
 80022ea:	f002 f817 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FrequencyPotIn_Pin|PressureLvlPotIn_Pin;
 80022ee:	2303      	movs	r3, #3
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	2303      	movs	r3, #3
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4822      	ldr	r0, [pc, #136]	; (800238c <HAL_ADC_MspInit+0x12c>)
 8002302:	f002 f80b 	bl	800431c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002308:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_ADC_MspInit+0x134>)
 800230a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_ADC_MspInit+0x130>)
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_ADC_MspInit+0x130>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002324:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800232c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002334:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800233c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800234a:	4811      	ldr	r0, [pc, #68]	; (8002390 <HAL_ADC_MspInit+0x130>)
 800234c:	f001 fc56 	bl	8003bfc <HAL_DMA_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002356:	f7ff fee9 	bl	800212c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_ADC_MspInit+0x130>)
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_ADC_MspInit+0x130>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2105      	movs	r1, #5
 800236a:	2012      	movs	r0, #18
 800236c:	f001 fc1c 	bl	8003ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002370:	2012      	movs	r0, #18
 8002372:	f001 fc35 	bl	8003be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40012000 	.word	0x40012000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	200042c8 	.word	0x200042c8
 8002394:	40026410 	.word	0x40026410

08002398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_I2C_MspInit+0x84>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023da:	2312      	movs	r3, #18
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e6:	2304      	movs	r3, #4
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <HAL_I2C_MspInit+0x8c>)
 80023f2:	f001 ff93 	bl	800431c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_I2C_MspInit+0x88>)
 8002400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_I2C_MspInit+0x88>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40005400 	.word	0x40005400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020400 	.word	0x40020400

08002428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_SPI_MspInit+0x188>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f040 80ae 	bne.w	80025a8 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 8002456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4a49      	ldr	r2, [pc, #292]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	6313      	str	r3, [r2, #48]	; 0x30
 8002494:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_SPI_MspInit+0x18c>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024a0:	2320      	movs	r3, #32
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024b0:	2305      	movs	r3, #5
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	483f      	ldr	r0, [pc, #252]	; (80025b8 <HAL_SPI_MspInit+0x190>)
 80024bc:	f001 ff2e 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024c0:	2330      	movs	r3, #48	; 0x30
 80024c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d0:	2305      	movs	r3, #5
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4838      	ldr	r0, [pc, #224]	; (80025bc <HAL_SPI_MspInit+0x194>)
 80024dc:	f001 ff1e 	bl	800431c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 80024e2:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <HAL_SPI_MspInit+0x19c>)
 80024e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 80024e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80024ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024fa:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 80024fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002500:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002520:	4827      	ldr	r0, [pc, #156]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 8002522:	f001 fb6b 	bl	8003bfc <HAL_DMA_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 800252c:	f7ff fdfe 	bl	800212c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 8002534:	64da      	str	r2, [r3, #76]	; 0x4c
 8002536:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_SPI_MspInit+0x198>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 800253e:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_SPI_MspInit+0x1a4>)
 8002540:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002544:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002548:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002572:	2200      	movs	r2, #0
 8002574:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002578:	2200      	movs	r2, #0
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 800257e:	f001 fb3d 	bl	8003bfc <HAL_DMA_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8002588:	f7ff fdd0 	bl	800212c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002590:	649a      	str	r2, [r3, #72]	; 0x48
 8002592:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_SPI_MspInit+0x1a0>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2105      	movs	r1, #5
 800259c:	2023      	movs	r0, #35	; 0x23
 800259e:	f001 fb03 	bl	8003ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025a2:	2023      	movs	r0, #35	; 0x23
 80025a4:	f001 fb1c 	bl	8003be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013000 	.word	0x40013000
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	2000439c 	.word	0x2000439c
 80025c4:	40026440 	.word	0x40026440
 80025c8:	20004400 	.word	0x20004400
 80025cc:	40026458 	.word	0x40026458

080025d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a32      	ldr	r2, [pc, #200]	; (80026b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12c      	bne.n	800264c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a30      	ldr	r2, [pc, #192]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 800262a:	23c0      	movs	r3, #192	; 0xc0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800263a:	2302      	movs	r3, #2
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	481e      	ldr	r0, [pc, #120]	; (80026c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002646:	f001 fe69 	bl	800431c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800264a:	e031      	b.n	80026b0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d12c      	bne.n	80026b0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ArmEncoderA_Pin|ArmEncoderB_Pin;
 800268e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026a0:	2302      	movs	r3, #2
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80026ac:	f001 fe36 	bl	800431c <HAL_GPIO_Init>
}
 80026b0:	bf00      	nop
 80026b2:	3730      	adds	r7, #48	; 0x30
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40000800 	.word	0x40000800
 80026c8:	40020c00 	.word	0x40020c00

080026cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_TIM_PWM_MspInit+0x3c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10d      	bne.n	80026fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_PWM_MspInit+0x40>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_TIM_PWM_MspInit+0x40>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_TIM_PWM_MspInit+0x40>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40000c00 	.word	0x40000c00
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_TIM_Base_MspInit+0x48>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d115      	bne.n	800274e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_Base_MspInit+0x4c>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <HAL_TIM_Base_MspInit+0x4c>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_TIM_Base_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2019      	movs	r0, #25
 8002744:	f001 fa30 	bl	8003ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002748:	2019      	movs	r0, #25
 800274a:	f001 fa49 	bl	8003be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40014400 	.word	0x40014400
 800275c:	40023800 	.word	0x40023800

08002760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a24      	ldr	r2, [pc, #144]	; (8002810 <HAL_TIM_MspPostInit+0xb0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d11e      	bne.n	80027c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a22      	ldr	r2, [pc, #136]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 800279e:	2302      	movs	r3, #2
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027ae:	2302      	movs	r3, #2
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4817      	ldr	r0, [pc, #92]	; (8002818 <HAL_TIM_MspPostInit+0xb8>)
 80027ba:	f001 fdaf 	bl	800431c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80027be:	e023      	b.n	8002808 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_TIM_MspPostInit+0xbc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d11e      	bne.n	8002808 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BuzzerPWMOut_Pin;
 80027e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80027f8:	2303      	movs	r3, #3
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BuzzerPWMOut_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <HAL_TIM_MspPostInit+0xc0>)
 8002804:	f001 fd8a 	bl	800431c <HAL_GPIO_Init>
}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40000c00 	.word	0x40000c00
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000
 800281c:	40014400 	.word	0x40014400
 8002820:	40020400 	.word	0x40020400

08002824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <HAL_UART_MspInit+0xc0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d14a      	bne.n	80028dc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_UART_MspInit+0xc4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800289a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028ac:	2308      	movs	r3, #8
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <HAL_UART_MspInit+0xc8>)
 80028b8:	f001 fd30 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028bc:	2304      	movs	r3, #4
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028cc:	2308      	movs	r3, #8
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	4806      	ldr	r0, [pc, #24]	; (80028f0 <HAL_UART_MspInit+0xcc>)
 80028d8:	f001 fd20 	bl	800431c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80028dc:	bf00      	nop
 80028de:	3728      	adds	r7, #40	; 0x28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40005000 	.word	0x40005000
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00

080028f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	2019      	movs	r0, #25
 800290a:	f001 f94d 	bl	8003ba8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800290e:	2019      	movs	r0, #25
 8002910:	f001 f966 	bl	8003be0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_InitTick+0xa4>)
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_InitTick+0xa4>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6453      	str	r3, [r2, #68]	; 0x44
 8002924:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_InitTick+0xa4>)
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002930:	f107 0210 	add.w	r2, r7, #16
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f002 ff5c 	bl	80057f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002940:	f002 ff46 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8002944:	4603      	mov	r3, r0
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <HAL_InitTick+0xa8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3b01      	subs	r3, #1
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_InitTick+0xac>)
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_InitTick+0xb0>)
 800295c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_InitTick+0xac>)
 8002960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002964:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_InitTick+0xac>)
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_InitTick+0xac>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_InitTick+0xac>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <HAL_InitTick+0xac>)
 800297a:	f003 fc05 	bl	8006188 <HAL_TIM_Base_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <HAL_InitTick+0xac>)
 8002986:	f003 fc2a 	bl	80061de <HAL_TIM_Base_Start_IT>
 800298a:	4603      	mov	r3, r0
 800298c:	e000      	b.n	8002990 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3730      	adds	r7, #48	; 0x30
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	20004460 	.word	0x20004460
 80029a4:	40010000 	.word	0x40010000

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ba:	e7fe      	b.n	80029ba <HardFault_Handler+0x4>

080029bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <MemManage_Handler+0x4>

080029c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <UsageFault_Handler+0x4>

080029ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <ADC_IRQHandler+0x10>)
 80029e2:	f000 fb24 	bl	800302e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20004240 	.word	0x20004240

080029f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80029f6:	f003 fd69 	bl	80064cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80029fa:	4803      	ldr	r0, [pc, #12]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80029fc:	f003 fd66 	bl	80064cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20004460 	.word	0x20004460
 8002a08:	200040e0 	.word	0x200040e0

08002a0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <SPI1_IRQHandler+0x10>)
 8002a12:	f003 f889 	bl	8005b28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20004334 	.word	0x20004334

08002a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002a24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a28:	f001 fe2c 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a30:	f001 fe28 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002a34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a38:	f001 fe24 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002a3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a40:	f001 fe20 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <DMA2_Stream0_IRQHandler+0x10>)
 8002a4e:	f001 f9fd 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200042c8 	.word	0x200042c8

08002a5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <DMA2_Stream2_IRQHandler+0x10>)
 8002a62:	f001 f9f3 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000439c 	.word	0x2000439c

08002a70 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <DMA2_Stream3_IRQHandler+0x10>)
 8002a76:	f001 f9e9 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20004400 	.word	0x20004400

08002a84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <_sbrk+0x50>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <_sbrk+0x16>
		heap_end = &end;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <_sbrk+0x50>)
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <_sbrk+0x54>)
 8002a98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <_sbrk+0x50>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <_sbrk+0x50>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	466a      	mov	r2, sp
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d907      	bls.n	8002abe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002aae:	f006 fc3d 	bl	800932c <__errno>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8002abc:	e006      	b.n	8002acc <_sbrk+0x48>
	}

	heap_end += incr;
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <_sbrk+0x50>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <_sbrk+0x50>)
 8002ac8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200002ec 	.word	0x200002ec
 8002ad8:	200044a8 	.word	0x200044a8

08002adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <SystemInit+0x28>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <SystemInit+0x28>)
 8002ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SystemInit+0x28>)
 8002af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002af6:	609a      	str	r2, [r3, #8]
#endif
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <VentilatorInit>:

#include "stm32f4xx_hal.h"
#include "ventilator_api.h"

void VentilatorInit(Ventilator_S *ventilator_)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	ventilator_->status_flags = DISABLE_ALL;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	749a      	strb	r2, [r3, #18]
	ventilator_->alarm_flags = DISABLE_ALL;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	74da      	strb	r2, [r3, #19]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <UpdateVentilatorParams>:

void UpdateVentilatorParams(Ventilator_S *ventilator_, Potentiometer_S *potentiometer_)
{
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
	if (potentiometer_[I_E_RATIO_CONTROL].value < 1024)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3304      	adds	r3, #4
 8002b36:	885b      	ldrh	r3, [r3, #2]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d203      	bcs.n	8002b48 <UpdateVentilatorParams+0x20>
	{
		ventilator_->i_e_ratio = 1;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e018      	b.n	8002b7a <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < 2048)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	885b      	ldrh	r3, [r3, #2]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b54:	d203      	bcs.n	8002b5e <UpdateVentilatorParams+0x36>
	{
		ventilator_->i_e_ratio = 2;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e00d      	b.n	8002b7a <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < 3072)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3304      	adds	r3, #4
 8002b62:	885b      	ldrh	r3, [r3, #2]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b6a:	d203      	bcs.n	8002b74 <UpdateVentilatorParams+0x4c>
	{
		ventilator_->i_e_ratio = 3;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e002      	b.n	8002b7a <UpdateVentilatorParams+0x52>
	}
	else
	{
		ventilator_->i_e_ratio = 4;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2204      	movs	r2, #4
 8002b78:	701a      	strb	r2, [r3, #0]
	}

	ventilator_->tidal_volume 				= (int) (((TIDAL_VOLUME_MAX_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[TIDAL_VOLUME_CONTROL].value));
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	885b      	ldrh	r3, [r3, #2]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b88:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002db0 <UpdateVentilatorParams+0x288>
 8002b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b94:	ee17 3a90 	vmov	r3, s15
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	809a      	strh	r2, [r3, #4]
	ventilator_->respiration_frequency 		= (int) (((RESPIRATION_FREQ_MAX_VAL - RESPIRATION_FREQ_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[RESPIRATORY_FREQUENCY_CONTROL].value) + RESPIRATION_FREQ_MIN_VAL);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	885b      	ldrh	r3, [r3, #2]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bae:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002db4 <UpdateVentilatorParams+0x28c>
 8002bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bc6:	793a      	ldrb	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	705a      	strb	r2, [r3, #1]
	ventilator_->pressure_level_alarm_value = (int) (((PRESSURE_LEVEL_ALARM_MAX_VAL - PRESSURE_LEVEL_ALARM_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[PRESSURE_VALUE_CONTROL].value) + PRESSURE_LEVEL_ALARM_MIN_VAL);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	885b      	ldrh	r3, [r3, #2]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bdc:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002db8 <UpdateVentilatorParams+0x290>
 8002be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002dbc <UpdateVentilatorParams+0x294>
 8002be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bf4:	793a      	ldrb	r2, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	709a      	strb	r2, [r3, #2]

	ventilator_->respiration_period_ms		= (int) ((60000.0f / (float) ventilator_->respiration_frequency));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c06:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002dc0 <UpdateVentilatorParams+0x298>
 8002c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c12:	ee17 3a90 	vmov	r3, s15
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	80da      	strh	r2, [r3, #6]
	ventilator_->inspiration_period_ms		= (int) ((1.0 / ((float) ventilator_->i_e_ratio + 1.0)) * ventilator_->respiration_period_ms);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c28:	ee17 0a90 	vmov	r0, s15
 8002c2c:	f7fd fc84 	bl	8000538 <__aeabi_f2d>
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <UpdateVentilatorParams+0x29c>)
 8002c36:	f7fd fb21 	bl	800027c <__adddf3>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4623      	mov	r3, r4
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	495f      	ldr	r1, [pc, #380]	; (8002dc4 <UpdateVentilatorParams+0x29c>)
 8002c48:	f7fd fdf8 	bl	800083c <__aeabi_ddiv>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	4625      	mov	r5, r4
 8002c52:	461c      	mov	r4, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88db      	ldrh	r3, [r3, #6]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc5b 	bl	8000514 <__aeabi_i2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4620      	mov	r0, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	f7fd fcbf 	bl	80005e8 <__aeabi_dmul>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	4621      	mov	r1, r4
 8002c72:	f7fd fecb 	bl	8000a0c <__aeabi_d2iz>
 8002c76:	4603      	mov	r3, r0
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	811a      	strh	r2, [r3, #8]
	ventilator_->exhalation_period_ms		= (int) ((float) ventilator_->i_e_ratio * ventilator_->inspiration_period_ms);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	891b      	ldrh	r3, [r3, #8]
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9e:	ee17 3a90 	vmov	r3, s15
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	815a      	strh	r2, [r3, #10]
	ventilator_->end_angle_pulse 			= (int) (((float) ventilator_->tidal_volume) / 800.0f * 144.0f);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	889b      	ldrh	r3, [r3, #4]
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cb4:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002dc8 <UpdateVentilatorParams+0x2a0>
 8002cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cbc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002dcc <UpdateVentilatorParams+0x2a4>
 8002cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc8:	ee17 3a90 	vmov	r3, s15
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	819a      	strh	r2, [r3, #12]

	float end_angle			= (((float) ventilator_->tidal_volume) / 800.0f * 21.6f);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	889b      	ldrh	r3, [r3, #4]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cde:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002dc8 <UpdateVentilatorParams+0x2a0>
 8002ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002dd0 <UpdateVentilatorParams+0x2a8>
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	edc7 7a07 	vstr	s15, [r7, #28]
	float rpm_arm_in 		= ((float) end_angle) / ( ((float) ventilator_->inspiration_period_ms) / 1000.0f) * (30.0f / 3.14159f);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	891b      	ldrh	r3, [r3, #8]
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfe:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002dd4 <UpdateVentilatorParams+0x2ac>
 8002d02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002dd8 <UpdateVentilatorParams+0x2b0>
 8002d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d16:	edc7 7a06 	vstr	s15, [r7, #24]
	float rpm_arm_out 		= ((float) end_angle) / ( ((float) ventilator_->exhalation_period_ms) / 1000.0f) * (30.0f / 3.14159f);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	895b      	ldrh	r3, [r3, #10]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002dd4 <UpdateVentilatorParams+0x2ac>
 8002d2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002dd8 <UpdateVentilatorParams+0x2b0>
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	edc7 7a05 	vstr	s15, [r7, #20]

	ventilator_->motor_pwm_value_in			=  (int) ((25.0f * rpm_arm_in / 113.0f * 4200) + 600);
 8002d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d46:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d4e:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002ddc <UpdateVentilatorParams+0x2b4>
 8002d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d56:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002de0 <UpdateVentilatorParams+0x2b8>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002de4 <UpdateVentilatorParams+0x2bc>
 8002d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6a:	ee17 3a90 	vmov	r3, s15
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	81da      	strh	r2, [r3, #14]
	ventilator_->motor_pwm_value_out		=  (int) ((25.0f * rpm_arm_out / 113.0f * 4200) + 600);
 8002d74:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002d7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d80:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002ddc <UpdateVentilatorParams+0x2b4>
 8002d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d88:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002de0 <UpdateVentilatorParams+0x2b8>
 8002d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d90:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002de4 <UpdateVentilatorParams+0x2bc>
 8002d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d9c:	ee17 3a90 	vmov	r3, s15
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	821a      	strh	r2, [r3, #16]
}
 8002da6:	bf00      	nop
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	3e480c81 	.word	0x3e480c81
 8002db4:	3c000801 	.word	0x3c000801
 8002db8:	3ca00a01 	.word	0x3ca00a01
 8002dbc:	00000000 	.word	0x00000000
 8002dc0:	476a6000 	.word	0x476a6000
 8002dc4:	3ff00000 	.word	0x3ff00000
 8002dc8:	44480000 	.word	0x44480000
 8002dcc:	43100000 	.word	0x43100000
 8002dd0:	41accccd 	.word	0x41accccd
 8002dd4:	447a0000 	.word	0x447a0000
 8002dd8:	4118c9f3 	.word	0x4118c9f3
 8002ddc:	42e20000 	.word	0x42e20000
 8002de0:	45834000 	.word	0x45834000
 8002de4:	44160000 	.word	0x44160000

08002de8 <ToggleRoutineEnaParam>:

void ToggleRoutineEnaParam(Ventilator_S *ventilator_)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	if ((ventilator_->status_flags & ENABLE_ROUTINE) == 0)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7c9b      	ldrb	r3, [r3, #18]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <ToggleRoutineEnaParam+0x28>
	{
		ventilator_->status_flags = ventilator_->status_flags | ENABLE_ROUTINE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7c9b      	ldrb	r3, [r3, #18]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	749a      	strb	r2, [r3, #18]
	}
	else
	{
		ventilator_->status_flags = ventilator_->status_flags & DISABLE_ROUTINE;
	}
}
 8002e0e:	e007      	b.n	8002e20 <ToggleRoutineEnaParam+0x38>
		ventilator_->status_flags = ventilator_->status_flags & DISABLE_ROUTINE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7c9b      	ldrb	r3, [r3, #18]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	749a      	strb	r2, [r3, #18]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <ToggleCalibrationParam>:
		ventilator_->status_flags = ventilator_->status_flags & ENABLE_ALARMS;
	}
}

void ToggleCalibrationParam(Ventilator_S *ventilator_)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	uint8_t state_ = ventilator_->status_flags & (0x0C);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7c9b      	ldrb	r3, [r3, #18]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	73fb      	strb	r3, [r7, #15]

	if (state_ == 0x00)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <ToggleCalibrationParam+0x2c>
	{
		ventilator_->status_flags |= START_CALIBRATION;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7c9b      	ldrb	r3, [r3, #18]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	749a      	strb	r2, [r3, #18]
	}
	else
	{
		ventilator_->status_flags &= STOP_CALIBRATION;
	}
}
 8002e56:	e013      	b.n	8002e80 <ToggleCalibrationParam+0x54>
	else if (state_ == 0x04)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d108      	bne.n	8002e70 <ToggleCalibrationParam+0x44>
		ventilator_->status_flags |= PLACE_AMBU_CALIBRATION;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7c9b      	ldrb	r3, [r3, #18]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	749a      	strb	r2, [r3, #18]
}
 8002e6e:	e007      	b.n	8002e80 <ToggleCalibrationParam+0x54>
		ventilator_->status_flags &= STOP_CALIBRATION;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7c9b      	ldrb	r3, [r3, #18]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f023 030c 	bic.w	r3, r3, #12
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	749a      	strb	r2, [r3, #18]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e92:	e003      	b.n	8002e9c <LoopCopyDataInit>

08002e94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e9a:	3104      	adds	r1, #4

08002e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e9c:	480b      	ldr	r0, [pc, #44]	; (8002ecc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ea4:	d3f6      	bcc.n	8002e94 <CopyDataInit>
  ldr  r2, =_sbss
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ea8:	e002      	b.n	8002eb0 <LoopFillZerobss>

08002eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eac:	f842 3b04 	str.w	r3, [r2], #4

08002eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002eb4:	d3f9      	bcc.n	8002eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eb6:	f7ff fe11 	bl	8002adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eba:	f006 fa3d 	bl	8009338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ebe:	f7fe f98b 	bl	80011d8 <main>
  bx  lr    
 8002ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ec4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ec8:	08009e38 	.word	0x08009e38
  ldr  r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ed0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002ed4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002ed8:	200044a8 	.word	0x200044a8

08002edc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <CAN1_RX0_IRQHandler>
	...

08002ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_Init+0x40>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_Init+0x40>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_Init+0x40>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f000 fe42 	bl	8003b92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7ff fcf0 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f14:	f7ff f978 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000008 	.word	0x20000008
 8002f48:	200044a0 	.word	0x200044a0

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	200044a0 	.word	0x200044a0

08002f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff ffee 	bl	8002f4c <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d005      	beq.n	8002f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_Delay+0x40>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f8a:	bf00      	nop
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d8f7      	bhi.n	8002f8c <HAL_Delay+0x28>
  {
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e033      	b.n	8003026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff f94a 	bl	8002260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fee:	f023 0302 	bic.w	r3, r3, #2
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fb94 	bl	8003728 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
 8003016:	e001      	b.n	800301c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b20      	cmp	r3, #32
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d049      	beq.n	8003104 <HAL_ADC_IRQHandler+0xd6>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d046      	beq.n	8003104 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d12b      	bne.n	80030f4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d127      	bne.n	80030f4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d119      	bne.n	80030f4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0220 	bic.w	r2, r2, #32
 80030ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f9cd 	bl	8003494 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0212 	mvn.w	r2, #18
 8003102:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d057      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x1b8>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d054      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d139      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800317a:	2b00      	cmp	r3, #0
 800317c:	d12b      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d124      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11d      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d119      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fc24 	bl	8003a24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 020c 	mvn.w	r2, #12
 80031e4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <HAL_ADC_IRQHandler+0x21a>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d014      	beq.n	8003248 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10d      	bne.n	8003248 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f93f 	bl	80034bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0201 	mvn.w	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b20      	cmp	r3, #32
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x27a>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f06f 0220 	mvn.w	r2, #32
 8003296:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f919 	bl	80034d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 0220 	mvn.w	r2, #32
 80032a6:	601a      	str	r2, [r3, #0]
  }
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Start_DMA+0x1e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0cc      	b.n	8003468 <HAL_ADC_Start_DMA+0x1b8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d018      	beq.n	8003316 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032f4:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_ADC_Start_DMA+0x1c0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5e      	ldr	r2, [pc, #376]	; (8003474 <HAL_ADC_Start_DMA+0x1c4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	0c9a      	lsrs	r2, r3, #18
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003308:	e002      	b.n	8003310 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3b01      	subs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f9      	bne.n	800330a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 80a0 	bne.w	8003466 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003350:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d106      	bne.n	8003374 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f023 0206 	bic.w	r2, r3, #6
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
 8003372:	e002      	b.n	800337a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003382:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_ADC_Start_DMA+0x1c8>)
 8003384:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	4a3c      	ldr	r2, [pc, #240]	; (800347c <HAL_ADC_Start_DMA+0x1cc>)
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <HAL_ADC_Start_DMA+0x1d0>)
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <HAL_ADC_Start_DMA+0x1d4>)
 800339c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	334c      	adds	r3, #76	; 0x4c
 80033d2:	4619      	mov	r1, r3
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f000 fcbe 	bl	8003d58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d12a      	bne.n	800343e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <HAL_ADC_Start_DMA+0x1d8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d015      	beq.n	800341e <HAL_ADC_Start_DMA+0x16e>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a25      	ldr	r2, [pc, #148]	; (800348c <HAL_ADC_Start_DMA+0x1dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d105      	bne.n	8003408 <HAL_ADC_Start_DMA+0x158>
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_ADC_Start_DMA+0x1c8>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a20      	ldr	r2, [pc, #128]	; (8003490 <HAL_ADC_Start_DMA+0x1e0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d129      	bne.n	8003466 <HAL_ADC_Start_DMA+0x1b6>
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_ADC_Start_DMA+0x1c8>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d823      	bhi.n	8003466 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11c      	bne.n	8003466 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	e013      	b.n	8003466 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_ADC_Start_DMA+0x1d8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d10e      	bne.n	8003466 <HAL_ADC_Start_DMA+0x1b6>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003464:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000000 	.word	0x20000000
 8003474:	431bde83 	.word	0x431bde83
 8003478:	40012300 	.word	0x40012300
 800347c:	08003921 	.word	0x08003921
 8003480:	080039db 	.word	0x080039db
 8003484:	080039f7 	.word	0x080039f7
 8003488:	40012000 	.word	0x40012000
 800348c:	40012100 	.word	0x40012100
 8003490:	40012200 	.word	0x40012200

08003494 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x1c>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e105      	b.n	800370c <HAL_ADC_ConfigChannel+0x228>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b09      	cmp	r3, #9
 800350e:	d925      	bls.n	800355c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68d9      	ldr	r1, [r3, #12]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	3b1e      	subs	r3, #30
 8003526:	2207      	movs	r2, #7
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43da      	mvns	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	400a      	ands	r2, r1
 8003534:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68d9      	ldr	r1, [r3, #12]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	4618      	mov	r0, r3
 8003548:	4603      	mov	r3, r0
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4403      	add	r3, r0
 800354e:	3b1e      	subs	r3, #30
 8003550:	409a      	lsls	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	e022      	b.n	80035a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6919      	ldr	r1, [r3, #16]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	2207      	movs	r2, #7
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	400a      	ands	r2, r1
 800357e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6919      	ldr	r1, [r3, #16]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	4603      	mov	r3, r0
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4403      	add	r3, r0
 8003598:	409a      	lsls	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d824      	bhi.n	80035f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	3b05      	subs	r3, #5
 80035bc:	221f      	movs	r2, #31
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	400a      	ands	r2, r1
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4618      	mov	r0, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	3b05      	subs	r3, #5
 80035e6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	635a      	str	r2, [r3, #52]	; 0x34
 80035f2:	e04c      	b.n	800368e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d824      	bhi.n	8003646 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3b23      	subs	r3, #35	; 0x23
 800360e:	221f      	movs	r2, #31
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43da      	mvns	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	400a      	ands	r2, r1
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	3b23      	subs	r3, #35	; 0x23
 8003638:	fa00 f203 	lsl.w	r2, r0, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
 8003644:	e023      	b.n	800368e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	3b41      	subs	r3, #65	; 0x41
 8003658:	221f      	movs	r2, #31
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	400a      	ands	r2, r1
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	3b41      	subs	r3, #65	; 0x41
 8003682:	fa00 f203 	lsl.w	r2, r0, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_ADC_ConfigChannel+0x234>)
 8003690:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a21      	ldr	r2, [pc, #132]	; (800371c <HAL_ADC_ConfigChannel+0x238>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d109      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1cc>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b12      	cmp	r3, #18
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_ADC_ConfigChannel+0x238>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d123      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x21e>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d003      	beq.n	80036ca <HAL_ADC_ConfigChannel+0x1e6>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d11b      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d111      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_ADC_ConfigChannel+0x23c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <HAL_ADC_ConfigChannel+0x240>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9a      	lsrs	r2, r3, #18
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f9      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40012300 	.word	0x40012300
 800371c:	40012000 	.word	0x40012000
 8003720:	20000000 	.word	0x20000000
 8003724:	431bde83 	.word	0x431bde83

08003728 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003730:	4b79      	ldr	r3, [pc, #484]	; (8003918 <ADC_Init+0x1f0>)
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800375c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <ADC_Init+0x1f4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d022      	beq.n	8003806 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	e00f      	b.n	8003826 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003824:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0202 	bic.w	r2, r2, #2
 8003834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7e1b      	ldrb	r3, [r3, #24]
 8003840:	005a      	lsls	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003862:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003872:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	3b01      	subs	r3, #1
 8003880:	035a      	lsls	r2, r3, #13
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	e007      	b.n	800389c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	051a      	lsls	r2, r3, #20
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038de:	025a      	lsls	r2, r3, #9
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6899      	ldr	r1, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	029a      	lsls	r2, r3, #10
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40012300 	.word	0x40012300
 800391c:	0f000001 	.word	0x0f000001

08003920 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13c      	bne.n	80039b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d12b      	bne.n	80039ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003958:	2b00      	cmp	r3, #0
 800395a:	d127      	bne.n	80039ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003974:	2b00      	cmp	r3, #0
 8003976:	d119      	bne.n	80039ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0220 	bic.w	r2, r2, #32
 8003986:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fd71 	bl	8003494 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039b2:	e00e      	b.n	80039d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fd85 	bl	80034d0 <HAL_ADC_ErrorCallback>
}
 80039c6:	e004      	b.n	80039d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f7ff fd5d 	bl	80034a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fd5a 	bl	80034d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	60d3      	str	r3, [r2, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__NVIC_GetPriorityGrouping+0x18>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0307 	and.w	r3, r3, #7
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db0b      	blt.n	8003ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <__NVIC_EnableIRQ+0x38>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000e100 	.word	0xe000e100

08003ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	db0a      	blt.n	8003b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	490c      	ldr	r1, [pc, #48]	; (8003b24 <__NVIC_SetPriority+0x4c>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	0112      	lsls	r2, r2, #4
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	440b      	add	r3, r1
 8003afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b00:	e00a      	b.n	8003b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4908      	ldr	r1, [pc, #32]	; (8003b28 <__NVIC_SetPriority+0x50>)
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3b04      	subs	r3, #4
 8003b10:	0112      	lsls	r2, r2, #4
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	440b      	add	r3, r1
 8003b16:	761a      	strb	r2, [r3, #24]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000e100 	.word	0xe000e100
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f1c3 0307 	rsb	r3, r3, #7
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	bf28      	it	cs
 8003b4a:	2304      	movcs	r3, #4
 8003b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d902      	bls.n	8003b5c <NVIC_EncodePriority+0x30>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3b03      	subs	r3, #3
 8003b5a:	e000      	b.n	8003b5e <NVIC_EncodePriority+0x32>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	401a      	ands	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	43d9      	mvns	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	4313      	orrs	r3, r2
         );
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff4c 	bl	8003a38 <__NVIC_SetPriorityGrouping>
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bba:	f7ff ff61 	bl	8003a80 <__NVIC_GetPriorityGrouping>
 8003bbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	6978      	ldr	r0, [r7, #20]
 8003bc6:	f7ff ffb1 	bl	8003b2c <NVIC_EncodePriority>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff80 	bl	8003ad8 <__NVIC_SetPriority>
}
 8003bd8:	bf00      	nop
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff54 	bl	8003a9c <__NVIC_EnableIRQ>
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff f9a0 	bl	8002f4c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e099      	b.n	8003d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c38:	e00f      	b.n	8003c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c3a:	f7ff f987 	bl	8002f4c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d908      	bls.n	8003c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e078      	b.n	8003d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e8      	bne.n	8003c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_DMA_Init+0x158>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d107      	bne.n	8003cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d117      	bne.n	8003d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fa91 	bl	8004228 <DMA_CheckFifoParam>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e016      	b.n	8003d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa48 	bl	80041bc <DMA_CalcBaseAndBitshift>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	223f      	movs	r2, #63	; 0x3f
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	f010803f 	.word	0xf010803f

08003d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA_Start_IT+0x26>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e040      	b.n	8003e00 <HAL_DMA_Start_IT+0xa8>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d12f      	bne.n	8003df2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f9da 	bl	8004160 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	223f      	movs	r2, #63	; 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0216 	orr.w	r2, r2, #22
 8003dc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e005      	b.n	8003dfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00c      	b.n	8003e40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2205      	movs	r2, #5
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e58:	4b92      	ldr	r3, [pc, #584]	; (80040a4 <HAL_DMA_IRQHandler+0x258>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a92      	ldr	r2, [pc, #584]	; (80040a8 <HAL_DMA_IRQHandler+0x25c>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	2208      	movs	r2, #8
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01a      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d012      	beq.n	8003eee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	2201      	movs	r2, #1
 8003edc:	409a      	lsls	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d012      	beq.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	2204      	movs	r2, #4
 8003f12:	409a      	lsls	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	2210      	movs	r2, #16
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d043      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d03c      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	2210      	movs	r2, #16
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d024      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	e01f      	b.n	8003fbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
 8003f8c:	e016      	b.n	8003fbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0208 	bic.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 808e 	beq.w	80040ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8086 	beq.w	80040ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d136      	bne.n	8004064 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0216 	bic.w	r2, r2, #22
 8004004:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004014:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_DMA_IRQHandler+0x1da>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0208 	bic.w	r2, r2, #8
 8004034:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	223f      	movs	r2, #63	; 0x3f
 800403c:	409a      	lsls	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d07d      	beq.n	8004156 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
        }
        return;
 8004062:	e078      	b.n	8004156 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01c      	beq.n	80040ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d108      	bne.n	8004092 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	2b00      	cmp	r3, #0
 8004086:	d030      	beq.n	80040ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
 8004090:	e02b      	b.n	80040ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d027      	beq.n	80040ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
 80040a2:	e022      	b.n	80040ea <HAL_DMA_IRQHandler+0x29e>
 80040a4:	20000000 	.word	0x20000000
 80040a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0210 	bic.w	r2, r2, #16
 80040c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d032      	beq.n	8004158 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d022      	beq.n	8004144 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2205      	movs	r2, #5
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	3301      	adds	r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	429a      	cmp	r2, r3
 8004120:	d307      	bcc.n	8004132 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f2      	bne.n	8004116 <HAL_DMA_IRQHandler+0x2ca>
 8004130:	e000      	b.n	8004134 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004132:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
 8004154:	e000      	b.n	8004158 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004156:	bf00      	nop
    }
  }
}
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop

08004160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800417c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d108      	bne.n	80041a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800419e:	e007      	b.n	80041b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3b10      	subs	r3, #16
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <DMA_CalcBaseAndBitshift+0x64>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041d6:	4a13      	ldr	r2, [pc, #76]	; (8004224 <DMA_CalcBaseAndBitshift+0x68>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d909      	bls.n	80041fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	659a      	str	r2, [r3, #88]	; 0x58
 80041fc:	e007      	b.n	800420e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	aaaaaaab 	.word	0xaaaaaaab
 8004224:	08009dec 	.word	0x08009dec

08004228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11f      	bne.n	8004282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d855      	bhi.n	80042f4 <DMA_CheckFifoParam+0xcc>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x28>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004273 	.word	0x08004273
 8004258:	08004261 	.word	0x08004261
 800425c:	080042f5 	.word	0x080042f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d045      	beq.n	80042f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004270:	e042      	b.n	80042f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800427a:	d13f      	bne.n	80042fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004280:	e03c      	b.n	80042fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428a:	d121      	bne.n	80042d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d836      	bhi.n	8004300 <DMA_CheckFifoParam+0xd8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x70>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042af 	.word	0x080042af
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	080042c1 	.word	0x080042c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e02f      	b.n	800430e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d024      	beq.n	8004304 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042be:	e021      	b.n	8004304 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c8:	d11e      	bne.n	8004308 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ce:	e01b      	b.n	8004308 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <DMA_CheckFifoParam+0xb4>
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d003      	beq.n	80042e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042da:	e018      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e015      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
      break;
 80042f2:	e00b      	b.n	800430c <DMA_CheckFifoParam+0xe4>
      break;
 80042f4:	bf00      	nop
 80042f6:	e00a      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 80042f8:	bf00      	nop
 80042fa:	e008      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 80042fc:	bf00      	nop
 80042fe:	e006      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 8004300:	bf00      	nop
 8004302:	e004      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 8004304:	bf00      	nop
 8004306:	e002      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;   
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 800430c:	bf00      	nop
    }
  } 
  
  return status; 
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	; 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e16b      	b.n	8004610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004338:	2201      	movs	r2, #1
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	429a      	cmp	r2, r3
 8004352:	f040 815a 	bne.w	800460a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d00b      	beq.n	8004376 <HAL_GPIO_Init+0x5a>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d007      	beq.n	8004376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800436a:	2b11      	cmp	r3, #17
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b12      	cmp	r3, #18
 8004374:	d130      	bne.n	80043d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043ac:	2201      	movs	r2, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 0201 	and.w	r2, r3, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0xfc>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b12      	cmp	r3, #18
 8004416:	d123      	bne.n	8004460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	08da      	lsrs	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3208      	adds	r2, #8
 8004420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	220f      	movs	r2, #15
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3208      	adds	r2, #8
 800445a:	69b9      	ldr	r1, [r7, #24]
 800445c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 0203 	and.w	r2, r3, #3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80b4 	beq.w	800460a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <HAL_GPIO_Init+0x308>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	4a5e      	ldr	r2, [pc, #376]	; (8004624 <HAL_GPIO_Init+0x308>)
 80044ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b0:	6453      	str	r3, [r2, #68]	; 0x44
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_GPIO_Init+0x308>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044be:	4a5a      	ldr	r2, [pc, #360]	; (8004628 <HAL_GPIO_Init+0x30c>)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	3302      	adds	r3, #2
 80044c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a51      	ldr	r2, [pc, #324]	; (800462c <HAL_GPIO_Init+0x310>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02b      	beq.n	8004542 <HAL_GPIO_Init+0x226>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a50      	ldr	r2, [pc, #320]	; (8004630 <HAL_GPIO_Init+0x314>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d025      	beq.n	800453e <HAL_GPIO_Init+0x222>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4f      	ldr	r2, [pc, #316]	; (8004634 <HAL_GPIO_Init+0x318>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01f      	beq.n	800453a <HAL_GPIO_Init+0x21e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4e      	ldr	r2, [pc, #312]	; (8004638 <HAL_GPIO_Init+0x31c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d019      	beq.n	8004536 <HAL_GPIO_Init+0x21a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4d      	ldr	r2, [pc, #308]	; (800463c <HAL_GPIO_Init+0x320>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_GPIO_Init+0x216>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4c      	ldr	r2, [pc, #304]	; (8004640 <HAL_GPIO_Init+0x324>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00d      	beq.n	800452e <HAL_GPIO_Init+0x212>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4b      	ldr	r2, [pc, #300]	; (8004644 <HAL_GPIO_Init+0x328>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d007      	beq.n	800452a <HAL_GPIO_Init+0x20e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4a      	ldr	r2, [pc, #296]	; (8004648 <HAL_GPIO_Init+0x32c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_GPIO_Init+0x20a>
 8004522:	2307      	movs	r3, #7
 8004524:	e00e      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004526:	2308      	movs	r3, #8
 8004528:	e00c      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800452a:	2306      	movs	r3, #6
 800452c:	e00a      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800452e:	2305      	movs	r3, #5
 8004530:	e008      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004532:	2304      	movs	r3, #4
 8004534:	e006      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004536:	2303      	movs	r3, #3
 8004538:	e004      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800453a:	2302      	movs	r3, #2
 800453c:	e002      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004542:	2300      	movs	r3, #0
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	f002 0203 	and.w	r2, r2, #3
 800454a:	0092      	lsls	r2, r2, #2
 800454c:	4093      	lsls	r3, r2
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004554:	4934      	ldr	r1, [pc, #208]	; (8004628 <HAL_GPIO_Init+0x30c>)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	3302      	adds	r3, #2
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_GPIO_Init+0x330>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004586:	4a31      	ldr	r2, [pc, #196]	; (800464c <HAL_GPIO_Init+0x330>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800458c:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_GPIO_Init+0x330>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <HAL_GPIO_Init+0x330>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <HAL_GPIO_Init+0x330>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_GPIO_Init+0x330>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_GPIO_Init+0x330>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <HAL_GPIO_Init+0x330>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3301      	adds	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b0f      	cmp	r3, #15
 8004614:	f67f ae90 	bls.w	8004338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004618:	bf00      	nop
 800461a:	3724      	adds	r7, #36	; 0x24
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40023800 	.word	0x40023800
 8004628:	40013800 	.word	0x40013800
 800462c:	40020000 	.word	0x40020000
 8004630:	40020400 	.word	0x40020400
 8004634:	40020800 	.word	0x40020800
 8004638:	40020c00 	.word	0x40020c00
 800463c:	40021000 	.word	0x40021000
 8004640:	40021400 	.word	0x40021400
 8004644:	40021800 	.word	0x40021800
 8004648:	40021c00 	.word	0x40021c00
 800464c:	40013c00 	.word	0x40013c00

08004650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]
 800465c:	4613      	mov	r3, r2
 800465e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004660:	787b      	ldrb	r3, [r7, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800466c:	e003      	b.n	8004676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	619a      	str	r2, [r3, #24]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800469a:	4a05      	ldr	r2, [pc, #20]	; (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc fd28 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013c00 	.word	0x40013c00

080046b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e11f      	b.n	8004906 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd fe5c 	bl	8002398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004718:	f001 f846 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a7b      	ldr	r2, [pc, #492]	; (8004910 <HAL_I2C_Init+0x25c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d807      	bhi.n	8004738 <HAL_I2C_Init+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a7a      	ldr	r2, [pc, #488]	; (8004914 <HAL_I2C_Init+0x260>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e006      	b.n	8004746 <HAL_I2C_Init+0x92>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a77      	ldr	r2, [pc, #476]	; (8004918 <HAL_I2C_Init+0x264>)
 800473c:	4293      	cmp	r3, r2
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0db      	b.n	8004906 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a72      	ldr	r2, [pc, #456]	; (800491c <HAL_I2C_Init+0x268>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0c9b      	lsrs	r3, r3, #18
 8004758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a64      	ldr	r2, [pc, #400]	; (8004910 <HAL_I2C_Init+0x25c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d802      	bhi.n	8004788 <HAL_I2C_Init+0xd4>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3301      	adds	r3, #1
 8004786:	e009      	b.n	800479c <HAL_I2C_Init+0xe8>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a63      	ldr	r2, [pc, #396]	; (8004920 <HAL_I2C_Init+0x26c>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	3301      	adds	r3, #1
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4956      	ldr	r1, [pc, #344]	; (8004910 <HAL_I2C_Init+0x25c>)
 80047b8:	428b      	cmp	r3, r1
 80047ba:	d80d      	bhi.n	80047d8 <HAL_I2C_Init+0x124>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e59      	subs	r1, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	bf38      	it	cc
 80047d4:	2304      	movcc	r3, #4
 80047d6:	e04f      	b.n	8004878 <HAL_I2C_Init+0x1c4>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <HAL_I2C_Init+0x150>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e012      	b.n	800482a <HAL_I2C_Init+0x176>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Init+0x17e>
 800482e:	2301      	movs	r3, #1
 8004830:	e022      	b.n	8004878 <HAL_I2C_Init+0x1c4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <HAL_I2C_Init+0x1a4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1e58      	subs	r0, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	440b      	add	r3, r1
 8004848:	fbb0 f3f3 	udiv	r3, r0, r3
 800484c:	3301      	adds	r3, #1
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004856:	e00f      	b.n	8004878 <HAL_I2C_Init+0x1c4>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e58      	subs	r0, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	0099      	lsls	r1, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	fbb0 f3f3 	udiv	r3, r0, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	6809      	ldr	r1, [r1, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6911      	ldr	r1, [r2, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	000186a0 	.word	0x000186a0
 8004914:	001e847f 	.word	0x001e847f
 8004918:	003d08ff 	.word	0x003d08ff
 800491c:	431bde83 	.word	0x431bde83
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	461a      	mov	r2, r3
 8004930:	460b      	mov	r3, r1
 8004932:	817b      	strh	r3, [r7, #10]
 8004934:	4613      	mov	r3, r2
 8004936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004938:	f7fe fb08 	bl	8002f4c <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b20      	cmp	r3, #32
 8004948:	f040 80e0 	bne.w	8004b0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2319      	movs	r3, #25
 8004952:	2201      	movs	r2, #1
 8004954:	4970      	ldr	r1, [pc, #448]	; (8004b18 <HAL_I2C_Master_Transmit+0x1f4>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f964 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
 8004964:	e0d3      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_I2C_Master_Transmit+0x50>
 8004970:	2302      	movs	r3, #2
 8004972:	e0cc      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d007      	beq.n	800499a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2210      	movs	r2, #16
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	893a      	ldrh	r2, [r7, #8]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a50      	ldr	r2, [pc, #320]	; (8004b1c <HAL_I2C_Master_Transmit+0x1f8>)
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049dc:	8979      	ldrh	r1, [r7, #10]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f89c 	bl	8004b20 <I2C_MasterRequestWrite>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e08d      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a08:	e066      	b.n	8004ad8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	6a39      	ldr	r1, [r7, #32]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f9de 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d107      	bne.n	8004a32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06b      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11b      	bne.n	8004aac <HAL_I2C_Master_Transmit+0x188>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d017      	beq.n	8004aac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	6a39      	ldr	r1, [r7, #32]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f9ce 	bl	8004e52 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e01a      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d194      	bne.n	8004a0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	00100002 	.word	0x00100002
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d006      	beq.n	8004b4a <I2C_MasterRequestWrite+0x2a>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d003      	beq.n	8004b4a <I2C_MasterRequestWrite+0x2a>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e00b      	b.n	8004b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	2b12      	cmp	r3, #18
 8004b62:	d107      	bne.n	8004b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f84f 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e035      	b.n	8004c12 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bae:	d108      	bne.n	8004bc2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb0:	897b      	ldrh	r3, [r7, #10]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bbe:	611a      	str	r2, [r3, #16]
 8004bc0:	e01b      	b.n	8004bfa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bc2:	897b      	ldrh	r3, [r7, #10]
 8004bc4:	11db      	asrs	r3, r3, #7
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0306 	and.w	r3, r3, #6
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f063 030f 	orn	r3, r3, #15
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	490f      	ldr	r1, [pc, #60]	; (8004c1c <I2C_MasterRequestWrite+0xfc>)
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f876 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e010      	b.n	8004c12 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4908      	ldr	r1, [pc, #32]	; (8004c20 <I2C_MasterRequestWrite+0x100>)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f866 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	00010008 	.word	0x00010008
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c34:	e025      	b.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d021      	beq.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fe f985 	bl	8002f4c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d116      	bne.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e023      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10d      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	43da      	mvns	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	e00c      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d0b6      	beq.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce0:	e051      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d123      	bne.n	8004d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e046      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d021      	beq.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fe f903 	bl	8002f4c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e020      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d18d      	bne.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ddc:	e02d      	b.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f878 	bl	8004ed4 <I2C_IsAcknowledgeFailed>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02d      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d021      	beq.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe f8a9 	bl	8002f4c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d116      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d1ca      	bne.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e5e:	e02d      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f837 	bl	8004ed4 <I2C_IsAcknowledgeFailed>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e02d      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d021      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fe f868 	bl	8002f4c <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d116      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d1ca      	bne.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d11b      	bne.n	8004f24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ef4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f043 0204 	orr.w	r2, r3, #4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e25b      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d075      	beq.n	800503e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f52:	4ba3      	ldr	r3, [pc, #652]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4ba0      	ldr	r3, [pc, #640]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d112      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b9d      	ldr	r3, [pc, #628]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	4b99      	ldr	r3, [pc, #612]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05b      	beq.n	800503c <HAL_RCC_OscConfig+0x108>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d157      	bne.n	800503c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e236      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x74>
 8004f9a:	4b91      	ldr	r3, [pc, #580]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a90      	ldr	r2, [pc, #576]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x98>
 8004fb2:	4b8b      	ldr	r3, [pc, #556]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a8a      	ldr	r2, [pc, #552]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b88      	ldr	r3, [pc, #544]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a87      	ldr	r2, [pc, #540]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fcc:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fd ffae 	bl	8002f4c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fd ffaa 	bl	8002f4c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1fb      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xc0>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fd ff9a 	bl	8002f4c <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501c:	f7fd ff96 	bl	8002f4c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1e7      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0xe8>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d063      	beq.n	8005112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504a:	4b65      	ldr	r3, [pc, #404]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b62      	ldr	r3, [pc, #392]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505e:	2b08      	cmp	r3, #8
 8005060:	d11c      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b5f      	ldr	r3, [pc, #380]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d116      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	4b5c      	ldr	r3, [pc, #368]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e1bb      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b56      	ldr	r3, [pc, #344]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4952      	ldr	r1, [pc, #328]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	e03a      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	4b4f      	ldr	r3, [pc, #316]	; (80051e4 <HAL_RCC_OscConfig+0x2b0>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7fd ff4f 	bl	8002f4c <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7fd ff4b 	bl	8002f4c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e19c      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	4b46      	ldr	r3, [pc, #280]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b43      	ldr	r3, [pc, #268]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4940      	ldr	r1, [pc, #256]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e6:	4b3f      	ldr	r3, [pc, #252]	; (80051e4 <HAL_RCC_OscConfig+0x2b0>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd ff2e 	bl	8002f4c <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fd ff2a 	bl	8002f4c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e17b      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d030      	beq.n	8005180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005126:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <HAL_RCC_OscConfig+0x2b4>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fd ff0e 	bl	8002f4c <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005134:	f7fd ff0a 	bl	8002f4c <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e15b      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x200>
 8005152:	e015      	b.n	8005180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <HAL_RCC_OscConfig+0x2b4>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fd fef7 	bl	8002f4c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005162:	f7fd fef3 	bl	8002f4c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e144      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80a0 	beq.w	80052ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_RCC_OscConfig+0x2b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d121      	bne.n	800520e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_RCC_OscConfig+0x2b8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a07      	ldr	r2, [pc, #28]	; (80051ec <HAL_RCC_OscConfig+0x2b8>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fd feb9 	bl	8002f4c <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e011      	b.n	8005202 <HAL_RCC_OscConfig+0x2ce>
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800
 80051e4:	42470000 	.word	0x42470000
 80051e8:	42470e80 	.word	0x42470e80
 80051ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f0:	f7fd feac 	bl	8002f4c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0fd      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b81      	ldr	r3, [pc, #516]	; (8005408 <HAL_RCC_OscConfig+0x4d4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d106      	bne.n	8005224 <HAL_RCC_OscConfig+0x2f0>
 8005216:	4b7d      	ldr	r3, [pc, #500]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a7c      	ldr	r2, [pc, #496]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
 8005222:	e01c      	b.n	800525e <HAL_RCC_OscConfig+0x32a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d10c      	bne.n	8005246 <HAL_RCC_OscConfig+0x312>
 800522c:	4b77      	ldr	r3, [pc, #476]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a76      	ldr	r2, [pc, #472]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	4b74      	ldr	r3, [pc, #464]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a73      	ldr	r2, [pc, #460]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	e00b      	b.n	800525e <HAL_RCC_OscConfig+0x32a>
 8005246:	4b71      	ldr	r3, [pc, #452]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a70      	ldr	r2, [pc, #448]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b6e      	ldr	r3, [pc, #440]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a6d      	ldr	r2, [pc, #436]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fd fe71 	bl	8002f4c <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	e00a      	b.n	8005284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fd fe6d 	bl	8002f4c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0bc      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	4b61      	ldr	r3, [pc, #388]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ee      	beq.n	800526e <HAL_RCC_OscConfig+0x33a>
 8005290:	e014      	b.n	80052bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005292:	f7fd fe5b 	bl	8002f4c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fd fe57 	bl	8002f4c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0a6      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ee      	bne.n	800529a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c2:	4b52      	ldr	r3, [pc, #328]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4a51      	ldr	r2, [pc, #324]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8092 	beq.w	80053fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d8:	4b4c      	ldr	r3, [pc, #304]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d05c      	beq.n	800539e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d141      	bne.n	8005370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ec:	4b48      	ldr	r3, [pc, #288]	; (8005410 <HAL_RCC_OscConfig+0x4dc>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f2:	f7fd fe2b 	bl	8002f4c <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fd fe27 	bl	8002f4c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e078      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530c:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	019b      	lsls	r3, r3, #6
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	3b01      	subs	r3, #1
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	4933      	ldr	r1, [pc, #204]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <HAL_RCC_OscConfig+0x4dc>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fd fe00 	bl	8002f4c <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005350:	f7fd fdfc 	bl	8002f4c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e04d      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b2a      	ldr	r3, [pc, #168]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x41c>
 800536e:	e045      	b.n	80053fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_RCC_OscConfig+0x4dc>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005376:	f7fd fde9 	bl	8002f4c <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537e:	f7fd fde5 	bl	8002f4c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e036      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f0      	bne.n	800537e <HAL_RCC_OscConfig+0x44a>
 800539c:	e02e      	b.n	80053fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e029      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d11c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d115      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053d2:	4013      	ands	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d8:	4293      	cmp	r3, r2
 80053da:	d10d      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40007000 	.word	0x40007000
 800540c:	40023800 	.word	0x40023800
 8005410:	42470060 	.word	0x42470060

08005414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0cc      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d90c      	bls.n	8005450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b65      	ldr	r3, [pc, #404]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b63      	ldr	r3, [pc, #396]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0b8      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005468:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4a58      	ldr	r2, [pc, #352]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a52      	ldr	r2, [pc, #328]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800548a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548c:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	494d      	ldr	r1, [pc, #308]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d044      	beq.n	8005534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d107      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d119      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d003      	beq.n	80054d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e06f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e2:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e067      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4934      	ldr	r1, [pc, #208]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005504:	f7fd fd22 	bl	8002f4c <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fd fd1e 	bl	8002f4c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e04f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 020c 	and.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d1eb      	bne.n	800550c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d20c      	bcs.n	800555c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b22      	ldr	r3, [pc, #136]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b20      	ldr	r3, [pc, #128]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e032      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4916      	ldr	r1, [pc, #88]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005586:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	490e      	ldr	r1, [pc, #56]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800559a:	f000 f821 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
 800559e:	4601      	mov	r1, r0
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a0a      	ldr	r2, [pc, #40]	; (80055d4 <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	fa21 f303 	lsr.w	r3, r1, r3
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fd f99a 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023c00 	.word	0x40023c00
 80055d0:	40023800 	.word	0x40023800
 80055d4:	08009dd4 	.word	0x08009dd4
 80055d8:	20000000 	.word	0x20000000
 80055dc:	20000004 	.word	0x20000004

080055e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	2300      	movs	r3, #0
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f6:	4b63      	ldr	r3, [pc, #396]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d007      	beq.n	8005612 <HAL_RCC_GetSysClockFreq+0x32>
 8005602:	2b08      	cmp	r3, #8
 8005604:	d008      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x38>
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 80b4 	bne.w	8005774 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800560c:	4b5e      	ldr	r3, [pc, #376]	; (8005788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800560e:	60bb      	str	r3, [r7, #8]
       break;
 8005610:	e0b3      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005612:	4b5e      	ldr	r3, [pc, #376]	; (800578c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005614:	60bb      	str	r3, [r7, #8]
      break;
 8005616:	e0b0      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005618:	4b5a      	ldr	r3, [pc, #360]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005622:	4b58      	ldr	r3, [pc, #352]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04a      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562e:	4b55      	ldr	r3, [pc, #340]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	f240 11ff 	movw	r1, #511	; 0x1ff
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	ea03 0501 	and.w	r5, r3, r1
 8005644:	ea04 0602 	and.w	r6, r4, r2
 8005648:	4629      	mov	r1, r5
 800564a:	4632      	mov	r2, r6
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	f04f 0400 	mov.w	r4, #0
 8005654:	0154      	lsls	r4, r2, #5
 8005656:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800565a:	014b      	lsls	r3, r1, #5
 800565c:	4619      	mov	r1, r3
 800565e:	4622      	mov	r2, r4
 8005660:	1b49      	subs	r1, r1, r5
 8005662:	eb62 0206 	sbc.w	r2, r2, r6
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	0194      	lsls	r4, r2, #6
 8005670:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005674:	018b      	lsls	r3, r1, #6
 8005676:	1a5b      	subs	r3, r3, r1
 8005678:	eb64 0402 	sbc.w	r4, r4, r2
 800567c:	f04f 0100 	mov.w	r1, #0
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	00e2      	lsls	r2, r4, #3
 8005686:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800568a:	00d9      	lsls	r1, r3, #3
 800568c:	460b      	mov	r3, r1
 800568e:	4614      	mov	r4, r2
 8005690:	195b      	adds	r3, r3, r5
 8005692:	eb44 0406 	adc.w	r4, r4, r6
 8005696:	f04f 0100 	mov.w	r1, #0
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	0262      	lsls	r2, r4, #9
 80056a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80056a4:	0259      	lsls	r1, r3, #9
 80056a6:	460b      	mov	r3, r1
 80056a8:	4614      	mov	r4, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	4621      	mov	r1, r4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	461a      	mov	r2, r3
 80056b6:	4623      	mov	r3, r4
 80056b8:	f7fb f9d0 	bl	8000a5c <__aeabi_uldivmod>
 80056bc:	4603      	mov	r3, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e049      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c4:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	ea03 0501 	and.w	r5, r3, r1
 80056da:	ea04 0602 	and.w	r6, r4, r2
 80056de:	4629      	mov	r1, r5
 80056e0:	4632      	mov	r2, r6
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	0154      	lsls	r4, r2, #5
 80056ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056f0:	014b      	lsls	r3, r1, #5
 80056f2:	4619      	mov	r1, r3
 80056f4:	4622      	mov	r2, r4
 80056f6:	1b49      	subs	r1, r1, r5
 80056f8:	eb62 0206 	sbc.w	r2, r2, r6
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	f04f 0400 	mov.w	r4, #0
 8005704:	0194      	lsls	r4, r2, #6
 8005706:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800570a:	018b      	lsls	r3, r1, #6
 800570c:	1a5b      	subs	r3, r3, r1
 800570e:	eb64 0402 	sbc.w	r4, r4, r2
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	00e2      	lsls	r2, r4, #3
 800571c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005720:	00d9      	lsls	r1, r3, #3
 8005722:	460b      	mov	r3, r1
 8005724:	4614      	mov	r4, r2
 8005726:	195b      	adds	r3, r3, r5
 8005728:	eb44 0406 	adc.w	r4, r4, r6
 800572c:	f04f 0100 	mov.w	r1, #0
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	02a2      	lsls	r2, r4, #10
 8005736:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800573a:	0299      	lsls	r1, r3, #10
 800573c:	460b      	mov	r3, r1
 800573e:	4614      	mov	r4, r2
 8005740:	4618      	mov	r0, r3
 8005742:	4621      	mov	r1, r4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	461a      	mov	r2, r3
 800574c:	4623      	mov	r3, r4
 800574e:	f7fb f985 	bl	8000a5c <__aeabi_uldivmod>
 8005752:	4603      	mov	r3, r0
 8005754:	460c      	mov	r4, r1
 8005756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	3301      	adds	r3, #1
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	60bb      	str	r3, [r7, #8]
      break;
 8005772:	e002      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005776:	60bb      	str	r3, [r7, #8]
      break;
 8005778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800577a:	68bb      	ldr	r3, [r7, #8]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005784:	40023800 	.word	0x40023800
 8005788:	00f42400 	.word	0x00f42400
 800578c:	007a1200 	.word	0x007a1200

08005790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000

080057a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057ac:	f7ff fff0 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057b0:	4601      	mov	r1, r0
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0a9b      	lsrs	r3, r3, #10
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4a03      	ldr	r2, [pc, #12]	; (80057cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	08009de4 	.word	0x08009de4

080057d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057d4:	f7ff ffdc 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057d8:	4601      	mov	r1, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	0b5b      	lsrs	r3, r3, #13
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40023800 	.word	0x40023800
 80057f4:	08009de4 	.word	0x08009de4

080057f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	220f      	movs	r2, #15
 8005806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0203 	and.w	r2, r3, #3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	08db      	lsrs	r3, r3, #3
 8005832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <HAL_RCC_GetClockConfig+0x60>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	40023c00 	.word	0x40023c00

0800585c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e056      	b.n	800591c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fc fdcd 	bl	8002428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	ea42 0103 	orr.w	r1, r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 0104 	and.w	r1, r3, #4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005940:	2302      	movs	r3, #2
 8005942:	e0e3      	b.n	8005b0c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005952:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800595a:	7dbb      	ldrb	r3, [r7, #22]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d00d      	beq.n	800597c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d106      	bne.n	8005976 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005970:	7dbb      	ldrb	r3, [r7, #22]
 8005972:	2b04      	cmp	r3, #4
 8005974:	d002      	beq.n	800597c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005976:	2302      	movs	r3, #2
 8005978:	75fb      	strb	r3, [r7, #23]
    goto error;
 800597a:	e0c2      	b.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005988:	887b      	ldrh	r3, [r7, #2]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005992:	e0b6      	b.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b04      	cmp	r3, #4
 800599e:	d003      	beq.n	80059a8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2205      	movs	r2, #5
 80059a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	887a      	ldrh	r2, [r7, #2]
 80059be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	887a      	ldrh	r2, [r7, #2]
 80059ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	887a      	ldrh	r2, [r7, #2]
 80059d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d108      	bne.n	80059fc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	4a49      	ldr	r2, [pc, #292]	; (8005b14 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	4a48      	ldr	r2, [pc, #288]	; (8005b18 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80059fa:	e007      	b.n	8005a0c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a00:	4a46      	ldr	r2, [pc, #280]	; (8005b1c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a08:	4a45      	ldr	r2, [pc, #276]	; (8005b20 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a10:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005a12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a18:	2200      	movs	r2, #0
 8005a1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	4619      	mov	r1, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a34:	f7fe f990 	bl	8003d58 <HAL_DMA_Start_IT>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	f043 0210 	orr.w	r2, r3, #16
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005a56:	e054      	b.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a74:	2200      	movs	r2, #0
 8005a76:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a84:	2200      	movs	r2, #0
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	4619      	mov	r1, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005aa0:	f7fe f95a 	bl	8003d58 <HAL_DMA_Start_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f043 0210 	orr.w	r2, r3, #16
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ac2:	e01e      	b.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d007      	beq.n	8005ae2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0220 	orr.w	r2, r2, #32
 8005af0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0202 	orr.w	r2, r2, #2
 8005b00:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08005ec5 	.word	0x08005ec5
 8005b18:	08005d8d 	.word	0x08005d8d
 8005b1c:	08005ee1 	.word	0x08005ee1
 8005b20:	08005e35 	.word	0x08005e35
 8005b24:	08005efd 	.word	0x08005efd

08005b28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	099b      	lsrs	r3, r3, #6
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	099b      	lsrs	r3, r3, #6
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
    return;
 8005b6a:	e0d8      	b.n	8005d1e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_SPI_IRQHandler+0x66>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	09db      	lsrs	r3, r3, #7
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
    return;
 8005b8c:	e0c7      	b.n	8005d1e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <HAL_SPI_IRQHandler+0x8c>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80b5 	beq.w	8005d1e <HAL_SPI_IRQHandler+0x1f6>
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80ae 	beq.w	8005d1e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d023      	beq.n	8005c16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d011      	beq.n	8005bfe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	e00b      	b.n	8005c16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	693b      	ldr	r3, [r7, #16]
        return;
 8005c14:	e083      	b.n	8005d1e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d014      	beq.n	8005c4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00c      	beq.n	8005c72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f043 0208 	orr.w	r2, r3, #8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c64:	2300      	movs	r3, #0
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]
 8005c70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d050      	beq.n	8005d1c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_SPI_IRQHandler+0x17e>
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d034      	beq.n	8005d10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0203 	bic.w	r2, r2, #3
 8005cb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d011      	beq.n	8005ce2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <HAL_SPI_IRQHandler+0x1fc>)
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe f89c 	bl	8003e08 <HAL_DMA_Abort_IT>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <HAL_SPI_IRQHandler+0x1fc>)
 8005cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe f886 	bl	8003e08 <HAL_DMA_Abort_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d0e:	e003      	b.n	8005d18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f831 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d16:	e000      	b.n	8005d1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d18:	bf00      	nop
    return;
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
  }
}
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	08005f3d 	.word	0x08005f3d

08005d28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9a:	f7fd f8d7 	bl	8002f4c <HAL_GetTick>
 8005d9e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dae:	d03b      	beq.n	8005e28 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0220 	bic.w	r2, r2, #32
 8005dbe:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <SPI_DMAReceiveCplt+0x58>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd0:	d108      	bne.n	8005de4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0203 	bic.w	r2, r2, #3
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	e007      	b.n	8005df4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	2164      	movs	r1, #100	; 0x64
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f91d 	bl	8006038 <SPI_EndRxTransaction>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7ff ffa9 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e26:	e002      	b.n	8005e2e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff ff7d 	bl	8005d28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e42:	f7fd f883 	bl	8002f4c <HAL_GetTick>
 8005e46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e56:	d02f      	beq.n	8005eb8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0220 	bic.w	r2, r2, #32
 8005e66:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f949 	bl	8006104 <SPI_EndRxTxTransaction>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0203 	bic.w	r2, r2, #3
 8005e92:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ff61 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005eb6:	e002      	b.n	8005ebe <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff ff3f 	bl	8005d3c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff ff3c 	bl	8005d50 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff ff38 	bl	8005d64 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0203 	bic.w	r2, r2, #3
 8005f18:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f043 0210 	orr.w	r2, r3, #16
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff ff22 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff ff0e 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f74:	e04c      	b.n	8006010 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d048      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f7e:	f7fc ffe5 	bl	8002f4c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d902      	bls.n	8005f94 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d13d      	bne.n	8006010 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fac:	d111      	bne.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb6:	d004      	beq.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc0:	d107      	bne.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d10f      	bne.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ffa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e00f      	b.n	8006030 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	429a      	cmp	r2, r3
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	429a      	cmp	r2, r3
 800602c:	d1a3      	bne.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604c:	d111      	bne.n	8006072 <SPI_EndRxTransaction+0x3a>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006056:	d004      	beq.n	8006062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006060:	d107      	bne.n	8006072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006070:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607a:	d12a      	bne.n	80060d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006084:	d012      	beq.n	80060ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff ff67 	bl	8005f64 <SPI_WaitFlagStateUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d02d      	beq.n	80060f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e026      	b.n	80060fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2200      	movs	r2, #0
 80060b4:	2101      	movs	r1, #1
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ff54 	bl	8005f64 <SPI_WaitFlagStateUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01a      	beq.n	80060f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e013      	b.n	80060fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2200      	movs	r2, #0
 80060da:	2101      	movs	r1, #1
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff ff41 	bl	8005f64 <SPI_WaitFlagStateUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e000      	b.n	80060fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <SPI_EndRxTxTransaction+0x7c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <SPI_EndRxTxTransaction+0x80>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	0d5b      	lsrs	r3, r3, #21
 800611c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800612e:	d112      	bne.n	8006156 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff ff12 	bl	8005f64 <SPI_WaitFlagStateUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e00f      	b.n	8006176 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d0f2      	beq.n	8006156 <SPI_EndRxTxTransaction+0x52>
 8006170:	e000      	b.n	8006174 <SPI_EndRxTxTransaction+0x70>
        break;
 8006172:	bf00      	nop
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000000 	.word	0x20000000
 8006184:	165e9f81 	.word	0x165e9f81

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e01d      	b.n	80061d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fc faae 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 fb76 	bl	80068b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b06      	cmp	r3, #6
 8006206:	d007      	beq.n	8006218 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e01d      	b.n	8006274 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fc fa3d 	bl	80026cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3304      	adds	r3, #4
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f000 fb27 	bl	80068b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2201      	movs	r2, #1
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fd62 	bl	8006d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <HAL_TIM_PWM_Start+0x74>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIM_PWM_Start+0x2c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <HAL_TIM_PWM_Start+0x78>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_PWM_Start+0x30>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_TIM_PWM_Start+0x32>
 80062ac:	2300      	movs	r3, #0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b06      	cmp	r3, #6
 80062d2:	d007      	beq.n	80062e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40010400 	.word	0x40010400

080062f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fd24 	bl	8006d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	; (80063a0 <HAL_TIM_PWM_Stop+0xa8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIM_PWM_Stop+0x2c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_TIM_PWM_Stop+0xac>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <HAL_TIM_PWM_Stop+0x30>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <HAL_TIM_PWM_Stop+0x32>
 8006328:	2300      	movs	r3, #0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a1a      	ldr	r2, [r3, #32]
 8006334:	f241 1311 	movw	r3, #4369	; 0x1111
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10f      	bne.n	800635e <HAL_TIM_PWM_Stop+0x66>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a1a      	ldr	r2, [r3, #32]
 8006344:	f240 4344 	movw	r3, #1092	; 0x444
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d107      	bne.n	800635e <HAL_TIM_PWM_Stop+0x66>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800635c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a1a      	ldr	r2, [r3, #32]
 8006364:	f241 1311 	movw	r3, #4369	; 0x1111
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10f      	bne.n	800638e <HAL_TIM_PWM_Stop+0x96>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	f240 4344 	movw	r3, #1092	; 0x444
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d107      	bne.n	800638e <HAL_TIM_PWM_Stop+0x96>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e083      	b.n	80064c4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fc f8fd 	bl	80025d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f000 fa5b 	bl	80068b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4313      	orrs	r3, r2
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006448:	f023 030c 	bic.w	r3, r3, #12
 800644c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	4313      	orrs	r3, r2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	031b      	lsls	r3, r3, #12
 8006478:	4313      	orrs	r3, r2
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	4313      	orrs	r3, r2
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d122      	bne.n	8006528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d11b      	bne.n	8006528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0202 	mvn.w	r2, #2
 80064f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9b4 	bl	800687c <HAL_TIM_IC_CaptureCallback>
 8006514:	e005      	b.n	8006522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9a6 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f9b7 	bl	8006890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b04      	cmp	r3, #4
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0204 	mvn.w	r2, #4
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f98a 	bl	800687c <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f97c 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f98d 	bl	8006890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b08      	cmp	r3, #8
 8006588:	d122      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d11b      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0208 	mvn.w	r2, #8
 80065a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2204      	movs	r2, #4
 80065a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f960 	bl	800687c <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f952 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f963 	bl	8006890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d122      	bne.n	8006624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d11b      	bne.n	8006624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0210 	mvn.w	r2, #16
 80065f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2208      	movs	r2, #8
 80065fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f936 	bl	800687c <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f928 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f939 	bl	8006890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b01      	cmp	r3, #1
 8006630:	d10e      	bne.n	8006650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0201 	mvn.w	r2, #1
 8006648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fb fd5c 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665a:	2b80      	cmp	r3, #128	; 0x80
 800665c:	d10e      	bne.n	800667c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d107      	bne.n	800667c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fc1a 	bl	8006eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d10e      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d107      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8fe 	bl	80068a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d10e      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d107      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0220 	mvn.w	r2, #32
 80066cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fbe4 	bl	8006e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e0b4      	b.n	8006860 <HAL_TIM_PWM_ConfigChannel+0x184>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2202      	movs	r2, #2
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b0c      	cmp	r3, #12
 800670a:	f200 809f 	bhi.w	800684c <HAL_TIM_PWM_ConfigChannel+0x170>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006749 	.word	0x08006749
 8006718:	0800684d 	.word	0x0800684d
 800671c:	0800684d 	.word	0x0800684d
 8006720:	0800684d 	.word	0x0800684d
 8006724:	08006789 	.word	0x08006789
 8006728:	0800684d 	.word	0x0800684d
 800672c:	0800684d 	.word	0x0800684d
 8006730:	0800684d 	.word	0x0800684d
 8006734:	080067cb 	.word	0x080067cb
 8006738:	0800684d 	.word	0x0800684d
 800673c:	0800684d 	.word	0x0800684d
 8006740:	0800684d 	.word	0x0800684d
 8006744:	0800680b 	.word	0x0800680b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f952 	bl	80069f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0208 	orr.w	r2, r2, #8
 8006762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0204 	bic.w	r2, r2, #4
 8006772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6999      	ldr	r1, [r3, #24]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	619a      	str	r2, [r3, #24]
      break;
 8006786:	e062      	b.n	800684e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 f9a2 	bl	8006ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6999      	ldr	r1, [r3, #24]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	021a      	lsls	r2, r3, #8
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	619a      	str	r2, [r3, #24]
      break;
 80067c8:	e041      	b.n	800684e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f9f7 	bl	8006bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0208 	orr.w	r2, r2, #8
 80067e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0204 	bic.w	r2, r2, #4
 80067f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69d9      	ldr	r1, [r3, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	61da      	str	r2, [r3, #28]
      break;
 8006808:	e021      	b.n	800684e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fa4b 	bl	8006cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69d9      	ldr	r1, [r3, #28]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	021a      	lsls	r2, r3, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	61da      	str	r2, [r3, #28]
      break;
 800684a:	e000      	b.n	800684e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800684c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a40      	ldr	r2, [pc, #256]	; (80069cc <TIM_Base_SetConfig+0x114>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d00f      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3d      	ldr	r2, [pc, #244]	; (80069d0 <TIM_Base_SetConfig+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00b      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3c      	ldr	r2, [pc, #240]	; (80069d4 <TIM_Base_SetConfig+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d007      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <TIM_Base_SetConfig+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3a      	ldr	r2, [pc, #232]	; (80069dc <TIM_Base_SetConfig+0x124>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d108      	bne.n	800690a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <TIM_Base_SetConfig+0x114>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d02b      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d027      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2c      	ldr	r2, [pc, #176]	; (80069d0 <TIM_Base_SetConfig+0x118>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d023      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <TIM_Base_SetConfig+0x11c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01f      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2a      	ldr	r2, [pc, #168]	; (80069d8 <TIM_Base_SetConfig+0x120>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01b      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <TIM_Base_SetConfig+0x124>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d017      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <TIM_Base_SetConfig+0x128>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <TIM_Base_SetConfig+0x12c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <TIM_Base_SetConfig+0x130>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a25      	ldr	r2, [pc, #148]	; (80069ec <TIM_Base_SetConfig+0x134>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <TIM_Base_SetConfig+0x138>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <TIM_Base_SetConfig+0x13c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <TIM_Base_SetConfig+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_Base_SetConfig+0xf8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a0c      	ldr	r2, [pc, #48]	; (80069dc <TIM_Base_SetConfig+0x124>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d103      	bne.n	80069b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	615a      	str	r2, [r3, #20]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40010400 	.word	0x40010400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40014400 	.word	0x40014400
 80069e8:	40014800 	.word	0x40014800
 80069ec:	40001800 	.word	0x40001800
 80069f0:	40001c00 	.word	0x40001c00
 80069f4:	40002000 	.word	0x40002000

080069f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f023 0201 	bic.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 0302 	bic.w	r3, r3, #2
 8006a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <TIM_OC1_SetConfig+0xd8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_OC1_SetConfig+0x64>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1f      	ldr	r2, [pc, #124]	; (8006ad4 <TIM_OC1_SetConfig+0xdc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d10c      	bne.n	8006a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0308 	bic.w	r3, r3, #8
 8006a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f023 0304 	bic.w	r3, r3, #4
 8006a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <TIM_OC1_SetConfig+0xd8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_OC1_SetConfig+0x8e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <TIM_OC1_SetConfig+0xdc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d111      	bne.n	8006aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	621a      	str	r2, [r3, #32]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40010400 	.word	0x40010400

08006ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0210 	bic.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0320 	bic.w	r3, r3, #32
 8006b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <TIM_OC2_SetConfig+0xe4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC2_SetConfig+0x68>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <TIM_OC2_SetConfig+0xe8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10d      	bne.n	8006b5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <TIM_OC2_SetConfig+0xe4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_OC2_SetConfig+0x94>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <TIM_OC2_SetConfig+0xe8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d113      	bne.n	8006b94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40010400 	.word	0x40010400

08006bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <TIM_OC3_SetConfig+0xe0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC3_SetConfig+0x66>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <TIM_OC3_SetConfig+0xe4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d10d      	bne.n	8006c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a16      	ldr	r2, [pc, #88]	; (8006ca4 <TIM_OC3_SetConfig+0xe0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_OC3_SetConfig+0x92>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <TIM_OC3_SetConfig+0xe4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d113      	bne.n	8006c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	621a      	str	r2, [r3, #32]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400

08006cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	031b      	lsls	r3, r3, #12
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <TIM_OC4_SetConfig+0xa4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_OC4_SetConfig+0x68>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a11      	ldr	r2, [pc, #68]	; (8006d54 <TIM_OC4_SetConfig+0xa8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d109      	bne.n	8006d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	019b      	lsls	r3, r3, #6
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40010400 	.word	0x40010400

08006d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1a      	ldr	r2, [r3, #32]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e05a      	b.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d022      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d01d      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d018      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d013      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00e      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a18      	ldr	r2, [pc, #96]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d009      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d10c      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40010400 	.word	0x40010400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40001800 	.word	0x40001800

08006e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e03f      	b.n	8006f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fb fc9a 	bl	8002824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	; 0x24
 8006ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f90b 	bl	8007124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b088      	sub	sp, #32
 8006f62:	af02      	add	r7, sp, #8
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	f040 8083 	bne.w	8007086 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_UART_Transmit+0x2e>
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e07b      	b.n	8007088 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_UART_Transmit+0x40>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e074      	b.n	8007088 <HAL_UART_Transmit+0x12a>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2221      	movs	r2, #33	; 0x21
 8006fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006fb4:	f7fb ffca 	bl	8002f4c <HAL_GetTick>
 8006fb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006fce:	e042      	b.n	8007056 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe6:	d122      	bne.n	800702e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f84c 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e042      	b.n	8007088 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007014:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	3302      	adds	r3, #2
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	e017      	b.n	8007056 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	3301      	adds	r3, #1
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	e013      	b.n	8007056 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2200      	movs	r2, #0
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f829 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e01f      	b.n	8007088 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	60ba      	str	r2, [r7, #8]
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1b7      	bne.n	8006fd0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2200      	movs	r2, #0
 8007068:	2140      	movs	r1, #64	; 0x40
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f810 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e006      	b.n	8007088 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e000      	b.n	8007088 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007086:	2302      	movs	r3, #2
  }
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a0:	e02c      	b.n	80070fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d028      	beq.n	80070fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070b0:	f7fb ff4c 	bl	8002f4c <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d21d      	bcs.n	80070fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695a      	ldr	r2, [r3, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0201 	bic.w	r2, r2, #1
 80070de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e00f      	b.n	800711c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4013      	ands	r3, r2
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	429a      	cmp	r2, r3
 8007118:	d0c3      	beq.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007166:	f023 030c 	bic.w	r3, r3, #12
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	430b      	orrs	r3, r1
 8007172:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007192:	f040 818b 	bne.w	80074ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4ac1      	ldr	r2, [pc, #772]	; (80074a0 <UART_SetConfig+0x37c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d005      	beq.n	80071ac <UART_SetConfig+0x88>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4abf      	ldr	r2, [pc, #764]	; (80074a4 <UART_SetConfig+0x380>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	f040 80bd 	bne.w	8007326 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071ac:	f7fe fb10 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 80071b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	461d      	mov	r5, r3
 80071b6:	f04f 0600 	mov.w	r6, #0
 80071ba:	46a8      	mov	r8, r5
 80071bc:	46b1      	mov	r9, r6
 80071be:	eb18 0308 	adds.w	r3, r8, r8
 80071c2:	eb49 0409 	adc.w	r4, r9, r9
 80071c6:	4698      	mov	r8, r3
 80071c8:	46a1      	mov	r9, r4
 80071ca:	eb18 0805 	adds.w	r8, r8, r5
 80071ce:	eb49 0906 	adc.w	r9, r9, r6
 80071d2:	f04f 0100 	mov.w	r1, #0
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071e6:	4688      	mov	r8, r1
 80071e8:	4691      	mov	r9, r2
 80071ea:	eb18 0005 	adds.w	r0, r8, r5
 80071ee:	eb49 0106 	adc.w	r1, r9, r6
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	461d      	mov	r5, r3
 80071f8:	f04f 0600 	mov.w	r6, #0
 80071fc:	196b      	adds	r3, r5, r5
 80071fe:	eb46 0406 	adc.w	r4, r6, r6
 8007202:	461a      	mov	r2, r3
 8007204:	4623      	mov	r3, r4
 8007206:	f7f9 fc29 	bl	8000a5c <__aeabi_uldivmod>
 800720a:	4603      	mov	r3, r0
 800720c:	460c      	mov	r4, r1
 800720e:	461a      	mov	r2, r3
 8007210:	4ba5      	ldr	r3, [pc, #660]	; (80074a8 <UART_SetConfig+0x384>)
 8007212:	fba3 2302 	umull	r2, r3, r3, r2
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	461d      	mov	r5, r3
 8007220:	f04f 0600 	mov.w	r6, #0
 8007224:	46a9      	mov	r9, r5
 8007226:	46b2      	mov	sl, r6
 8007228:	eb19 0309 	adds.w	r3, r9, r9
 800722c:	eb4a 040a 	adc.w	r4, sl, sl
 8007230:	4699      	mov	r9, r3
 8007232:	46a2      	mov	sl, r4
 8007234:	eb19 0905 	adds.w	r9, r9, r5
 8007238:	eb4a 0a06 	adc.w	sl, sl, r6
 800723c:	f04f 0100 	mov.w	r1, #0
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007248:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800724c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007250:	4689      	mov	r9, r1
 8007252:	4692      	mov	sl, r2
 8007254:	eb19 0005 	adds.w	r0, r9, r5
 8007258:	eb4a 0106 	adc.w	r1, sl, r6
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	461d      	mov	r5, r3
 8007262:	f04f 0600 	mov.w	r6, #0
 8007266:	196b      	adds	r3, r5, r5
 8007268:	eb46 0406 	adc.w	r4, r6, r6
 800726c:	461a      	mov	r2, r3
 800726e:	4623      	mov	r3, r4
 8007270:	f7f9 fbf4 	bl	8000a5c <__aeabi_uldivmod>
 8007274:	4603      	mov	r3, r0
 8007276:	460c      	mov	r4, r1
 8007278:	461a      	mov	r2, r3
 800727a:	4b8b      	ldr	r3, [pc, #556]	; (80074a8 <UART_SetConfig+0x384>)
 800727c:	fba3 1302 	umull	r1, r3, r3, r2
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	2164      	movs	r1, #100	; 0x64
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	3332      	adds	r3, #50	; 0x32
 800728e:	4a86      	ldr	r2, [pc, #536]	; (80074a8 <UART_SetConfig+0x384>)
 8007290:	fba2 2303 	umull	r2, r3, r2, r3
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800729c:	4498      	add	r8, r3
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	461d      	mov	r5, r3
 80072a2:	f04f 0600 	mov.w	r6, #0
 80072a6:	46a9      	mov	r9, r5
 80072a8:	46b2      	mov	sl, r6
 80072aa:	eb19 0309 	adds.w	r3, r9, r9
 80072ae:	eb4a 040a 	adc.w	r4, sl, sl
 80072b2:	4699      	mov	r9, r3
 80072b4:	46a2      	mov	sl, r4
 80072b6:	eb19 0905 	adds.w	r9, r9, r5
 80072ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80072be:	f04f 0100 	mov.w	r1, #0
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072d2:	4689      	mov	r9, r1
 80072d4:	4692      	mov	sl, r2
 80072d6:	eb19 0005 	adds.w	r0, r9, r5
 80072da:	eb4a 0106 	adc.w	r1, sl, r6
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	461d      	mov	r5, r3
 80072e4:	f04f 0600 	mov.w	r6, #0
 80072e8:	196b      	adds	r3, r5, r5
 80072ea:	eb46 0406 	adc.w	r4, r6, r6
 80072ee:	461a      	mov	r2, r3
 80072f0:	4623      	mov	r3, r4
 80072f2:	f7f9 fbb3 	bl	8000a5c <__aeabi_uldivmod>
 80072f6:	4603      	mov	r3, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	461a      	mov	r2, r3
 80072fc:	4b6a      	ldr	r3, [pc, #424]	; (80074a8 <UART_SetConfig+0x384>)
 80072fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	2164      	movs	r1, #100	; 0x64
 8007306:	fb01 f303 	mul.w	r3, r1, r3
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	3332      	adds	r3, #50	; 0x32
 8007310:	4a65      	ldr	r2, [pc, #404]	; (80074a8 <UART_SetConfig+0x384>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	f003 0207 	and.w	r2, r3, #7
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4442      	add	r2, r8
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	e26f      	b.n	8007806 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007326:	f7fe fa3f 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 800732a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	461d      	mov	r5, r3
 8007330:	f04f 0600 	mov.w	r6, #0
 8007334:	46a8      	mov	r8, r5
 8007336:	46b1      	mov	r9, r6
 8007338:	eb18 0308 	adds.w	r3, r8, r8
 800733c:	eb49 0409 	adc.w	r4, r9, r9
 8007340:	4698      	mov	r8, r3
 8007342:	46a1      	mov	r9, r4
 8007344:	eb18 0805 	adds.w	r8, r8, r5
 8007348:	eb49 0906 	adc.w	r9, r9, r6
 800734c:	f04f 0100 	mov.w	r1, #0
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007358:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800735c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007360:	4688      	mov	r8, r1
 8007362:	4691      	mov	r9, r2
 8007364:	eb18 0005 	adds.w	r0, r8, r5
 8007368:	eb49 0106 	adc.w	r1, r9, r6
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	461d      	mov	r5, r3
 8007372:	f04f 0600 	mov.w	r6, #0
 8007376:	196b      	adds	r3, r5, r5
 8007378:	eb46 0406 	adc.w	r4, r6, r6
 800737c:	461a      	mov	r2, r3
 800737e:	4623      	mov	r3, r4
 8007380:	f7f9 fb6c 	bl	8000a5c <__aeabi_uldivmod>
 8007384:	4603      	mov	r3, r0
 8007386:	460c      	mov	r4, r1
 8007388:	461a      	mov	r2, r3
 800738a:	4b47      	ldr	r3, [pc, #284]	; (80074a8 <UART_SetConfig+0x384>)
 800738c:	fba3 2302 	umull	r2, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	461d      	mov	r5, r3
 800739a:	f04f 0600 	mov.w	r6, #0
 800739e:	46a9      	mov	r9, r5
 80073a0:	46b2      	mov	sl, r6
 80073a2:	eb19 0309 	adds.w	r3, r9, r9
 80073a6:	eb4a 040a 	adc.w	r4, sl, sl
 80073aa:	4699      	mov	r9, r3
 80073ac:	46a2      	mov	sl, r4
 80073ae:	eb19 0905 	adds.w	r9, r9, r5
 80073b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80073b6:	f04f 0100 	mov.w	r1, #0
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ca:	4689      	mov	r9, r1
 80073cc:	4692      	mov	sl, r2
 80073ce:	eb19 0005 	adds.w	r0, r9, r5
 80073d2:	eb4a 0106 	adc.w	r1, sl, r6
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	461d      	mov	r5, r3
 80073dc:	f04f 0600 	mov.w	r6, #0
 80073e0:	196b      	adds	r3, r5, r5
 80073e2:	eb46 0406 	adc.w	r4, r6, r6
 80073e6:	461a      	mov	r2, r3
 80073e8:	4623      	mov	r3, r4
 80073ea:	f7f9 fb37 	bl	8000a5c <__aeabi_uldivmod>
 80073ee:	4603      	mov	r3, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	461a      	mov	r2, r3
 80073f4:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <UART_SetConfig+0x384>)
 80073f6:	fba3 1302 	umull	r1, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2164      	movs	r1, #100	; 0x64
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	3332      	adds	r3, #50	; 0x32
 8007408:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <UART_SetConfig+0x384>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007416:	4498      	add	r8, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	461d      	mov	r5, r3
 800741c:	f04f 0600 	mov.w	r6, #0
 8007420:	46a9      	mov	r9, r5
 8007422:	46b2      	mov	sl, r6
 8007424:	eb19 0309 	adds.w	r3, r9, r9
 8007428:	eb4a 040a 	adc.w	r4, sl, sl
 800742c:	4699      	mov	r9, r3
 800742e:	46a2      	mov	sl, r4
 8007430:	eb19 0905 	adds.w	r9, r9, r5
 8007434:	eb4a 0a06 	adc.w	sl, sl, r6
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007444:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007448:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800744c:	4689      	mov	r9, r1
 800744e:	4692      	mov	sl, r2
 8007450:	eb19 0005 	adds.w	r0, r9, r5
 8007454:	eb4a 0106 	adc.w	r1, sl, r6
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	461d      	mov	r5, r3
 800745e:	f04f 0600 	mov.w	r6, #0
 8007462:	196b      	adds	r3, r5, r5
 8007464:	eb46 0406 	adc.w	r4, r6, r6
 8007468:	461a      	mov	r2, r3
 800746a:	4623      	mov	r3, r4
 800746c:	f7f9 faf6 	bl	8000a5c <__aeabi_uldivmod>
 8007470:	4603      	mov	r3, r0
 8007472:	460c      	mov	r4, r1
 8007474:	461a      	mov	r2, r3
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <UART_SetConfig+0x384>)
 8007478:	fba3 1302 	umull	r1, r3, r3, r2
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	2164      	movs	r1, #100	; 0x64
 8007480:	fb01 f303 	mul.w	r3, r1, r3
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	3332      	adds	r3, #50	; 0x32
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <UART_SetConfig+0x384>)
 800748c:	fba2 2303 	umull	r2, r3, r2, r3
 8007490:	095b      	lsrs	r3, r3, #5
 8007492:	f003 0207 	and.w	r2, r3, #7
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4442      	add	r2, r8
 800749c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800749e:	e1b2      	b.n	8007806 <UART_SetConfig+0x6e2>
 80074a0:	40011000 	.word	0x40011000
 80074a4:	40011400 	.word	0x40011400
 80074a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4ad7      	ldr	r2, [pc, #860]	; (8007810 <UART_SetConfig+0x6ec>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d005      	beq.n	80074c2 <UART_SetConfig+0x39e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4ad6      	ldr	r2, [pc, #856]	; (8007814 <UART_SetConfig+0x6f0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	f040 80d1 	bne.w	8007664 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80074c2:	f7fe f985 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 80074c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	469a      	mov	sl, r3
 80074cc:	f04f 0b00 	mov.w	fp, #0
 80074d0:	46d0      	mov	r8, sl
 80074d2:	46d9      	mov	r9, fp
 80074d4:	eb18 0308 	adds.w	r3, r8, r8
 80074d8:	eb49 0409 	adc.w	r4, r9, r9
 80074dc:	4698      	mov	r8, r3
 80074de:	46a1      	mov	r9, r4
 80074e0:	eb18 080a 	adds.w	r8, r8, sl
 80074e4:	eb49 090b 	adc.w	r9, r9, fp
 80074e8:	f04f 0100 	mov.w	r1, #0
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074fc:	4688      	mov	r8, r1
 80074fe:	4691      	mov	r9, r2
 8007500:	eb1a 0508 	adds.w	r5, sl, r8
 8007504:	eb4b 0609 	adc.w	r6, fp, r9
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4619      	mov	r1, r3
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	f04f 0400 	mov.w	r4, #0
 800751a:	0094      	lsls	r4, r2, #2
 800751c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007520:	008b      	lsls	r3, r1, #2
 8007522:	461a      	mov	r2, r3
 8007524:	4623      	mov	r3, r4
 8007526:	4628      	mov	r0, r5
 8007528:	4631      	mov	r1, r6
 800752a:	f7f9 fa97 	bl	8000a5c <__aeabi_uldivmod>
 800752e:	4603      	mov	r3, r0
 8007530:	460c      	mov	r4, r1
 8007532:	461a      	mov	r2, r3
 8007534:	4bb8      	ldr	r3, [pc, #736]	; (8007818 <UART_SetConfig+0x6f4>)
 8007536:	fba3 2302 	umull	r2, r3, r3, r2
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	469b      	mov	fp, r3
 8007544:	f04f 0c00 	mov.w	ip, #0
 8007548:	46d9      	mov	r9, fp
 800754a:	46e2      	mov	sl, ip
 800754c:	eb19 0309 	adds.w	r3, r9, r9
 8007550:	eb4a 040a 	adc.w	r4, sl, sl
 8007554:	4699      	mov	r9, r3
 8007556:	46a2      	mov	sl, r4
 8007558:	eb19 090b 	adds.w	r9, r9, fp
 800755c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007560:	f04f 0100 	mov.w	r1, #0
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800756c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007574:	4689      	mov	r9, r1
 8007576:	4692      	mov	sl, r2
 8007578:	eb1b 0509 	adds.w	r5, fp, r9
 800757c:	eb4c 060a 	adc.w	r6, ip, sl
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	f04f 0400 	mov.w	r4, #0
 8007592:	0094      	lsls	r4, r2, #2
 8007594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007598:	008b      	lsls	r3, r1, #2
 800759a:	461a      	mov	r2, r3
 800759c:	4623      	mov	r3, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	4631      	mov	r1, r6
 80075a2:	f7f9 fa5b 	bl	8000a5c <__aeabi_uldivmod>
 80075a6:	4603      	mov	r3, r0
 80075a8:	460c      	mov	r4, r1
 80075aa:	461a      	mov	r2, r3
 80075ac:	4b9a      	ldr	r3, [pc, #616]	; (8007818 <UART_SetConfig+0x6f4>)
 80075ae:	fba3 1302 	umull	r1, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	2164      	movs	r1, #100	; 0x64
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	3332      	adds	r3, #50	; 0x32
 80075c0:	4a95      	ldr	r2, [pc, #596]	; (8007818 <UART_SetConfig+0x6f4>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075cc:	4498      	add	r8, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	469b      	mov	fp, r3
 80075d2:	f04f 0c00 	mov.w	ip, #0
 80075d6:	46d9      	mov	r9, fp
 80075d8:	46e2      	mov	sl, ip
 80075da:	eb19 0309 	adds.w	r3, r9, r9
 80075de:	eb4a 040a 	adc.w	r4, sl, sl
 80075e2:	4699      	mov	r9, r3
 80075e4:	46a2      	mov	sl, r4
 80075e6:	eb19 090b 	adds.w	r9, r9, fp
 80075ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075ee:	f04f 0100 	mov.w	r1, #0
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007602:	4689      	mov	r9, r1
 8007604:	4692      	mov	sl, r2
 8007606:	eb1b 0509 	adds.w	r5, fp, r9
 800760a:	eb4c 060a 	adc.w	r6, ip, sl
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4619      	mov	r1, r3
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	f04f 0400 	mov.w	r4, #0
 8007620:	0094      	lsls	r4, r2, #2
 8007622:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007626:	008b      	lsls	r3, r1, #2
 8007628:	461a      	mov	r2, r3
 800762a:	4623      	mov	r3, r4
 800762c:	4628      	mov	r0, r5
 800762e:	4631      	mov	r1, r6
 8007630:	f7f9 fa14 	bl	8000a5c <__aeabi_uldivmod>
 8007634:	4603      	mov	r3, r0
 8007636:	460c      	mov	r4, r1
 8007638:	461a      	mov	r2, r3
 800763a:	4b77      	ldr	r3, [pc, #476]	; (8007818 <UART_SetConfig+0x6f4>)
 800763c:	fba3 1302 	umull	r1, r3, r3, r2
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	2164      	movs	r1, #100	; 0x64
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	3332      	adds	r3, #50	; 0x32
 800764e:	4a72      	ldr	r2, [pc, #456]	; (8007818 <UART_SetConfig+0x6f4>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	f003 020f 	and.w	r2, r3, #15
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4442      	add	r2, r8
 8007660:	609a      	str	r2, [r3, #8]
 8007662:	e0d0      	b.n	8007806 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fe f8a0 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 8007668:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	469a      	mov	sl, r3
 800766e:	f04f 0b00 	mov.w	fp, #0
 8007672:	46d0      	mov	r8, sl
 8007674:	46d9      	mov	r9, fp
 8007676:	eb18 0308 	adds.w	r3, r8, r8
 800767a:	eb49 0409 	adc.w	r4, r9, r9
 800767e:	4698      	mov	r8, r3
 8007680:	46a1      	mov	r9, r4
 8007682:	eb18 080a 	adds.w	r8, r8, sl
 8007686:	eb49 090b 	adc.w	r9, r9, fp
 800768a:	f04f 0100 	mov.w	r1, #0
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007696:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800769a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800769e:	4688      	mov	r8, r1
 80076a0:	4691      	mov	r9, r2
 80076a2:	eb1a 0508 	adds.w	r5, sl, r8
 80076a6:	eb4b 0609 	adc.w	r6, fp, r9
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4619      	mov	r1, r3
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	f04f 0400 	mov.w	r4, #0
 80076bc:	0094      	lsls	r4, r2, #2
 80076be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076c2:	008b      	lsls	r3, r1, #2
 80076c4:	461a      	mov	r2, r3
 80076c6:	4623      	mov	r3, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	4631      	mov	r1, r6
 80076cc:	f7f9 f9c6 	bl	8000a5c <__aeabi_uldivmod>
 80076d0:	4603      	mov	r3, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	461a      	mov	r2, r3
 80076d6:	4b50      	ldr	r3, [pc, #320]	; (8007818 <UART_SetConfig+0x6f4>)
 80076d8:	fba3 2302 	umull	r2, r3, r3, r2
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	469b      	mov	fp, r3
 80076e6:	f04f 0c00 	mov.w	ip, #0
 80076ea:	46d9      	mov	r9, fp
 80076ec:	46e2      	mov	sl, ip
 80076ee:	eb19 0309 	adds.w	r3, r9, r9
 80076f2:	eb4a 040a 	adc.w	r4, sl, sl
 80076f6:	4699      	mov	r9, r3
 80076f8:	46a2      	mov	sl, r4
 80076fa:	eb19 090b 	adds.w	r9, r9, fp
 80076fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007702:	f04f 0100 	mov.w	r1, #0
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800770e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007712:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007716:	4689      	mov	r9, r1
 8007718:	4692      	mov	sl, r2
 800771a:	eb1b 0509 	adds.w	r5, fp, r9
 800771e:	eb4c 060a 	adc.w	r6, ip, sl
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	4619      	mov	r1, r3
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	f04f 0400 	mov.w	r4, #0
 8007734:	0094      	lsls	r4, r2, #2
 8007736:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800773a:	008b      	lsls	r3, r1, #2
 800773c:	461a      	mov	r2, r3
 800773e:	4623      	mov	r3, r4
 8007740:	4628      	mov	r0, r5
 8007742:	4631      	mov	r1, r6
 8007744:	f7f9 f98a 	bl	8000a5c <__aeabi_uldivmod>
 8007748:	4603      	mov	r3, r0
 800774a:	460c      	mov	r4, r1
 800774c:	461a      	mov	r2, r3
 800774e:	4b32      	ldr	r3, [pc, #200]	; (8007818 <UART_SetConfig+0x6f4>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	; 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	3332      	adds	r3, #50	; 0x32
 8007762:	4a2d      	ldr	r2, [pc, #180]	; (8007818 <UART_SetConfig+0x6f4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800776e:	4498      	add	r8, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	469b      	mov	fp, r3
 8007774:	f04f 0c00 	mov.w	ip, #0
 8007778:	46d9      	mov	r9, fp
 800777a:	46e2      	mov	sl, ip
 800777c:	eb19 0309 	adds.w	r3, r9, r9
 8007780:	eb4a 040a 	adc.w	r4, sl, sl
 8007784:	4699      	mov	r9, r3
 8007786:	46a2      	mov	sl, r4
 8007788:	eb19 090b 	adds.w	r9, r9, fp
 800778c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007790:	f04f 0100 	mov.w	r1, #0
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800779c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077a4:	4689      	mov	r9, r1
 80077a6:	4692      	mov	sl, r2
 80077a8:	eb1b 0509 	adds.w	r5, fp, r9
 80077ac:	eb4c 060a 	adc.w	r6, ip, sl
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4619      	mov	r1, r3
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	f04f 0400 	mov.w	r4, #0
 80077c2:	0094      	lsls	r4, r2, #2
 80077c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077c8:	008b      	lsls	r3, r1, #2
 80077ca:	461a      	mov	r2, r3
 80077cc:	4623      	mov	r3, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	4631      	mov	r1, r6
 80077d2:	f7f9 f943 	bl	8000a5c <__aeabi_uldivmod>
 80077d6:	4603      	mov	r3, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	461a      	mov	r2, r3
 80077dc:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <UART_SetConfig+0x6f4>)
 80077de:	fba3 1302 	umull	r1, r3, r3, r2
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	2164      	movs	r1, #100	; 0x64
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	3332      	adds	r3, #50	; 0x32
 80077f0:	4a09      	ldr	r2, [pc, #36]	; (8007818 <UART_SetConfig+0x6f4>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	f003 020f 	and.w	r2, r3, #15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4442      	add	r2, r8
 8007802:	609a      	str	r2, [r3, #8]
}
 8007804:	e7ff      	b.n	8007806 <UART_SetConfig+0x6e2>
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	40011000 	.word	0x40011000
 8007814:	40011400 	.word	0x40011400
 8007818:	51eb851f 	.word	0x51eb851f

0800781c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800782a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800782e:	2b84      	cmp	r3, #132	; 0x84
 8007830:	d005      	beq.n	800783e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007832:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	3303      	adds	r3, #3
 800783c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800783e:	68fb      	ldr	r3, [r7, #12]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007852:	f3ef 8305 	mrs	r3, IPSR
 8007856:	607b      	str	r3, [r7, #4]
  return(result);
 8007858:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800785a:	2b00      	cmp	r3, #0
 800785c:	bf14      	ite	ne
 800785e:	2301      	movne	r3, #1
 8007860:	2300      	moveq	r3, #0
 8007862:	b2db      	uxtb	r3, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007874:	f000 fdd2 	bl	800841c <vTaskStartScheduler>
  
  return osOK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	bd80      	pop	{r7, pc}

0800787e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007882:	f7ff ffe3 	bl	800784c <inHandlerMode>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800788c:	f000 fede 	bl	800864c <xTaskGetTickCountFromISR>
 8007890:	4603      	mov	r3, r0
 8007892:	e002      	b.n	800789a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007894:	f000 feca 	bl	800862c <xTaskGetTickCount>
 8007898:	4603      	mov	r3, r0
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	bd80      	pop	{r7, pc}

0800789e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800789e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a0:	b089      	sub	sp, #36	; 0x24
 80078a2:	af04      	add	r7, sp, #16
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d020      	beq.n	80078f2 <osThreadCreate+0x54>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01c      	beq.n	80078f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685c      	ldr	r4, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681d      	ldr	r5, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691e      	ldr	r6, [r3, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff ffa6 	bl	800781c <makeFreeRtosPriority>
 80078d0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078da:	9202      	str	r2, [sp, #8]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	9100      	str	r1, [sp, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	4632      	mov	r2, r6
 80078e4:	4629      	mov	r1, r5
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 f93e 	bl	8007b68 <xTaskCreateStatic>
 80078ec:	4603      	mov	r3, r0
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	e01c      	b.n	800792c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685c      	ldr	r4, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078fe:	b29e      	uxth	r6, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ff88 	bl	800781c <makeFreeRtosPriority>
 800790c:	4602      	mov	r2, r0
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	9200      	str	r2, [sp, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	4632      	mov	r2, r6
 800791a:	4629      	mov	r1, r5
 800791c:	4620      	mov	r0, r4
 800791e:	f000 f97d 	bl	8007c1c <xTaskCreate>
 8007922:	4603      	mov	r3, r0
 8007924:	2b01      	cmp	r3, #1
 8007926:	d001      	beq.n	800792c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	e000      	b.n	800792e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800792c:	68fb      	ldr	r3, [r7, #12]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007936 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 faa2 	bl	8007e88 <vTaskDelete>
  return osOK;
 8007944:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <osDelay+0x16>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e000      	b.n	8007966 <osDelay+0x18>
 8007964:	2301      	movs	r3, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fb96 	bl	8008098 <vTaskDelay>
  
  return osOK;
 800796c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fbbe 	bl	8008100 <vTaskSuspend>
  
  return osOK;
 8007984:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007998:	f7ff ff58 	bl	800784c <inHandlerMode>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fcca 	bl	800833c <xTaskResumeFromISR>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d10b      	bne.n	80079c6 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <osThreadResume+0x40>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	e002      	b.n	80079c6 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fc5f 	bl	8008284 <vTaskResume>
  }
  return osOK;
 80079c6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <osDelayUntil+0x18>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	e000      	b.n	80079ee <osDelayUntil+0x1a>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fad7 	bl	8007fa4 <vTaskDelayUntil>
  
  return osOK;
 80079f6:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f103 0208 	add.w	r2, r3, #8
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f103 0208 	add.w	r2, r3, #8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f103 0208 	add.w	r2, r3, #8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d103      	bne.n	8007ac2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e00c      	b.n	8007adc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	e002      	b.n	8007ad0 <vListInsert+0x2e>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d2f6      	bcs.n	8007aca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6892      	ldr	r2, [r2, #8]
 8007b2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6852      	ldr	r2, [r2, #4]
 8007b34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d103      	bne.n	8007b48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	1e5a      	subs	r2, r3, #1
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08e      	sub	sp, #56	; 0x38
 8007b6c:	af04      	add	r7, sp, #16
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	e7fe      	b.n	8007b8e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <xTaskCreateStatic+0x42>
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	e7fe      	b.n	8007ba8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007baa:	2354      	movs	r3, #84	; 0x54
 8007bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b54      	cmp	r3, #84	; 0x54
 8007bb2:	d009      	beq.n	8007bc8 <xTaskCreateStatic+0x60>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	e7fe      	b.n	8007bc6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01e      	beq.n	8007c0e <xTaskCreateStatic+0xa6>
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01b      	beq.n	8007c0e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007be8:	2300      	movs	r3, #0
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f850 	bl	8007ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c08:	f000 f8d4 	bl	8007db4 <prvAddNewTaskToReadyList>
 8007c0c:	e001      	b.n	8007c12 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c12:	697b      	ldr	r3, [r7, #20]
	}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3728      	adds	r7, #40	; 0x28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af04      	add	r7, sp, #16
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c2c:	88fb      	ldrh	r3, [r7, #6]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f9a5 	bl	8008f80 <pvPortMalloc>
 8007c36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c3e:	2054      	movs	r0, #84	; 0x54
 8007c40:	f001 f99e 	bl	8008f80 <pvPortMalloc>
 8007c44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
 8007c52:	e005      	b.n	8007c60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c54:	6978      	ldr	r0, [r7, #20]
 8007c56:	f001 fa55 	bl	8009104 <vPortFree>
 8007c5a:	e001      	b.n	8007c60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d017      	beq.n	8007c96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	2300      	movs	r3, #0
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	9302      	str	r3, [sp, #8]
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f80e 	bl	8007ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c8a:	69f8      	ldr	r0, [r7, #28]
 8007c8c:	f000 f892 	bl	8007db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c90:	2301      	movs	r3, #1
 8007c92:	61bb      	str	r3, [r7, #24]
 8007c94:	e002      	b.n	8007c9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3720      	adds	r7, #32
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b088      	sub	sp, #32
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f023 0307 	bic.w	r3, r3, #7
 8007ccc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <prvInitialiseNewTask+0x46>
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	e7fe      	b.n	8007cea <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01f      	beq.n	8007d32 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	e012      	b.n	8007d1e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	7819      	ldrb	r1, [r3, #0]
 8007d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	3334      	adds	r3, #52	; 0x34
 8007d08:	460a      	mov	r2, r1
 8007d0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d006      	beq.n	8007d26 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b0f      	cmp	r3, #15
 8007d22:	d9e9      	bls.n	8007cf8 <prvInitialiseNewTask+0x52>
 8007d24:	e000      	b.n	8007d28 <prvInitialiseNewTask+0x82>
			{
				break;
 8007d26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d30:	e003      	b.n	8007d3a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d901      	bls.n	8007d44 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d40:	2306      	movs	r3, #6
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	2200      	movs	r2, #0
 8007d54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff fe70 	bl	8007a40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	3318      	adds	r3, #24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff fe6b 	bl	8007a40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	f1c3 0207 	rsb	r2, r3, #7
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	2200      	movs	r2, #0
 8007d84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	69b8      	ldr	r0, [r7, #24]
 8007d94:	f000 feb6 	bl	8008b04 <pxPortInitialiseStack>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007daa:	bf00      	nop
 8007dac:	3720      	adds	r7, #32
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dbc:	f000 ffc6 	bl	8008d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <prvAddNewTaskToReadyList+0xb8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a29      	ldr	r2, [pc, #164]	; (8007e6c <prvAddNewTaskToReadyList+0xb8>)
 8007dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dca:	4b29      	ldr	r3, [pc, #164]	; (8007e70 <prvAddNewTaskToReadyList+0xbc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dd2:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <prvAddNewTaskToReadyList+0xbc>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dd8:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <prvAddNewTaskToReadyList+0xb8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d110      	bne.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007de0:	f000 fd70 	bl	80088c4 <prvInitialiseTaskLists>
 8007de4:	e00d      	b.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007de6:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <prvAddNewTaskToReadyList+0xc0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <prvAddNewTaskToReadyList+0xbc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d802      	bhi.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dfc:	4a1c      	ldr	r2, [pc, #112]	; (8007e70 <prvAddNewTaskToReadyList+0xbc>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e02:	4b1d      	ldr	r3, [pc, #116]	; (8007e78 <prvAddNewTaskToReadyList+0xc4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	4a1b      	ldr	r2, [pc, #108]	; (8007e78 <prvAddNewTaskToReadyList+0xc4>)
 8007e0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	2201      	movs	r2, #1
 8007e12:	409a      	lsls	r2, r3
 8007e14:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	4a18      	ldr	r2, [pc, #96]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4a15      	ldr	r2, [pc, #84]	; (8007e80 <prvAddNewTaskToReadyList+0xcc>)
 8007e2c:	441a      	add	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7ff fe10 	bl	8007a5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e3a:	f000 ffb5 	bl	8008da8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <prvAddNewTaskToReadyList+0xc0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00e      	beq.n	8007e64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <prvAddNewTaskToReadyList+0xbc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d207      	bcs.n	8007e64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <prvAddNewTaskToReadyList+0xd0>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	200003f0 	.word	0x200003f0
 8007e70:	200002f0 	.word	0x200002f0
 8007e74:	200003fc 	.word	0x200003fc
 8007e78:	2000040c 	.word	0x2000040c
 8007e7c:	200003f8 	.word	0x200003f8
 8007e80:	200002f4 	.word	0x200002f4
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e90:	f000 ff5c 	bl	8008d4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d102      	bne.n	8007ea0 <vTaskDelete+0x18>
 8007e9a:	4b38      	ldr	r3, [pc, #224]	; (8007f7c <vTaskDelete+0xf4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	e000      	b.n	8007ea2 <vTaskDelete+0x1a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff fe33 	bl	8007b14 <uxListRemove>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d115      	bne.n	8007ee0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4931      	ldr	r1, [pc, #196]	; (8007f80 <vTaskDelete+0xf8>)
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <vTaskDelete+0x58>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	2201      	movs	r2, #1
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	43da      	mvns	r2, r3
 8007ed6:	4b2b      	ldr	r3, [pc, #172]	; (8007f84 <vTaskDelete+0xfc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4013      	ands	r3, r2
 8007edc:	4a29      	ldr	r2, [pc, #164]	; (8007f84 <vTaskDelete+0xfc>)
 8007ede:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3318      	adds	r3, #24
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fe11 	bl	8007b14 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007ef2:	4b25      	ldr	r3, [pc, #148]	; (8007f88 <vTaskDelete+0x100>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	4a23      	ldr	r2, [pc, #140]	; (8007f88 <vTaskDelete+0x100>)
 8007efa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007efc:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <vTaskDelete+0xf4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d10b      	bne.n	8007f1e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	481f      	ldr	r0, [pc, #124]	; (8007f8c <vTaskDelete+0x104>)
 8007f0e:	f7ff fda4 	bl	8007a5a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007f12:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <vTaskDelete+0x108>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <vTaskDelete+0x108>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	e009      	b.n	8007f32 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <vTaskDelete+0x10c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4a1b      	ldr	r2, [pc, #108]	; (8007f94 <vTaskDelete+0x10c>)
 8007f26:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fd37 	bl	800899c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007f2e:	f000 fd63 	bl	80089f8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007f32:	f000 ff39 	bl	8008da8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007f36:	4b18      	ldr	r3, [pc, #96]	; (8007f98 <vTaskDelete+0x110>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01a      	beq.n	8007f74 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <vTaskDelete+0xf4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d115      	bne.n	8007f74 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007f48:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <vTaskDelete+0x114>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <vTaskDelete+0xdc>
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60bb      	str	r3, [r7, #8]
 8007f62:	e7fe      	b.n	8007f62 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <vTaskDelete+0x118>)
 8007f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	200002f0 	.word	0x200002f0
 8007f80:	200002f4 	.word	0x200002f4
 8007f84:	200003f8 	.word	0x200003f8
 8007f88:	2000040c 	.word	0x2000040c
 8007f8c:	200003c4 	.word	0x200003c4
 8007f90:	200003d8 	.word	0x200003d8
 8007f94:	200003f0 	.word	0x200003f0
 8007f98:	200003fc 	.word	0x200003fc
 8007f9c:	20000418 	.word	0x20000418
 8007fa0:	e000ed04 	.word	0xe000ed04

08007fa4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <vTaskDelayUntil+0x28>
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e7fe      	b.n	8007fca <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <vTaskDelayUntil+0x42>
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	e7fe      	b.n	8007fe4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8007fe6:	4b29      	ldr	r3, [pc, #164]	; (800808c <vTaskDelayUntil+0xe8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <vTaskDelayUntil+0x5e>
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e7fe      	b.n	8008000 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8008002:	f000 fa69 	bl	80084d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008006:	4b22      	ldr	r3, [pc, #136]	; (8008090 <vTaskDelayUntil+0xec>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	4413      	add	r3, r2
 8008014:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	429a      	cmp	r2, r3
 800801e:	d20b      	bcs.n	8008038 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	429a      	cmp	r2, r3
 8008028:	d211      	bcs.n	800804e <vTaskDelayUntil+0xaa>
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	429a      	cmp	r2, r3
 8008030:	d90d      	bls.n	800804e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008032:	2301      	movs	r3, #1
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	e00a      	b.n	800804e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	429a      	cmp	r2, r3
 8008040:	d303      	bcc.n	800804a <vTaskDelayUntil+0xa6>
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	429a      	cmp	r2, r3
 8008048:	d901      	bls.n	800804e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800804a:	2301      	movs	r3, #1
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fce8 	bl	8008a38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008068:	f000 fa44 	bl	80084f4 <xTaskResumeAll>
 800806c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d107      	bne.n	8008084 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8008074:	4b07      	ldr	r3, [pc, #28]	; (8008094 <vTaskDelayUntil+0xf0>)
 8008076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008084:	bf00      	nop
 8008086:	3728      	adds	r7, #40	; 0x28
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000418 	.word	0x20000418
 8008090:	200003f4 	.word	0x200003f4
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d016      	beq.n	80080d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <vTaskDelay+0x60>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <vTaskDelay+0x2e>
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60bb      	str	r3, [r7, #8]
 80080c4:	e7fe      	b.n	80080c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80080c6:	f000 fa07 	bl	80084d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080ca:	2100      	movs	r1, #0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fcb3 	bl	8008a38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080d2:	f000 fa0f 	bl	80084f4 <xTaskResumeAll>
 80080d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d107      	bne.n	80080ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <vTaskDelay+0x64>)
 80080e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000418 	.word	0x20000418
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008108:	f000 fe20 	bl	8008d4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <vTaskSuspend+0x18>
 8008112:	4b3c      	ldr	r3, [pc, #240]	; (8008204 <vTaskSuspend+0x104>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	e000      	b.n	800811a <vTaskSuspend+0x1a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff fcf7 	bl	8007b14 <uxListRemove>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d115      	bne.n	8008158 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	4935      	ldr	r1, [pc, #212]	; (8008208 <vTaskSuspend+0x108>)
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <vTaskSuspend+0x58>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	2201      	movs	r2, #1
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	43da      	mvns	r2, r3
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <vTaskSuspend+0x10c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4013      	ands	r3, r2
 8008154:	4a2d      	ldr	r2, [pc, #180]	; (800820c <vTaskSuspend+0x10c>)
 8008156:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d004      	beq.n	800816a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3318      	adds	r3, #24
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fcd5 	bl	8007b14 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3304      	adds	r3, #4
 800816e:	4619      	mov	r1, r3
 8008170:	4827      	ldr	r0, [pc, #156]	; (8008210 <vTaskSuspend+0x110>)
 8008172:	f7ff fc72 	bl	8007a5a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b01      	cmp	r3, #1
 8008180:	d103      	bne.n	800818a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800818a:	f000 fe0d 	bl	8008da8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800818e:	4b21      	ldr	r3, [pc, #132]	; (8008214 <vTaskSuspend+0x114>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008196:	f000 fdd9 	bl	8008d4c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800819a:	f000 fc2d 	bl	80089f8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800819e:	f000 fe03 	bl	8008da8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80081a2:	4b18      	ldr	r3, [pc, #96]	; (8008204 <vTaskSuspend+0x104>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d126      	bne.n	80081fa <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80081ac:	4b19      	ldr	r3, [pc, #100]	; (8008214 <vTaskSuspend+0x114>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d016      	beq.n	80081e2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <vTaskSuspend+0x118>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <vTaskSuspend+0xd0>
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	e7fe      	b.n	80081ce <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <vTaskSuspend+0x11c>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081e0:	e00b      	b.n	80081fa <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80081e2:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <vTaskSuspend+0x110>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <vTaskSuspend+0x120>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d103      	bne.n	80081f6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 80081ee:	4b05      	ldr	r3, [pc, #20]	; (8008204 <vTaskSuspend+0x104>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
	}
 80081f4:	e001      	b.n	80081fa <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 80081f6:	f000 faf3 	bl	80087e0 <vTaskSwitchContext>
	}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200002f0 	.word	0x200002f0
 8008208:	200002f4 	.word	0x200002f4
 800820c:	200003f8 	.word	0x200003f8
 8008210:	200003dc 	.word	0x200003dc
 8008214:	200003fc 	.word	0x200003fc
 8008218:	20000418 	.word	0x20000418
 800821c:	e000ed04 	.word	0xe000ed04
 8008220:	200003f0 	.word	0x200003f0

08008224 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <prvTaskIsTaskSuspended+0x2a>
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e7fe      	b.n	800824c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	4a0a      	ldr	r2, [pc, #40]	; (800827c <prvTaskIsTaskSuspended+0x58>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d10a      	bne.n	800826e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	4a08      	ldr	r2, [pc, #32]	; (8008280 <prvTaskIsTaskSuspended+0x5c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d005      	beq.n	800826e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800826e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	200003dc 	.word	0x200003dc
 8008280:	200003b0 	.word	0x200003b0

08008284 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <vTaskResume+0x26>
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60bb      	str	r3, [r7, #8]
 80082a8:	e7fe      	b.n	80082a8 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80082aa:	4b20      	ldr	r3, [pc, #128]	; (800832c <vTaskResume+0xa8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d037      	beq.n	8008324 <vTaskResume+0xa0>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d034      	beq.n	8008324 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80082ba:	f000 fd47 	bl	8008d4c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff ffb0 	bl	8008224 <prvTaskIsTaskSuspended>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d02a      	beq.n	8008320 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fc20 	bl	8007b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2201      	movs	r2, #1
 80082da:	409a      	lsls	r2, r3
 80082dc:	4b14      	ldr	r3, [pc, #80]	; (8008330 <vTaskResume+0xac>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	4a13      	ldr	r2, [pc, #76]	; (8008330 <vTaskResume+0xac>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a10      	ldr	r2, [pc, #64]	; (8008334 <vTaskResume+0xb0>)
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7ff fbac 	bl	8007a5a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008306:	4b09      	ldr	r3, [pc, #36]	; (800832c <vTaskResume+0xa8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	429a      	cmp	r2, r3
 800830e:	d307      	bcc.n	8008320 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008310:	4b09      	ldr	r3, [pc, #36]	; (8008338 <vTaskResume+0xb4>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008320:	f000 fd42 	bl	8008da8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	200002f0 	.word	0x200002f0
 8008330:	200003f8 	.word	0x200003f8
 8008334:	200002f4 	.word	0x200002f4
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	; 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <xTaskResumeFromISR+0x2a>
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	61bb      	str	r3, [r7, #24]
 8008364:	e7fe      	b.n	8008364 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008366:	f000 fdcd 	bl	8008f04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800836a:	f3ef 8211 	mrs	r2, BASEPRI
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	617a      	str	r2, [r7, #20]
 8008380:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008382:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008384:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008386:	6a38      	ldr	r0, [r7, #32]
 8008388:	f7ff ff4c 	bl	8008224 <prvTaskIsTaskSuspended>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d02f      	beq.n	80083f2 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008392:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <xTaskResumeFromISR+0xcc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d125      	bne.n	80083e6 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839e:	4b1b      	ldr	r3, [pc, #108]	; (800840c <xTaskResumeFromISR+0xd0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d301      	bcc.n	80083ac <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fbaf 	bl	8007b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	2201      	movs	r2, #1
 80083bc:	409a      	lsls	r2, r3
 80083be:	4b14      	ldr	r3, [pc, #80]	; (8008410 <xTaskResumeFromISR+0xd4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	4a12      	ldr	r2, [pc, #72]	; (8008410 <xTaskResumeFromISR+0xd4>)
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4a0f      	ldr	r2, [pc, #60]	; (8008414 <xTaskResumeFromISR+0xd8>)
 80083d6:	441a      	add	r2, r3
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	3304      	adds	r3, #4
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f7ff fb3b 	bl	8007a5a <vListInsertEnd>
 80083e4:	e005      	b.n	80083f2 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	3318      	adds	r3, #24
 80083ea:	4619      	mov	r1, r3
 80083ec:	480a      	ldr	r0, [pc, #40]	; (8008418 <xTaskResumeFromISR+0xdc>)
 80083ee:	f7ff fb34 	bl	8007a5a <vListInsertEnd>
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80083fe:	4618      	mov	r0, r3
 8008400:	3728      	adds	r7, #40	; 0x28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000418 	.word	0x20000418
 800840c:	200002f0 	.word	0x200002f0
 8008410:	200003f8 	.word	0x200003f8
 8008414:	200002f4 	.word	0x200002f4
 8008418:	200003b0 	.word	0x200003b0

0800841c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800842a:	463a      	mov	r2, r7
 800842c:	1d39      	adds	r1, r7, #4
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	4618      	mov	r0, r3
 8008434:	f7f8 fd28 	bl	8000e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	9202      	str	r2, [sp, #8]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	460a      	mov	r2, r1
 800844a:	491d      	ldr	r1, [pc, #116]	; (80084c0 <vTaskStartScheduler+0xa4>)
 800844c:	481d      	ldr	r0, [pc, #116]	; (80084c4 <vTaskStartScheduler+0xa8>)
 800844e:	f7ff fb8b 	bl	8007b68 <xTaskCreateStatic>
 8008452:	4602      	mov	r2, r0
 8008454:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <vTaskStartScheduler+0xac>)
 8008456:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008458:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <vTaskStartScheduler+0xac>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e001      	b.n	800846a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d115      	bne.n	800849c <vTaskStartScheduler+0x80>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008482:	4b12      	ldr	r3, [pc, #72]	; (80084cc <vTaskStartScheduler+0xb0>)
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <vTaskStartScheduler+0xb4>)
 800848c:	2201      	movs	r2, #1
 800848e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008490:	4b10      	ldr	r3, [pc, #64]	; (80084d4 <vTaskStartScheduler+0xb8>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008496:	f000 fbbb 	bl	8008c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800849a:	e00d      	b.n	80084b8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d109      	bne.n	80084b8 <vTaskStartScheduler+0x9c>
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e7fe      	b.n	80084b6 <vTaskStartScheduler+0x9a>
}
 80084b8:	bf00      	nop
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	08009dcc 	.word	0x08009dcc
 80084c4:	08008895 	.word	0x08008895
 80084c8:	20000414 	.word	0x20000414
 80084cc:	20000410 	.word	0x20000410
 80084d0:	200003fc 	.word	0x200003fc
 80084d4:	200003f4 	.word	0x200003f4

080084d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vTaskSuspendAll+0x18>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3301      	adds	r3, #1
 80084e2:	4a03      	ldr	r2, [pc, #12]	; (80084f0 <vTaskSuspendAll+0x18>)
 80084e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20000418 	.word	0x20000418

080084f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008502:	4b41      	ldr	r3, [pc, #260]	; (8008608 <xTaskResumeAll+0x114>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <xTaskResumeAll+0x2a>
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	e7fe      	b.n	800851c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800851e:	f000 fc15 	bl	8008d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008522:	4b39      	ldr	r3, [pc, #228]	; (8008608 <xTaskResumeAll+0x114>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3b01      	subs	r3, #1
 8008528:	4a37      	ldr	r2, [pc, #220]	; (8008608 <xTaskResumeAll+0x114>)
 800852a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852c:	4b36      	ldr	r3, [pc, #216]	; (8008608 <xTaskResumeAll+0x114>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d161      	bne.n	80085f8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008534:	4b35      	ldr	r3, [pc, #212]	; (800860c <xTaskResumeAll+0x118>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05d      	beq.n	80085f8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800853c:	e02e      	b.n	800859c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853e:	4b34      	ldr	r3, [pc, #208]	; (8008610 <xTaskResumeAll+0x11c>)
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3318      	adds	r3, #24
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff fae2 	bl	8007b14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3304      	adds	r3, #4
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fadd 	bl	8007b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	2201      	movs	r2, #1
 8008560:	409a      	lsls	r2, r3
 8008562:	4b2c      	ldr	r3, [pc, #176]	; (8008614 <xTaskResumeAll+0x120>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <xTaskResumeAll+0x120>)
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4a27      	ldr	r2, [pc, #156]	; (8008618 <xTaskResumeAll+0x124>)
 800857a:	441a      	add	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3304      	adds	r3, #4
 8008580:	4619      	mov	r1, r3
 8008582:	4610      	mov	r0, r2
 8008584:	f7ff fa69 	bl	8007a5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	4b23      	ldr	r3, [pc, #140]	; (800861c <xTaskResumeAll+0x128>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008596:	4b22      	ldr	r3, [pc, #136]	; (8008620 <xTaskResumeAll+0x12c>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800859c:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <xTaskResumeAll+0x11c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1cc      	bne.n	800853e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085aa:	f000 fa25 	bl	80089f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085ae:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <xTaskResumeAll+0x130>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d010      	beq.n	80085dc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085ba:	f000 f859 	bl	8008670 <xTaskIncrementTick>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <xTaskResumeAll+0x12c>)
 80085c6:	2201      	movs	r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f1      	bne.n	80085ba <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80085d6:	4b13      	ldr	r3, [pc, #76]	; (8008624 <xTaskResumeAll+0x130>)
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085dc:	4b10      	ldr	r3, [pc, #64]	; (8008620 <xTaskResumeAll+0x12c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085e8:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <xTaskResumeAll+0x134>)
 80085ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f8:	f000 fbd6 	bl	8008da8 <vPortExitCritical>

	return xAlreadyYielded;
 80085fc:	68bb      	ldr	r3, [r7, #8]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000418 	.word	0x20000418
 800860c:	200003f0 	.word	0x200003f0
 8008610:	200003b0 	.word	0x200003b0
 8008614:	200003f8 	.word	0x200003f8
 8008618:	200002f4 	.word	0x200002f4
 800861c:	200002f0 	.word	0x200002f0
 8008620:	20000404 	.word	0x20000404
 8008624:	20000400 	.word	0x20000400
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <xTaskGetTickCount+0x1c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008638:	687b      	ldr	r3, [r7, #4]
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	200003f4 	.word	0x200003f4

0800864c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008652:	f000 fc57 	bl	8008f04 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <xTaskGetTickCountFromISR+0x20>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008660:	683b      	ldr	r3, [r7, #0]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	200003f4 	.word	0x200003f4

08008670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800867a:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <xTaskIncrementTick+0x144>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f040 8087 	bne.w	8008792 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008684:	4b4c      	ldr	r3, [pc, #304]	; (80087b8 <xTaskIncrementTick+0x148>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3301      	adds	r3, #1
 800868a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800868c:	4a4a      	ldr	r2, [pc, #296]	; (80087b8 <xTaskIncrementTick+0x148>)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d11f      	bne.n	80086d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008698:	4b48      	ldr	r3, [pc, #288]	; (80087bc <xTaskIncrementTick+0x14c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <xTaskIncrementTick+0x46>
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	e7fe      	b.n	80086b4 <xTaskIncrementTick+0x44>
 80086b6:	4b41      	ldr	r3, [pc, #260]	; (80087bc <xTaskIncrementTick+0x14c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	4b40      	ldr	r3, [pc, #256]	; (80087c0 <xTaskIncrementTick+0x150>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a3e      	ldr	r2, [pc, #248]	; (80087bc <xTaskIncrementTick+0x14c>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	4a3e      	ldr	r2, [pc, #248]	; (80087c0 <xTaskIncrementTick+0x150>)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	4b3e      	ldr	r3, [pc, #248]	; (80087c4 <xTaskIncrementTick+0x154>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4a3c      	ldr	r2, [pc, #240]	; (80087c4 <xTaskIncrementTick+0x154>)
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	f000 f990 	bl	80089f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086d8:	4b3b      	ldr	r3, [pc, #236]	; (80087c8 <xTaskIncrementTick+0x158>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d348      	bcc.n	8008774 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e2:	4b36      	ldr	r3, [pc, #216]	; (80087bc <xTaskIncrementTick+0x14c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <xTaskIncrementTick+0x158>)
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295
 80086f2:	601a      	str	r2, [r3, #0]
					break;
 80086f4:	e03e      	b.n	8008774 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <xTaskIncrementTick+0x14c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d203      	bcs.n	8008716 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800870e:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <xTaskIncrementTick+0x158>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008714:	e02e      	b.n	8008774 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3304      	adds	r3, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff f9fa 	bl	8007b14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3318      	adds	r3, #24
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff f9f1 	bl	8007b14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	2201      	movs	r2, #1
 8008738:	409a      	lsls	r2, r3
 800873a:	4b24      	ldr	r3, [pc, #144]	; (80087cc <xTaskIncrementTick+0x15c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4313      	orrs	r3, r2
 8008740:	4a22      	ldr	r2, [pc, #136]	; (80087cc <xTaskIncrementTick+0x15c>)
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <xTaskIncrementTick+0x160>)
 8008752:	441a      	add	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7ff f97d 	bl	8007a5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	4b1b      	ldr	r3, [pc, #108]	; (80087d4 <xTaskIncrementTick+0x164>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	429a      	cmp	r2, r3
 800876c:	d3b9      	bcc.n	80086e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800876e:	2301      	movs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008772:	e7b6      	b.n	80086e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008774:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <xTaskIncrementTick+0x164>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877a:	4915      	ldr	r1, [pc, #84]	; (80087d0 <xTaskIncrementTick+0x160>)
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d907      	bls.n	800879c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	e004      	b.n	800879c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008792:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <xTaskIncrementTick+0x168>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	4a0f      	ldr	r2, [pc, #60]	; (80087d8 <xTaskIncrementTick+0x168>)
 800879a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <xTaskIncrementTick+0x16c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80087a8:	697b      	ldr	r3, [r7, #20]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000418 	.word	0x20000418
 80087b8:	200003f4 	.word	0x200003f4
 80087bc:	200003a8 	.word	0x200003a8
 80087c0:	200003ac 	.word	0x200003ac
 80087c4:	20000408 	.word	0x20000408
 80087c8:	20000410 	.word	0x20000410
 80087cc:	200003f8 	.word	0x200003f8
 80087d0:	200002f4 	.word	0x200002f4
 80087d4:	200002f0 	.word	0x200002f0
 80087d8:	20000400 	.word	0x20000400
 80087dc:	20000404 	.word	0x20000404

080087e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087e6:	4b26      	ldr	r3, [pc, #152]	; (8008880 <vTaskSwitchContext+0xa0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087ee:	4b25      	ldr	r3, [pc, #148]	; (8008884 <vTaskSwitchContext+0xa4>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087f4:	e03e      	b.n	8008874 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80087f6:	4b23      	ldr	r3, [pc, #140]	; (8008884 <vTaskSwitchContext+0xa4>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087fc:	4b22      	ldr	r3, [pc, #136]	; (8008888 <vTaskSwitchContext+0xa8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	fab3 f383 	clz	r3, r3
 8008808:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	f1c3 031f 	rsb	r3, r3, #31
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	491e      	ldr	r1, [pc, #120]	; (800888c <vTaskSwitchContext+0xac>)
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d109      	bne.n	800883a <vTaskSwitchContext+0x5a>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	e7fe      	b.n	8008838 <vTaskSwitchContext+0x58>
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4a11      	ldr	r2, [pc, #68]	; (800888c <vTaskSwitchContext+0xac>)
 8008846:	4413      	add	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	605a      	str	r2, [r3, #4]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	3308      	adds	r3, #8
 800885c:	429a      	cmp	r2, r3
 800885e:	d104      	bne.n	800886a <vTaskSwitchContext+0x8a>
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	605a      	str	r2, [r3, #4]
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	4a07      	ldr	r2, [pc, #28]	; (8008890 <vTaskSwitchContext+0xb0>)
 8008872:	6013      	str	r3, [r2, #0]
}
 8008874:	bf00      	nop
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20000418 	.word	0x20000418
 8008884:	20000404 	.word	0x20000404
 8008888:	200003f8 	.word	0x200003f8
 800888c:	200002f4 	.word	0x200002f4
 8008890:	200002f0 	.word	0x200002f0

08008894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800889c:	f000 f852 	bl	8008944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088a0:	4b06      	ldr	r3, [pc, #24]	; (80088bc <prvIdleTask+0x28>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d9f9      	bls.n	800889c <prvIdleTask+0x8>
			{
				taskYIELD();
 80088a8:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <prvIdleTask+0x2c>)
 80088aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088b8:	e7f0      	b.n	800889c <prvIdleTask+0x8>
 80088ba:	bf00      	nop
 80088bc:	200002f4 	.word	0x200002f4
 80088c0:	e000ed04 	.word	0xe000ed04

080088c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ca:	2300      	movs	r3, #0
 80088cc:	607b      	str	r3, [r7, #4]
 80088ce:	e00c      	b.n	80088ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a12      	ldr	r2, [pc, #72]	; (8008924 <prvInitialiseTaskLists+0x60>)
 80088dc:	4413      	add	r3, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff f88e 	bl	8007a00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3301      	adds	r3, #1
 80088e8:	607b      	str	r3, [r7, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b06      	cmp	r3, #6
 80088ee:	d9ef      	bls.n	80088d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088f0:	480d      	ldr	r0, [pc, #52]	; (8008928 <prvInitialiseTaskLists+0x64>)
 80088f2:	f7ff f885 	bl	8007a00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088f6:	480d      	ldr	r0, [pc, #52]	; (800892c <prvInitialiseTaskLists+0x68>)
 80088f8:	f7ff f882 	bl	8007a00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088fc:	480c      	ldr	r0, [pc, #48]	; (8008930 <prvInitialiseTaskLists+0x6c>)
 80088fe:	f7ff f87f 	bl	8007a00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008902:	480c      	ldr	r0, [pc, #48]	; (8008934 <prvInitialiseTaskLists+0x70>)
 8008904:	f7ff f87c 	bl	8007a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008908:	480b      	ldr	r0, [pc, #44]	; (8008938 <prvInitialiseTaskLists+0x74>)
 800890a:	f7ff f879 	bl	8007a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <prvInitialiseTaskLists+0x78>)
 8008910:	4a05      	ldr	r2, [pc, #20]	; (8008928 <prvInitialiseTaskLists+0x64>)
 8008912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <prvInitialiseTaskLists+0x7c>)
 8008916:	4a05      	ldr	r2, [pc, #20]	; (800892c <prvInitialiseTaskLists+0x68>)
 8008918:	601a      	str	r2, [r3, #0]
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200002f4 	.word	0x200002f4
 8008928:	20000380 	.word	0x20000380
 800892c:	20000394 	.word	0x20000394
 8008930:	200003b0 	.word	0x200003b0
 8008934:	200003c4 	.word	0x200003c4
 8008938:	200003dc 	.word	0x200003dc
 800893c:	200003a8 	.word	0x200003a8
 8008940:	200003ac 	.word	0x200003ac

08008944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800894a:	e019      	b.n	8008980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800894c:	f000 f9fe 	bl	8008d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <prvCheckTasksWaitingTermination+0x4c>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff f8d9 	bl	8007b14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <prvCheckTasksWaitingTermination+0x50>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3b01      	subs	r3, #1
 8008968:	4a0a      	ldr	r2, [pc, #40]	; (8008994 <prvCheckTasksWaitingTermination+0x50>)
 800896a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <prvCheckTasksWaitingTermination+0x54>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	4a09      	ldr	r2, [pc, #36]	; (8008998 <prvCheckTasksWaitingTermination+0x54>)
 8008974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008976:	f000 fa17 	bl	8008da8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f80e 	bl	800899c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008980:	4b05      	ldr	r3, [pc, #20]	; (8008998 <prvCheckTasksWaitingTermination+0x54>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e1      	bne.n	800894c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200003c4 	.word	0x200003c4
 8008994:	200003f0 	.word	0x200003f0
 8008998:	200003d8 	.word	0x200003d8

0800899c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d108      	bne.n	80089c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fba6 	bl	8009104 <vPortFree>
				vPortFree( pxTCB );
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fba3 	bl	8009104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089be:	e017      	b.n	80089f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d103      	bne.n	80089d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb9a 	bl	8009104 <vPortFree>
	}
 80089d0:	e00e      	b.n	80089f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d009      	beq.n	80089f0 <prvDeleteTCB+0x54>
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	e7fe      	b.n	80089ee <prvDeleteTCB+0x52>
	}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <prvResetNextTaskUnblockTime+0x38>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a08:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <prvResetNextTaskUnblockTime+0x3c>)
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a10:	e008      	b.n	8008a24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a12:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <prvResetNextTaskUnblockTime+0x38>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4a04      	ldr	r2, [pc, #16]	; (8008a34 <prvResetNextTaskUnblockTime+0x3c>)
 8008a22:	6013      	str	r3, [r2, #0]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	200003a8 	.word	0x200003a8
 8008a34:	20000410 	.word	0x20000410

08008a38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a42:	4b29      	ldr	r3, [pc, #164]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a48:	4b28      	ldr	r3, [pc, #160]	; (8008aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff f860 	bl	8007b14 <uxListRemove>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	2201      	movs	r2, #1
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43da      	mvns	r2, r3
 8008a68:	4b21      	ldr	r3, [pc, #132]	; (8008af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d10a      	bne.n	8008a90 <prvAddCurrentTaskToDelayedList+0x58>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a80:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4619      	mov	r1, r3
 8008a88:	481a      	ldr	r0, [pc, #104]	; (8008af4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a8a:	f7fe ffe6 	bl	8007a5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a8e:	e026      	b.n	8008ade <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a98:	4b14      	ldr	r3, [pc, #80]	; (8008aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d209      	bcs.n	8008abc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aa8:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fe fff4 	bl	8007aa2 <vListInsert>
}
 8008aba:	e010      	b.n	8008ade <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008abc:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <prvAddCurrentTaskToDelayedList+0xc4>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fe ffea 	bl	8007aa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ace:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d202      	bcs.n	8008ade <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ad8:	4a09      	ldr	r2, [pc, #36]	; (8008b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6013      	str	r3, [r2, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200003f4 	.word	0x200003f4
 8008aec:	200002f0 	.word	0x200002f0
 8008af0:	200003f8 	.word	0x200003f8
 8008af4:	200003dc 	.word	0x200003dc
 8008af8:	200003ac 	.word	0x200003ac
 8008afc:	200003a8 	.word	0x200003a8
 8008b00:	20000410 	.word	0x20000410

08008b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3b04      	subs	r3, #4
 8008b14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3b04      	subs	r3, #4
 8008b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f023 0201 	bic.w	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b34:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <pxPortInitialiseStack+0x64>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3b14      	subs	r3, #20
 8008b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f06f 0202 	mvn.w	r2, #2
 8008b52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3b20      	subs	r3, #32
 8008b58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	08008b6d 	.word	0x08008b6d

08008b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b76:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <prvTaskExitError+0x50>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d009      	beq.n	8008b94 <prvTaskExitError+0x28>
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	e7fe      	b.n	8008b92 <prvTaskExitError+0x26>
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ba6:	bf00      	nop
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0fc      	beq.n	8008ba8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	2000000c 	.word	0x2000000c

08008bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <pxCurrentTCBConst2>)
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	6808      	ldr	r0, [r1, #0]
 8008bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	f380 8809 	msr	PSP, r0
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	4770      	bx	lr
 8008bdc:	f3af 8000 	nop.w

08008be0 <pxCurrentTCBConst2>:
 8008be0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <prvPortStartFirstTask+0x24>)
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	6800      	ldr	r0, [r0, #0]
 8008bee:	f380 8808 	msr	MSP, r0
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8814 	msr	CONTROL, r0
 8008bfa:	b662      	cpsie	i
 8008bfc:	b661      	cpsie	f
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	df00      	svc	0
 8008c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c0a:	bf00      	nop
 8008c0c:	e000ed08 	.word	0xe000ed08

08008c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c16:	4b44      	ldr	r3, [pc, #272]	; (8008d28 <xPortStartScheduler+0x118>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a44      	ldr	r2, [pc, #272]	; (8008d2c <xPortStartScheduler+0x11c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d109      	bne.n	8008c34 <xPortStartScheduler+0x24>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	613b      	str	r3, [r7, #16]
 8008c32:	e7fe      	b.n	8008c32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c34:	4b3c      	ldr	r3, [pc, #240]	; (8008d28 <xPortStartScheduler+0x118>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a3d      	ldr	r2, [pc, #244]	; (8008d30 <xPortStartScheduler+0x120>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d109      	bne.n	8008c52 <xPortStartScheduler+0x42>
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e7fe      	b.n	8008c50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c52:	4b38      	ldr	r3, [pc, #224]	; (8008d34 <xPortStartScheduler+0x124>)
 8008c54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	22ff      	movs	r2, #255	; 0xff
 8008c62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	4b30      	ldr	r3, [pc, #192]	; (8008d38 <xPortStartScheduler+0x128>)
 8008c78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c7a:	4b30      	ldr	r3, [pc, #192]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c80:	e009      	b.n	8008c96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008c82:	4b2e      	ldr	r3, [pc, #184]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4a2c      	ldr	r2, [pc, #176]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008c8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b80      	cmp	r3, #128	; 0x80
 8008ca0:	d0ef      	beq.n	8008c82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ca2:	4b26      	ldr	r3, [pc, #152]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1c3 0307 	rsb	r3, r3, #7
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d009      	beq.n	8008cc2 <xPortStartScheduler+0xb2>
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
 8008cc0:	e7fe      	b.n	8008cc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cc2:	4b1e      	ldr	r3, [pc, #120]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	021b      	lsls	r3, r3, #8
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008cca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ccc:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cd4:	4a19      	ldr	r2, [pc, #100]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008cd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ce0:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <xPortStartScheduler+0x130>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <xPortStartScheduler+0x130>)
 8008ce6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cec:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <xPortStartScheduler+0x130>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a13      	ldr	r2, [pc, #76]	; (8008d40 <xPortStartScheduler+0x130>)
 8008cf2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cf8:	f000 f8d6 	bl	8008ea8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d02:	f000 f8f5 	bl	8008ef0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d06:	4b10      	ldr	r3, [pc, #64]	; (8008d48 <xPortStartScheduler+0x138>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a0f      	ldr	r2, [pc, #60]	; (8008d48 <xPortStartScheduler+0x138>)
 8008d0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d12:	f7ff ff69 	bl	8008be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d16:	f7ff fd63 	bl	80087e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008d1a:	f7ff ff27 	bl	8008b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed00 	.word	0xe000ed00
 8008d2c:	410fc271 	.word	0x410fc271
 8008d30:	410fc270 	.word	0x410fc270
 8008d34:	e000e400 	.word	0xe000e400
 8008d38:	2000041c 	.word	0x2000041c
 8008d3c:	20000420 	.word	0x20000420
 8008d40:	e000ed20 	.word	0xe000ed20
 8008d44:	2000000c 	.word	0x2000000c
 8008d48:	e000ef34 	.word	0xe000ef34

08008d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d64:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <vPortEnterCritical+0x54>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	4a0d      	ldr	r2, [pc, #52]	; (8008da0 <vPortEnterCritical+0x54>)
 8008d6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <vPortEnterCritical+0x54>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d10e      	bne.n	8008d94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d76:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <vPortEnterCritical+0x58>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d009      	beq.n	8008d94 <vPortEnterCritical+0x48>
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	e7fe      	b.n	8008d92 <vPortEnterCritical+0x46>
	}
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	2000000c 	.word	0x2000000c
 8008da4:	e000ed04 	.word	0xe000ed04

08008da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <vPortExitCritical+0x4c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <vPortExitCritical+0x22>
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	607b      	str	r3, [r7, #4]
 8008dc8:	e7fe      	b.n	8008dc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <vPortExitCritical+0x4c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	4a08      	ldr	r2, [pc, #32]	; (8008df4 <vPortExitCritical+0x4c>)
 8008dd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <vPortExitCritical+0x4c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <vPortExitCritical+0x3e>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	2000000c 	.word	0x2000000c
	...

08008e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e00:	f3ef 8009 	mrs	r0, PSP
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4b15      	ldr	r3, [pc, #84]	; (8008e60 <pxCurrentTCBConst>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	f01e 0f10 	tst.w	lr, #16
 8008e10:	bf08      	it	eq
 8008e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	6010      	str	r0, [r2, #0]
 8008e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e24:	f380 8811 	msr	BASEPRI, r0
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f7ff fcd6 	bl	80087e0 <vTaskSwitchContext>
 8008e34:	f04f 0000 	mov.w	r0, #0
 8008e38:	f380 8811 	msr	BASEPRI, r0
 8008e3c:	bc09      	pop	{r0, r3}
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	6808      	ldr	r0, [r1, #0]
 8008e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e46:	f01e 0f10 	tst.w	lr, #16
 8008e4a:	bf08      	it	eq
 8008e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e50:	f380 8809 	msr	PSP, r0
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	f3af 8000 	nop.w

08008e60 <pxCurrentTCBConst>:
 8008e60:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop

08008e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e80:	f7ff fbf6 	bl	8008670 <xTaskIncrementTick>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e8a:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <SysTick_Handler+0x3c>)
 8008e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	2300      	movs	r3, #0
 8008e94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed04 	.word	0xe000ed04

08008ea8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008eac:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <vPortSetupTimerInterrupt+0x34>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <vPortSetupTimerInterrupt+0x38>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <vPortSetupTimerInterrupt+0x3c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <vPortSetupTimerInterrupt+0x40>)
 8008ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec2:	099b      	lsrs	r3, r3, #6
 8008ec4:	4a09      	ldr	r2, [pc, #36]	; (8008eec <vPortSetupTimerInterrupt+0x44>)
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eca:	4b04      	ldr	r3, [pc, #16]	; (8008edc <vPortSetupTimerInterrupt+0x34>)
 8008ecc:	2207      	movs	r2, #7
 8008ece:	601a      	str	r2, [r3, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	e000e010 	.word	0xe000e010
 8008ee0:	e000e018 	.word	0xe000e018
 8008ee4:	20000000 	.word	0x20000000
 8008ee8:	10624dd3 	.word	0x10624dd3
 8008eec:	e000e014 	.word	0xe000e014

08008ef0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ef0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f00 <vPortEnableVFP+0x10>
 8008ef4:	6801      	ldr	r1, [r0, #0]
 8008ef6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008efa:	6001      	str	r1, [r0, #0]
 8008efc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008efe:	bf00      	nop
 8008f00:	e000ed88 	.word	0xe000ed88

08008f04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f0a:	f3ef 8305 	mrs	r3, IPSR
 8008f0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b0f      	cmp	r3, #15
 8008f14:	d913      	bls.n	8008f3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f16:	4a16      	ldr	r2, [pc, #88]	; (8008f70 <vPortValidateInterruptPriority+0x6c>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f20:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <vPortValidateInterruptPriority+0x70>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	7afa      	ldrb	r2, [r7, #11]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d209      	bcs.n	8008f3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	e7fe      	b.n	8008f3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <vPortValidateInterruptPriority+0x74>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f46:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <vPortValidateInterruptPriority+0x78>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d909      	bls.n	8008f62 <vPortValidateInterruptPriority+0x5e>
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	e7fe      	b.n	8008f60 <vPortValidateInterruptPriority+0x5c>
	}
 8008f62:	bf00      	nop
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	e000e3f0 	.word	0xe000e3f0
 8008f74:	2000041c 	.word	0x2000041c
 8008f78:	e000ed0c 	.word	0xe000ed0c
 8008f7c:	20000420 	.word	0x20000420

08008f80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08a      	sub	sp, #40	; 0x28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f8c:	f7ff faa4 	bl	80084d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f90:	4b57      	ldr	r3, [pc, #348]	; (80090f0 <pvPortMalloc+0x170>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f98:	f000 f90c 	bl	80091b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f9c:	4b55      	ldr	r3, [pc, #340]	; (80090f4 <pvPortMalloc+0x174>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 808c 	bne.w	80090c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01c      	beq.n	8008fea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f003 0307 	and.w	r3, r3, #7
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d013      	beq.n	8008fea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f023 0307 	bic.w	r3, r3, #7
 8008fc8:	3308      	adds	r3, #8
 8008fca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d009      	beq.n	8008fea <pvPortMalloc+0x6a>
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	e7fe      	b.n	8008fe8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d068      	beq.n	80090c2 <pvPortMalloc+0x142>
 8008ff0:	4b41      	ldr	r3, [pc, #260]	; (80090f8 <pvPortMalloc+0x178>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d863      	bhi.n	80090c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ffa:	4b40      	ldr	r3, [pc, #256]	; (80090fc <pvPortMalloc+0x17c>)
 8008ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ffe:	4b3f      	ldr	r3, [pc, #252]	; (80090fc <pvPortMalloc+0x17c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009004:	e004      	b.n	8009010 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	429a      	cmp	r2, r3
 8009018:	d903      	bls.n	8009022 <pvPortMalloc+0xa2>
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f1      	bne.n	8009006 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009022:	4b33      	ldr	r3, [pc, #204]	; (80090f0 <pvPortMalloc+0x170>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009028:	429a      	cmp	r2, r3
 800902a:	d04a      	beq.n	80090c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2208      	movs	r2, #8
 8009032:	4413      	add	r3, r2
 8009034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	1ad2      	subs	r2, r2, r3
 8009046:	2308      	movs	r3, #8
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	429a      	cmp	r2, r3
 800904c:	d91e      	bls.n	800908c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800904e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <pvPortMalloc+0xf4>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	e7fe      	b.n	8009072 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009086:	69b8      	ldr	r0, [r7, #24]
 8009088:	f000 f8f6 	bl	8009278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800908c:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <pvPortMalloc+0x178>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <pvPortMalloc+0x178>)
 8009098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800909a:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <pvPortMalloc+0x178>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b18      	ldr	r3, [pc, #96]	; (8009100 <pvPortMalloc+0x180>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d203      	bcs.n	80090ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <pvPortMalloc+0x178>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a15      	ldr	r2, [pc, #84]	; (8009100 <pvPortMalloc+0x180>)
 80090ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <pvPortMalloc+0x174>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090c2:	f7ff fa17 	bl	80084f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d009      	beq.n	80090e4 <pvPortMalloc+0x164>
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	e7fe      	b.n	80090e2 <pvPortMalloc+0x162>
	return pvReturn;
 80090e4:	69fb      	ldr	r3, [r7, #28]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	2000402c 	.word	0x2000402c
 80090f4:	20004038 	.word	0x20004038
 80090f8:	20004030 	.word	0x20004030
 80090fc:	20004024 	.word	0x20004024
 8009100:	20004034 	.word	0x20004034

08009104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d046      	beq.n	80091a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009116:	2308      	movs	r3, #8
 8009118:	425b      	negs	r3, r3
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	4b20      	ldr	r3, [pc, #128]	; (80091ac <vPortFree+0xa8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <vPortFree+0x42>
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	e7fe      	b.n	8009144 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <vPortFree+0x5e>
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	60bb      	str	r3, [r7, #8]
 8009160:	e7fe      	b.n	8009160 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	4b11      	ldr	r3, [pc, #68]	; (80091ac <vPortFree+0xa8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d019      	beq.n	80091a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d115      	bne.n	80091a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <vPortFree+0xa8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	43db      	mvns	r3, r3
 8009182:	401a      	ands	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009188:	f7ff f9a6 	bl	80084d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <vPortFree+0xac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4413      	add	r3, r2
 8009196:	4a06      	ldr	r2, [pc, #24]	; (80091b0 <vPortFree+0xac>)
 8009198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800919a:	6938      	ldr	r0, [r7, #16]
 800919c:	f000 f86c 	bl	8009278 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091a0:	f7ff f9a8 	bl	80084f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20004038 	.word	0x20004038
 80091b0:	20004030 	.word	0x20004030

080091b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80091be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091c0:	4b27      	ldr	r3, [pc, #156]	; (8009260 <prvHeapInit+0xac>)
 80091c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00c      	beq.n	80091e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3307      	adds	r3, #7
 80091d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	4a1f      	ldr	r2, [pc, #124]	; (8009260 <prvHeapInit+0xac>)
 80091e4:	4413      	add	r3, r2
 80091e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091ec:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <prvHeapInit+0xb0>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <prvHeapInit+0xb0>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	4413      	add	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009200:	2208      	movs	r2, #8
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0307 	bic.w	r3, r3, #7
 800920e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4a15      	ldr	r2, [pc, #84]	; (8009268 <prvHeapInit+0xb4>)
 8009214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <prvHeapInit+0xb4>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2200      	movs	r2, #0
 800921c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800921e:	4b12      	ldr	r3, [pc, #72]	; (8009268 <prvHeapInit+0xb4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	1ad2      	subs	r2, r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <prvHeapInit+0xb4>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4a0a      	ldr	r2, [pc, #40]	; (800926c <prvHeapInit+0xb8>)
 8009242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4a09      	ldr	r2, [pc, #36]	; (8009270 <prvHeapInit+0xbc>)
 800924a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <prvHeapInit+0xc0>)
 800924e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009252:	601a      	str	r2, [r3, #0]
}
 8009254:	bf00      	nop
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000424 	.word	0x20000424
 8009264:	20004024 	.word	0x20004024
 8009268:	2000402c 	.word	0x2000402c
 800926c:	20004034 	.word	0x20004034
 8009270:	20004030 	.word	0x20004030
 8009274:	20004038 	.word	0x20004038

08009278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009280:	4b28      	ldr	r3, [pc, #160]	; (8009324 <prvInsertBlockIntoFreeList+0xac>)
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	e002      	b.n	800928c <prvInsertBlockIntoFreeList+0x14>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	429a      	cmp	r2, r3
 8009294:	d8f7      	bhi.n	8009286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	4413      	add	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d108      	bne.n	80092ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	441a      	add	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d118      	bne.n	8009300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <prvInsertBlockIntoFreeList+0xb0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d00d      	beq.n	80092f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	441a      	add	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e008      	b.n	8009308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <prvInsertBlockIntoFreeList+0xb0>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e003      	b.n	8009308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d002      	beq.n	8009316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20004024 	.word	0x20004024
 8009328:	2000402c 	.word	0x2000402c

0800932c <__errno>:
 800932c:	4b01      	ldr	r3, [pc, #4]	; (8009334 <__errno+0x8>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000010 	.word	0x20000010

08009338 <__libc_init_array>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	4e0d      	ldr	r6, [pc, #52]	; (8009370 <__libc_init_array+0x38>)
 800933c:	4c0d      	ldr	r4, [pc, #52]	; (8009374 <__libc_init_array+0x3c>)
 800933e:	1ba4      	subs	r4, r4, r6
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	2500      	movs	r5, #0
 8009344:	42a5      	cmp	r5, r4
 8009346:	d109      	bne.n	800935c <__libc_init_array+0x24>
 8009348:	4e0b      	ldr	r6, [pc, #44]	; (8009378 <__libc_init_array+0x40>)
 800934a:	4c0c      	ldr	r4, [pc, #48]	; (800937c <__libc_init_array+0x44>)
 800934c:	f000 fc28 	bl	8009ba0 <_init>
 8009350:	1ba4      	subs	r4, r4, r6
 8009352:	10a4      	asrs	r4, r4, #2
 8009354:	2500      	movs	r5, #0
 8009356:	42a5      	cmp	r5, r4
 8009358:	d105      	bne.n	8009366 <__libc_init_array+0x2e>
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009360:	4798      	blx	r3
 8009362:	3501      	adds	r5, #1
 8009364:	e7ee      	b.n	8009344 <__libc_init_array+0xc>
 8009366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800936a:	4798      	blx	r3
 800936c:	3501      	adds	r5, #1
 800936e:	e7f2      	b.n	8009356 <__libc_init_array+0x1e>
 8009370:	08009e30 	.word	0x08009e30
 8009374:	08009e30 	.word	0x08009e30
 8009378:	08009e30 	.word	0x08009e30
 800937c:	08009e34 	.word	0x08009e34

08009380 <memcpy>:
 8009380:	b510      	push	{r4, lr}
 8009382:	1e43      	subs	r3, r0, #1
 8009384:	440a      	add	r2, r1
 8009386:	4291      	cmp	r1, r2
 8009388:	d100      	bne.n	800938c <memcpy+0xc>
 800938a:	bd10      	pop	{r4, pc}
 800938c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009394:	e7f7      	b.n	8009386 <memcpy+0x6>

08009396 <memset>:
 8009396:	4402      	add	r2, r0
 8009398:	4603      	mov	r3, r0
 800939a:	4293      	cmp	r3, r2
 800939c:	d100      	bne.n	80093a0 <memset+0xa>
 800939e:	4770      	bx	lr
 80093a0:	f803 1b01 	strb.w	r1, [r3], #1
 80093a4:	e7f9      	b.n	800939a <memset+0x4>
	...

080093a8 <siprintf>:
 80093a8:	b40e      	push	{r1, r2, r3}
 80093aa:	b500      	push	{lr}
 80093ac:	b09c      	sub	sp, #112	; 0x70
 80093ae:	ab1d      	add	r3, sp, #116	; 0x74
 80093b0:	9002      	str	r0, [sp, #8]
 80093b2:	9006      	str	r0, [sp, #24]
 80093b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093b8:	4809      	ldr	r0, [pc, #36]	; (80093e0 <siprintf+0x38>)
 80093ba:	9107      	str	r1, [sp, #28]
 80093bc:	9104      	str	r1, [sp, #16]
 80093be:	4909      	ldr	r1, [pc, #36]	; (80093e4 <siprintf+0x3c>)
 80093c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c4:	9105      	str	r1, [sp, #20]
 80093c6:	6800      	ldr	r0, [r0, #0]
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	a902      	add	r1, sp, #8
 80093cc:	f000 f866 	bl	800949c <_svfiprintf_r>
 80093d0:	9b02      	ldr	r3, [sp, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
 80093d6:	b01c      	add	sp, #112	; 0x70
 80093d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093dc:	b003      	add	sp, #12
 80093de:	4770      	bx	lr
 80093e0:	20000010 	.word	0x20000010
 80093e4:	ffff0208 	.word	0xffff0208

080093e8 <__ssputs_r>:
 80093e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ec:	688e      	ldr	r6, [r1, #8]
 80093ee:	429e      	cmp	r6, r3
 80093f0:	4682      	mov	sl, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	4690      	mov	r8, r2
 80093f6:	4699      	mov	r9, r3
 80093f8:	d837      	bhi.n	800946a <__ssputs_r+0x82>
 80093fa:	898a      	ldrh	r2, [r1, #12]
 80093fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009400:	d031      	beq.n	8009466 <__ssputs_r+0x7e>
 8009402:	6825      	ldr	r5, [r4, #0]
 8009404:	6909      	ldr	r1, [r1, #16]
 8009406:	1a6f      	subs	r7, r5, r1
 8009408:	6965      	ldr	r5, [r4, #20]
 800940a:	2302      	movs	r3, #2
 800940c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009410:	fb95 f5f3 	sdiv	r5, r5, r3
 8009414:	f109 0301 	add.w	r3, r9, #1
 8009418:	443b      	add	r3, r7
 800941a:	429d      	cmp	r5, r3
 800941c:	bf38      	it	cc
 800941e:	461d      	movcc	r5, r3
 8009420:	0553      	lsls	r3, r2, #21
 8009422:	d530      	bpl.n	8009486 <__ssputs_r+0x9e>
 8009424:	4629      	mov	r1, r5
 8009426:	f000 fb21 	bl	8009a6c <_malloc_r>
 800942a:	4606      	mov	r6, r0
 800942c:	b950      	cbnz	r0, 8009444 <__ssputs_r+0x5c>
 800942e:	230c      	movs	r3, #12
 8009430:	f8ca 3000 	str.w	r3, [sl]
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009444:	463a      	mov	r2, r7
 8009446:	6921      	ldr	r1, [r4, #16]
 8009448:	f7ff ff9a 	bl	8009380 <memcpy>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	6126      	str	r6, [r4, #16]
 800945a:	6165      	str	r5, [r4, #20]
 800945c:	443e      	add	r6, r7
 800945e:	1bed      	subs	r5, r5, r7
 8009460:	6026      	str	r6, [r4, #0]
 8009462:	60a5      	str	r5, [r4, #8]
 8009464:	464e      	mov	r6, r9
 8009466:	454e      	cmp	r6, r9
 8009468:	d900      	bls.n	800946c <__ssputs_r+0x84>
 800946a:	464e      	mov	r6, r9
 800946c:	4632      	mov	r2, r6
 800946e:	4641      	mov	r1, r8
 8009470:	6820      	ldr	r0, [r4, #0]
 8009472:	f000 fa93 	bl	800999c <memmove>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	1b9b      	subs	r3, r3, r6
 800947a:	60a3      	str	r3, [r4, #8]
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	441e      	add	r6, r3
 8009480:	6026      	str	r6, [r4, #0]
 8009482:	2000      	movs	r0, #0
 8009484:	e7dc      	b.n	8009440 <__ssputs_r+0x58>
 8009486:	462a      	mov	r2, r5
 8009488:	f000 fb4a 	bl	8009b20 <_realloc_r>
 800948c:	4606      	mov	r6, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	d1e2      	bne.n	8009458 <__ssputs_r+0x70>
 8009492:	6921      	ldr	r1, [r4, #16]
 8009494:	4650      	mov	r0, sl
 8009496:	f000 fa9b 	bl	80099d0 <_free_r>
 800949a:	e7c8      	b.n	800942e <__ssputs_r+0x46>

0800949c <_svfiprintf_r>:
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	461d      	mov	r5, r3
 80094a2:	898b      	ldrh	r3, [r1, #12]
 80094a4:	061f      	lsls	r7, r3, #24
 80094a6:	b09d      	sub	sp, #116	; 0x74
 80094a8:	4680      	mov	r8, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	4616      	mov	r6, r2
 80094ae:	d50f      	bpl.n	80094d0 <_svfiprintf_r+0x34>
 80094b0:	690b      	ldr	r3, [r1, #16]
 80094b2:	b96b      	cbnz	r3, 80094d0 <_svfiprintf_r+0x34>
 80094b4:	2140      	movs	r1, #64	; 0x40
 80094b6:	f000 fad9 	bl	8009a6c <_malloc_r>
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	6120      	str	r0, [r4, #16]
 80094be:	b928      	cbnz	r0, 80094cc <_svfiprintf_r+0x30>
 80094c0:	230c      	movs	r3, #12
 80094c2:	f8c8 3000 	str.w	r3, [r8]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	e0c8      	b.n	800965e <_svfiprintf_r+0x1c2>
 80094cc:	2340      	movs	r3, #64	; 0x40
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	2300      	movs	r3, #0
 80094d2:	9309      	str	r3, [sp, #36]	; 0x24
 80094d4:	2320      	movs	r3, #32
 80094d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094da:	2330      	movs	r3, #48	; 0x30
 80094dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094e0:	9503      	str	r5, [sp, #12]
 80094e2:	f04f 0b01 	mov.w	fp, #1
 80094e6:	4637      	mov	r7, r6
 80094e8:	463d      	mov	r5, r7
 80094ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094ee:	b10b      	cbz	r3, 80094f4 <_svfiprintf_r+0x58>
 80094f0:	2b25      	cmp	r3, #37	; 0x25
 80094f2:	d13e      	bne.n	8009572 <_svfiprintf_r+0xd6>
 80094f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80094f8:	d00b      	beq.n	8009512 <_svfiprintf_r+0x76>
 80094fa:	4653      	mov	r3, sl
 80094fc:	4632      	mov	r2, r6
 80094fe:	4621      	mov	r1, r4
 8009500:	4640      	mov	r0, r8
 8009502:	f7ff ff71 	bl	80093e8 <__ssputs_r>
 8009506:	3001      	adds	r0, #1
 8009508:	f000 80a4 	beq.w	8009654 <_svfiprintf_r+0x1b8>
 800950c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950e:	4453      	add	r3, sl
 8009510:	9309      	str	r3, [sp, #36]	; 0x24
 8009512:	783b      	ldrb	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 809d 	beq.w	8009654 <_svfiprintf_r+0x1b8>
 800951a:	2300      	movs	r3, #0
 800951c:	f04f 32ff 	mov.w	r2, #4294967295
 8009520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	9307      	str	r3, [sp, #28]
 8009528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800952c:	931a      	str	r3, [sp, #104]	; 0x68
 800952e:	462f      	mov	r7, r5
 8009530:	2205      	movs	r2, #5
 8009532:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009536:	4850      	ldr	r0, [pc, #320]	; (8009678 <_svfiprintf_r+0x1dc>)
 8009538:	f7f6 fe4a 	bl	80001d0 <memchr>
 800953c:	9b04      	ldr	r3, [sp, #16]
 800953e:	b9d0      	cbnz	r0, 8009576 <_svfiprintf_r+0xda>
 8009540:	06d9      	lsls	r1, r3, #27
 8009542:	bf44      	itt	mi
 8009544:	2220      	movmi	r2, #32
 8009546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800954a:	071a      	lsls	r2, r3, #28
 800954c:	bf44      	itt	mi
 800954e:	222b      	movmi	r2, #43	; 0x2b
 8009550:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009554:	782a      	ldrb	r2, [r5, #0]
 8009556:	2a2a      	cmp	r2, #42	; 0x2a
 8009558:	d015      	beq.n	8009586 <_svfiprintf_r+0xea>
 800955a:	9a07      	ldr	r2, [sp, #28]
 800955c:	462f      	mov	r7, r5
 800955e:	2000      	movs	r0, #0
 8009560:	250a      	movs	r5, #10
 8009562:	4639      	mov	r1, r7
 8009564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009568:	3b30      	subs	r3, #48	; 0x30
 800956a:	2b09      	cmp	r3, #9
 800956c:	d94d      	bls.n	800960a <_svfiprintf_r+0x16e>
 800956e:	b1b8      	cbz	r0, 80095a0 <_svfiprintf_r+0x104>
 8009570:	e00f      	b.n	8009592 <_svfiprintf_r+0xf6>
 8009572:	462f      	mov	r7, r5
 8009574:	e7b8      	b.n	80094e8 <_svfiprintf_r+0x4c>
 8009576:	4a40      	ldr	r2, [pc, #256]	; (8009678 <_svfiprintf_r+0x1dc>)
 8009578:	1a80      	subs	r0, r0, r2
 800957a:	fa0b f000 	lsl.w	r0, fp, r0
 800957e:	4318      	orrs	r0, r3
 8009580:	9004      	str	r0, [sp, #16]
 8009582:	463d      	mov	r5, r7
 8009584:	e7d3      	b.n	800952e <_svfiprintf_r+0x92>
 8009586:	9a03      	ldr	r2, [sp, #12]
 8009588:	1d11      	adds	r1, r2, #4
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	9103      	str	r1, [sp, #12]
 800958e:	2a00      	cmp	r2, #0
 8009590:	db01      	blt.n	8009596 <_svfiprintf_r+0xfa>
 8009592:	9207      	str	r2, [sp, #28]
 8009594:	e004      	b.n	80095a0 <_svfiprintf_r+0x104>
 8009596:	4252      	negs	r2, r2
 8009598:	f043 0302 	orr.w	r3, r3, #2
 800959c:	9207      	str	r2, [sp, #28]
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	783b      	ldrb	r3, [r7, #0]
 80095a2:	2b2e      	cmp	r3, #46	; 0x2e
 80095a4:	d10c      	bne.n	80095c0 <_svfiprintf_r+0x124>
 80095a6:	787b      	ldrb	r3, [r7, #1]
 80095a8:	2b2a      	cmp	r3, #42	; 0x2a
 80095aa:	d133      	bne.n	8009614 <_svfiprintf_r+0x178>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	1d1a      	adds	r2, r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	9203      	str	r2, [sp, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfb8      	it	lt
 80095b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80095bc:	3702      	adds	r7, #2
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	4d2e      	ldr	r5, [pc, #184]	; (800967c <_svfiprintf_r+0x1e0>)
 80095c2:	7839      	ldrb	r1, [r7, #0]
 80095c4:	2203      	movs	r2, #3
 80095c6:	4628      	mov	r0, r5
 80095c8:	f7f6 fe02 	bl	80001d0 <memchr>
 80095cc:	b138      	cbz	r0, 80095de <_svfiprintf_r+0x142>
 80095ce:	2340      	movs	r3, #64	; 0x40
 80095d0:	1b40      	subs	r0, r0, r5
 80095d2:	fa03 f000 	lsl.w	r0, r3, r0
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	4303      	orrs	r3, r0
 80095da:	3701      	adds	r7, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	7839      	ldrb	r1, [r7, #0]
 80095e0:	4827      	ldr	r0, [pc, #156]	; (8009680 <_svfiprintf_r+0x1e4>)
 80095e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095e6:	2206      	movs	r2, #6
 80095e8:	1c7e      	adds	r6, r7, #1
 80095ea:	f7f6 fdf1 	bl	80001d0 <memchr>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d038      	beq.n	8009664 <_svfiprintf_r+0x1c8>
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <_svfiprintf_r+0x1e8>)
 80095f4:	bb13      	cbnz	r3, 800963c <_svfiprintf_r+0x1a0>
 80095f6:	9b03      	ldr	r3, [sp, #12]
 80095f8:	3307      	adds	r3, #7
 80095fa:	f023 0307 	bic.w	r3, r3, #7
 80095fe:	3308      	adds	r3, #8
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009604:	444b      	add	r3, r9
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	e76d      	b.n	80094e6 <_svfiprintf_r+0x4a>
 800960a:	fb05 3202 	mla	r2, r5, r2, r3
 800960e:	2001      	movs	r0, #1
 8009610:	460f      	mov	r7, r1
 8009612:	e7a6      	b.n	8009562 <_svfiprintf_r+0xc6>
 8009614:	2300      	movs	r3, #0
 8009616:	3701      	adds	r7, #1
 8009618:	9305      	str	r3, [sp, #20]
 800961a:	4619      	mov	r1, r3
 800961c:	250a      	movs	r5, #10
 800961e:	4638      	mov	r0, r7
 8009620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009624:	3a30      	subs	r2, #48	; 0x30
 8009626:	2a09      	cmp	r2, #9
 8009628:	d903      	bls.n	8009632 <_svfiprintf_r+0x196>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0c8      	beq.n	80095c0 <_svfiprintf_r+0x124>
 800962e:	9105      	str	r1, [sp, #20]
 8009630:	e7c6      	b.n	80095c0 <_svfiprintf_r+0x124>
 8009632:	fb05 2101 	mla	r1, r5, r1, r2
 8009636:	2301      	movs	r3, #1
 8009638:	4607      	mov	r7, r0
 800963a:	e7f0      	b.n	800961e <_svfiprintf_r+0x182>
 800963c:	ab03      	add	r3, sp, #12
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	4622      	mov	r2, r4
 8009642:	4b11      	ldr	r3, [pc, #68]	; (8009688 <_svfiprintf_r+0x1ec>)
 8009644:	a904      	add	r1, sp, #16
 8009646:	4640      	mov	r0, r8
 8009648:	f3af 8000 	nop.w
 800964c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009650:	4681      	mov	r9, r0
 8009652:	d1d6      	bne.n	8009602 <_svfiprintf_r+0x166>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	065b      	lsls	r3, r3, #25
 8009658:	f53f af35 	bmi.w	80094c6 <_svfiprintf_r+0x2a>
 800965c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965e:	b01d      	add	sp, #116	; 0x74
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	ab03      	add	r3, sp, #12
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	4622      	mov	r2, r4
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <_svfiprintf_r+0x1ec>)
 800966c:	a904      	add	r1, sp, #16
 800966e:	4640      	mov	r0, r8
 8009670:	f000 f882 	bl	8009778 <_printf_i>
 8009674:	e7ea      	b.n	800964c <_svfiprintf_r+0x1b0>
 8009676:	bf00      	nop
 8009678:	08009df4 	.word	0x08009df4
 800967c:	08009dfa 	.word	0x08009dfa
 8009680:	08009dfe 	.word	0x08009dfe
 8009684:	00000000 	.word	0x00000000
 8009688:	080093e9 	.word	0x080093e9

0800968c <_printf_common>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	4691      	mov	r9, r2
 8009692:	461f      	mov	r7, r3
 8009694:	688a      	ldr	r2, [r1, #8]
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800969c:	4293      	cmp	r3, r2
 800969e:	bfb8      	it	lt
 80096a0:	4613      	movlt	r3, r2
 80096a2:	f8c9 3000 	str.w	r3, [r9]
 80096a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096aa:	4606      	mov	r6, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	b112      	cbz	r2, 80096b6 <_printf_common+0x2a>
 80096b0:	3301      	adds	r3, #1
 80096b2:	f8c9 3000 	str.w	r3, [r9]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	0699      	lsls	r1, r3, #26
 80096ba:	bf42      	ittt	mi
 80096bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096c0:	3302      	addmi	r3, #2
 80096c2:	f8c9 3000 	strmi.w	r3, [r9]
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	f015 0506 	ands.w	r5, r5, #6
 80096cc:	d107      	bne.n	80096de <_printf_common+0x52>
 80096ce:	f104 0a19 	add.w	sl, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	f8d9 2000 	ldr.w	r2, [r9]
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	42ab      	cmp	r3, r5
 80096dc:	dc28      	bgt.n	8009730 <_printf_common+0xa4>
 80096de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	3300      	adds	r3, #0
 80096e6:	bf18      	it	ne
 80096e8:	2301      	movne	r3, #1
 80096ea:	0692      	lsls	r2, r2, #26
 80096ec:	d42d      	bmi.n	800974a <_printf_common+0xbe>
 80096ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096f2:	4639      	mov	r1, r7
 80096f4:	4630      	mov	r0, r6
 80096f6:	47c0      	blx	r8
 80096f8:	3001      	adds	r0, #1
 80096fa:	d020      	beq.n	800973e <_printf_common+0xb2>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	68e5      	ldr	r5, [r4, #12]
 8009700:	f8d9 2000 	ldr.w	r2, [r9]
 8009704:	f003 0306 	and.w	r3, r3, #6
 8009708:	2b04      	cmp	r3, #4
 800970a:	bf08      	it	eq
 800970c:	1aad      	subeq	r5, r5, r2
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	6922      	ldr	r2, [r4, #16]
 8009712:	bf0c      	ite	eq
 8009714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009718:	2500      	movne	r5, #0
 800971a:	4293      	cmp	r3, r2
 800971c:	bfc4      	itt	gt
 800971e:	1a9b      	subgt	r3, r3, r2
 8009720:	18ed      	addgt	r5, r5, r3
 8009722:	f04f 0900 	mov.w	r9, #0
 8009726:	341a      	adds	r4, #26
 8009728:	454d      	cmp	r5, r9
 800972a:	d11a      	bne.n	8009762 <_printf_common+0xd6>
 800972c:	2000      	movs	r0, #0
 800972e:	e008      	b.n	8009742 <_printf_common+0xb6>
 8009730:	2301      	movs	r3, #1
 8009732:	4652      	mov	r2, sl
 8009734:	4639      	mov	r1, r7
 8009736:	4630      	mov	r0, r6
 8009738:	47c0      	blx	r8
 800973a:	3001      	adds	r0, #1
 800973c:	d103      	bne.n	8009746 <_printf_common+0xba>
 800973e:	f04f 30ff 	mov.w	r0, #4294967295
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	3501      	adds	r5, #1
 8009748:	e7c3      	b.n	80096d2 <_printf_common+0x46>
 800974a:	18e1      	adds	r1, r4, r3
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	2030      	movs	r0, #48	; 0x30
 8009750:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009754:	4422      	add	r2, r4
 8009756:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800975a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800975e:	3302      	adds	r3, #2
 8009760:	e7c5      	b.n	80096ee <_printf_common+0x62>
 8009762:	2301      	movs	r3, #1
 8009764:	4622      	mov	r2, r4
 8009766:	4639      	mov	r1, r7
 8009768:	4630      	mov	r0, r6
 800976a:	47c0      	blx	r8
 800976c:	3001      	adds	r0, #1
 800976e:	d0e6      	beq.n	800973e <_printf_common+0xb2>
 8009770:	f109 0901 	add.w	r9, r9, #1
 8009774:	e7d8      	b.n	8009728 <_printf_common+0x9c>
	...

08009778 <_printf_i>:
 8009778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800977c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009780:	460c      	mov	r4, r1
 8009782:	7e09      	ldrb	r1, [r1, #24]
 8009784:	b085      	sub	sp, #20
 8009786:	296e      	cmp	r1, #110	; 0x6e
 8009788:	4617      	mov	r7, r2
 800978a:	4606      	mov	r6, r0
 800978c:	4698      	mov	r8, r3
 800978e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009790:	f000 80b3 	beq.w	80098fa <_printf_i+0x182>
 8009794:	d822      	bhi.n	80097dc <_printf_i+0x64>
 8009796:	2963      	cmp	r1, #99	; 0x63
 8009798:	d036      	beq.n	8009808 <_printf_i+0x90>
 800979a:	d80a      	bhi.n	80097b2 <_printf_i+0x3a>
 800979c:	2900      	cmp	r1, #0
 800979e:	f000 80b9 	beq.w	8009914 <_printf_i+0x19c>
 80097a2:	2958      	cmp	r1, #88	; 0x58
 80097a4:	f000 8083 	beq.w	80098ae <_printf_i+0x136>
 80097a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097b0:	e032      	b.n	8009818 <_printf_i+0xa0>
 80097b2:	2964      	cmp	r1, #100	; 0x64
 80097b4:	d001      	beq.n	80097ba <_printf_i+0x42>
 80097b6:	2969      	cmp	r1, #105	; 0x69
 80097b8:	d1f6      	bne.n	80097a8 <_printf_i+0x30>
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	0605      	lsls	r5, r0, #24
 80097c0:	f103 0104 	add.w	r1, r3, #4
 80097c4:	d52a      	bpl.n	800981c <_printf_i+0xa4>
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6011      	str	r1, [r2, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da03      	bge.n	80097d6 <_printf_i+0x5e>
 80097ce:	222d      	movs	r2, #45	; 0x2d
 80097d0:	425b      	negs	r3, r3
 80097d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097d6:	486f      	ldr	r0, [pc, #444]	; (8009994 <_printf_i+0x21c>)
 80097d8:	220a      	movs	r2, #10
 80097da:	e039      	b.n	8009850 <_printf_i+0xd8>
 80097dc:	2973      	cmp	r1, #115	; 0x73
 80097de:	f000 809d 	beq.w	800991c <_printf_i+0x1a4>
 80097e2:	d808      	bhi.n	80097f6 <_printf_i+0x7e>
 80097e4:	296f      	cmp	r1, #111	; 0x6f
 80097e6:	d020      	beq.n	800982a <_printf_i+0xb2>
 80097e8:	2970      	cmp	r1, #112	; 0x70
 80097ea:	d1dd      	bne.n	80097a8 <_printf_i+0x30>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	f043 0320 	orr.w	r3, r3, #32
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	e003      	b.n	80097fe <_printf_i+0x86>
 80097f6:	2975      	cmp	r1, #117	; 0x75
 80097f8:	d017      	beq.n	800982a <_printf_i+0xb2>
 80097fa:	2978      	cmp	r1, #120	; 0x78
 80097fc:	d1d4      	bne.n	80097a8 <_printf_i+0x30>
 80097fe:	2378      	movs	r3, #120	; 0x78
 8009800:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009804:	4864      	ldr	r0, [pc, #400]	; (8009998 <_printf_i+0x220>)
 8009806:	e055      	b.n	80098b4 <_printf_i+0x13c>
 8009808:	6813      	ldr	r3, [r2, #0]
 800980a:	1d19      	adds	r1, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6011      	str	r1, [r2, #0]
 8009810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e08c      	b.n	8009936 <_printf_i+0x1be>
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6011      	str	r1, [r2, #0]
 8009820:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009824:	bf18      	it	ne
 8009826:	b21b      	sxthne	r3, r3
 8009828:	e7cf      	b.n	80097ca <_printf_i+0x52>
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	6825      	ldr	r5, [r4, #0]
 800982e:	1d18      	adds	r0, r3, #4
 8009830:	6010      	str	r0, [r2, #0]
 8009832:	0628      	lsls	r0, r5, #24
 8009834:	d501      	bpl.n	800983a <_printf_i+0xc2>
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	e002      	b.n	8009840 <_printf_i+0xc8>
 800983a:	0668      	lsls	r0, r5, #25
 800983c:	d5fb      	bpl.n	8009836 <_printf_i+0xbe>
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	4854      	ldr	r0, [pc, #336]	; (8009994 <_printf_i+0x21c>)
 8009842:	296f      	cmp	r1, #111	; 0x6f
 8009844:	bf14      	ite	ne
 8009846:	220a      	movne	r2, #10
 8009848:	2208      	moveq	r2, #8
 800984a:	2100      	movs	r1, #0
 800984c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009850:	6865      	ldr	r5, [r4, #4]
 8009852:	60a5      	str	r5, [r4, #8]
 8009854:	2d00      	cmp	r5, #0
 8009856:	f2c0 8095 	blt.w	8009984 <_printf_i+0x20c>
 800985a:	6821      	ldr	r1, [r4, #0]
 800985c:	f021 0104 	bic.w	r1, r1, #4
 8009860:	6021      	str	r1, [r4, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d13d      	bne.n	80098e2 <_printf_i+0x16a>
 8009866:	2d00      	cmp	r5, #0
 8009868:	f040 808e 	bne.w	8009988 <_printf_i+0x210>
 800986c:	4665      	mov	r5, ip
 800986e:	2a08      	cmp	r2, #8
 8009870:	d10b      	bne.n	800988a <_printf_i+0x112>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	07db      	lsls	r3, r3, #31
 8009876:	d508      	bpl.n	800988a <_printf_i+0x112>
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	6862      	ldr	r2, [r4, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	bfde      	ittt	le
 8009880:	2330      	movle	r3, #48	; 0x30
 8009882:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009886:	f105 35ff 	addle.w	r5, r5, #4294967295
 800988a:	ebac 0305 	sub.w	r3, ip, r5
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	f8cd 8000 	str.w	r8, [sp]
 8009894:	463b      	mov	r3, r7
 8009896:	aa03      	add	r2, sp, #12
 8009898:	4621      	mov	r1, r4
 800989a:	4630      	mov	r0, r6
 800989c:	f7ff fef6 	bl	800968c <_printf_common>
 80098a0:	3001      	adds	r0, #1
 80098a2:	d14d      	bne.n	8009940 <_printf_i+0x1c8>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	b005      	add	sp, #20
 80098aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ae:	4839      	ldr	r0, [pc, #228]	; (8009994 <_printf_i+0x21c>)
 80098b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098b4:	6813      	ldr	r3, [r2, #0]
 80098b6:	6821      	ldr	r1, [r4, #0]
 80098b8:	1d1d      	adds	r5, r3, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6015      	str	r5, [r2, #0]
 80098be:	060a      	lsls	r2, r1, #24
 80098c0:	d50b      	bpl.n	80098da <_printf_i+0x162>
 80098c2:	07ca      	lsls	r2, r1, #31
 80098c4:	bf44      	itt	mi
 80098c6:	f041 0120 	orrmi.w	r1, r1, #32
 80098ca:	6021      	strmi	r1, [r4, #0]
 80098cc:	b91b      	cbnz	r3, 80098d6 <_printf_i+0x15e>
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	f022 0220 	bic.w	r2, r2, #32
 80098d4:	6022      	str	r2, [r4, #0]
 80098d6:	2210      	movs	r2, #16
 80098d8:	e7b7      	b.n	800984a <_printf_i+0xd2>
 80098da:	064d      	lsls	r5, r1, #25
 80098dc:	bf48      	it	mi
 80098de:	b29b      	uxthmi	r3, r3
 80098e0:	e7ef      	b.n	80098c2 <_printf_i+0x14a>
 80098e2:	4665      	mov	r5, ip
 80098e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80098e8:	fb02 3311 	mls	r3, r2, r1, r3
 80098ec:	5cc3      	ldrb	r3, [r0, r3]
 80098ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098f2:	460b      	mov	r3, r1
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d1f5      	bne.n	80098e4 <_printf_i+0x16c>
 80098f8:	e7b9      	b.n	800986e <_printf_i+0xf6>
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	6825      	ldr	r5, [r4, #0]
 80098fe:	6961      	ldr	r1, [r4, #20]
 8009900:	1d18      	adds	r0, r3, #4
 8009902:	6010      	str	r0, [r2, #0]
 8009904:	0628      	lsls	r0, r5, #24
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	d501      	bpl.n	800990e <_printf_i+0x196>
 800990a:	6019      	str	r1, [r3, #0]
 800990c:	e002      	b.n	8009914 <_printf_i+0x19c>
 800990e:	066a      	lsls	r2, r5, #25
 8009910:	d5fb      	bpl.n	800990a <_printf_i+0x192>
 8009912:	8019      	strh	r1, [r3, #0]
 8009914:	2300      	movs	r3, #0
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	4665      	mov	r5, ip
 800991a:	e7b9      	b.n	8009890 <_printf_i+0x118>
 800991c:	6813      	ldr	r3, [r2, #0]
 800991e:	1d19      	adds	r1, r3, #4
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	681d      	ldr	r5, [r3, #0]
 8009924:	6862      	ldr	r2, [r4, #4]
 8009926:	2100      	movs	r1, #0
 8009928:	4628      	mov	r0, r5
 800992a:	f7f6 fc51 	bl	80001d0 <memchr>
 800992e:	b108      	cbz	r0, 8009934 <_printf_i+0x1bc>
 8009930:	1b40      	subs	r0, r0, r5
 8009932:	6060      	str	r0, [r4, #4]
 8009934:	6863      	ldr	r3, [r4, #4]
 8009936:	6123      	str	r3, [r4, #16]
 8009938:	2300      	movs	r3, #0
 800993a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800993e:	e7a7      	b.n	8009890 <_printf_i+0x118>
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	462a      	mov	r2, r5
 8009944:	4639      	mov	r1, r7
 8009946:	4630      	mov	r0, r6
 8009948:	47c0      	blx	r8
 800994a:	3001      	adds	r0, #1
 800994c:	d0aa      	beq.n	80098a4 <_printf_i+0x12c>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	079b      	lsls	r3, r3, #30
 8009952:	d413      	bmi.n	800997c <_printf_i+0x204>
 8009954:	68e0      	ldr	r0, [r4, #12]
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	4298      	cmp	r0, r3
 800995a:	bfb8      	it	lt
 800995c:	4618      	movlt	r0, r3
 800995e:	e7a3      	b.n	80098a8 <_printf_i+0x130>
 8009960:	2301      	movs	r3, #1
 8009962:	464a      	mov	r2, r9
 8009964:	4639      	mov	r1, r7
 8009966:	4630      	mov	r0, r6
 8009968:	47c0      	blx	r8
 800996a:	3001      	adds	r0, #1
 800996c:	d09a      	beq.n	80098a4 <_printf_i+0x12c>
 800996e:	3501      	adds	r5, #1
 8009970:	68e3      	ldr	r3, [r4, #12]
 8009972:	9a03      	ldr	r2, [sp, #12]
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	42ab      	cmp	r3, r5
 8009978:	dcf2      	bgt.n	8009960 <_printf_i+0x1e8>
 800997a:	e7eb      	b.n	8009954 <_printf_i+0x1dc>
 800997c:	2500      	movs	r5, #0
 800997e:	f104 0919 	add.w	r9, r4, #25
 8009982:	e7f5      	b.n	8009970 <_printf_i+0x1f8>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1ac      	bne.n	80098e2 <_printf_i+0x16a>
 8009988:	7803      	ldrb	r3, [r0, #0]
 800998a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800998e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009992:	e76c      	b.n	800986e <_printf_i+0xf6>
 8009994:	08009e05 	.word	0x08009e05
 8009998:	08009e16 	.word	0x08009e16

0800999c <memmove>:
 800999c:	4288      	cmp	r0, r1
 800999e:	b510      	push	{r4, lr}
 80099a0:	eb01 0302 	add.w	r3, r1, r2
 80099a4:	d807      	bhi.n	80099b6 <memmove+0x1a>
 80099a6:	1e42      	subs	r2, r0, #1
 80099a8:	4299      	cmp	r1, r3
 80099aa:	d00a      	beq.n	80099c2 <memmove+0x26>
 80099ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80099b4:	e7f8      	b.n	80099a8 <memmove+0xc>
 80099b6:	4283      	cmp	r3, r0
 80099b8:	d9f5      	bls.n	80099a6 <memmove+0xa>
 80099ba:	1881      	adds	r1, r0, r2
 80099bc:	1ad2      	subs	r2, r2, r3
 80099be:	42d3      	cmn	r3, r2
 80099c0:	d100      	bne.n	80099c4 <memmove+0x28>
 80099c2:	bd10      	pop	{r4, pc}
 80099c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80099cc:	e7f7      	b.n	80099be <memmove+0x22>
	...

080099d0 <_free_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4605      	mov	r5, r0
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d045      	beq.n	8009a64 <_free_r+0x94>
 80099d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099dc:	1f0c      	subs	r4, r1, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfb8      	it	lt
 80099e2:	18e4      	addlt	r4, r4, r3
 80099e4:	f000 f8d2 	bl	8009b8c <__malloc_lock>
 80099e8:	4a1f      	ldr	r2, [pc, #124]	; (8009a68 <_free_r+0x98>)
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	4610      	mov	r0, r2
 80099ee:	b933      	cbnz	r3, 80099fe <_free_r+0x2e>
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6014      	str	r4, [r2, #0]
 80099f4:	4628      	mov	r0, r5
 80099f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099fa:	f000 b8c8 	b.w	8009b8e <__malloc_unlock>
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	d90c      	bls.n	8009a1c <_free_r+0x4c>
 8009a02:	6821      	ldr	r1, [r4, #0]
 8009a04:	1862      	adds	r2, r4, r1
 8009a06:	4293      	cmp	r3, r2
 8009a08:	bf04      	itt	eq
 8009a0a:	681a      	ldreq	r2, [r3, #0]
 8009a0c:	685b      	ldreq	r3, [r3, #4]
 8009a0e:	6063      	str	r3, [r4, #4]
 8009a10:	bf04      	itt	eq
 8009a12:	1852      	addeq	r2, r2, r1
 8009a14:	6022      	streq	r2, [r4, #0]
 8009a16:	6004      	str	r4, [r0, #0]
 8009a18:	e7ec      	b.n	80099f4 <_free_r+0x24>
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	b10a      	cbz	r2, 8009a24 <_free_r+0x54>
 8009a20:	42a2      	cmp	r2, r4
 8009a22:	d9fa      	bls.n	8009a1a <_free_r+0x4a>
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	1858      	adds	r0, r3, r1
 8009a28:	42a0      	cmp	r0, r4
 8009a2a:	d10b      	bne.n	8009a44 <_free_r+0x74>
 8009a2c:	6820      	ldr	r0, [r4, #0]
 8009a2e:	4401      	add	r1, r0
 8009a30:	1858      	adds	r0, r3, r1
 8009a32:	4282      	cmp	r2, r0
 8009a34:	6019      	str	r1, [r3, #0]
 8009a36:	d1dd      	bne.n	80099f4 <_free_r+0x24>
 8009a38:	6810      	ldr	r0, [r2, #0]
 8009a3a:	6852      	ldr	r2, [r2, #4]
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	4401      	add	r1, r0
 8009a40:	6019      	str	r1, [r3, #0]
 8009a42:	e7d7      	b.n	80099f4 <_free_r+0x24>
 8009a44:	d902      	bls.n	8009a4c <_free_r+0x7c>
 8009a46:	230c      	movs	r3, #12
 8009a48:	602b      	str	r3, [r5, #0]
 8009a4a:	e7d3      	b.n	80099f4 <_free_r+0x24>
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	1821      	adds	r1, r4, r0
 8009a50:	428a      	cmp	r2, r1
 8009a52:	bf04      	itt	eq
 8009a54:	6811      	ldreq	r1, [r2, #0]
 8009a56:	6852      	ldreq	r2, [r2, #4]
 8009a58:	6062      	str	r2, [r4, #4]
 8009a5a:	bf04      	itt	eq
 8009a5c:	1809      	addeq	r1, r1, r0
 8009a5e:	6021      	streq	r1, [r4, #0]
 8009a60:	605c      	str	r4, [r3, #4]
 8009a62:	e7c7      	b.n	80099f4 <_free_r+0x24>
 8009a64:	bd38      	pop	{r3, r4, r5, pc}
 8009a66:	bf00      	nop
 8009a68:	2000403c 	.word	0x2000403c

08009a6c <_malloc_r>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	1ccd      	adds	r5, r1, #3
 8009a70:	f025 0503 	bic.w	r5, r5, #3
 8009a74:	3508      	adds	r5, #8
 8009a76:	2d0c      	cmp	r5, #12
 8009a78:	bf38      	it	cc
 8009a7a:	250c      	movcc	r5, #12
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	4606      	mov	r6, r0
 8009a80:	db01      	blt.n	8009a86 <_malloc_r+0x1a>
 8009a82:	42a9      	cmp	r1, r5
 8009a84:	d903      	bls.n	8009a8e <_malloc_r+0x22>
 8009a86:	230c      	movs	r3, #12
 8009a88:	6033      	str	r3, [r6, #0]
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	bd70      	pop	{r4, r5, r6, pc}
 8009a8e:	f000 f87d 	bl	8009b8c <__malloc_lock>
 8009a92:	4a21      	ldr	r2, [pc, #132]	; (8009b18 <_malloc_r+0xac>)
 8009a94:	6814      	ldr	r4, [r2, #0]
 8009a96:	4621      	mov	r1, r4
 8009a98:	b991      	cbnz	r1, 8009ac0 <_malloc_r+0x54>
 8009a9a:	4c20      	ldr	r4, [pc, #128]	; (8009b1c <_malloc_r+0xb0>)
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	b91b      	cbnz	r3, 8009aa8 <_malloc_r+0x3c>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 f863 	bl	8009b6c <_sbrk_r>
 8009aa6:	6020      	str	r0, [r4, #0]
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f000 f85e 	bl	8009b6c <_sbrk_r>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d124      	bne.n	8009afe <_malloc_r+0x92>
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	6033      	str	r3, [r6, #0]
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 f868 	bl	8009b8e <__malloc_unlock>
 8009abe:	e7e4      	b.n	8009a8a <_malloc_r+0x1e>
 8009ac0:	680b      	ldr	r3, [r1, #0]
 8009ac2:	1b5b      	subs	r3, r3, r5
 8009ac4:	d418      	bmi.n	8009af8 <_malloc_r+0x8c>
 8009ac6:	2b0b      	cmp	r3, #11
 8009ac8:	d90f      	bls.n	8009aea <_malloc_r+0x7e>
 8009aca:	600b      	str	r3, [r1, #0]
 8009acc:	50cd      	str	r5, [r1, r3]
 8009ace:	18cc      	adds	r4, r1, r3
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 f85c 	bl	8009b8e <__malloc_unlock>
 8009ad6:	f104 000b 	add.w	r0, r4, #11
 8009ada:	1d23      	adds	r3, r4, #4
 8009adc:	f020 0007 	bic.w	r0, r0, #7
 8009ae0:	1ac3      	subs	r3, r0, r3
 8009ae2:	d0d3      	beq.n	8009a8c <_malloc_r+0x20>
 8009ae4:	425a      	negs	r2, r3
 8009ae6:	50e2      	str	r2, [r4, r3]
 8009ae8:	e7d0      	b.n	8009a8c <_malloc_r+0x20>
 8009aea:	428c      	cmp	r4, r1
 8009aec:	684b      	ldr	r3, [r1, #4]
 8009aee:	bf16      	itet	ne
 8009af0:	6063      	strne	r3, [r4, #4]
 8009af2:	6013      	streq	r3, [r2, #0]
 8009af4:	460c      	movne	r4, r1
 8009af6:	e7eb      	b.n	8009ad0 <_malloc_r+0x64>
 8009af8:	460c      	mov	r4, r1
 8009afa:	6849      	ldr	r1, [r1, #4]
 8009afc:	e7cc      	b.n	8009a98 <_malloc_r+0x2c>
 8009afe:	1cc4      	adds	r4, r0, #3
 8009b00:	f024 0403 	bic.w	r4, r4, #3
 8009b04:	42a0      	cmp	r0, r4
 8009b06:	d005      	beq.n	8009b14 <_malloc_r+0xa8>
 8009b08:	1a21      	subs	r1, r4, r0
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f000 f82e 	bl	8009b6c <_sbrk_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d0cf      	beq.n	8009ab4 <_malloc_r+0x48>
 8009b14:	6025      	str	r5, [r4, #0]
 8009b16:	e7db      	b.n	8009ad0 <_malloc_r+0x64>
 8009b18:	2000403c 	.word	0x2000403c
 8009b1c:	20004040 	.word	0x20004040

08009b20 <_realloc_r>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	4607      	mov	r7, r0
 8009b24:	4614      	mov	r4, r2
 8009b26:	460e      	mov	r6, r1
 8009b28:	b921      	cbnz	r1, 8009b34 <_realloc_r+0x14>
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b30:	f7ff bf9c 	b.w	8009a6c <_malloc_r>
 8009b34:	b922      	cbnz	r2, 8009b40 <_realloc_r+0x20>
 8009b36:	f7ff ff4b 	bl	80099d0 <_free_r>
 8009b3a:	4625      	mov	r5, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b40:	f000 f826 	bl	8009b90 <_malloc_usable_size_r>
 8009b44:	42a0      	cmp	r0, r4
 8009b46:	d20f      	bcs.n	8009b68 <_realloc_r+0x48>
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	f7ff ff8e 	bl	8009a6c <_malloc_r>
 8009b50:	4605      	mov	r5, r0
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d0f2      	beq.n	8009b3c <_realloc_r+0x1c>
 8009b56:	4631      	mov	r1, r6
 8009b58:	4622      	mov	r2, r4
 8009b5a:	f7ff fc11 	bl	8009380 <memcpy>
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff ff35 	bl	80099d0 <_free_r>
 8009b66:	e7e9      	b.n	8009b3c <_realloc_r+0x1c>
 8009b68:	4635      	mov	r5, r6
 8009b6a:	e7e7      	b.n	8009b3c <_realloc_r+0x1c>

08009b6c <_sbrk_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4c06      	ldr	r4, [pc, #24]	; (8009b88 <_sbrk_r+0x1c>)
 8009b70:	2300      	movs	r3, #0
 8009b72:	4605      	mov	r5, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	f7f8 ff84 	bl	8002a84 <_sbrk>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_sbrk_r+0x1a>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_sbrk_r+0x1a>
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	200044a4 	.word	0x200044a4

08009b8c <__malloc_lock>:
 8009b8c:	4770      	bx	lr

08009b8e <__malloc_unlock>:
 8009b8e:	4770      	bx	lr

08009b90 <_malloc_usable_size_r>:
 8009b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b94:	1f18      	subs	r0, r3, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfbc      	itt	lt
 8009b9a:	580b      	ldrlt	r3, [r1, r0]
 8009b9c:	18c0      	addlt	r0, r0, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_init>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr

08009bac <_fini>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	bf00      	nop
 8009bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	469e      	mov	lr, r3
 8009bb6:	4770      	bx	lr
