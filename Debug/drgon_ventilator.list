
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800876c  0800876c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008774  08008774  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800877c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000434c  20000074  080087f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043c0  080087f0  000243c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b21b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003922  00000000  00000000  0003b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d8  00000000  00000000  0003ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001620  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025040  00000000  00000000  000419e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d1d  00000000  00000000  00066a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc5fe  00000000  00000000  0007a73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156d3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000669c  00000000  00000000  00156db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008530 	.word	0x08008530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008530 	.word	0x08008530

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BuzzerInit>:
 */

#include "buzzer_api.h"

void BuzzerInit(Buzzer_S *buzzer_, TIM_HandleTypeDef *timer_)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	buzzer_->alarm_period_ms 			= DEFAULT_BUZZER_CYCLE_TIME_MS;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000580:	80da      	strh	r2, [r3, #6]
	buzzer_->sound_volume_percentage 	= DEFAULT_BUZZER_DUTY_CYCLE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000588:	60da      	str	r2, [r3, #12]
	buzzer_->sound_frequency_hz 		= DEFAULT_BUZZER_FREQ_HZ;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000590:	809a      	strh	r2, [r3, #4]
	buzzer_->cycle_counter				= 0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	811a      	strh	r2, [r3, #8]
	buzzer_->timer						= timer_;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <BuzzerUpdateParams>:

void BuzzerUpdateParams(Buzzer_S *buzzer_, uint16_t sound_frequency_, float duty_cycle_, uint16_t alarm_frequency_)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	460b      	mov	r3, r1
 80005b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80005ba:	817b      	strh	r3, [r7, #10]
 80005bc:	4613      	mov	r3, r2
 80005be:	813b      	strh	r3, [r7, #8]
	buzzer_->sound_frequency_hz 		= sound_frequency_;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	897a      	ldrh	r2, [r7, #10]
 80005c4:	809a      	strh	r2, [r3, #4]
	buzzer_->sound_volume_percentage 	= duty_cycle_;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	60da      	str	r2, [r3, #12]
	buzzer_->alarm_period_ms 			= 1 / alarm_frequency_ * 1000;
 80005cc:	893b      	ldrh	r3, [r7, #8]
 80005ce:	2201      	movs	r2, #1
 80005d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	0152      	lsls	r2, r2, #5
 80005da:	1ad2      	subs	r2, r2, r3
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	4413      	add	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	80da      	strh	r2, [r3, #6]

	buzzer_->timer->Instance 				= TIM10;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <BuzzerUpdateParams+0x100>)
 80005ee:	601a      	str	r2, [r3, #0]
	buzzer_->timer->Init.Prescaler			= 0;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
	buzzer_->timer->Init.CounterMode 		= TIM_COUNTERMODE_UP;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
	buzzer_->timer->Init.Period 			= (uint32_t) (SYS_CLOCK_FREQUENCY / buzzer_->sound_frequency_hz);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	889b      	ldrh	r3, [r3, #4]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800060c:	eddf 6a28 	vldr	s13, [pc, #160]	; 80006b0 <BuzzerUpdateParams+0x104>
 8000610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800061c:	ee17 2a90 	vmov	r2, s15
 8000620:	60da      	str	r2, [r3, #12]
	buzzer_->timer->Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
	buzzer_->timer->Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(buzzer_->timer) != HAL_OK)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fb3c 	bl	8004cb4 <HAL_TIM_Base_Init>
	{
		//Error_Handler();
	}
	if (HAL_TIM_PWM_Init(buzzer_->timer) != HAL_OK)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fb86 	bl	8004d52 <HAL_TIM_PWM_Init>
	{
		//Error_Handler();
	}

	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode 		= TIM_OCMODE_PWM1;
 8000646:	2360      	movs	r3, #96	; 0x60
 8000648:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse 		= (uint32_t) ((SYS_CLOCK_FREQUENCY / buzzer_->sound_frequency_hz) * buzzer_->sound_volume_percentage);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	889b      	ldrh	r3, [r3, #4]
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000656:	eddf 6a16 	vldr	s13, [pc, #88]	; 80006b0 <BuzzerUpdateParams+0x104>
 800065a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	edd3 7a03 	vldr	s15, [r3, #12]
 8000664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800066c:	ee17 3a90 	vmov	r3, s15
 8000670:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity 	= TIM_OCPOLARITY_HIGH;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNPolarity 	= TIM_OCNPOLARITY_HIGH;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
	sConfigOC.OCFastMode 	= TIM_OCFAST_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCIdleState 	= TIM_OCIDLESTATE_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCNIdleState 	= TIM_OCNIDLESTATE_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_TIM_PWM_Stop(buzzer_->timer, TIM_CHANNEL_1);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fbc9 	bl	8004e24 <HAL_TIM_PWM_Stop>

	if (HAL_TIM_PWM_ConfigChannel(buzzer_->timer, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f107 0114 	add.w	r1, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f004 fe0b 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
	{
		//Error_Handler();
	}
}
 80006a2:	bf00      	nop
 80006a4:	3730      	adds	r7, #48	; 0x30
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40014400 	.word	0x40014400
 80006b0:	4c989680 	.word	0x4c989680

080006b4 <BuzzerStart>:

void BuzzerStart(Buzzer_S *buzzer_)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(buzzer_->timer, TIM_CHANNEL_1);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fb70 	bl	8004da8 <HAL_TIM_PWM_Start>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <BuzzerStop>:

void BuzzerStop(Buzzer_S *buzzer_)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(buzzer_->timer, TIM_CHANNEL_1);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fba0 	bl	8004e24 <HAL_TIM_PWM_Stop>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <DCMotorInit>:
 */

#include "dc_motor_api.h"

void DCMotorInit(DCMotor_S *dc_motor_, TIM_HandleTypeDef *timer_handler_)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	dc_motor_->motor_pwm_ctrl = timer_handler_;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	601a      	str	r2, [r3, #0]
	dc_motor_->pwm_value = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	809a      	strh	r2, [r3, #4]
	dc_motor_->direction_flag = MOTOR_SPIN_STOP;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2202      	movs	r2, #2
 8000706:	719a      	strb	r2, [r3, #6]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DCMotorVoltageSet>:

void DCMotorVoltageSet(DCMotor_S *dc_motor_, float *voltage_)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
    float abs_voltage = 0;
 800071e:	f04f 0300 	mov.w	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24

	if (*voltage_ < 0)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	edd3 7a00 	vldr	s15, [r3]
 800072a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000732:	d50a      	bpl.n	800074a <DCMotorVoltageSet+0x36>
    {
		abs_voltage = -(*voltage_);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	edd3 7a00 	vldr	s15, [r3]
 800073a:	eef1 7a67 	vneg.f32	s15, s15
 800073e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		dc_motor_->direction_flag = MOTOR_SPIN_CW;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	719a      	strb	r2, [r3, #6]
 8000748:	e014      	b.n	8000774 <DCMotorVoltageSet+0x60>
    }
	else if (*voltage_ > 0)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	edd3 7a00 	vldr	s15, [r3]
 8000750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000758:	dd06      	ble.n	8000768 <DCMotorVoltageSet+0x54>
	{
		abs_voltage = *voltage_;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
		dc_motor_->direction_flag = MOTOR_SPIN_CCW;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	719a      	strb	r2, [r3, #6]
 8000766:	e005      	b.n	8000774 <DCMotorVoltageSet+0x60>
	}
	else
	{
		abs_voltage = 0;
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
		dc_motor_->direction_flag = MOTOR_SPIN_STOP;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2202      	movs	r2, #2
 8000772:	719a      	strb	r2, [r3, #6]
	}

	dc_motor_->pwm_value = (uint16_t) (abs_voltage / MAX_MOTOR_VOLTAGE * MAX_MOTOR_PWM_VALUE);
 8000774:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000778:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800077c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000780:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000838 <DCMotorVoltageSet+0x124>
 8000784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800078c:	ee17 3a90 	vmov	r3, s15
 8000790:	b29a      	uxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	809a      	strh	r2, [r3, #4]

	TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000796:	2360      	movs	r3, #96	; 0x60
 8000798:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = dc_motor_->pwm_value - 1;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	889b      	ldrh	r3, [r3, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 fb31 	bl	8004e24 <HAL_TIM_PWM_Stop>

    if (dc_motor_->direction_flag == MOTOR_SPIN_CW)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	799b      	ldrb	r3, [r3, #6]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10a      	bne.n	80007e0 <DCMotorVoltageSet+0xcc>
    {
		HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2110      	movs	r1, #16
 80007ce:	481b      	ldr	r0, [pc, #108]	; (800083c <DCMotorVoltageSet+0x128>)
 80007d0:	f003 f91e 	bl	8003a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2120      	movs	r1, #32
 80007d8:	4818      	ldr	r0, [pc, #96]	; (800083c <DCMotorVoltageSet+0x128>)
 80007da:	f003 f919 	bl	8003a10 <HAL_GPIO_WritePin>
 80007de:	e018      	b.n	8000812 <DCMotorVoltageSet+0xfe>
    }
	else if (dc_motor_->direction_flag == MOTOR_SPIN_CCW)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	799b      	ldrb	r3, [r3, #6]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d10a      	bne.n	80007fe <DCMotorVoltageSet+0xea>
	{
		HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <DCMotorVoltageSet+0x128>)
 80007ee:	f003 f90f 	bl	8003a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2120      	movs	r1, #32
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <DCMotorVoltageSet+0x128>)
 80007f8:	f003 f90a 	bl	8003a10 <HAL_GPIO_WritePin>
 80007fc:	e009      	b.n	8000812 <DCMotorVoltageSet+0xfe>
    }
	else
	{
		HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <DCMotorVoltageSet+0x128>)
 8000804:	f003 f904 	bl	8003a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2120      	movs	r1, #32
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <DCMotorVoltageSet+0x128>)
 800080e:	f003 f8ff 	bl	8003a10 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f107 0108 	add.w	r1, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f004 fd4b 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fabd 	bl	8004da8 <HAL_TIM_PWM_Start>
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	45fa0000 	.word	0x45fa0000
 800083c:	40020c00 	.word	0x40020c00

08000840 <DCMotorStop>:

void DCMotorStop(DCMotor_S *dc_motor_)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fae8 	bl	8004e24 <HAL_TIM_PWM_Stop>
    HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <DCMotorStop+0x30>)
 800085a:	f003 f8d9 	bl	8003a10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <DCMotorStop+0x30>)
 8000864:	f003 f8d4 	bl	8003a10 <HAL_GPIO_WritePin>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020c00 	.word	0x40020c00

08000874 <EncoderInit>:
 */

#include "encoder_api.h"

void EncoderInit(Encoder_S *encoder_, TIM_TypeDef *timer_, EncoderModel_E model_)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	4613      	mov	r3, r2
 8000880:	80fb      	strh	r3, [r7, #6]
	encoder_->model = model_;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	88fa      	ldrh	r2, [r7, #6]
 8000886:	811a      	strh	r2, [r3, #8]
	encoder_->rpm = 0;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
	encoder_->prev_pulse_count = 0;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2200      	movs	r2, #0
 8000894:	815a      	strh	r2, [r3, #10]
	encoder_->timer = timer_;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	60da      	str	r2, [r3, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <UpdateEncoderParams>:

void UpdateEncoderParams(Encoder_S *encoder_, uint16_t timestep_ms_)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
	int32_t delta_count;
	delta_count = ((uint16_t) encoder_->timer->CNT) - encoder_->prev_pulse_count;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	895b      	ldrh	r3, [r3, #10]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	617b      	str	r3, [r7, #20]
	encoder_->prev_pulse_count = (uint16_t) encoder_->timer->CNT;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	815a      	strh	r2, [r3, #10]

	float pulses_per_second;
	pulses_per_second = ((float) delta_count / (float) timestep_ms_) * (float) MILISECONDS_PER_SECOND;
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000978 <UpdateEncoderParams+0xd0>
 80008ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f2:	edc7 7a04 	vstr	s15, [r7, #16]

	float revs_per_minute;
	revs_per_minute = (pulses_per_second / (float) encoder_->model) * (float) SECONDS_PER_MINUTE;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	891b      	ldrh	r3, [r3, #8]
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000902:	edd7 6a04 	vldr	s13, [r7, #16]
 8000906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800090a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800097c <UpdateEncoderParams+0xd4>
 800090e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000912:	edc7 7a03 	vstr	s15, [r7, #12]

	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 8000916:	edd7 7a03 	vldr	s15, [r7, #12]
 800091a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000980 <UpdateEncoderParams+0xd8>
 800091e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	d50b      	bpl.n	8000940 <UpdateEncoderParams+0x98>
 8000928:	edd7 7a03 	vldr	s15, [r7, #12]
 800092c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000984 <UpdateEncoderParams+0xdc>
 8000930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	dd02      	ble.n	8000940 <UpdateEncoderParams+0x98>
	{
		encoder_->rpm = revs_per_minute;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	601a      	str	r2, [r3, #0]
	}

	encoder_->angle = (float)  encoder_->timer->CNT / (float) encoder_->model * DEGREES_PER_REV;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	891b      	ldrh	r3, [r3, #8]
 8000952:	ee07 3a90 	vmov	s15, r3
 8000956:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800095a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800095e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000988 <UpdateEncoderParams+0xe0>
 8000962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	447a0000 	.word	0x447a0000
 800097c:	42700000 	.word	0x42700000
 8000980:	43160000 	.word	0x43160000
 8000984:	c3160000 	.word	0xc3160000
 8000988:	43b40000 	.word	0x43b40000

0800098c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800099c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <vApplicationGetIdleTaskMemory+0x30>)
 80009a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000090 	.word	0x20000090
 80009bc:	200000e4 	.word	0x200000e4

080009c0 <LCDSendCmd>:

#include "stm32f4xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	f023 030f 	bic.w	r3, r3, #15
 80009d2:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	f043 030c 	orr.w	r3, r3, #12
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80009ee:	7bbb      	ldrb	r3, [r7, #14]
 80009f0:	f043 030c 	orr.w	r3, r3, #12
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	791b      	ldrb	r3, [r3, #4]
 8000a0a:	b299      	uxth	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a1b      	ldrb	r3, [r3, #8]
 8000a10:	b29c      	uxth	r4, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	88db      	ldrh	r3, [r3, #6]
 8000a16:	f107 0208 	add.w	r2, r7, #8
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	f003 f949 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}

08000a2a <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 8000a2a:	b590      	push	{r4, r7, lr}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af02      	add	r7, sp, #8
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	f023 030f 	bic.w	r3, r3, #15
 8000a3c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	f043 030d 	orr.w	r3, r3, #13
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	f043 0309 	orr.w	r3, r3, #9
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	f043 030d 	orr.w	r3, r3, #13
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	f043 0309 	orr.w	r3, r3, #9
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	b299      	uxth	r1, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7a1b      	ldrb	r3, [r3, #8]
 8000a7a:	b29c      	uxth	r4, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	88db      	ldrh	r3, [r3, #6]
 8000a80:	f107 0208 	add.w	r2, r7, #8
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	4623      	mov	r3, r4
 8000a88:	f003 f914 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}

08000a94 <LCDClear>:

void LCDClear(LCDDisplay_S *lcd_disp_)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	LCDSendCmd(lcd_disp_, 0x80);
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ff8e 	bl	80009c0 <LCDSendCmd>
	for (int i = 0; i < 70; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e006      	b.n	8000ab8 <LCDClear+0x24>
	{
		LCDSendData(lcd_disp_, ' ');
 8000aaa:	2120      	movs	r1, #32
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffbc 	bl	8000a2a <LCDSendData>
	for (int i = 0; i < 70; i++)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b45      	cmp	r3, #69	; 0x45
 8000abc:	ddf5      	ble.n	8000aaa <LCDClear+0x16>
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <LCDSetCursorPos>:

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <LCDSetCursorPos+0x50>)
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae2:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	f107 0210 	add.w	r2, r7, #16
 8000aee:	4413      	add	r3, r2
 8000af0:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	78bb      	ldrb	r3, [r7, #2]
 8000af8:	4413      	add	r3, r2
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff59 	bl	80009c0 <LCDSendCmd>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08008548 	.word	0x08008548

08000b1c <LCDInit>:

void LCDInit(LCDDisplay_S *lcd_disp_, I2C_HandleTypeDef *i2c_handler_)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	lcd_disp_->i2c_handler = i2c_handler_;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	601a      	str	r2, [r3, #0]
	lcd_disp_->byte_mode = LCD_DISP_4_BYTE_MODE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2204      	movs	r2, #4
 8000b30:	721a      	strb	r2, [r3, #8]
	lcd_disp_->i2c_address = LCD_I2C_ADDRESS;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	224e      	movs	r2, #78	; 0x4e
 8000b36:	711a      	strb	r2, [r3, #4]
	lcd_disp_->i2c_timeout = LCD_DISP_I2C_TIMEOUT_MS;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2264      	movs	r2, #100	; 0x64
 8000b3c:	80da      	strh	r2, [r3, #6]

	HAL_Delay(50);
 8000b3e:	2032      	movs	r0, #50	; 0x32
 8000b40:	f001 fd66 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 8000b44:	2130      	movs	r1, #48	; 0x30
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff3a 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(5);
 8000b4c:	2005      	movs	r0, #5
 8000b4e:	f001 fd5f 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 8000b52:	2130      	movs	r1, #48	; 0x30
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff33 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f001 fd58 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 8000b60:	2130      	movs	r1, #48	; 0x30
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff2c 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(10);
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f001 fd51 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x20);
 8000b6e:	2120      	movs	r1, #32
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff25 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f001 fd4a 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b7c:	2128      	movs	r1, #40	; 0x28
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff1e 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f001 fd43 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff17 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f001 fd3c 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x01); // clear display
 8000b98:	2101      	movs	r1, #1
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff10 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 fd35 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000ba6:	2106      	movs	r1, #6
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff09 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(1);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f001 fd2e 	bl	8002610 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000bb4:	210c      	movs	r1, #12
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff02 	bl	80009c0 <LCDSendCmd>
	HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f001 fd27 	bl	8002610 <HAL_Delay>
	LCDClear(lcd_disp_);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff66 	bl	8000a94 <LCDClear>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <LCDSendString>:

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	while (*str)
 8000bda:	e007      	b.n	8000bec <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	603a      	str	r2, [r7, #0]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff1f 	bl	8000a2a <LCDSendData>
	while (*str)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f3      	bne.n	8000bdc <LCDSendString+0xc>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	b0c0      	sub	sp, #256	; 0x100
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c02:	f001 fcc3 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c06:	f000 f915 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0a:	f000 fc01 	bl	8001410 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0e:	f000 fbdf 	bl	80013d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c12:	f000 f979 	bl	8000f08 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c16:	f000 f9f3 	bl	8001000 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c1a:	f000 fa1f 	bl	800105c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000c1e:	f000 fa53 	bl	80010c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c22:	f000 faab 	bl	800117c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c26:	f000 fb03 	bl	8001230 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000c2a:	f000 fb5b 	bl	80012e4 <MX_TIM10_Init>
  MX_UART5_Init();
 8000c2e:	f000 fba5 	bl	800137c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  DCMotorInit(&dc_motor, &htim5);
 8000c32:	4963      	ldr	r1, [pc, #396]	; (8000dc0 <main+0x1c4>)
 8000c34:	4863      	ldr	r0, [pc, #396]	; (8000dc4 <main+0x1c8>)
 8000c36:	f7ff fd59 	bl	80006ec <DCMotorInit>
  EncoderInit(&motor_encoder, TIM3, MOTOR_MODEL);
 8000c3a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000c3e:	4962      	ldr	r1, [pc, #392]	; (8000dc8 <main+0x1cc>)
 8000c40:	4862      	ldr	r0, [pc, #392]	; (8000dcc <main+0x1d0>)
 8000c42:	f7ff fe17 	bl	8000874 <EncoderInit>
  EncoderInit(&arm_encoder, TIM4, ARM_MODEL);
 8000c46:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000c4a:	4961      	ldr	r1, [pc, #388]	; (8000dd0 <main+0x1d4>)
 8000c4c:	4861      	ldr	r0, [pc, #388]	; (8000dd4 <main+0x1d8>)
 8000c4e:	f7ff fe11 	bl	8000874 <EncoderInit>
  LCDInit(&lcd_display, &hi2c1);
 8000c52:	4961      	ldr	r1, [pc, #388]	; (8000dd8 <main+0x1dc>)
 8000c54:	4861      	ldr	r0, [pc, #388]	; (8000ddc <main+0x1e0>)
 8000c56:	f7ff ff61 	bl	8000b1c <LCDInit>
  PotControlsInit(pot_controls_a);
 8000c5a:	4861      	ldr	r0, [pc, #388]	; (8000de0 <main+0x1e4>)
 8000c5c:	f000 ff37 	bl	8001ace <PotControlsInit>
  BuzzerInit(&buzzer, &htim10);
 8000c60:	4960      	ldr	r1, [pc, #384]	; (8000de4 <main+0x1e8>)
 8000c62:	4861      	ldr	r0, [pc, #388]	; (8000de8 <main+0x1ec>)
 8000c64:	f7ff fc84 	bl	8000570 <BuzzerInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of initTask */
  osThreadDef(initTask, initTaskFn, osPriorityRealtime, 0, 128);
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <main+0x1f0>)
 8000c6a:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(initTask), NULL);
 8000c7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 fb17 	bl	80062b6 <osThreadCreate>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b59      	ldr	r3, [pc, #356]	; (8000df0 <main+0x1f4>)
 8000c8c:	601a      	str	r2, [r3, #0]

  /* definition and creation of mainRoutine */
  osThreadDef(mainRoutine, mainRoutineFn, osPriorityHigh, 0, 128);
 8000c8e:	4b59      	ldr	r3, [pc, #356]	; (8000df4 <main+0x1f8>)
 8000c90:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000c94:	461d      	mov	r5, r3
 8000c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainRoutineHandle = osThreadCreate(osThread(mainRoutine), NULL);
 8000ca2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fb04 	bl	80062b6 <osThreadCreate>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <main+0x1fc>)
 8000cb2:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUI */
  osThreadDef(displayUI, displayUIFn, osPriorityHigh, 0, 128);
 8000cb4:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <main+0x200>)
 8000cb6:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUIHandle = osThreadCreate(osThread(displayUI), NULL);
 8000cc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f005 faf1 	bl	80062b6 <osThreadCreate>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <main+0x204>)
 8000cd8:	601a      	str	r2, [r3, #0]

  /* definition and creation of motorEncoder */
  osThreadDef(motorEncoder, motorEncoderFn, osPriorityRealtime, 0, 128);
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <main+0x208>)
 8000cdc:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorEncoderHandle = osThreadCreate(osThread(motorEncoder), NULL);
 8000cee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f005 fade 	bl	80062b6 <osThreadCreate>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <main+0x20c>)
 8000cfe:	601a      	str	r2, [r3, #0]

  /* definition and creation of armEncoder */
  osThreadDef(armEncoder, armEncoderFn, osPriorityRealtime, 0, 128);
 8000d00:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <main+0x210>)
 8000d02:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000d06:	461d      	mov	r5, r3
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armEncoderHandle = osThreadCreate(osThread(armEncoder), NULL);
 8000d14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f005 facb 	bl	80062b6 <osThreadCreate>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <main+0x214>)
 8000d24:	601a      	str	r2, [r3, #0]

  /* definition and creation of diagnosticsSrv */
  osThreadDef(diagnosticsSrv, diagnosticsSrvFn, osPriorityHigh, 0, 128);
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <main+0x218>)
 8000d28:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000d2c:	461d      	mov	r5, r3
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diagnosticsSrvHandle = osThreadCreate(osThread(diagnosticsSrv), NULL);
 8000d3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fab8 	bl	80062b6 <osThreadCreate>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <main+0x21c>)
 8000d4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of userInput */
  osThreadDef(userInput, userInputFn, osPriorityHigh, 0, 128);
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <main+0x220>)
 8000d4e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d52:	461d      	mov	r5, r3
 8000d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userInputHandle = osThreadCreate(osThread(userInput), NULL);
 8000d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f005 faa5 	bl	80062b6 <osThreadCreate>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <main+0x224>)
 8000d70:	601a      	str	r2, [r3, #0]

  /* definition and creation of alarmMonitor */
  osThreadDef(alarmMonitor, alarmMonitorFn, osPriorityRealtime, 0, 128);
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <main+0x228>)
 8000d74:	f107 0420 	add.w	r4, r7, #32
 8000d78:	461d      	mov	r5, r3
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmMonitorHandle = osThreadCreate(osThread(alarmMonitor), NULL);
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 fa92 	bl	80062b6 <osThreadCreate>
 8000d92:	4602      	mov	r2, r0
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <main+0x22c>)
 8000d96:	601a      	str	r2, [r3, #0]

  /* definition and creation of pressureSnsr */
  osThreadDef(pressureSnsr, pressureSnsrFn, osPriorityHigh, 0, 128);
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <main+0x230>)
 8000d9a:	1d3c      	adds	r4, r7, #4
 8000d9c:	461d      	mov	r5, r3
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSnsrHandle = osThreadCreate(osThread(pressureSnsr), NULL);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fa81 	bl	80062b6 <osThreadCreate>
 8000db4:	4602      	mov	r2, r0
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <main+0x234>)
 8000db8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dba:	f005 fa65 	bl	8006288 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x1c2>
 8000dc0:	20004134 	.word	0x20004134
 8000dc4:	20004290 	.word	0x20004290
 8000dc8:	40000400 	.word	0x40000400
 8000dcc:	2000427c 	.word	0x2000427c
 8000dd0:	40000800 	.word	0x40000800
 8000dd4:	20004118 	.word	0x20004118
 8000dd8:	20004084 	.word	0x20004084
 8000ddc:	20004128 	.word	0x20004128
 8000de0:	20004364 	.word	0x20004364
 8000de4:	200040d8 	.word	0x200040d8
 8000de8:	2000426c 	.word	0x2000426c
 8000dec:	0800855c 	.word	0x0800855c
 8000df0:	20004374 	.word	0x20004374
 8000df4:	08008584 	.word	0x08008584
 8000df8:	20004300 	.word	0x20004300
 8000dfc:	080085ac 	.word	0x080085ac
 8000e00:	2000429c 	.word	0x2000429c
 8000e04:	080085d8 	.word	0x080085d8
 8000e08:	2000428c 	.word	0x2000428c
 8000e0c:	08008600 	.word	0x08008600
 8000e10:	20004298 	.word	0x20004298
 8000e14:	0800862c 	.word	0x0800862c
 8000e18:	20004040 	.word	0x20004040
 8000e1c:	08008654 	.word	0x08008654
 8000e20:	2000403c 	.word	0x2000403c
 8000e24:	08008680 	.word	0x08008680
 8000e28:	20004308 	.word	0x20004308
 8000e2c:	080086ac 	.word	0x080086ac
 8000e30:	20004304 	.word	0x20004304

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f006 ff6f 	bl	8007d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fa03 	bl	80042c4 <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec4:	f000 fdfc 	bl	8001ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000eda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ede:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fc5c 	bl	80047a4 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ef2:	f000 fde5 	bl	8001ac0 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f1c:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f2c:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f48:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <MX_ADC1_Init+0xf4>)
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f54:	2204      	movs	r2, #4
 8000f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f66:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f68:	f001 fb74 	bl	8002654 <HAL_ADC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fda5 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f76:	2306      	movs	r3, #6
 8000f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000f88:	f001 fcb8 	bl	80028fc <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f92:	f000 fd95 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f96:	2307      	movs	r3, #7
 8000f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000fa4:	f001 fcaa 	bl	80028fc <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fae:	f000 fd87 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000fc0:	f001 fc9c 	bl	80028fc <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000fca:	f000 fd79 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0xec>)
 8000fdc:	f001 fc8e 	bl	80028fc <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fe6:	f000 fd6b 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200041f4 	.word	0x200041f4
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	0f000001 	.word	0x0f000001

08001000 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C1_Init+0x50>)
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <MX_I2C1_Init+0x54>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_I2C1_Init+0x50>)
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_I2C1_Init+0x58>)
 800100e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_I2C1_Init+0x50>)
 800101e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_I2C1_Init+0x50>)
 800103e:	f002 fd01 	bl	8003a44 <HAL_I2C_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001048:	f000 fd3a 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20004084 	.word	0x20004084
 8001054:	40005400 	.word	0x40005400
 8001058:	000186a0 	.word	0x000186a0

0800105c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_SPI1_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a6:	220a      	movs	r2, #10
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010ac:	f003 fd9e 	bl	8004bec <HAL_SPI_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80010b6:	f000 fd03 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000430c 	.word	0x2000430c
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 fe25 	bl	8007d26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_TIM3_Init+0xac>)
 80010e6:	4a24      	ldr	r2, [pc, #144]	; (8001178 <MX_TIM3_Init+0xb0>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_TIM3_Init+0xac>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_TIM3_Init+0xac>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_TIM3_Init+0xac>)
 80010f8:	f240 623f 	movw	r2, #1599	; 0x63f
 80010fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM3_Init+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_TIM3_Init+0xac>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800110a:	2303      	movs	r3, #3
 800110c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001122:	2301      	movs	r3, #1
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_TIM3_Init+0xac>)
 8001136:	f003 fecd 	bl	8004ed4 <HAL_TIM_Encoder_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001140:	f000 fcbe 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <MX_TIM3_Init+0xac>)
 8001152:	f004 fc15 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800115c:	f000 fcb0 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, htim3.Channel);
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <MX_TIM3_Init+0xac>)
 8001162:	7f1b      	ldrb	r3, [r3, #28]
 8001164:	4619      	mov	r1, r3
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM3_Init+0xac>)
 8001168:	f003 ff46 	bl	8004ff8 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	; 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20004174 	.word	0x20004174
 8001178:	40000400 	.word	0x40000400

0800117c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	; 0x30
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2224      	movs	r2, #36	; 0x24
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fdcb 	bl	8007d26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_TIM4_Init+0xac>)
 800119a:	4a24      	ldr	r2, [pc, #144]	; (800122c <MX_TIM4_Init+0xb0>)
 800119c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_TIM4_Init+0xac>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_TIM4_Init+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2400-1;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_TIM4_Init+0xac>)
 80011ac:	f640 125f 	movw	r2, #2399	; 0x95f
 80011b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_TIM4_Init+0xac>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_TIM4_Init+0xac>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011be:	2303      	movs	r3, #3
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d6:	2301      	movs	r3, #1
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	480f      	ldr	r0, [pc, #60]	; (8001228 <MX_TIM4_Init+0xac>)
 80011ea:	f003 fe73 	bl	8004ed4 <HAL_TIM_Encoder_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 fc64 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_TIM4_Init+0xac>)
 8001206:	f004 fbbb 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001210:	f000 fc56 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim4, htim4.Channel);
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <MX_TIM4_Init+0xac>)
 8001216:	7f1b      	ldrb	r3, [r3, #28]
 8001218:	4619      	mov	r1, r3
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM4_Init+0xac>)
 800121c:	f003 feec 	bl	8004ff8 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3730      	adds	r7, #48	; 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20004044 	.word	0x20004044
 800122c:	40000800 	.word	0x40000800

08001230 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <MX_TIM5_Init+0xac>)
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <MX_TIM5_Init+0xb0>)
 8001256:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_TIM5_Init+0xac>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_TIM5_Init+0xac>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8000-1;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_TIM5_Init+0xac>)
 8001266:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800126a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_TIM5_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM5_Init+0xac>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001278:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM5_Init+0xac>)
 800127a:	f003 fd6a 	bl	8004d52 <HAL_TIM_PWM_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001284:	f000 fc1c 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4619      	mov	r1, r3
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <MX_TIM5_Init+0xac>)
 8001298:	f004 fb72 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80012a2:	f000 fc0d 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a6:	2360      	movs	r3, #96	; 0x60
 80012a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2204      	movs	r2, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM5_Init+0xac>)
 80012be:	f003 fffb 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80012c8:	f000 fbfa 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM5_Init+0xac>)
 80012ce:	f000 fe85 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20004134 	.word	0x20004134
 80012e0:	40000c00 	.word	0x40000c00

080012e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM10_Init+0x90>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <MX_TIM10_Init+0x94>)
 8001300:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM10_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM10_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM10_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_TIM10_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM10_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001320:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_TIM10_Init+0x90>)
 8001322:	f003 fcc7 	bl	8004cb4 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 fbc8 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <MX_TIM10_Init+0x90>)
 8001332:	f003 fd0e 	bl	8004d52 <HAL_TIM_PWM_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 fbc0 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM10_Init+0x90>)
 8001358:	f003 ffae 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001362:	f000 fbad 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM10_Init+0x90>)
 8001368:	f000 fe38 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200040d8 	.word	0x200040d8
 8001378:	40014400 	.word	0x40014400

0800137c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_UART5_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_UART5_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_UART5_Init+0x4c>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_UART5_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_UART5_Init+0x4c>)
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_UART5_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_UART5_Init+0x4c>)
 80013a4:	220c      	movs	r2, #12
 80013a6:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_UART5_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_UART5_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_UART5_Init+0x4c>)
 80013b6:	f004 fb73 	bl	8005aa0 <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 80013c0:	f000 fb7e 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200041b4 	.word	0x200041b4
 80013cc:	40005000 	.word	0x40005000

080013d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_DMA_Init+0x3c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <MX_DMA_Init+0x3c>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_DMA_Init+0x3c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2038      	movs	r0, #56	; 0x38
 80013f8:	f001 fdd8 	bl	8002fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013fc:	2038      	movs	r0, #56	; 0x38
 80013fe:	f001 fdf1 	bl	8002fe4 <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <MX_GPIO_Init+0x154>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <MX_GPIO_Init+0x154>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <MX_GPIO_Init+0x154>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <MX_GPIO_Init+0x154>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a46      	ldr	r2, [pc, #280]	; (8001564 <MX_GPIO_Init+0x154>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <MX_GPIO_Init+0x154>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <MX_GPIO_Init+0x154>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <MX_GPIO_Init+0x154>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <MX_GPIO_Init+0x154>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <MX_GPIO_Init+0x154>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a38      	ldr	r2, [pc, #224]	; (8001564 <MX_GPIO_Init+0x154>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <MX_GPIO_Init+0x154>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <MX_GPIO_Init+0x154>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a31      	ldr	r2, [pc, #196]	; (8001564 <MX_GPIO_Init+0x154>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_GPIO_Init+0x154>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_GPIO_Init+0x154>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <MX_GPIO_Init+0x154>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <MX_GPIO_Init+0x154>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AlarmLED3_Pin|AlarmLED4_Pin|AlarmLED5_Pin|AlarmLED6_Pin 
 80014ce:	2200      	movs	r2, #0
 80014d0:	217f      	movs	r1, #127	; 0x7f
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <MX_GPIO_Init+0x158>)
 80014d4:	f002 fa9c 	bl	8003a10 <HAL_GPIO_WritePin>
                          |AlarmLED7_Pin|AlarmLED1_Pin|AlarmLED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AlarmLED8_Pin|SysOnLED_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2103      	movs	r1, #3
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <MX_GPIO_Init+0x15c>)
 80014de:	f002 fa97 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorCW_Pin|MotorCCW_Pin|PSnsrCSADCOut_Pin|PSnsrCSEEOut_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	21f0      	movs	r1, #240	; 0xf0
 80014e6:	4822      	ldr	r0, [pc, #136]	; (8001570 <MX_GPIO_Init+0x160>)
 80014e8:	f002 fa92 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AlarmLED3_Pin AlarmLED4_Pin AlarmLED5_Pin AlarmLED6_Pin 
                           AlarmLED7_Pin AlarmLED1_Pin AlarmLED2_Pin */
  GPIO_InitStruct.Pin = AlarmLED3_Pin|AlarmLED4_Pin|AlarmLED5_Pin|AlarmLED6_Pin 
 80014ec:	237f      	movs	r3, #127	; 0x7f
 80014ee:	61fb      	str	r3, [r7, #28]
                          |AlarmLED7_Pin|AlarmLED1_Pin|AlarmLED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <MX_GPIO_Init+0x158>)
 8001504:	f002 f8ea 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : AlarmLED8_Pin SysOnLED_Pin */
  GPIO_InitStruct.Pin = AlarmLED8_Pin|SysOnLED_Pin;
 8001508:	2303      	movs	r3, #3
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_GPIO_Init+0x15c>)
 8001520:	f002 f8dc 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : StartStopBtnIn_Pin EditBtnIn_Pin CalibrationBtnIn_Pin AlarmSilenceBtnIn_Pin */
  GPIO_InitStruct.Pin = StartStopBtnIn_Pin|EditBtnIn_Pin|CalibrationBtnIn_Pin|AlarmSilenceBtnIn_Pin;
 8001524:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_GPIO_Init+0x164>)
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <MX_GPIO_Init+0x158>)
 800153a:	f002 f8cf 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorCW_Pin MotorCCW_Pin PSnsrCSADCOut_Pin PSnsrCSEEOut_Pin */
  GPIO_InitStruct.Pin = MotorCW_Pin|MotorCCW_Pin|PSnsrCSADCOut_Pin|PSnsrCSEEOut_Pin;
 800153e:	23f0      	movs	r3, #240	; 0xf0
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_GPIO_Init+0x160>)
 8001556:	f002 f8c1 	bl	80036dc <HAL_GPIO_Init>

}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40021000 	.word	0x40021000
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	10110000 	.word	0x10110000

08001578 <initTaskFn>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_initTaskFn */
void initTaskFn(void const * argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	VentilatorInit(&ventilator);
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <initTaskFn+0x3c>)
 8001582:	f000 fec3 	bl	800230c <VentilatorInit>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2105      	movs	r1, #5
 800158a:	2028      	movs	r0, #40	; 0x28
 800158c:	f001 fd0e 	bl	8002fac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001590:	2028      	movs	r0, #40	; 0x28
 8001592:	f001 fd27 	bl	8002fe4 <HAL_NVIC_EnableIRQ>

	osThreadResume(userInputHandle);
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <initTaskFn+0x40>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fef0 	bl	8006380 <osThreadResume>
	osThreadTerminate(initTaskHandle);
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <initTaskFn+0x44>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fed2 	bl	800634e <osThreadTerminate>
  /* USER CODE END 5 */ 
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000423c 	.word	0x2000423c
 80015b8:	2000403c 	.word	0x2000403c
 80015bc:	20004374 	.word	0x20004374

080015c0 <mainRoutineFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mainRoutineFn */
void mainRoutineFn(void const * argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainRoutineFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80015c8:	f004 fe65 	bl	8006296 <osKernelSysTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		switch(ventilator.main_state_machine)
 80015d0:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <mainRoutineFn+0x220>)
 80015d2:	7f1b      	ldrb	r3, [r3, #28]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d006      	beq.n	80015e8 <mainRoutineFn+0x28>
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f000 80ae 	beq.w	800173c <mainRoutineFn+0x17c>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80ef 	beq.w	80017c4 <mainRoutineFn+0x204>
 80015e6:	e0f4      	b.n	80017d2 <mainRoutineFn+0x212>
		{
			case MAIN_STATE_SETUP:
				switch(ventilator.setup_state_machine)
 80015e8:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <mainRoutineFn+0x220>)
 80015ea:	7f5b      	ldrb	r3, [r3, #29]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d006      	beq.n	8001600 <mainRoutineFn+0x40>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	f000 8082 	beq.w	80016fc <mainRoutineFn+0x13c>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8098 	beq.w	800172e <mainRoutineFn+0x16e>
 80015fe:	e09d      	b.n	800173c <mainRoutineFn+0x17c>
				{
					case SETUP_STATE_CALIBRATION:
						switch(ventilator.calibration_state_machine)
 8001600:	4b77      	ldr	r3, [pc, #476]	; (80017e0 <mainRoutineFn+0x220>)
 8001602:	7fdb      	ldrb	r3, [r3, #31]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b03      	cmp	r3, #3
 8001608:	d878      	bhi.n	80016fc <mainRoutineFn+0x13c>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <mainRoutineFn+0x50>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	08001621 	.word	0x08001621
 8001614:	08001673 	.word	0x08001673
 8001618:	0800167b 	.word	0x0800167b
 800161c:	080016e9 	.word	0x080016e9
						{
							case CALIBRATION_STATE_UNWIND:
								if (ventilator.cycle_counter == 0)
 8001620:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <mainRoutineFn+0x220>)
 8001622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <mainRoutineFn+0x82>
								{
									DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_neg);
 800162a:	496e      	ldr	r1, [pc, #440]	; (80017e4 <mainRoutineFn+0x224>)
 800162c:	486e      	ldr	r0, [pc, #440]	; (80017e8 <mainRoutineFn+0x228>)
 800162e:	f7ff f871 	bl	8000714 <DCMotorVoltageSet>
									ventilator.cycle_counter++;
 8001632:	4b6b      	ldr	r3, [pc, #428]	; (80017e0 <mainRoutineFn+0x220>)
 8001634:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001636:	b29b      	uxth	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <mainRoutineFn+0x220>)
 800163e:	849a      	strh	r2, [r3, #36]	; 0x24
								{
									DCMotorStop(&dc_motor);
									ventilator.cycle_counter = 0;
									ventilator.calibration_state_machine = CALIBRATION_STATE_WAIT_AMBU;
								}
								break;
 8001640:	e05c      	b.n	80016fc <mainRoutineFn+0x13c>
								else if (ventilator.cycle_counter < (CALIBRATION_UNWIND_TIME_MS / MAIN_ROUTINE_CYCLE_TIME_MS))
 8001642:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <mainRoutineFn+0x220>)
 8001644:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001646:	b29b      	uxth	r3, r3
 8001648:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800164c:	d207      	bcs.n	800165e <mainRoutineFn+0x9e>
									ventilator.cycle_counter++;
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <mainRoutineFn+0x220>)
 8001650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001652:	b29b      	uxth	r3, r3
 8001654:	3301      	adds	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <mainRoutineFn+0x220>)
 800165a:	849a      	strh	r2, [r3, #36]	; 0x24
								break;
 800165c:	e04e      	b.n	80016fc <mainRoutineFn+0x13c>
									DCMotorStop(&dc_motor);
 800165e:	4862      	ldr	r0, [pc, #392]	; (80017e8 <mainRoutineFn+0x228>)
 8001660:	f7ff f8ee 	bl	8000840 <DCMotorStop>
									ventilator.cycle_counter = 0;
 8001664:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <mainRoutineFn+0x220>)
 8001666:	2200      	movs	r2, #0
 8001668:	849a      	strh	r2, [r3, #36]	; 0x24
									ventilator.calibration_state_machine = CALIBRATION_STATE_WAIT_AMBU;
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <mainRoutineFn+0x220>)
 800166c:	2201      	movs	r2, #1
 800166e:	77da      	strb	r2, [r3, #31]
								break;
 8001670:	e044      	b.n	80016fc <mainRoutineFn+0x13c>
							case CALIBRATION_STATE_WAIT_AMBU:
								DCMotorStop(&dc_motor);
 8001672:	485d      	ldr	r0, [pc, #372]	; (80017e8 <mainRoutineFn+0x228>)
 8001674:	f7ff f8e4 	bl	8000840 <DCMotorStop>
								break;
 8001678:	e040      	b.n	80016fc <mainRoutineFn+0x13c>
							case CALIBRATION_STATE_WIND:
								if (ventilator.cycle_counter == 0)
 800167a:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <mainRoutineFn+0x220>)
 800167c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d110      	bne.n	80016a6 <mainRoutineFn+0xe6>
								{
									ventilator.arm_encoder_init_count = arm_encoder.timer->CNT;
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <mainRoutineFn+0x22c>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	4a55      	ldr	r2, [pc, #340]	; (80017e0 <mainRoutineFn+0x220>)
 800168c:	60d3      	str	r3, [r2, #12]
									DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_pos);
 800168e:	4958      	ldr	r1, [pc, #352]	; (80017f0 <mainRoutineFn+0x230>)
 8001690:	4855      	ldr	r0, [pc, #340]	; (80017e8 <mainRoutineFn+0x228>)
 8001692:	f7ff f83f 	bl	8000714 <DCMotorVoltageSet>
									ventilator.cycle_counter++;
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <mainRoutineFn+0x220>)
 8001698:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800169a:	b29b      	uxth	r3, r3
 800169c:	3301      	adds	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <mainRoutineFn+0x220>)
 80016a2:	849a      	strh	r2, [r3, #36]	; 0x24
								}
								else
								{
									ventilator.cycle_counter++;
								}
								break;
 80016a4:	e02a      	b.n	80016fc <mainRoutineFn+0x13c>
								else if (arm_encoder.timer->CNT != ventilator.arm_encoder_init_count)
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <mainRoutineFn+0x22c>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <mainRoutineFn+0x220>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d011      	beq.n	80016d8 <mainRoutineFn+0x118>
									DCMotorStop(&dc_motor);
 80016b4:	484c      	ldr	r0, [pc, #304]	; (80017e8 <mainRoutineFn+0x228>)
 80016b6:	f7ff f8c3 	bl	8000840 <DCMotorStop>
									motor_encoder.timer->CNT = 0;
 80016ba:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <mainRoutineFn+0x234>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
									arm_encoder.timer->CNT = 0;
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <mainRoutineFn+0x22c>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
									ventilator.cycle_counter = 0;
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <mainRoutineFn+0x220>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	849a      	strh	r2, [r3, #36]	; 0x24
									ventilator.calibration_state_machine = CALIBRATION_STATE_STOP;
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <mainRoutineFn+0x220>)
 80016d2:	2203      	movs	r2, #3
 80016d4:	77da      	strb	r2, [r3, #31]
								break;
 80016d6:	e011      	b.n	80016fc <mainRoutineFn+0x13c>
									ventilator.cycle_counter++;
 80016d8:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <mainRoutineFn+0x220>)
 80016da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016dc:	b29b      	uxth	r3, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <mainRoutineFn+0x220>)
 80016e4:	849a      	strh	r2, [r3, #36]	; 0x24
								break;
 80016e6:	e009      	b.n	80016fc <mainRoutineFn+0x13c>
							case CALIBRATION_STATE_STOP:
								DCMotorStop(&dc_motor);
 80016e8:	483f      	ldr	r0, [pc, #252]	; (80017e8 <mainRoutineFn+0x228>)
 80016ea:	f7ff f8a9 	bl	8000840 <DCMotorStop>
								ventilator.setup_state_machine = SETUP_STATE_STANDBY;
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <mainRoutineFn+0x220>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	775a      	strb	r2, [r3, #29]
								ventilator.main_state_machine = MAIN_STATE_STANDBY;
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <mainRoutineFn+0x220>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	771a      	strb	r2, [r3, #28]
								break;
 80016fa:	bf00      	nop
						}
					case SETUP_STATE_MANUAL_SPIN:
						switch(ventilator.manual_spin_state_machine)
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <mainRoutineFn+0x220>)
 80016fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d004      	beq.n	8001712 <mainRoutineFn+0x152>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d007      	beq.n	800171c <mainRoutineFn+0x15c>
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00a      	beq.n	8001726 <mainRoutineFn+0x166>
 8001710:	e00d      	b.n	800172e <mainRoutineFn+0x16e>
						{
							case MANUAL_SPIN_STATE_UNWIND:
								DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_neg);
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <mainRoutineFn+0x224>)
 8001714:	4834      	ldr	r0, [pc, #208]	; (80017e8 <mainRoutineFn+0x228>)
 8001716:	f7fe fffd 	bl	8000714 <DCMotorVoltageSet>
								break;
 800171a:	e008      	b.n	800172e <mainRoutineFn+0x16e>
							case MANUAL_SPIN_STATE_WIND:
								DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_pos);
 800171c:	4934      	ldr	r1, [pc, #208]	; (80017f0 <mainRoutineFn+0x230>)
 800171e:	4832      	ldr	r0, [pc, #200]	; (80017e8 <mainRoutineFn+0x228>)
 8001720:	f7fe fff8 	bl	8000714 <DCMotorVoltageSet>
								break;
 8001724:	e003      	b.n	800172e <mainRoutineFn+0x16e>
							case MANUAL_SPIN_STATE_STOP:
								DCMotorStop(&dc_motor);
 8001726:	4830      	ldr	r0, [pc, #192]	; (80017e8 <mainRoutineFn+0x228>)
 8001728:	f7ff f88a 	bl	8000840 <DCMotorStop>
								break;
 800172c:	bf00      	nop
						}
					case SETUP_STATE_STANDBY:
						DCMotorStop(&dc_motor);
 800172e:	482e      	ldr	r0, [pc, #184]	; (80017e8 <mainRoutineFn+0x228>)
 8001730:	f7ff f886 	bl	8000840 <DCMotorStop>
						ventilator.cycle_counter = 0;
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <mainRoutineFn+0x220>)
 8001736:	2200      	movs	r2, #0
 8001738:	849a      	strh	r2, [r3, #36]	; 0x24
						break;
 800173a:	bf00      	nop
				}
			case MAIN_STATE_RESPIRATION:
				switch(ventilator.respiration_state_machine)
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <mainRoutineFn+0x220>)
 800173e:	7f9b      	ldrb	r3, [r3, #30]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d004      	beq.n	8001750 <mainRoutineFn+0x190>
 8001746:	2b02      	cmp	r3, #2
 8001748:	d01a      	beq.n	8001780 <mainRoutineFn+0x1c0>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d032      	beq.n	80017b4 <mainRoutineFn+0x1f4>
 800174e:	e039      	b.n	80017c4 <mainRoutineFn+0x204>
				{
					case RESPIRATION_STATE_FORCED_VOLUME:
						switch(ventilator.forced_volume_state_machine)
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <mainRoutineFn+0x220>)
 8001752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b05      	cmp	r3, #5
 800175a:	d830      	bhi.n	80017be <mainRoutineFn+0x1fe>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <mainRoutineFn+0x1a4>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	0800177d 	.word	0x0800177d
 8001768:	0800177d 	.word	0x0800177d
 800176c:	0800177d 	.word	0x0800177d
 8001770:	0800177d 	.word	0x0800177d
 8001774:	0800177d 	.word	0x0800177d
 8001778:	0800177d 	.word	0x0800177d
							case FORCED_VOLUME_STATE_EXHALE:
								break;
							case FORCED_VOLUME_STATE_EXHALE_PAUSE:
								break;
							case FORCED_VOLUME_STATE_STANDBY:
								break;
 800177c:	bf00      	nop
						}
						break;
 800177e:	e01e      	b.n	80017be <mainRoutineFn+0x1fe>
					case RESPIRATION_STATE_ASSISTED_VOLUME:
						switch(ventilator.assisted_volume_state_machine)
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <mainRoutineFn+0x220>)
 8001782:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b06      	cmp	r3, #6
 800178a:	d81a      	bhi.n	80017c2 <mainRoutineFn+0x202>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <mainRoutineFn+0x1d4>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017b1 	.word	0x080017b1
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017b1 	.word	0x080017b1
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017b1 	.word	0x080017b1
 80017a8:	080017b1 	.word	0x080017b1
 80017ac:	080017b1 	.word	0x080017b1
							case ASSISTED_VOLUME_STATE_EXHALE:
								break;
							case ASSISTED_VOLUME_STATE_EXHALE_PAUSE:
								break;
							case ASSISTED_VOLUME_STATE_STANDBY:
								break;
 80017b0:	bf00      	nop
						}
						break;
 80017b2:	e006      	b.n	80017c2 <mainRoutineFn+0x202>
						 * 			ventilator.respiration_state_machine = RESPIRATION_STATE_FORCED_VOLUME;
						 * 			ventilator.forced_volume_state_machine = FORCED_VOLUME_STATE_GENERATE_TRAJECTORY;
						 * 	}
						 * 	ventilator.parameters_changed = 0;
						 */
						ventilator.parameters_changed = 0;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <mainRoutineFn+0x220>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						break;
 80017bc:	e002      	b.n	80017c4 <mainRoutineFn+0x204>
						break;
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <mainRoutineFn+0x204>
						break;
 80017c2:	bf00      	nop
				}
			case MAIN_STATE_STANDBY:
				DCMotorStop(&dc_motor);
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <mainRoutineFn+0x228>)
 80017c6:	f7ff f83b 	bl	8000840 <DCMotorStop>
				ventilator.cycle_counter = 0;
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <mainRoutineFn+0x220>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	849a      	strh	r2, [r3, #36]	; 0x24
				break;
 80017d0:	bf00      	nop
		}
		osDelayUntil(&PreviousWakeTime, MAIN_ROUTINE_CYCLE_TIME_MS);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	210a      	movs	r1, #10
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fdf3 	bl	80063c4 <osDelayUntil>
		switch(ventilator.main_state_machine)
 80017de:	e6f7      	b.n	80015d0 <mainRoutineFn+0x10>
 80017e0:	2000423c 	.word	0x2000423c
 80017e4:	20004250 	.word	0x20004250
 80017e8:	20004290 	.word	0x20004290
 80017ec:	20004118 	.word	0x20004118
 80017f0:	2000424c 	.word	0x2000424c
 80017f4:	2000427c 	.word	0x2000427c

080017f8 <displayUIFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayUIFn */
void displayUIFn(void const * argument)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b08d      	sub	sp, #52	; 0x34
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUIFn */
	char buffer[32];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001800:	f004 fd49 	bl	8006296 <osKernelSysTick>
 8001804:	4603      	mov	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]
	osThreadResume(userInputHandle);
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <displayUIFn+0xd4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fdb7 	bl	8006380 <osThreadResume>

  /* Infinite loop */
	for(;;)
	{
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	482e      	ldr	r0, [pc, #184]	; (80018d0 <displayUIFn+0xd8>)
 8001818:	f7ff f956 	bl	8000ac8 <LCDSetCursorPos>
		sprintf(buffer, "I:E %03u  T %06lu", ventilator.i_e_ratio, HAL_GetTick());
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <displayUIFn+0xdc>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461c      	mov	r4, r3
 8001822:	f000 fee9 	bl	80025f8 <HAL_GetTick>
 8001826:	4603      	mov	r3, r0
 8001828:	f107 0010 	add.w	r0, r7, #16
 800182c:	4622      	mov	r2, r4
 800182e:	492a      	ldr	r1, [pc, #168]	; (80018d8 <displayUIFn+0xe0>)
 8001830:	f006 fa82 	bl	8007d38 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	4825      	ldr	r0, [pc, #148]	; (80018d0 <displayUIFn+0xd8>)
 800183c:	f7ff f9c8 	bl	8000bd0 <LCDSendString>

		LCDSetCursorPos(&lcd_display, 1, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2101      	movs	r1, #1
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <displayUIFn+0xd8>)
 8001846:	f7ff f93f 	bl	8000ac8 <LCDSetCursorPos>
		sprintf(buffer, "VOL %03u T4 %03lu", ventilator.tidal_volume, TIM4->CNT);
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <displayUIFn+0xdc>)
 800184c:	889b      	ldrh	r3, [r3, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <displayUIFn+0xe4>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f107 0010 	add.w	r0, r7, #16
 8001858:	4921      	ldr	r1, [pc, #132]	; (80018e0 <displayUIFn+0xe8>)
 800185a:	f006 fa6d 	bl	8007d38 <siprintf>
		LCDSendString(&lcd_display, buffer);
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	481a      	ldr	r0, [pc, #104]	; (80018d0 <displayUIFn+0xd8>)
 8001866:	f7ff f9b3 	bl	8000bd0 <LCDSendString>

		LCDSetCursorPos(&lcd_display, 2, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2102      	movs	r1, #2
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <displayUIFn+0xd8>)
 8001870:	f7ff f92a 	bl	8000ac8 <LCDSetCursorPos>
		sprintf(buffer, "PRS %03u T3 %03lu", ventilator.pressure_level_alarm_value, TIM3->CNT);
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <displayUIFn+0xdc>)
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	461a      	mov	r2, r3
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <displayUIFn+0xec>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f107 0010 	add.w	r0, r7, #16
 8001882:	4919      	ldr	r1, [pc, #100]	; (80018e8 <displayUIFn+0xf0>)
 8001884:	f006 fa58 	bl	8007d38 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	4810      	ldr	r0, [pc, #64]	; (80018d0 <displayUIFn+0xd8>)
 8001890:	f7ff f99e 	bl	8000bd0 <LCDSendString>

		LCDSetCursorPos(&lcd_display, 3, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2103      	movs	r1, #3
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <displayUIFn+0xd8>)
 800189a:	f7ff f915 	bl	8000ac8 <LCDSetCursorPos>
		sprintf(buffer, "RFQ %03u", ventilator.respiration_frequency);
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <displayUIFn+0xdc>)
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	461a      	mov	r2, r3
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4910      	ldr	r1, [pc, #64]	; (80018ec <displayUIFn+0xf4>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f006 fa44 	bl	8007d38 <siprintf>
		LCDSendString(&lcd_display, buffer);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <displayUIFn+0xd8>)
 80018b8:	f7ff f98a 	bl	8000bd0 <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_CYCLE_TIME_MS);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2164      	movs	r1, #100	; 0x64
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fd7e 	bl	80063c4 <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 0, 0);
 80018c8:	e7a3      	b.n	8001812 <displayUIFn+0x1a>
 80018ca:	bf00      	nop
 80018cc:	2000403c 	.word	0x2000403c
 80018d0:	20004128 	.word	0x20004128
 80018d4:	2000423c 	.word	0x2000423c
 80018d8:	080086c8 	.word	0x080086c8
 80018dc:	40000800 	.word	0x40000800
 80018e0:	080086dc 	.word	0x080086dc
 80018e4:	40000400 	.word	0x40000400
 80018e8:	080086f0 	.word	0x080086f0
 80018ec:	08008704 	.word	0x08008704

080018f0 <motorEncoderFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorEncoderFn */
void motorEncoderFn(void const * argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motorEncoderFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80018f8:	f004 fccd 	bl	8006296 <osKernelSysTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, MOTOR_ENCODER_CYCLE_TIME_MS);
 8001900:	210a      	movs	r1, #10
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <motorEncoderFn+0x28>)
 8001904:	f7fe ffd0 	bl	80008a8 <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, MOTOR_ENCODER_CYCLE_TIME_MS);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	210a      	movs	r1, #10
 800190e:	4618      	mov	r0, r3
 8001910:	f004 fd58 	bl	80063c4 <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, MOTOR_ENCODER_CYCLE_TIME_MS);
 8001914:	e7f4      	b.n	8001900 <motorEncoderFn+0x10>
 8001916:	bf00      	nop
 8001918:	2000427c 	.word	0x2000427c

0800191c <armEncoderFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_armEncoderFn */
void armEncoderFn(void const * argument)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN armEncoderFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001924:	f004 fcb7 	bl	8006296 <osKernelSysTick>
 8001928:	4603      	mov	r3, r0
 800192a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, ARM_ENCODER_CYCLE_TIME_MS);
 800192c:	210a      	movs	r1, #10
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <armEncoderFn+0x28>)
 8001930:	f7fe ffba 	bl	80008a8 <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, ARM_ENCODER_CYCLE_TIME_MS);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	210a      	movs	r1, #10
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fd42 	bl	80063c4 <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, ARM_ENCODER_CYCLE_TIME_MS);
 8001940:	e7f4      	b.n	800192c <armEncoderFn+0x10>
 8001942:	bf00      	nop
 8001944:	2000427c 	.word	0x2000427c

08001948 <diagnosticsSrvFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diagnosticsSrvFn */
void diagnosticsSrvFn(void const * argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diagnosticsSrvFn */
	osThreadSuspend(diagnosticsSrvHandle);
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <diagnosticsSrvFn+0x2c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f004 fd06 	bl	8006366 <osThreadSuspend>
	//char buffer[21];
	uint32_t PreviousWakeTime = osKernelSysTick();
 800195a:	f004 fc9c 	bl	8006296 <osKernelSysTick>
 800195e:	4603      	mov	r3, r0
 8001960:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if (ventilator.main_state_machine == MAIN_STATE_RESPIRATION)
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <diagnosticsSrvFn+0x30>)
 8001964:	7f1b      	ldrb	r3, [r3, #28]
		{
			//sprintf(buffer, "%04lu,%04lu,%04lu,%04u", HAL_GetTick(), TIM3->CNT, TIM4->CNT, dc_motor.pwm_value);
			//HAL_UART_Transmit(&huart5, (uint8_t *) buffer, sizeof(buffer), 100);
		}
		osDelayUntil(&PreviousWakeTime, DIAGNOSTICS_SRV_CYCLE_TIME_MS);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	2164      	movs	r1, #100	; 0x64
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fd29 	bl	80063c4 <osDelayUntil>
		if (ventilator.main_state_machine == MAIN_STATE_RESPIRATION)
 8001972:	e7f6      	b.n	8001962 <diagnosticsSrvFn+0x1a>
 8001974:	20004040 	.word	0x20004040
 8001978:	2000423c 	.word	0x2000423c

0800197c <userInputFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_userInputFn */
void userInputFn(void const * argument)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN userInputFn */
  /* Infinite loop */
	for(;;)
	{
	  uint16_t adc_values[TOTAL_CONTROLS_COUNT] = {0,0,0,0};
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, TOTAL_CONTROLS_COUNT);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2204      	movs	r2, #4
 8001994:	4619      	mov	r1, r3
 8001996:	480b      	ldr	r0, [pc, #44]	; (80019c4 <userInputFn+0x48>)
 8001998:	f000 fea0 	bl	80026dc <HAL_ADC_Start_DMA>
	  PotControlsValueUpdate(pot_controls_a, adc_values);
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	4619      	mov	r1, r3
 80019a2:	4809      	ldr	r0, [pc, #36]	; (80019c8 <userInputFn+0x4c>)
 80019a4:	f000 f8ac 	bl	8001b00 <PotControlsValueUpdate>
	  UpdateVentilatorParams(&ventilator, pot_controls_a);
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <userInputFn+0x4c>)
 80019aa:	4808      	ldr	r0, [pc, #32]	; (80019cc <userInputFn+0x50>)
 80019ac:	f000 fcf2 	bl	8002394 <UpdateVentilatorParams>
	  ventilator.parameters_changed = 1;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <userInputFn+0x50>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  osThreadSuspend(userInputHandle);
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <userInputFn+0x54>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fcd2 	bl	8006366 <osThreadSuspend>
	{
 80019c2:	e7df      	b.n	8001984 <userInputFn+0x8>
 80019c4:	200041f4 	.word	0x200041f4
 80019c8:	20004364 	.word	0x20004364
 80019cc:	2000423c 	.word	0x2000423c
 80019d0:	2000403c 	.word	0x2000403c

080019d4 <alarmMonitorFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alarmMonitorFn */
void alarmMonitorFn(void const * argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN alarmMonitorFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80019dc:	f004 fc5b 	bl	8006296 <osKernelSysTick>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]
	BuzzerUpdateParams(&buzzer, 400, 0.5, 2);
 80019e4:	2202      	movs	r2, #2
 80019e6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80019ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <alarmMonitorFn+0xa4>)
 80019f0:	f7fe fddc 	bl	80005ac <BuzzerUpdateParams>

  /* Infinite loop */
	for(;;)
	{
		switch(ventilator.ventilator_alarms_config)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <alarmMonitorFn+0xa8>)
 80019f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <alarmMonitorFn+0x32>
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d02e      	beq.n	8001a62 <alarmMonitorFn+0x8e>
 8001a04:	e031      	b.n	8001a6a <alarmMonitorFn+0x96>
		{
			case REPORT_ALARMS:
				if (buzzer.cycle_counter < (buzzer.alarm_period_ms / (2 * ALARM_MONITOR_CYCLE_TIME_MS)) )
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a08:	891a      	ldrh	r2, [r3, #8]
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a0c:	88db      	ldrh	r3, [r3, #6]
 8001a0e:	491c      	ldr	r1, [pc, #112]	; (8001a80 <alarmMonitorFn+0xac>)
 8001a10:	fba1 1303 	umull	r1, r3, r1, r3
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d209      	bcs.n	8001a30 <alarmMonitorFn+0x5c>
				{
					BuzzerStart(&buzzer);
 8001a1c:	4816      	ldr	r0, [pc, #88]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a1e:	f7fe fe49 	bl	80006b4 <BuzzerStart>
					buzzer.cycle_counter++;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a24:	891b      	ldrh	r3, [r3, #8]
 8001a26:	3301      	adds	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a2c:	811a      	strh	r2, [r3, #8]
				}
				else
				{
					buzzer.cycle_counter = 0;
				}
				break;
 8001a2e:	e01c      	b.n	8001a6a <alarmMonitorFn+0x96>
				else if (buzzer.cycle_counter < (buzzer.alarm_period_ms / (ALARM_MONITOR_CYCLE_TIME_MS)) )
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a32:	891a      	ldrh	r2, [r3, #8]
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a36:	88db      	ldrh	r3, [r3, #6]
 8001a38:	4911      	ldr	r1, [pc, #68]	; (8001a80 <alarmMonitorFn+0xac>)
 8001a3a:	fba1 1303 	umull	r1, r3, r1, r3
 8001a3e:	08db      	lsrs	r3, r3, #3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d209      	bcs.n	8001a5a <alarmMonitorFn+0x86>
					BuzzerStop(&buzzer);
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a48:	f7fe fe42 	bl	80006d0 <BuzzerStop>
					buzzer.cycle_counter++;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a4e:	891b      	ldrh	r3, [r3, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a56:	811a      	strh	r2, [r3, #8]
				break;
 8001a58:	e007      	b.n	8001a6a <alarmMonitorFn+0x96>
					buzzer.cycle_counter = 0;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	811a      	strh	r2, [r3, #8]
				break;
 8001a60:	e003      	b.n	8001a6a <alarmMonitorFn+0x96>
			case SILENCE_ALARMS:
				BuzzerStop(&buzzer);
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <alarmMonitorFn+0xa4>)
 8001a64:	f7fe fe34 	bl	80006d0 <BuzzerStop>
				break;
 8001a68:	bf00      	nop
		}
		osDelayUntil(&PreviousWakeTime, ALARM_MONITOR_CYCLE_TIME_MS);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	210a      	movs	r1, #10
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 fca7 	bl	80063c4 <osDelayUntil>
		switch(ventilator.ventilator_alarms_config)
 8001a76:	e7bd      	b.n	80019f4 <alarmMonitorFn+0x20>
 8001a78:	2000426c 	.word	0x2000426c
 8001a7c:	2000423c 	.word	0x2000423c
 8001a80:	cccccccd 	.word	0xcccccccd

08001a84 <pressureSnsrFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pressureSnsrFn */
void pressureSnsrFn(void const * argument)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pressureSnsrFn */
  /* Infinite loop */
  for(;;)
  {
	  osThreadTerminate(pressureSnsrHandle);
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <pressureSnsrFn+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fc5c 	bl	800634e <osThreadTerminate>
 8001a96:	e7f9      	b.n	8001a8c <pressureSnsrFn+0x8>
 8001a98:	20004304 	.word	0x20004304

08001a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aae:	f000 fd8f 	bl	80025d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40010000 	.word	0x40010000

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PotControlsInit>:
 */

#include "potentiometer_api.h"

void PotControlsInit(volatile Potentiometer_S *pot_array_)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	pot_array_[TIDAL_VOLUME_CONTROL].rank 				= PIN_A0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
	pot_array_[I_E_RATIO_CONTROL].rank 					= PIN_A1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	701a      	strb	r2, [r3, #0]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank 		= PIN_A2;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
	pot_array_[PRESSURE_VALUE_CONTROL].rank 			= PIN_A3;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	330c      	adds	r3, #12
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <PotControlsValueUpdate>:

void PotControlsValueUpdate(volatile Potentiometer_S *pot_array_, uint16_t *adc_values_)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	pot_array_[TIDAL_VOLUME_CONTROL].value 				= adc_values_[pot_array_[TIDAL_VOLUME_CONTROL].rank];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	805a      	strh	r2, [r3, #2]
	pot_array_[I_E_RATIO_CONTROL].value 				= adc_values_[pot_array_[I_E_RATIO_CONTROL].rank];
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	8812      	ldrh	r2, [r2, #0]
 8001b30:	805a      	strh	r2, [r3, #2]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].value 	= adc_values_[pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3308      	adds	r3, #8
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	441a      	add	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3308      	adds	r3, #8
 8001b44:	8812      	ldrh	r2, [r2, #0]
 8001b46:	805a      	strh	r2, [r3, #2]
	pot_array_[PRESSURE_VALUE_CONTROL].value 			= adc_values_[pot_array_[PRESSURE_VALUE_CONTROL].rank];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	330c      	adds	r3, #12
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	441a      	add	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	8812      	ldrh	r2, [r2, #0]
 8001b5c:	805a      	strh	r2, [r3, #2]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_MspInit+0x54>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	210f      	movs	r1, #15
 8001bae:	f06f 0001 	mvn.w	r0, #1
 8001bb2:	f001 f9fb 	bl	8002fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_ADC_MspInit+0x110>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d171      	bne.n	8001cca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VolumePotIn_Pin|IERatioPotIn_Pin;
 8001c3a:	23c0      	movs	r3, #192	; 0xc0
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4823      	ldr	r0, [pc, #140]	; (8001cdc <HAL_ADC_MspInit+0x118>)
 8001c4e:	f001 fd45 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FrequencyPotIn_Pin|PressureLvlPotIn_Pin;
 8001c52:	2303      	movs	r3, #3
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c66:	f001 fd39 	bl	80036dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_ADC_MspInit+0x124>)
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cb0:	f001 f9a6 	bl	8003000 <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001cba:	f7ff ff01 	bl	8001ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	200042a0 	.word	0x200042a0
 8001ce8:	40026410 	.word	0x40026410

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_I2C_MspInit+0x84>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d12b      	bne.n	8001d66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_I2C_MspInit+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_I2C_MspInit+0x88>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_I2C_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2e:	2312      	movs	r3, #18
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <HAL_I2C_MspInit+0x8c>)
 8001d46:	f001 fcc9 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_I2C_MspInit+0x88>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_I2C_MspInit+0x88>)
 8001d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_I2C_MspInit+0x88>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40005400 	.word	0x40005400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020400 	.word	0x40020400

08001d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <HAL_SPI_MspInit+0xc0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d149      	bne.n	8001e32 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001df2:	2330      	movs	r3, #48	; 0x30
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <HAL_SPI_MspInit+0xc8>)
 8001e0e:	f001 fc65 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e12:	2330      	movs	r3, #48	; 0x30
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_SPI_MspInit+0xcc>)
 8001e2e:	f001 fc55 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40013000 	.word	0x40013000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12c      	bne.n	8001ec8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481e      	ldr	r0, [pc, #120]	; (8001f3c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ec2:	f001 fc0b 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ec6:	e031      	b.n	8001f2c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12c      	bne.n	8001f2c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ArmEncoderA_Pin|ArmEncoderB_Pin;
 8001f0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001f28:	f001 fbd8 	bl	80036dc <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40020c00 	.word	0x40020c00

08001f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_PWM_MspInit+0x40>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_TIM_PWM_MspInit+0x40>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_TIM_PWM_MspInit+0x40>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40000c00 	.word	0x40000c00
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_TIM_Base_MspInit+0x48>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d115      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2019      	movs	r0, #25
 8001fc0:	f000 fff4 	bl	8002fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fc4:	2019      	movs	r0, #25
 8001fc6:	f001 f80d 	bl	8002fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_TIM_MspPostInit+0xb0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11e      	bne.n	800203c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 800201a:	2302      	movs	r3, #2
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800202a:	2302      	movs	r3, #2
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4817      	ldr	r0, [pc, #92]	; (8002094 <HAL_TIM_MspPostInit+0xb8>)
 8002036:	f001 fb51 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800203a:	e023      	b.n	8002084 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_TIM_MspPostInit+0xbc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d11e      	bne.n	8002084 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_TIM_MspPostInit+0xb4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BuzzerPWMOut_Pin;
 8002062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002074:	2303      	movs	r3, #3
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BuzzerPWMOut_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <HAL_TIM_MspPostInit+0xc0>)
 8002080:	f001 fb2c 	bl	80036dc <HAL_GPIO_Init>
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000
 8002098:	40014400 	.word	0x40014400
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a28      	ldr	r2, [pc, #160]	; (8002160 <HAL_UART_MspInit+0xc0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d14a      	bne.n	8002158 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_UART_MspInit+0xc4>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a26      	ldr	r2, [pc, #152]	; (8002164 <HAL_UART_MspInit+0xc4>)
 80020cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_UART_MspInit+0xc4>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_UART_MspInit+0xc4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <HAL_UART_MspInit+0xc4>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_UART_MspInit+0xc4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_UART_MspInit+0xc4>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a18      	ldr	r2, [pc, #96]	; (8002164 <HAL_UART_MspInit+0xc4>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_UART_MspInit+0xc4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002120:	2301      	movs	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002128:	2308      	movs	r3, #8
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	480d      	ldr	r0, [pc, #52]	; (8002168 <HAL_UART_MspInit+0xc8>)
 8002134:	f001 fad2 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002138:	2304      	movs	r3, #4
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002140:	2301      	movs	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002148:	2308      	movs	r3, #8
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	; (800216c <HAL_UART_MspInit+0xcc>)
 8002154:	f001 fac2 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40005000 	.word	0x40005000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	2019      	movs	r0, #25
 8002186:	f000 ff11 	bl	8002fac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800218a:	2019      	movs	r0, #25
 800218c:	f000 ff2a 	bl	8002fe4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_InitTick+0xa4>)
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_InitTick+0xa4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6453      	str	r3, [r2, #68]	; 0x44
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_InitTick+0xa4>)
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021ac:	f107 0210 	add.w	r2, r7, #16
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fce6 	bl	8004b88 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021bc:	f002 fcd0 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 80021c0:	4603      	mov	r3, r0
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <HAL_InitTick+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3b01      	subs	r3, #1
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_InitTick+0xac>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_InitTick+0xb0>)
 80021d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_InitTick+0xac>)
 80021dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_InitTick+0xac>)
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_InitTick+0xac>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_InitTick+0xac>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <HAL_InitTick+0xac>)
 80021f6:	f002 fd5d 	bl	8004cb4 <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <HAL_InitTick+0xac>)
 8002202:	f002 fd82 	bl	8004d0a <HAL_TIM_Base_Start_IT>
 8002206:	4603      	mov	r3, r0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3730      	adds	r7, #48	; 0x30
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	431bde83 	.word	0x431bde83
 800221c:	20004378 	.word	0x20004378
 8002220:	40010000 	.word	0x40010000

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800225e:	f002 ff22 	bl	80050a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002262:	4803      	ldr	r0, [pc, #12]	; (8002270 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002264:	f002 ff1f 	bl	80050a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20004378 	.word	0x20004378
 8002270:	200040d8 	.word	0x200040d8

08002274 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <DMA2_Stream0_IRQHandler+0x10>)
 800227a:	f000 ffc7 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200042a0 	.word	0x200042a0

08002288 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_sbrk+0x50>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x16>
		heap_end = &end;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <_sbrk+0x50>)
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <_sbrk+0x54>)
 800229c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <_sbrk+0x50>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <_sbrk+0x50>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	466a      	mov	r2, sp
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d907      	bls.n	80022c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022b2:	f005 fd03 	bl	8007cbc <__errno>
 80022b6:	4602      	mov	r2, r0
 80022b8:	230c      	movs	r3, #12
 80022ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	e006      	b.n	80022d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <_sbrk+0x50>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <_sbrk+0x50>)
 80022cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200002e4 	.word	0x200002e4
 80022dc:	200043c0 	.word	0x200043c0

080022e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <SystemInit+0x28>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <SystemInit+0x28>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SystemInit+0x28>)
 80022f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fa:	609a      	str	r2, [r3, #8]
#endif
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <VentilatorInit>:
 */

#include "ventilator_api.h"

void VentilatorInit(Ventilator_S *ventilator_)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	ventilator_->i_e_ratio 						= I_E_RATIO_1_1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
	ventilator_->respiration_frequency 			= (RespirationFrequency_T) RESPIRATION_FREQ_MIN_VAL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2208      	movs	r2, #8
 800231e:	705a      	strb	r2, [r3, #1]
	ventilator_->pressure_level_alarm_value 	= (PressureValue_T) PRESSURE_LEVEL_ALARM_MIN_VAL;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	709a      	strb	r2, [r3, #2]
	ventilator_->tidal_volume 					= (TidalVolume_T) TIDAL_VOLUME_MIN_VAL;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	809a      	strh	r2, [r3, #4]

	ventilator_->arm_encoder_init_count 		= 0;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
	ventilator_->debug_motor_voltage_pos		= MOTOR_DEBUG_VOLTAGE_VALUE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002338:	611a      	str	r2, [r3, #16]
	ventilator_->debug_motor_voltage_neg		= -MOTOR_DEBUG_VOLTAGE_VALUE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002340:	615a      	str	r2, [r3, #20]

	ventilator_->ventilator_alarms 				= NO_ALARMS;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ventilator_->ventilator_alarms_config		= REPORT_ALARMS;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	ventilator_->main_state_machine 			= MAIN_STATE_STANDBY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
	ventilator_->setup_state_machine 			= SETUP_STATE_STANDBY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	775a      	strb	r2, [r3, #29]
	ventilator_->calibration_state_machine 		= CALIBRATION_STATE_STOP;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2203      	movs	r2, #3
 8002362:	77da      	strb	r2, [r3, #31]
	ventilator_->manual_spin_state_machine 		= MANUAL_SPIN_STATE_STOP;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2020 	strb.w	r2, [r3, #32]
	ventilator_->respiration_state_machine 		= RESPIRATION_STATE_STANDBY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	779a      	strb	r2, [r3, #30]
	ventilator_->forced_volume_state_machine 	= FORCED_VOLUME_STATE_STANDBY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ventilator_->assisted_volume_state_machine 	= ASSISTED_VOLUME_STATE_STANDBY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ventilator_->cycle_counter					= 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <UpdateVentilatorParams>:

void UpdateVentilatorParams(Ventilator_S *ventilator_, Potentiometer_S *potentiometer_)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
	if (potentiometer_[I_E_RATIO_CONTROL].value < (ADC_MAX_VAL / 4))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3304      	adds	r3, #4
 80023a2:	885b      	ldrh	r3, [r3, #2]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d203      	bcs.n	80023b4 <UpdateVentilatorParams+0x20>
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_1;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e018      	b.n	80023e6 <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < (ADC_MAX_VAL / 4 * 2))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	3304      	adds	r3, #4
 80023b8:	885b      	ldrh	r3, [r3, #2]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c0:	d203      	bcs.n	80023ca <UpdateVentilatorParams+0x36>
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_2;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e00d      	b.n	80023e6 <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < (ADC_MAX_VAL / 4 * 3))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3304      	adds	r3, #4
 80023ce:	885b      	ldrh	r3, [r3, #2]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023d6:	d203      	bcs.n	80023e0 <UpdateVentilatorParams+0x4c>
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_3;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2203      	movs	r2, #3
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e002      	b.n	80023e6 <UpdateVentilatorParams+0x52>
	}
	else
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_4;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2204      	movs	r2, #4
 80023e4:	701a      	strb	r2, [r3, #0]
	}

	ventilator_->tidal_volume 				= (TidalVolume_T) (((TIDAL_VOLUME_MAX_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[TIDAL_VOLUME_CONTROL].value));
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	885b      	ldrh	r3, [r3, #2]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f4:	eeb4 7a09 	vmov.f32	s14, #73	; 0x3e480000  0.1953125
 80023f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002400:	ee17 3a90 	vmov	r3, s15
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	809a      	strh	r2, [r3, #4]
	ventilator_->respiration_frequency 		= (RespirationFrequency_T) (((RESPIRATION_FREQ_MAX_VAL - RESPIRATION_FREQ_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[RESPIRATORY_FREQUENCY_CONTROL].value) + RESPIRATION_FREQ_MIN_VAL);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3308      	adds	r3, #8
 800240e:	885b      	ldrh	r3, [r3, #2]
 8002410:	b29b      	uxth	r3, r3
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002520 <UpdateVentilatorParams+0x18c>
 800241e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002422:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800242a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800242e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002432:	793b      	ldrb	r3, [r7, #4]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	705a      	strb	r2, [r3, #1]
	ventilator_->pressure_level_alarm_value = (PressureValue_T) (((PRESSURE_LEVEL_ALARM_MAX_VAL - PRESSURE_LEVEL_ALARM_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[PRESSURE_VALUE_CONTROL].value) + PRESSURE_LEVEL_ALARM_MIN_VAL);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	330c      	adds	r3, #12
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	b29b      	uxth	r3, r3
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002524 <UpdateVentilatorParams+0x190>
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002528 <UpdateVentilatorParams+0x194>
 8002456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800245a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800245e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002462:	793b      	ldrb	r3, [r7, #4]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	709a      	strb	r2, [r3, #2]

	ventilator_->respiration_period_ms		= (int) ((60000.0f / (float) ventilator_->respiration_frequency));
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002476:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800252c <UpdateVentilatorParams+0x198>
 800247a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002482:	ee17 3a90 	vmov	r3, s15
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	80da      	strh	r2, [r3, #6]
	ventilator_->inhalation_period_ms		= (int) ((1.0f / ((float) ventilator_->i_e_ratio + 1.0f)) * ventilator_->respiration_period_ms);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800249c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	88db      	ldrh	r3, [r3, #6]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024bc:	ee17 3a90 	vmov	r3, s15
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	811a      	strh	r2, [r3, #8]
	ventilator_->exhalation_period_ms		= (int) ((float) ventilator_->i_e_ratio * ventilator_->inhalation_period_ms);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	891b      	ldrh	r3, [r3, #8]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e6:	ee17 3a90 	vmov	r3, s15
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	815a      	strh	r2, [r3, #10]
	ventilator_->end_angle 					= (((float) ventilator_->tidal_volume) / TIDAL_VOLUME_MAX_VAL * ARM_SWEEP_ANGLE);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002530 <UpdateVentilatorParams+0x19c>
 8002500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002504:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002534 <UpdateVentilatorParams+0x1a0>
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	3c000000 	.word	0x3c000000
 8002524:	3ca00000 	.word	0x3ca00000
 8002528:	00000000 	.word	0x00000000
 800252c:	476a6000 	.word	0x476a6000
 8002530:	44480000 	.word	0x44480000
 8002534:	41accccd 	.word	0x41accccd

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800253c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800253e:	e003      	b.n	8002548 <LoopCopyDataInit>

08002540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002546:	3104      	adds	r1, #4

08002548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800254c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800254e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002550:	d3f6      	bcc.n	8002540 <CopyDataInit>
  ldr  r2, =_sbss
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002554:	e002      	b.n	800255c <LoopFillZerobss>

08002556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002558:	f842 3b04 	str.w	r3, [r2], #4

0800255c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800255e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002560:	d3f9      	bcc.n	8002556 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002562:	f7ff febd 	bl	80022e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f005 fbaf 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7fe fb47 	bl	8000bfc <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002570:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002574:	0800877c 	.word	0x0800877c
  ldr  r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800257c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002580:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002584:	200043c0 	.word	0x200043c0

08002588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_Init+0x40>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_Init+0x40>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_Init+0x40>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 fcee 	bl	8002f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff fdd8 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff fad4 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000008 	.word	0x20000008
 80025f4:	200043b8 	.word	0x200043b8

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200043b8 	.word	0x200043b8

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_Delay+0x40>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e033      	b.n	80026d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff faa6 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa4a 	bl	8002b40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
 80026c2:	e001      	b.n	80026c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Start_DMA+0x1e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0cc      	b.n	8002894 <HAL_ADC_Start_DMA+0x1b8>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d018      	beq.n	8002742 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002720:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_ADC_Start_DMA+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5e      	ldr	r2, [pc, #376]	; (80028a0 <HAL_ADC_Start_DMA+0x1c4>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0c9a      	lsrs	r2, r3, #18
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002734:	e002      	b.n	800273c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	3b01      	subs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	f040 80a0 	bne.w	8002892 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800277c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f023 0206 	bic.w	r2, r3, #6
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
 800279e:	e002      	b.n	80027a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_ADC_Start_DMA+0x1c8>)
 80027b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	4a3c      	ldr	r2, [pc, #240]	; (80028a8 <HAL_ADC_Start_DMA+0x1cc>)
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <HAL_ADC_Start_DMA+0x1d0>)
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <HAL_ADC_Start_DMA+0x1d4>)
 80027c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	334c      	adds	r3, #76	; 0x4c
 80027fe:	4619      	mov	r1, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f000 fcaa 	bl	800315c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b00      	cmp	r3, #0
 8002812:	d12a      	bne.n	800286a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <HAL_ADC_Start_DMA+0x1d8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d015      	beq.n	800284a <HAL_ADC_Start_DMA+0x16e>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <HAL_ADC_Start_DMA+0x1dc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d105      	bne.n	8002834 <HAL_ADC_Start_DMA+0x158>
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_ADC_Start_DMA+0x1c8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a20      	ldr	r2, [pc, #128]	; (80028bc <HAL_ADC_Start_DMA+0x1e0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d129      	bne.n	8002892 <HAL_ADC_Start_DMA+0x1b6>
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_ADC_Start_DMA+0x1c8>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b0f      	cmp	r3, #15
 8002848:	d823      	bhi.n	8002892 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11c      	bne.n	8002892 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e013      	b.n	8002892 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ADC_Start_DMA+0x1d8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10e      	bne.n	8002892 <HAL_ADC_Start_DMA+0x1b6>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002890:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000000 	.word	0x20000000
 80028a0:	431bde83 	.word	0x431bde83
 80028a4:	40012300 	.word	0x40012300
 80028a8:	08002d39 	.word	0x08002d39
 80028ac:	08002df3 	.word	0x08002df3
 80028b0:	08002e0f 	.word	0x08002e0f
 80028b4:	40012000 	.word	0x40012000
 80028b8:	40012100 	.word	0x40012100
 80028bc:	40012200 	.word	0x40012200

080028c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1c>
 8002914:	2302      	movs	r3, #2
 8002916:	e105      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x228>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b09      	cmp	r3, #9
 8002926:	d925      	bls.n	8002974 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	3b1e      	subs	r3, #30
 800293e:	2207      	movs	r2, #7
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43da      	mvns	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	400a      	ands	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68d9      	ldr	r1, [r3, #12]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	4618      	mov	r0, r3
 8002960:	4603      	mov	r3, r0
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4403      	add	r3, r0
 8002966:	3b1e      	subs	r3, #30
 8002968:	409a      	lsls	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e022      	b.n	80029ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6919      	ldr	r1, [r3, #16]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	2207      	movs	r2, #7
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4403      	add	r3, r0
 80029b0:	409a      	lsls	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d824      	bhi.n	8002a0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	3b05      	subs	r3, #5
 80029d4:	221f      	movs	r2, #31
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	400a      	ands	r2, r1
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	4618      	mov	r0, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	3b05      	subs	r3, #5
 80029fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0a:	e04c      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d824      	bhi.n	8002a5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	3b23      	subs	r3, #35	; 0x23
 8002a26:	221f      	movs	r2, #31
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	400a      	ands	r2, r1
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b23      	subs	r3, #35	; 0x23
 8002a50:	fa00 f203 	lsl.w	r2, r0, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5c:	e023      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b41      	subs	r3, #65	; 0x41
 8002a70:	221f      	movs	r2, #31
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	3b41      	subs	r3, #65	; 0x41
 8002a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_ADC_ConfigChannel+0x234>)
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_ADC_ConfigChannel+0x238>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d109      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_ADC_ConfigChannel+0x238>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d123      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x21e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d003      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x1e6>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b11      	cmp	r3, #17
 8002ae0:	d11b      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d111      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_ADC_ConfigChannel+0x23c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <HAL_ADC_ConfigChannel+0x240>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9a      	lsrs	r2, r3, #18
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b0c:	e002      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f9      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40012300 	.word	0x40012300
 8002b34:	40012000 	.word	0x40012000
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	431bde83 	.word	0x431bde83

08002b40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <ADC_Init+0x1f0>)
 8002b4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	021a      	lsls	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <ADC_Init+0x1f4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e00f      	b.n	8002c3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0202 	bic.w	r2, r2, #2
 8002c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
 8002c58:	005a      	lsls	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	3b01      	subs	r3, #1
 8002c98:	035a      	lsls	r2, r3, #13
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	e007      	b.n	8002cb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	051a      	lsls	r2, r3, #20
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6899      	ldr	r1, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cf6:	025a      	lsls	r2, r3, #9
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	029a      	lsls	r2, r3, #10
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40012300 	.word	0x40012300
 8002d34:	0f000001 	.word	0x0f000001

08002d38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d13c      	bne.n	8002dcc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d12b      	bne.n	8002dc4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d127      	bne.n	8002dc4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d119      	bne.n	8002dc4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0220 	bic.w	r2, r2, #32
 8002d9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fd7b 	bl	80028c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dca:	e00e      	b.n	8002dea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fd85 	bl	80028e8 <HAL_ADC_ErrorCallback>
}
 8002dde:	e004      	b.n	8002dea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fd67 	bl	80028d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fd5a 	bl	80028e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <__NVIC_GetPriorityGrouping+0x18>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 0307 	and.w	r3, r3, #7
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db0b      	blt.n	8002eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4907      	ldr	r1, [pc, #28]	; (8002ed8 <__NVIC_EnableIRQ+0x38>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db0a      	blt.n	8002f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	490c      	ldr	r1, [pc, #48]	; (8002f28 <__NVIC_SetPriority+0x4c>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f04:	e00a      	b.n	8002f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <__NVIC_SetPriority+0x50>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3b04      	subs	r3, #4
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	bf28      	it	cs
 8002f4e:	2304      	movcs	r3, #4
 8002f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d902      	bls.n	8002f60 <NVIC_EncodePriority+0x30>
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3b03      	subs	r3, #3
 8002f5e:	e000      	b.n	8002f62 <NVIC_EncodePriority+0x32>
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	401a      	ands	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43d9      	mvns	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	4313      	orrs	r3, r2
         );
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff4c 	bl	8002e3c <__NVIC_SetPriorityGrouping>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbe:	f7ff ff61 	bl	8002e84 <__NVIC_GetPriorityGrouping>
 8002fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f7ff ffb1 	bl	8002f30 <NVIC_EncodePriority>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff80 	bl	8002edc <__NVIC_SetPriority>
}
 8002fdc:	bf00      	nop
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff54 	bl	8002ea0 <__NVIC_EnableIRQ>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff faf4 	bl	80025f8 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e099      	b.n	8003150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303c:	e00f      	b.n	800305e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303e:	f7ff fadb 	bl	80025f8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b05      	cmp	r3, #5
 800304a:	d908      	bls.n	800305e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e078      	b.n	8003150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e8      	bne.n	800303e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_DMA_Init+0x158>)
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d107      	bne.n	80030c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4313      	orrs	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d117      	bne.n	8003122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fa6f 	bl	80035e8 <DMA_CheckFifoParam>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800311e:	2301      	movs	r3, #1
 8003120:	e016      	b.n	8003150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa26 	bl	800357c <DMA_CalcBaseAndBitshift>
 8003130:	4603      	mov	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	223f      	movs	r2, #63	; 0x3f
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	f010803f 	.word	0xf010803f

0800315c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Start_IT+0x26>
 800317e:	2302      	movs	r3, #2
 8003180:	e040      	b.n	8003204 <HAL_DMA_Start_IT+0xa8>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d12f      	bne.n	80031f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f9b8 	bl	8003520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0216 	orr.w	r2, r2, #22
 80031ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003218:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_DMA_IRQHandler+0x258>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a92      	ldr	r2, [pc, #584]	; (8003468 <HAL_DMA_IRQHandler+0x25c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2210      	movs	r2, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03c      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2210      	movs	r2, #16
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e01f      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e016      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2220      	movs	r2, #32
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808e 	beq.w	80034aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8086 	beq.w	80034aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d136      	bne.n	8003424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x1da>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        }
        return;
 8003422:	e078      	b.n	8003516 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01c      	beq.n	800346c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	d030      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e02b      	b.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d027      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e022      	b.n	80034aa <HAL_DMA_IRQHandler+0x29e>
 8003464:	20000000 	.word	0x20000000
 8003468:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0210 	bic.w	r2, r2, #16
 8003488:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d032      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d022      	beq.n	8003504 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d307      	bcc.n	80034f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f2      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x2ca>
 80034f0:	e000      	b.n	80034f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e000      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003516:	bf00      	nop
    }
  }
}
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d108      	bne.n	8003560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355e:	e007      	b.n	8003570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b10      	subs	r3, #16
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <DMA_CalcBaseAndBitshift+0x64>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003596:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d909      	bls.n	80035be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	; 0x58
 80035bc:	e007      	b.n	80035ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	aaaaaaab 	.word	0xaaaaaaab
 80035e4:	08008730 	.word	0x08008730

080035e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11f      	bne.n	8003642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d855      	bhi.n	80036b4 <DMA_CheckFifoParam+0xcc>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <DMA_CheckFifoParam+0x28>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003633 	.word	0x08003633
 8003618:	08003621 	.word	0x08003621
 800361c:	080036b5 	.word	0x080036b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d045      	beq.n	80036b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e042      	b.n	80036b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363a:	d13f      	bne.n	80036bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e03c      	b.n	80036bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	d121      	bne.n	8003690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d836      	bhi.n	80036c0 <DMA_CheckFifoParam+0xd8>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <DMA_CheckFifoParam+0x70>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003669 	.word	0x08003669
 800365c:	0800366f 	.word	0x0800366f
 8003660:	08003669 	.word	0x08003669
 8003664:	08003681 	.word	0x08003681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e02f      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d024      	beq.n	80036c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367e:	e021      	b.n	80036c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003688:	d11e      	bne.n	80036c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368e:	e01b      	b.n	80036c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <DMA_CheckFifoParam+0xb4>
 8003696:	2b03      	cmp	r3, #3
 8003698:	d003      	beq.n	80036a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369a:	e018      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e015      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00e      	beq.n	80036cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      break;
 80036b2:	e00b      	b.n	80036cc <DMA_CheckFifoParam+0xe4>
      break;
 80036b4:	bf00      	nop
 80036b6:	e00a      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036b8:	bf00      	nop
 80036ba:	e008      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
 80036be:	e006      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e004      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;   
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036cc:	bf00      	nop
    }
  } 
  
  return status; 
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e16b      	b.n	80039d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 815a 	bne.w	80039ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d00b      	beq.n	8003736 <HAL_GPIO_Init+0x5a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372a:	2b11      	cmp	r3, #17
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b12      	cmp	r3, #18
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0xfc>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b12      	cmp	r3, #18
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80b4 	beq.w	80039ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b5f      	ldr	r3, [pc, #380]	; (80039e4 <HAL_GPIO_Init+0x308>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a5e      	ldr	r2, [pc, #376]	; (80039e4 <HAL_GPIO_Init+0x308>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <HAL_GPIO_Init+0x308>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a5a      	ldr	r2, [pc, #360]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a51      	ldr	r2, [pc, #324]	; (80039ec <HAL_GPIO_Init+0x310>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <HAL_GPIO_Init+0x226>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a50      	ldr	r2, [pc, #320]	; (80039f0 <HAL_GPIO_Init+0x314>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d025      	beq.n	80038fe <HAL_GPIO_Init+0x222>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4f      	ldr	r2, [pc, #316]	; (80039f4 <HAL_GPIO_Init+0x318>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <HAL_GPIO_Init+0x21e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <HAL_GPIO_Init+0x31c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d019      	beq.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4d      	ldr	r2, [pc, #308]	; (80039fc <HAL_GPIO_Init+0x320>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_GPIO_Init+0x216>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	; (8003a00 <HAL_GPIO_Init+0x324>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00d      	beq.n	80038ee <HAL_GPIO_Init+0x212>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_GPIO_Init+0x328>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <HAL_GPIO_Init+0x20e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <HAL_GPIO_Init+0x32c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_GPIO_Init+0x20a>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00e      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038e6:	2308      	movs	r3, #8
 80038e8:	e00c      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e00a      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038ee:	2305      	movs	r3, #5
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x228>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4934      	ldr	r1, [pc, #208]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003922:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <HAL_GPIO_Init+0x330>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <HAL_GPIO_Init+0x330>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800394c:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <HAL_GPIO_Init+0x330>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003970:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <HAL_GPIO_Init+0x330>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003976:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_GPIO_Init+0x330>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <HAL_GPIO_Init+0x330>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c4:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f ae90 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	3724      	adds	r7, #36	; 0x24
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021400 	.word	0x40021400
 8003a04:	40021800 	.word	0x40021800
 8003a08:	40021c00 	.word	0x40021c00
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	807b      	strh	r3, [r7, #2]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a20:	787b      	ldrb	r3, [r7, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a26:	887a      	ldrh	r2, [r7, #2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a2c:	e003      	b.n	8003a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	041a      	lsls	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e11f      	b.n	8003c96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe f93e 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f001 f846 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8003aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a7b      	ldr	r2, [pc, #492]	; (8003ca0 <HAL_I2C_Init+0x25c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d807      	bhi.n	8003ac8 <HAL_I2C_Init+0x84>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a7a      	ldr	r2, [pc, #488]	; (8003ca4 <HAL_I2C_Init+0x260>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bf94      	ite	ls
 8003ac0:	2301      	movls	r3, #1
 8003ac2:	2300      	movhi	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e006      	b.n	8003ad6 <HAL_I2C_Init+0x92>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a77      	ldr	r2, [pc, #476]	; (8003ca8 <HAL_I2C_Init+0x264>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0db      	b.n	8003c96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a72      	ldr	r2, [pc, #456]	; (8003cac <HAL_I2C_Init+0x268>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0c9b      	lsrs	r3, r3, #18
 8003ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a64      	ldr	r2, [pc, #400]	; (8003ca0 <HAL_I2C_Init+0x25c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d802      	bhi.n	8003b18 <HAL_I2C_Init+0xd4>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	e009      	b.n	8003b2c <HAL_I2C_Init+0xe8>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	4a63      	ldr	r2, [pc, #396]	; (8003cb0 <HAL_I2C_Init+0x26c>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4956      	ldr	r1, [pc, #344]	; (8003ca0 <HAL_I2C_Init+0x25c>)
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	d80d      	bhi.n	8003b68 <HAL_I2C_Init+0x124>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e59      	subs	r1, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	bf38      	it	cc
 8003b64:	2304      	movcc	r3, #4
 8003b66:	e04f      	b.n	8003c08 <HAL_I2C_Init+0x1c4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HAL_I2C_Init+0x150>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e58      	subs	r0, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e012      	b.n	8003bba <HAL_I2C_Init+0x176>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	0099      	lsls	r1, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x17e>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_I2C_Init+0x1c4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10e      	bne.n	8003be8 <HAL_I2C_Init+0x1a4>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1e58      	subs	r0, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	440b      	add	r3, r1
 8003bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	e00f      	b.n	8003c08 <HAL_I2C_Init+0x1c4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	0099      	lsls	r1, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	6809      	ldr	r1, [r1, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6911      	ldr	r1, [r2, #16]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	000186a0 	.word	0x000186a0
 8003ca4:	001e847f 	.word	0x001e847f
 8003ca8:	003d08ff 	.word	0x003d08ff
 8003cac:	431bde83 	.word	0x431bde83
 8003cb0:	10624dd3 	.word	0x10624dd3

08003cb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7fe fc96 	bl	80025f8 <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	f040 80e0 	bne.w	8003e9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2319      	movs	r3, #25
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4970      	ldr	r1, [pc, #448]	; (8003ea8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f964 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0d3      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_I2C_Master_Transmit+0x50>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0cc      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d007      	beq.n	8003d2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	; 0x21
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2210      	movs	r2, #16
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	893a      	ldrh	r2, [r7, #8]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a50      	ldr	r2, [pc, #320]	; (8003eac <HAL_I2C_Master_Transmit+0x1f8>)
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d6c:	8979      	ldrh	r1, [r7, #10]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f89c 	bl	8003eb0 <I2C_MasterRequestWrite>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e08d      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d98:	e066      	b.n	8003e68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9de 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06b      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d11b      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0x188>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d017      	beq.n	8003e3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f9ce 	bl	80041e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01a      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d194      	bne.n	8003d9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00100002 	.word	0x00100002
 8003eac:	ffff0000 	.word	0xffff0000

08003eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d006      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e00b      	b.n	8003f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d107      	bne.n	8003f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f84f 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e035      	b.n	8003fa2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f3e:	d108      	bne.n	8003f52 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f40:	897b      	ldrh	r3, [r7, #10]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f4e:	611a      	str	r2, [r3, #16]
 8003f50:	e01b      	b.n	8003f8a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	11db      	asrs	r3, r3, #7
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f003 0306 	and.w	r3, r3, #6
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f063 030f 	orn	r3, r3, #15
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	490f      	ldr	r1, [pc, #60]	; (8003fac <I2C_MasterRequestWrite+0xfc>)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f876 	bl	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e010      	b.n	8003fa2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f80:	897b      	ldrh	r3, [r7, #10]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4908      	ldr	r1, [pc, #32]	; (8003fb0 <I2C_MasterRequestWrite+0x100>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f866 	bl	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	00010008 	.word	0x00010008
 8003fb0:	00010002 	.word	0x00010002

08003fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc4:	e025      	b.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d021      	beq.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fe fb13 	bl	80025f8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d116      	bne.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e023      	b.n	800405a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10d      	bne.n	8004038 <I2C_WaitOnFlagUntilTimeout+0x84>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	43da      	mvns	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	e00c      	b.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	429a      	cmp	r2, r3
 8004056:	d0b6      	beq.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004070:	e051      	b.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d123      	bne.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004090:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e046      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d021      	beq.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7fe fa91 	bl	80025f8 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d116      	bne.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e020      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d10c      	bne.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	43da      	mvns	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e00b      	b.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	43da      	mvns	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d18d      	bne.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800416c:	e02d      	b.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f878 	bl	8004264 <I2C_IsAcknowledgeFailed>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02d      	b.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d021      	beq.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fe fa37 	bl	80025f8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d1ca      	bne.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ee:	e02d      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f837 	bl	8004264 <I2C_IsAcknowledgeFailed>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e02d      	b.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d021      	beq.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004208:	f7fe f9f6 	bl	80025f8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d116      	bne.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e007      	b.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d1ca      	bne.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d11b      	bne.n	80042b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004284:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e25b      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d075      	beq.n	80043ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	4ba3      	ldr	r3, [pc, #652]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4ba0      	ldr	r3, [pc, #640]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fa:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004306:	d10b      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	4b99      	ldr	r3, [pc, #612]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05b      	beq.n	80043cc <HAL_RCC_OscConfig+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d157      	bne.n	80043cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e236      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x74>
 800432a:	4b91      	ldr	r3, [pc, #580]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a90      	ldr	r2, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x98>
 8004342:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a8a      	ldr	r2, [pc, #552]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a87      	ldr	r2, [pc, #540]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 800435c:	4b84      	ldr	r3, [pc, #528]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a83      	ldr	r2, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a80      	ldr	r2, [pc, #512]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe f93c 	bl	80025f8 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fe f938 	bl	80025f8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1fb      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xc0>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe f928 	bl	80025f8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fe f924 	bl	80025f8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1e7      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0xe8>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b62      	ldr	r3, [pc, #392]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b5c      	ldr	r3, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1bb      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b56      	ldr	r3, [pc, #344]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4952      	ldr	r1, [pc, #328]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <HAL_RCC_OscConfig+0x2b0>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fe f8dd 	bl	80025f8 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004442:	f7fe f8d9 	bl	80025f8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e19c      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b46      	ldr	r3, [pc, #280]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4940      	ldr	r1, [pc, #256]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_OscConfig+0x2b0>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe f8bc 	bl	80025f8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fe f8b8 	bl	80025f8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e17b      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d030      	beq.n	8004510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCC_OscConfig+0x2b4>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fe f89c 	bl	80025f8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fe f898 	bl	80025f8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e15b      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x200>
 80044e2:	e015      	b.n	8004510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_OscConfig+0x2b4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fe f885 	bl	80025f8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f2:	f7fe f881 	bl	80025f8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e144      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a0 	beq.w	800465e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x2b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d121      	bne.n	800459e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_RCC_OscConfig+0x2b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_RCC_OscConfig+0x2b8>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004566:	f7fe f847 	bl	80025f8 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	e011      	b.n	8004592 <HAL_RCC_OscConfig+0x2ce>
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	42470000 	.word	0x42470000
 8004578:	42470e80 	.word	0x42470e80
 800457c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fe f83a 	bl	80025f8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0fd      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCC_OscConfig+0x4d4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2f0>
 80045a6:	4b7d      	ldr	r3, [pc, #500]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	e01c      	b.n	80045ee <HAL_RCC_OscConfig+0x32a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x312>
 80045bc:	4b77      	ldr	r3, [pc, #476]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a76      	ldr	r2, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	4b74      	ldr	r3, [pc, #464]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a73      	ldr	r2, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	e00b      	b.n	80045ee <HAL_RCC_OscConfig+0x32a>
 80045d6:	4b71      	ldr	r3, [pc, #452]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a70      	ldr	r2, [pc, #448]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	4b6e      	ldr	r3, [pc, #440]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a6d      	ldr	r2, [pc, #436]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d015      	beq.n	8004622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd ffff 	bl	80025f8 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fffb 	bl	80025f8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0bc      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ee      	beq.n	80045fe <HAL_RCC_OscConfig+0x33a>
 8004620:	e014      	b.n	800464c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fd ffe9 	bl	80025f8 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7fd ffe5 	bl	80025f8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f241 3288 	movw	r2, #5000	; 0x1388
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e0a6      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ee      	bne.n	800462a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4b52      	ldr	r3, [pc, #328]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8092 	beq.w	800478c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004668:	4b4c      	ldr	r3, [pc, #304]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d05c      	beq.n	800472e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d141      	bne.n	8004700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b48      	ldr	r3, [pc, #288]	; (80047a0 <HAL_RCC_OscConfig+0x4dc>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fd ffb9 	bl	80025f8 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468a:	f7fd ffb5 	bl	80025f8 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e078      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469c:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	019b      	lsls	r3, r3, #6
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	3b01      	subs	r3, #1
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	4933      	ldr	r1, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCC_OscConfig+0x4dc>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fd ff8e 	bl	80025f8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd ff8a 	bl	80025f8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e04d      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x41c>
 80046fe:	e045      	b.n	800478c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <HAL_RCC_OscConfig+0x4dc>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fd ff77 	bl	80025f8 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470e:	f7fd ff73 	bl	80025f8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e036      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x44a>
 800472c:	e02e      	b.n	800478c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e029      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_RCC_OscConfig+0x4d8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	429a      	cmp	r2, r3
 800474c:	d11c      	bne.n	8004788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d115      	bne.n	8004788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004762:	4013      	ands	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004768:	4293      	cmp	r3, r2
 800476a:	d10d      	bne.n	8004788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470060 	.word	0x42470060

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cc      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b68      	ldr	r3, [pc, #416]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90c      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800481a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d044      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d119      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d003      	beq.n	8004862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	2b03      	cmp	r3, #3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e067      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4934      	ldr	r1, [pc, #208]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fd feb0 	bl	80025f8 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fd feac 	bl	80025f8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d20c      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4601      	mov	r1, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	5cd3      	ldrb	r3, [r2, r3]
 800493e:	fa21 f303 	lsr.w	r3, r1, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fc10 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00
 8004960:	40023800 	.word	0x40023800
 8004964:	08008718 	.word	0x08008718
 8004968:	20000000 	.word	0x20000000
 800496c:	20000004 	.word	0x20000004

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	2300      	movs	r3, #0
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004986:	4b63      	ldr	r3, [pc, #396]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b04      	cmp	r3, #4
 8004990:	d007      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x32>
 8004992:	2b08      	cmp	r3, #8
 8004994:	d008      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x38>
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 80b4 	bne.w	8004b04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b5e      	ldr	r3, [pc, #376]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800499e:	60bb      	str	r3, [r7, #8]
       break;
 80049a0:	e0b3      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a2:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80049a4:	60bb      	str	r3, [r7, #8]
      break;
 80049a6:	e0b0      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a8:	4b5a      	ldr	r3, [pc, #360]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b2:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d04a      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049be:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	f04f 0400 	mov.w	r4, #0
 80049c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	ea03 0501 	and.w	r5, r3, r1
 80049d4:	ea04 0602 	and.w	r6, r4, r2
 80049d8:	4629      	mov	r1, r5
 80049da:	4632      	mov	r2, r6
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	f04f 0400 	mov.w	r4, #0
 80049e4:	0154      	lsls	r4, r2, #5
 80049e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ea:	014b      	lsls	r3, r1, #5
 80049ec:	4619      	mov	r1, r3
 80049ee:	4622      	mov	r2, r4
 80049f0:	1b49      	subs	r1, r1, r5
 80049f2:	eb62 0206 	sbc.w	r2, r2, r6
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	f04f 0400 	mov.w	r4, #0
 80049fe:	0194      	lsls	r4, r2, #6
 8004a00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a04:	018b      	lsls	r3, r1, #6
 8004a06:	1a5b      	subs	r3, r3, r1
 8004a08:	eb64 0402 	sbc.w	r4, r4, r2
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	00e2      	lsls	r2, r4, #3
 8004a16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a1a:	00d9      	lsls	r1, r3, #3
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4614      	mov	r4, r2
 8004a20:	195b      	adds	r3, r3, r5
 8004a22:	eb44 0406 	adc.w	r4, r4, r6
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	0262      	lsls	r2, r4, #9
 8004a30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a34:	0259      	lsls	r1, r3, #9
 8004a36:	460b      	mov	r3, r1
 8004a38:	4614      	mov	r4, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f04f 0400 	mov.w	r4, #0
 8004a44:	461a      	mov	r2, r3
 8004a46:	4623      	mov	r3, r4
 8004a48:	f7fb fc12 	bl	8000270 <__aeabi_uldivmod>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e049      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a54:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	f04f 0400 	mov.w	r4, #0
 8004a5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	ea03 0501 	and.w	r5, r3, r1
 8004a6a:	ea04 0602 	and.w	r6, r4, r2
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4632      	mov	r2, r6
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	0154      	lsls	r4, r2, #5
 8004a7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a80:	014b      	lsls	r3, r1, #5
 8004a82:	4619      	mov	r1, r3
 8004a84:	4622      	mov	r2, r4
 8004a86:	1b49      	subs	r1, r1, r5
 8004a88:	eb62 0206 	sbc.w	r2, r2, r6
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	f04f 0400 	mov.w	r4, #0
 8004a94:	0194      	lsls	r4, r2, #6
 8004a96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a9a:	018b      	lsls	r3, r1, #6
 8004a9c:	1a5b      	subs	r3, r3, r1
 8004a9e:	eb64 0402 	sbc.w	r4, r4, r2
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ab0:	00d9      	lsls	r1, r3, #3
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	195b      	adds	r3, r3, r5
 8004ab8:	eb44 0406 	adc.w	r4, r4, r6
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	02a2      	lsls	r2, r4, #10
 8004ac6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004aca:	0299      	lsls	r1, r3, #10
 8004acc:	460b      	mov	r3, r1
 8004ace:	4614      	mov	r4, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f04f 0400 	mov.w	r4, #0
 8004ada:	461a      	mov	r2, r3
 8004adc:	4623      	mov	r3, r4
 8004ade:	f7fb fbc7 	bl	8000270 <__aeabi_uldivmod>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	3301      	adds	r3, #1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	60bb      	str	r3, [r7, #8]
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b04:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b06:	60bb      	str	r3, [r7, #8]
      break;
 8004b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b14:	40023800 	.word	0x40023800
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000000 	.word	0x20000000

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4601      	mov	r1, r0
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4a03      	ldr	r2, [pc, #12]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4e:	5cd3      	ldrb	r3, [r2, r3]
 8004b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	08008728 	.word	0x08008728

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b64:	f7ff ffdc 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b68:	4601      	mov	r1, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0b5b      	lsrs	r3, r3, #13
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4a03      	ldr	r2, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	08008728 	.word	0x08008728

08004b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	220f      	movs	r2, #15
 8004b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0203 	and.w	r2, r3, #3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	08db      	lsrs	r3, r3, #3
 8004bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCC_GetClockConfig+0x60>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40023c00 	.word	0x40023c00

08004bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e056      	b.n	8004cac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fd f8af 	bl	8001d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	ea42 0103 	orr.w	r1, r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	f003 0104 	and.w	r1, r3, #4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e01d      	b.n	8004d02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd f956 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 fbce 	bl	8005494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b06      	cmp	r3, #6
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e01d      	b.n	8004da0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fd f8e5 	bl	8001f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f000 fb7f 	bl	8005494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fdba 	bl	8005934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <HAL_TIM_PWM_Start+0x74>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x2c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <HAL_TIM_PWM_Start+0x78>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_PWM_Start+0x30>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_TIM_PWM_Start+0x32>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b06      	cmp	r3, #6
 8004dfe:	d007      	beq.n	8004e10 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400

08004e24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fd7c 	bl	8005934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_TIM_PWM_Stop+0xa8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_TIM_PWM_Stop+0x2c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_TIM_PWM_Stop+0xac>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_PWM_Stop+0x30>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_TIM_PWM_Stop+0x32>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d017      	beq.n	8004e8a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x66>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	f240 4344 	movw	r3, #1092	; 0x444
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x66>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_TIM_PWM_Stop+0x96>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_PWM_Stop+0x96>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40010400 	.word	0x40010400

08004ed4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e083      	b.n	8004ff0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fc ffa5 	bl	8001e4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 fab3 	bl	8005494 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	4313      	orrs	r3, r2
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f74:	f023 030c 	bic.w	r3, r3, #12
 8004f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	4313      	orrs	r3, r2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	011a      	lsls	r2, r3, #4
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	031b      	lsls	r3, r3, #12
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_TIM_Encoder_Start_IT+0x16>
 8005008:	2b04      	cmp	r3, #4
 800500a:	d010      	beq.n	800502e <HAL_TIM_Encoder_Start_IT+0x36>
 800500c:	e01f      	b.n	800504e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fc8c 	bl	8005934 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0202 	orr.w	r2, r2, #2
 800502a:	60da      	str	r2, [r3, #12]
      break;
 800502c:	e02e      	b.n	800508c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2201      	movs	r2, #1
 8005034:	2104      	movs	r1, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fc7c 	bl	8005934 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0204 	orr.w	r2, r2, #4
 800504a:	60da      	str	r2, [r3, #12]
      break;
 800504c:	e01e      	b.n	800508c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2201      	movs	r2, #1
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fc6c 	bl	8005934 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	2104      	movs	r1, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fc65 	bl	8005934 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0202 	orr.w	r2, r2, #2
 8005078:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0204 	orr.w	r2, r2, #4
 8005088:	60da      	str	r2, [r3, #12]
      break;
 800508a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d122      	bne.n	8005102 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d11b      	bne.n	8005102 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f06f 0202 	mvn.w	r2, #2
 80050d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f9b5 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 80050ee:	e005      	b.n	80050fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f9a7 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f9b8 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d122      	bne.n	8005156 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b04      	cmp	r3, #4
 800511c:	d11b      	bne.n	8005156 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0204 	mvn.w	r2, #4
 8005126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f98b 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 8005142:	e005      	b.n	8005150 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f97d 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f98e 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d122      	bne.n	80051aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b08      	cmp	r3, #8
 8005170:	d11b      	bne.n	80051aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0208 	mvn.w	r2, #8
 800517a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f961 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 8005196:	e005      	b.n	80051a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f953 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f964 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d122      	bne.n	80051fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d11b      	bne.n	80051fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0210 	mvn.w	r2, #16
 80051ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2208      	movs	r2, #8
 80051d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f937 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 80051ea:	e005      	b.n	80051f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f929 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f93a 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d10e      	bne.n	800522a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0201 	mvn.w	r2, #1
 8005222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fc fc39 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d10e      	bne.n	8005256 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d107      	bne.n	8005256 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800524e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fc1b 	bl	8005a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d10e      	bne.n	8005282 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d107      	bne.n	8005282 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8ff 	bl	8005480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b20      	cmp	r3, #32
 800528e:	d10e      	bne.n	80052ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b20      	cmp	r3, #32
 800529c:	d107      	bne.n	80052ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0220 	mvn.w	r2, #32
 80052a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fbe5 	bl	8005a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e0b4      	b.n	800543c <HAL_TIM_PWM_ConfigChannel+0x184>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	f200 809f 	bhi.w	8005428 <HAL_TIM_PWM_ConfigChannel+0x170>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005325 	.word	0x08005325
 80052f4:	08005429 	.word	0x08005429
 80052f8:	08005429 	.word	0x08005429
 80052fc:	08005429 	.word	0x08005429
 8005300:	08005365 	.word	0x08005365
 8005304:	08005429 	.word	0x08005429
 8005308:	08005429 	.word	0x08005429
 800530c:	08005429 	.word	0x08005429
 8005310:	080053a7 	.word	0x080053a7
 8005314:	08005429 	.word	0x08005429
 8005318:	08005429 	.word	0x08005429
 800531c:	08005429 	.word	0x08005429
 8005320:	080053e7 	.word	0x080053e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f952 	bl	80055d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6999      	ldr	r1, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	619a      	str	r2, [r3, #24]
      break;
 8005362:	e062      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f9a2 	bl	80056b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]
      break;
 80053a4:	e041      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f9f7 	bl	80057a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0208 	orr.w	r2, r2, #8
 80053c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0204 	bic.w	r2, r2, #4
 80053d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69d9      	ldr	r1, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	61da      	str	r2, [r3, #28]
      break;
 80053e4:	e021      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fa4b 	bl	8005888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	021a      	lsls	r2, r3, #8
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	61da      	str	r2, [r3, #28]
      break;
 8005426:	e000      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005428:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a40      	ldr	r2, [pc, #256]	; (80055a8 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3d      	ldr	r2, [pc, #244]	; (80055ac <TIM_Base_SetConfig+0x118>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3c      	ldr	r2, [pc, #240]	; (80055b0 <TIM_Base_SetConfig+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3b      	ldr	r2, [pc, #236]	; (80055b4 <TIM_Base_SetConfig+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3a      	ldr	r2, [pc, #232]	; (80055b8 <TIM_Base_SetConfig+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d108      	bne.n	80054e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2f      	ldr	r2, [pc, #188]	; (80055a8 <TIM_Base_SetConfig+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02b      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d027      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <TIM_Base_SetConfig+0x118>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d023      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <TIM_Base_SetConfig+0x11c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01f      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <TIM_Base_SetConfig+0x120>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01b      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a29      	ldr	r2, [pc, #164]	; (80055b8 <TIM_Base_SetConfig+0x124>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d017      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a28      	ldr	r2, [pc, #160]	; (80055bc <TIM_Base_SetConfig+0x128>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <TIM_Base_SetConfig+0x12c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a26      	ldr	r2, [pc, #152]	; (80055c4 <TIM_Base_SetConfig+0x130>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <TIM_Base_SetConfig+0x134>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <TIM_Base_SetConfig+0x138>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <TIM_Base_SetConfig+0x13c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <TIM_Base_SetConfig+0x114>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <TIM_Base_SetConfig+0x124>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d103      	bne.n	8005594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	615a      	str	r2, [r3, #20]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40000800 	.word	0x40000800
 80055b4:	40000c00 	.word	0x40000c00
 80055b8:	40010400 	.word	0x40010400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800
 80055c8:	40001800 	.word	0x40001800
 80055cc:	40001c00 	.word	0x40001c00
 80055d0:	40002000 	.word	0x40002000

080055d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a20      	ldr	r2, [pc, #128]	; (80056ac <TIM_OC1_SetConfig+0xd8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC1_SetConfig+0x64>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <TIM_OC1_SetConfig+0xdc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10c      	bne.n	8005652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0308 	bic.w	r3, r3, #8
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a15      	ldr	r2, [pc, #84]	; (80056ac <TIM_OC1_SetConfig+0xd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_OC1_SetConfig+0x8e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <TIM_OC1_SetConfig+0xdc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	621a      	str	r2, [r3, #32]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40010400 	.word	0x40010400

080056b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0210 	bic.w	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0320 	bic.w	r3, r3, #32
 80056fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a22      	ldr	r2, [pc, #136]	; (8005798 <TIM_OC2_SetConfig+0xe4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC2_SetConfig+0x68>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a21      	ldr	r2, [pc, #132]	; (800579c <TIM_OC2_SetConfig+0xe8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10d      	bne.n	8005738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <TIM_OC2_SetConfig+0xe4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_OC2_SetConfig+0x94>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a16      	ldr	r2, [pc, #88]	; (800579c <TIM_OC2_SetConfig+0xe8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d113      	bne.n	8005770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000
 800579c:	40010400 	.word	0x40010400

080057a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a21      	ldr	r2, [pc, #132]	; (8005880 <TIM_OC3_SetConfig+0xe0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC3_SetConfig+0x66>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a20      	ldr	r2, [pc, #128]	; (8005884 <TIM_OC3_SetConfig+0xe4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10d      	bne.n	8005822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800580c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <TIM_OC3_SetConfig+0xe0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC3_SetConfig+0x92>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <TIM_OC3_SetConfig+0xe4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d113      	bne.n	800585a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40010000 	.word	0x40010000
 8005884:	40010400 	.word	0x40010400

08005888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a12      	ldr	r2, [pc, #72]	; (800592c <TIM_OC4_SetConfig+0xa4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC4_SetConfig+0x68>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a11      	ldr	r2, [pc, #68]	; (8005930 <TIM_OC4_SetConfig+0xa8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d109      	bne.n	8005904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2201      	movs	r2, #1
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005994:	2302      	movs	r3, #2
 8005996:	e05a      	b.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a21      	ldr	r2, [pc, #132]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e4:	d01d      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10c      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40010400 	.word	0x40010400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40001800 	.word	0x40001800

08005a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e03f      	b.n	8005b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc faea 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f829 	bl	8005b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b7e:	f023 030c 	bic.w	r3, r3, #12
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005baa:	f040 818b 	bne.w	8005ec4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4ac1      	ldr	r2, [pc, #772]	; (8005eb8 <UART_SetConfig+0x37c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d005      	beq.n	8005bc4 <UART_SetConfig+0x88>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4abf      	ldr	r2, [pc, #764]	; (8005ebc <UART_SetConfig+0x380>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f040 80bd 	bne.w	8005d3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bc4:	f7fe ffcc 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8005bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	461d      	mov	r5, r3
 8005bce:	f04f 0600 	mov.w	r6, #0
 8005bd2:	46a8      	mov	r8, r5
 8005bd4:	46b1      	mov	r9, r6
 8005bd6:	eb18 0308 	adds.w	r3, r8, r8
 8005bda:	eb49 0409 	adc.w	r4, r9, r9
 8005bde:	4698      	mov	r8, r3
 8005be0:	46a1      	mov	r9, r4
 8005be2:	eb18 0805 	adds.w	r8, r8, r5
 8005be6:	eb49 0906 	adc.w	r9, r9, r6
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bfe:	4688      	mov	r8, r1
 8005c00:	4691      	mov	r9, r2
 8005c02:	eb18 0005 	adds.w	r0, r8, r5
 8005c06:	eb49 0106 	adc.w	r1, r9, r6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	461d      	mov	r5, r3
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	196b      	adds	r3, r5, r5
 8005c16:	eb46 0406 	adc.w	r4, r6, r6
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	f7fa fb27 	bl	8000270 <__aeabi_uldivmod>
 8005c22:	4603      	mov	r3, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	461a      	mov	r2, r3
 8005c28:	4ba5      	ldr	r3, [pc, #660]	; (8005ec0 <UART_SetConfig+0x384>)
 8005c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	461d      	mov	r5, r3
 8005c38:	f04f 0600 	mov.w	r6, #0
 8005c3c:	46a9      	mov	r9, r5
 8005c3e:	46b2      	mov	sl, r6
 8005c40:	eb19 0309 	adds.w	r3, r9, r9
 8005c44:	eb4a 040a 	adc.w	r4, sl, sl
 8005c48:	4699      	mov	r9, r3
 8005c4a:	46a2      	mov	sl, r4
 8005c4c:	eb19 0905 	adds.w	r9, r9, r5
 8005c50:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c68:	4689      	mov	r9, r1
 8005c6a:	4692      	mov	sl, r2
 8005c6c:	eb19 0005 	adds.w	r0, r9, r5
 8005c70:	eb4a 0106 	adc.w	r1, sl, r6
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	461d      	mov	r5, r3
 8005c7a:	f04f 0600 	mov.w	r6, #0
 8005c7e:	196b      	adds	r3, r5, r5
 8005c80:	eb46 0406 	adc.w	r4, r6, r6
 8005c84:	461a      	mov	r2, r3
 8005c86:	4623      	mov	r3, r4
 8005c88:	f7fa faf2 	bl	8000270 <__aeabi_uldivmod>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <UART_SetConfig+0x384>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	2164      	movs	r1, #100	; 0x64
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	3332      	adds	r3, #50	; 0x32
 8005ca6:	4a86      	ldr	r2, [pc, #536]	; (8005ec0 <UART_SetConfig+0x384>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cb4:	4498      	add	r8, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	461d      	mov	r5, r3
 8005cba:	f04f 0600 	mov.w	r6, #0
 8005cbe:	46a9      	mov	r9, r5
 8005cc0:	46b2      	mov	sl, r6
 8005cc2:	eb19 0309 	adds.w	r3, r9, r9
 8005cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cca:	4699      	mov	r9, r3
 8005ccc:	46a2      	mov	sl, r4
 8005cce:	eb19 0905 	adds.w	r9, r9, r5
 8005cd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cd6:	f04f 0100 	mov.w	r1, #0
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cea:	4689      	mov	r9, r1
 8005cec:	4692      	mov	sl, r2
 8005cee:	eb19 0005 	adds.w	r0, r9, r5
 8005cf2:	eb4a 0106 	adc.w	r1, sl, r6
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	f04f 0600 	mov.w	r6, #0
 8005d00:	196b      	adds	r3, r5, r5
 8005d02:	eb46 0406 	adc.w	r4, r6, r6
 8005d06:	461a      	mov	r2, r3
 8005d08:	4623      	mov	r3, r4
 8005d0a:	f7fa fab1 	bl	8000270 <__aeabi_uldivmod>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	461a      	mov	r2, r3
 8005d14:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <UART_SetConfig+0x384>)
 8005d16:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	2164      	movs	r1, #100	; 0x64
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	3332      	adds	r3, #50	; 0x32
 8005d28:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <UART_SetConfig+0x384>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f003 0207 	and.w	r2, r3, #7
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4442      	add	r2, r8
 8005d3a:	609a      	str	r2, [r3, #8]
 8005d3c:	e26f      	b.n	800621e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f7fe fefb 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8005d42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	461d      	mov	r5, r3
 8005d48:	f04f 0600 	mov.w	r6, #0
 8005d4c:	46a8      	mov	r8, r5
 8005d4e:	46b1      	mov	r9, r6
 8005d50:	eb18 0308 	adds.w	r3, r8, r8
 8005d54:	eb49 0409 	adc.w	r4, r9, r9
 8005d58:	4698      	mov	r8, r3
 8005d5a:	46a1      	mov	r9, r4
 8005d5c:	eb18 0805 	adds.w	r8, r8, r5
 8005d60:	eb49 0906 	adc.w	r9, r9, r6
 8005d64:	f04f 0100 	mov.w	r1, #0
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d78:	4688      	mov	r8, r1
 8005d7a:	4691      	mov	r9, r2
 8005d7c:	eb18 0005 	adds.w	r0, r8, r5
 8005d80:	eb49 0106 	adc.w	r1, r9, r6
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	461d      	mov	r5, r3
 8005d8a:	f04f 0600 	mov.w	r6, #0
 8005d8e:	196b      	adds	r3, r5, r5
 8005d90:	eb46 0406 	adc.w	r4, r6, r6
 8005d94:	461a      	mov	r2, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	f7fa fa6a 	bl	8000270 <__aeabi_uldivmod>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	461a      	mov	r2, r3
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <UART_SetConfig+0x384>)
 8005da4:	fba3 2302 	umull	r2, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	461d      	mov	r5, r3
 8005db2:	f04f 0600 	mov.w	r6, #0
 8005db6:	46a9      	mov	r9, r5
 8005db8:	46b2      	mov	sl, r6
 8005dba:	eb19 0309 	adds.w	r3, r9, r9
 8005dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8005dc2:	4699      	mov	r9, r3
 8005dc4:	46a2      	mov	sl, r4
 8005dc6:	eb19 0905 	adds.w	r9, r9, r5
 8005dca:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005de2:	4689      	mov	r9, r1
 8005de4:	4692      	mov	sl, r2
 8005de6:	eb19 0005 	adds.w	r0, r9, r5
 8005dea:	eb4a 0106 	adc.w	r1, sl, r6
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	461d      	mov	r5, r3
 8005df4:	f04f 0600 	mov.w	r6, #0
 8005df8:	196b      	adds	r3, r5, r5
 8005dfa:	eb46 0406 	adc.w	r4, r6, r6
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4623      	mov	r3, r4
 8005e02:	f7fa fa35 	bl	8000270 <__aeabi_uldivmod>
 8005e06:	4603      	mov	r3, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ec0 <UART_SetConfig+0x384>)
 8005e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2164      	movs	r1, #100	; 0x64
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	3332      	adds	r3, #50	; 0x32
 8005e20:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <UART_SetConfig+0x384>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e2e:	4498      	add	r8, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	461d      	mov	r5, r3
 8005e34:	f04f 0600 	mov.w	r6, #0
 8005e38:	46a9      	mov	r9, r5
 8005e3a:	46b2      	mov	sl, r6
 8005e3c:	eb19 0309 	adds.w	r3, r9, r9
 8005e40:	eb4a 040a 	adc.w	r4, sl, sl
 8005e44:	4699      	mov	r9, r3
 8005e46:	46a2      	mov	sl, r4
 8005e48:	eb19 0905 	adds.w	r9, r9, r5
 8005e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e64:	4689      	mov	r9, r1
 8005e66:	4692      	mov	sl, r2
 8005e68:	eb19 0005 	adds.w	r0, r9, r5
 8005e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	461d      	mov	r5, r3
 8005e76:	f04f 0600 	mov.w	r6, #0
 8005e7a:	196b      	adds	r3, r5, r5
 8005e7c:	eb46 0406 	adc.w	r4, r6, r6
 8005e80:	461a      	mov	r2, r3
 8005e82:	4623      	mov	r3, r4
 8005e84:	f7fa f9f4 	bl	8000270 <__aeabi_uldivmod>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <UART_SetConfig+0x384>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <UART_SetConfig+0x384>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 0207 	and.w	r2, r3, #7
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4442      	add	r2, r8
 8005eb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005eb6:	e1b2      	b.n	800621e <UART_SetConfig+0x6e2>
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	40011400 	.word	0x40011400
 8005ec0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4ad7      	ldr	r2, [pc, #860]	; (8006228 <UART_SetConfig+0x6ec>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d005      	beq.n	8005eda <UART_SetConfig+0x39e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4ad6      	ldr	r2, [pc, #856]	; (800622c <UART_SetConfig+0x6f0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	f040 80d1 	bne.w	800607c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eda:	f7fe fe41 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8005ede:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	469a      	mov	sl, r3
 8005ee4:	f04f 0b00 	mov.w	fp, #0
 8005ee8:	46d0      	mov	r8, sl
 8005eea:	46d9      	mov	r9, fp
 8005eec:	eb18 0308 	adds.w	r3, r8, r8
 8005ef0:	eb49 0409 	adc.w	r4, r9, r9
 8005ef4:	4698      	mov	r8, r3
 8005ef6:	46a1      	mov	r9, r4
 8005ef8:	eb18 080a 	adds.w	r8, r8, sl
 8005efc:	eb49 090b 	adc.w	r9, r9, fp
 8005f00:	f04f 0100 	mov.w	r1, #0
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f14:	4688      	mov	r8, r1
 8005f16:	4691      	mov	r9, r2
 8005f18:	eb1a 0508 	adds.w	r5, sl, r8
 8005f1c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4619      	mov	r1, r3
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	f04f 0400 	mov.w	r4, #0
 8005f32:	0094      	lsls	r4, r2, #2
 8005f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f38:	008b      	lsls	r3, r1, #2
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	4631      	mov	r1, r6
 8005f42:	f7fa f995 	bl	8000270 <__aeabi_uldivmod>
 8005f46:	4603      	mov	r3, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4bb8      	ldr	r3, [pc, #736]	; (8006230 <UART_SetConfig+0x6f4>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	469b      	mov	fp, r3
 8005f5c:	f04f 0c00 	mov.w	ip, #0
 8005f60:	46d9      	mov	r9, fp
 8005f62:	46e2      	mov	sl, ip
 8005f64:	eb19 0309 	adds.w	r3, r9, r9
 8005f68:	eb4a 040a 	adc.w	r4, sl, sl
 8005f6c:	4699      	mov	r9, r3
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	eb19 090b 	adds.w	r9, r9, fp
 8005f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	4692      	mov	sl, r2
 8005f90:	eb1b 0509 	adds.w	r5, fp, r9
 8005f94:	eb4c 060a 	adc.w	r6, ip, sl
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f04f 0400 	mov.w	r4, #0
 8005faa:	0094      	lsls	r4, r2, #2
 8005fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fb0:	008b      	lsls	r3, r1, #2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	4631      	mov	r1, r6
 8005fba:	f7fa f959 	bl	8000270 <__aeabi_uldivmod>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4b9a      	ldr	r3, [pc, #616]	; (8006230 <UART_SetConfig+0x6f4>)
 8005fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2164      	movs	r1, #100	; 0x64
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	; 0x32
 8005fd8:	4a95      	ldr	r2, [pc, #596]	; (8006230 <UART_SetConfig+0x6f4>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe4:	4498      	add	r8, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	469b      	mov	fp, r3
 8005fea:	f04f 0c00 	mov.w	ip, #0
 8005fee:	46d9      	mov	r9, fp
 8005ff0:	46e2      	mov	sl, ip
 8005ff2:	eb19 0309 	adds.w	r3, r9, r9
 8005ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8005ffa:	4699      	mov	r9, r3
 8005ffc:	46a2      	mov	sl, r4
 8005ffe:	eb19 090b 	adds.w	r9, r9, fp
 8006002:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800601a:	4689      	mov	r9, r1
 800601c:	4692      	mov	sl, r2
 800601e:	eb1b 0509 	adds.w	r5, fp, r9
 8006022:	eb4c 060a 	adc.w	r6, ip, sl
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4619      	mov	r1, r3
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	0094      	lsls	r4, r2, #2
 800603a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800603e:	008b      	lsls	r3, r1, #2
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	4628      	mov	r0, r5
 8006046:	4631      	mov	r1, r6
 8006048:	f7fa f912 	bl	8000270 <__aeabi_uldivmod>
 800604c:	4603      	mov	r3, r0
 800604e:	460c      	mov	r4, r1
 8006050:	461a      	mov	r2, r3
 8006052:	4b77      	ldr	r3, [pc, #476]	; (8006230 <UART_SetConfig+0x6f4>)
 8006054:	fba3 1302 	umull	r1, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	2164      	movs	r1, #100	; 0x64
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	3332      	adds	r3, #50	; 0x32
 8006066:	4a72      	ldr	r2, [pc, #456]	; (8006230 <UART_SetConfig+0x6f4>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4442      	add	r2, r8
 8006078:	609a      	str	r2, [r3, #8]
 800607a:	e0d0      	b.n	800621e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fe fd5c 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8006080:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	469a      	mov	sl, r3
 8006086:	f04f 0b00 	mov.w	fp, #0
 800608a:	46d0      	mov	r8, sl
 800608c:	46d9      	mov	r9, fp
 800608e:	eb18 0308 	adds.w	r3, r8, r8
 8006092:	eb49 0409 	adc.w	r4, r9, r9
 8006096:	4698      	mov	r8, r3
 8006098:	46a1      	mov	r9, r4
 800609a:	eb18 080a 	adds.w	r8, r8, sl
 800609e:	eb49 090b 	adc.w	r9, r9, fp
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060b6:	4688      	mov	r8, r1
 80060b8:	4691      	mov	r9, r2
 80060ba:	eb1a 0508 	adds.w	r5, sl, r8
 80060be:	eb4b 0609 	adc.w	r6, fp, r9
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4619      	mov	r1, r3
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	f04f 0400 	mov.w	r4, #0
 80060d4:	0094      	lsls	r4, r2, #2
 80060d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060da:	008b      	lsls	r3, r1, #2
 80060dc:	461a      	mov	r2, r3
 80060de:	4623      	mov	r3, r4
 80060e0:	4628      	mov	r0, r5
 80060e2:	4631      	mov	r1, r6
 80060e4:	f7fa f8c4 	bl	8000270 <__aeabi_uldivmod>
 80060e8:	4603      	mov	r3, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	461a      	mov	r2, r3
 80060ee:	4b50      	ldr	r3, [pc, #320]	; (8006230 <UART_SetConfig+0x6f4>)
 80060f0:	fba3 2302 	umull	r2, r3, r3, r2
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	469b      	mov	fp, r3
 80060fe:	f04f 0c00 	mov.w	ip, #0
 8006102:	46d9      	mov	r9, fp
 8006104:	46e2      	mov	sl, ip
 8006106:	eb19 0309 	adds.w	r3, r9, r9
 800610a:	eb4a 040a 	adc.w	r4, sl, sl
 800610e:	4699      	mov	r9, r3
 8006110:	46a2      	mov	sl, r4
 8006112:	eb19 090b 	adds.w	r9, r9, fp
 8006116:	eb4a 0a0c 	adc.w	sl, sl, ip
 800611a:	f04f 0100 	mov.w	r1, #0
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800612a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800612e:	4689      	mov	r9, r1
 8006130:	4692      	mov	sl, r2
 8006132:	eb1b 0509 	adds.w	r5, fp, r9
 8006136:	eb4c 060a 	adc.w	r6, ip, sl
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4619      	mov	r1, r3
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	f04f 0400 	mov.w	r4, #0
 800614c:	0094      	lsls	r4, r2, #2
 800614e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006152:	008b      	lsls	r3, r1, #2
 8006154:	461a      	mov	r2, r3
 8006156:	4623      	mov	r3, r4
 8006158:	4628      	mov	r0, r5
 800615a:	4631      	mov	r1, r6
 800615c:	f7fa f888 	bl	8000270 <__aeabi_uldivmod>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	461a      	mov	r2, r3
 8006166:	4b32      	ldr	r3, [pc, #200]	; (8006230 <UART_SetConfig+0x6f4>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	; 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <UART_SetConfig+0x6f4>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006186:	4498      	add	r8, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	469b      	mov	fp, r3
 800618c:	f04f 0c00 	mov.w	ip, #0
 8006190:	46d9      	mov	r9, fp
 8006192:	46e2      	mov	sl, ip
 8006194:	eb19 0309 	adds.w	r3, r9, r9
 8006198:	eb4a 040a 	adc.w	r4, sl, sl
 800619c:	4699      	mov	r9, r3
 800619e:	46a2      	mov	sl, r4
 80061a0:	eb19 090b 	adds.w	r9, r9, fp
 80061a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061a8:	f04f 0100 	mov.w	r1, #0
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061bc:	4689      	mov	r9, r1
 80061be:	4692      	mov	sl, r2
 80061c0:	eb1b 0509 	adds.w	r5, fp, r9
 80061c4:	eb4c 060a 	adc.w	r6, ip, sl
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4619      	mov	r1, r3
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	f04f 0400 	mov.w	r4, #0
 80061da:	0094      	lsls	r4, r2, #2
 80061dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061e0:	008b      	lsls	r3, r1, #2
 80061e2:	461a      	mov	r2, r3
 80061e4:	4623      	mov	r3, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	4631      	mov	r1, r6
 80061ea:	f7fa f841 	bl	8000270 <__aeabi_uldivmod>
 80061ee:	4603      	mov	r3, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <UART_SetConfig+0x6f4>)
 80061f6:	fba3 1302 	umull	r1, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2164      	movs	r1, #100	; 0x64
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	3332      	adds	r3, #50	; 0x32
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <UART_SetConfig+0x6f4>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	f003 020f 	and.w	r2, r3, #15
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4442      	add	r2, r8
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	e7ff      	b.n	800621e <UART_SetConfig+0x6e2>
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	40011000 	.word	0x40011000
 800622c:	40011400 	.word	0x40011400
 8006230:	51eb851f 	.word	0x51eb851f

08006234 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006246:	2b84      	cmp	r3, #132	; 0x84
 8006248:	d005      	beq.n	8006256 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800624a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	3303      	adds	r3, #3
 8006254:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006256:	68fb      	ldr	r3, [r7, #12]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626a:	f3ef 8305 	mrs	r3, IPSR
 800626e:	607b      	str	r3, [r7, #4]
  return(result);
 8006270:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	b2db      	uxtb	r3, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800628c:	f000 fd8a 	bl	8006da4 <vTaskStartScheduler>
  
  return osOK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	bd80      	pop	{r7, pc}

08006296 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800629a:	f7ff ffe3 	bl	8006264 <inHandlerMode>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80062a4:	f000 fe96 	bl	8006fd4 <xTaskGetTickCountFromISR>
 80062a8:	4603      	mov	r3, r0
 80062aa:	e002      	b.n	80062b2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80062ac:	f000 fe82 	bl	8006fb4 <xTaskGetTickCount>
 80062b0:	4603      	mov	r3, r0
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b8:	b089      	sub	sp, #36	; 0x24
 80062ba:	af04      	add	r7, sp, #16
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <osThreadCreate+0x54>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01c      	beq.n	800630a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685c      	ldr	r4, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681d      	ldr	r5, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691e      	ldr	r6, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff ffa6 	bl	8006234 <makeFreeRtosPriority>
 80062e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f2:	9202      	str	r2, [sp, #8]
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	9100      	str	r1, [sp, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4632      	mov	r2, r6
 80062fc:	4629      	mov	r1, r5
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 f92a 	bl	8006558 <xTaskCreateStatic>
 8006304:	4603      	mov	r3, r0
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e01c      	b.n	8006344 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685c      	ldr	r4, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006316:	b29e      	uxth	r6, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff ff88 	bl	8006234 <makeFreeRtosPriority>
 8006324:	4602      	mov	r2, r0
 8006326:	f107 030c 	add.w	r3, r7, #12
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	9200      	str	r2, [sp, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	4632      	mov	r2, r6
 8006332:	4629      	mov	r1, r5
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f969 	bl	800660c <xTaskCreate>
 800633a:	4603      	mov	r3, r0
 800633c:	2b01      	cmp	r3, #1
 800633e:	d001      	beq.n	8006344 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	e000      	b.n	8006346 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800634e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa8e 	bl	8006878 <vTaskDelete>
  return osOK;
 800635c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fb8a 	bl	8006a88 <vTaskSuspend>
  
  return osOK;
 8006374:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8006388:	f7ff ff6c 	bl	8006264 <inHandlerMode>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fc96 	bl	8006cc4 <xTaskResumeFromISR>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10b      	bne.n	80063b6 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <osThreadResume+0x40>)
 80063a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	e002      	b.n	80063b6 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc2b 	bl	8006c0c <vTaskResume>
  }
  return osOK;
 80063b6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <osDelayUntil+0x18>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e000      	b.n	80063de <osDelayUntil+0x1a>
 80063dc:	2301      	movs	r3, #1
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fad7 	bl	8006994 <vTaskDelayUntil>
  
  return osOK;
 80063e6:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f103 0208 	add.w	r2, r3, #8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f04f 32ff 	mov.w	r2, #4294967295
 8006408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f103 0208 	add.w	r2, r3, #8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f103 0208 	add.w	r2, r3, #8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e00c      	b.n	80064cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3308      	adds	r3, #8
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e002      	b.n	80064c0 <vListInsert+0x2e>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d2f6      	bcs.n	80064ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6892      	ldr	r2, [r2, #8]
 800651a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6852      	ldr	r2, [r2, #4]
 8006524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d103      	bne.n	8006538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	1e5a      	subs	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af04      	add	r7, sp, #16
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	e7fe      	b.n	800657e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <xTaskCreateStatic+0x42>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e7fe      	b.n	8006598 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800659a:	2354      	movs	r3, #84	; 0x54
 800659c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b54      	cmp	r3, #84	; 0x54
 80065a2:	d009      	beq.n	80065b8 <xTaskCreateStatic+0x60>
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	e7fe      	b.n	80065b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01e      	beq.n	80065fe <xTaskCreateStatic+0xa6>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01b      	beq.n	80065fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065d8:	2300      	movs	r3, #0
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f850 	bl	8006696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065f8:	f000 f8d4 	bl	80067a4 <prvAddNewTaskToReadyList>
 80065fc:	e001      	b.n	8006602 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006602:	697b      	ldr	r3, [r7, #20]
	}
 8006604:	4618      	mov	r0, r3
 8006606:	3728      	adds	r7, #40	; 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af04      	add	r7, sp, #16
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f975 	bl	8007910 <pvPortMalloc>
 8006626:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800662e:	2054      	movs	r0, #84	; 0x54
 8006630:	f001 f96e 	bl	8007910 <pvPortMalloc>
 8006634:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
 8006642:	e005      	b.n	8006650 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006644:	6978      	ldr	r0, [r7, #20]
 8006646:	f001 fa25 	bl	8007a94 <vPortFree>
 800664a:	e001      	b.n	8006650 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	2300      	movs	r3, #0
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f80e 	bl	8006696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800667a:	69f8      	ldr	r0, [r7, #28]
 800667c:	f000 f892 	bl	80067a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e002      	b.n	800668c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295
 800668a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800668c:	69bb      	ldr	r3, [r7, #24]
	}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b088      	sub	sp, #32
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066ae:	3b01      	subs	r3, #1
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f023 0307 	bic.w	r3, r3, #7
 80066bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <prvInitialiseNewTask+0x46>
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e7fe      	b.n	80066da <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01f      	beq.n	8006722 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	e012      	b.n	800670e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	7819      	ldrb	r1, [r3, #0]
 80066f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	3334      	adds	r3, #52	; 0x34
 80066f8:	460a      	mov	r2, r1
 80066fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2b0f      	cmp	r3, #15
 8006712:	d9e9      	bls.n	80066e8 <prvInitialiseNewTask+0x52>
 8006714:	e000      	b.n	8006718 <prvInitialiseNewTask+0x82>
			{
				break;
 8006716:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006720:	e003      	b.n	800672a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	2b06      	cmp	r3, #6
 800672e:	d901      	bls.n	8006734 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006730:	2306      	movs	r3, #6
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006738:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800673e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	2200      	movs	r2, #0
 8006744:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	3304      	adds	r3, #4
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fe70 	bl	8006430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	3318      	adds	r3, #24
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fe6b 	bl	8006430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	f1c3 0207 	rsb	r2, r3, #7
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	2200      	movs	r2, #0
 8006774:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	68f9      	ldr	r1, [r7, #12]
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f000 fe82 	bl	800748c <pxPortInitialiseStack>
 8006788:	4602      	mov	r2, r0
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800679a:	bf00      	nop
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067ac:	f000 ff96 	bl	80076dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067b0:	4b2a      	ldr	r3, [pc, #168]	; (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a29      	ldr	r2, [pc, #164]	; (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ba:	4b29      	ldr	r3, [pc, #164]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067c2:	4a27      	ldr	r2, [pc, #156]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067c8:	4b24      	ldr	r3, [pc, #144]	; (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d110      	bne.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067d0:	f000 fd3c 	bl	800724c <prvInitialiseTaskLists>
 80067d4:	e00d      	b.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067d6:	4b23      	ldr	r3, [pc, #140]	; (8006864 <prvAddNewTaskToReadyList+0xc0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d802      	bhi.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067ec:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <prvAddNewTaskToReadyList+0xc4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3301      	adds	r3, #1
 80067f8:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <prvAddNewTaskToReadyList+0xc4>)
 80067fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <prvAddNewTaskToReadyList+0xc8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	4a18      	ldr	r2, [pc, #96]	; (800686c <prvAddNewTaskToReadyList+0xc8>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <prvAddNewTaskToReadyList+0xcc>)
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7ff fe10 	bl	800644a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800682a:	f000 ff85 	bl	8007738 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <prvAddNewTaskToReadyList+0xc0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d207      	bcs.n	8006854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <prvAddNewTaskToReadyList+0xd0>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	200003e8 	.word	0x200003e8
 8006860:	200002e8 	.word	0x200002e8
 8006864:	200003f4 	.word	0x200003f4
 8006868:	20000404 	.word	0x20000404
 800686c:	200003f0 	.word	0x200003f0
 8006870:	200002ec 	.word	0x200002ec
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006880:	f000 ff2c 	bl	80076dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <vTaskDelete+0x18>
 800688a:	4b38      	ldr	r3, [pc, #224]	; (800696c <vTaskDelete+0xf4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	e000      	b.n	8006892 <vTaskDelete+0x1a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3304      	adds	r3, #4
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fe33 	bl	8006504 <uxListRemove>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d115      	bne.n	80068d0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	4931      	ldr	r1, [pc, #196]	; (8006970 <vTaskDelete+0xf8>)
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <vTaskDelete+0x58>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	2201      	movs	r2, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	43da      	mvns	r2, r3
 80068c6:	4b2b      	ldr	r3, [pc, #172]	; (8006974 <vTaskDelete+0xfc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4013      	ands	r3, r2
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <vTaskDelete+0xfc>)
 80068ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3318      	adds	r3, #24
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fe11 	bl	8006504 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80068e2:	4b25      	ldr	r3, [pc, #148]	; (8006978 <vTaskDelete+0x100>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	4a23      	ldr	r2, [pc, #140]	; (8006978 <vTaskDelete+0x100>)
 80068ea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <vTaskDelete+0xf4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d10b      	bne.n	800690e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	481f      	ldr	r0, [pc, #124]	; (800697c <vTaskDelete+0x104>)
 80068fe:	f7ff fda4 	bl	800644a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006902:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <vTaskDelete+0x108>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <vTaskDelete+0x108>)
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e009      	b.n	8006922 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800690e:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <vTaskDelete+0x10c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3b01      	subs	r3, #1
 8006914:	4a1b      	ldr	r2, [pc, #108]	; (8006984 <vTaskDelete+0x10c>)
 8006916:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 fd03 	bl	8007324 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800691e:	f000 fd2f 	bl	8007380 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006922:	f000 ff09 	bl	8007738 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <vTaskDelete+0x110>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01a      	beq.n	8006964 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <vTaskDelete+0xf4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	429a      	cmp	r2, r3
 8006936:	d115      	bne.n	8006964 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006938:	4b14      	ldr	r3, [pc, #80]	; (800698c <vTaskDelete+0x114>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <vTaskDelete+0xdc>
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	e7fe      	b.n	8006952 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <vTaskDelete+0x118>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200002e8 	.word	0x200002e8
 8006970:	200002ec 	.word	0x200002ec
 8006974:	200003f0 	.word	0x200003f0
 8006978:	20000404 	.word	0x20000404
 800697c:	200003bc 	.word	0x200003bc
 8006980:	200003d0 	.word	0x200003d0
 8006984:	200003e8 	.word	0x200003e8
 8006988:	200003f4 	.word	0x200003f4
 800698c:	20000410 	.word	0x20000410
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d109      	bne.n	80069bc <vTaskDelayUntil+0x28>
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	e7fe      	b.n	80069ba <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <vTaskDelayUntil+0x42>
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e7fe      	b.n	80069d4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80069d6:	4b29      	ldr	r3, [pc, #164]	; (8006a7c <vTaskDelayUntil+0xe8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <vTaskDelayUntil+0x5e>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e7fe      	b.n	80069f0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80069f2:	f000 fa35 	bl	8006e60 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80069f6:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <vTaskDelayUntil+0xec>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d20b      	bcs.n	8006a28 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d211      	bcs.n	8006a3e <vTaskDelayUntil+0xaa>
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d90d      	bls.n	8006a3e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006a22:	2301      	movs	r3, #1
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
 8006a26:	e00a      	b.n	8006a3e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d303      	bcc.n	8006a3a <vTaskDelayUntil+0xa6>
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d901      	bls.n	8006a3e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d006      	beq.n	8006a58 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fcb4 	bl	80073c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006a58:	f000 fa10 	bl	8006e7c <xTaskResumeAll>
 8006a5c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <vTaskDelayUntil+0xf0>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a74:	bf00      	nop
 8006a76:	3728      	adds	r7, #40	; 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000410 	.word	0x20000410
 8006a80:	200003ec 	.word	0x200003ec
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006a90:	f000 fe24 	bl	80076dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <vTaskSuspend+0x18>
 8006a9a:	4b3c      	ldr	r3, [pc, #240]	; (8006b8c <vTaskSuspend+0x104>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	e000      	b.n	8006aa2 <vTaskSuspend+0x1a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fd2b 	bl	8006504 <uxListRemove>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d115      	bne.n	8006ae0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	4935      	ldr	r1, [pc, #212]	; (8006b90 <vTaskSuspend+0x108>)
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <vTaskSuspend+0x58>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	2201      	movs	r2, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43da      	mvns	r2, r3
 8006ad6:	4b2f      	ldr	r3, [pc, #188]	; (8006b94 <vTaskSuspend+0x10c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4013      	ands	r3, r2
 8006adc:	4a2d      	ldr	r2, [pc, #180]	; (8006b94 <vTaskSuspend+0x10c>)
 8006ade:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3318      	adds	r3, #24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fd09 	bl	8006504 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4827      	ldr	r0, [pc, #156]	; (8006b98 <vTaskSuspend+0x110>)
 8006afa:	f7ff fca6 	bl	800644a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d103      	bne.n	8006b12 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006b12:	f000 fe11 	bl	8007738 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006b16:	4b21      	ldr	r3, [pc, #132]	; (8006b9c <vTaskSuspend+0x114>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006b1e:	f000 fddd 	bl	80076dc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006b22:	f000 fc2d 	bl	8007380 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006b26:	f000 fe07 	bl	8007738 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006b2a:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <vTaskSuspend+0x104>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d126      	bne.n	8006b82 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8006b34:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <vTaskSuspend+0x114>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d016      	beq.n	8006b6a <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006b3c:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <vTaskSuspend+0x118>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <vTaskSuspend+0xd0>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	e7fe      	b.n	8006b56 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <vTaskSuspend+0x11c>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b68:	e00b      	b.n	8006b82 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <vTaskSuspend+0x110>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <vTaskSuspend+0x120>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d103      	bne.n	8006b7e <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <vTaskSuspend+0x104>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
	}
 8006b7c:	e001      	b.n	8006b82 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8006b7e:	f000 faf3 	bl	8007168 <vTaskSwitchContext>
	}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200002e8 	.word	0x200002e8
 8006b90:	200002ec 	.word	0x200002ec
 8006b94:	200003f0 	.word	0x200003f0
 8006b98:	200003d4 	.word	0x200003d4
 8006b9c:	200003f4 	.word	0x200003f4
 8006ba0:	20000410 	.word	0x20000410
 8006ba4:	e000ed04 	.word	0xe000ed04
 8006ba8:	200003e8 	.word	0x200003e8

08006bac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvTaskIsTaskSuspended+0x2a>
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e7fe      	b.n	8006bd4 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	4a0a      	ldr	r2, [pc, #40]	; (8006c04 <prvTaskIsTaskSuspended+0x58>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10a      	bne.n	8006bf6 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <prvTaskIsTaskSuspended+0x5c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d005      	beq.n	8006bf6 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bf6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	200003d4 	.word	0x200003d4
 8006c08:	200003a8 	.word	0x200003a8

08006c0c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <vTaskResume+0x26>
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60bb      	str	r3, [r7, #8]
 8006c30:	e7fe      	b.n	8006c30 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006c32:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <vTaskResume+0xa8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d037      	beq.n	8006cac <vTaskResume+0xa0>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d034      	beq.n	8006cac <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8006c42:	f000 fd4b 	bl	80076dc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff ffb0 	bl	8006bac <prvTaskIsTaskSuspended>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d02a      	beq.n	8006ca8 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fc54 	bl	8006504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	2201      	movs	r2, #1
 8006c62:	409a      	lsls	r2, r3
 8006c64:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <vTaskResume+0xac>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <vTaskResume+0xac>)
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <vTaskResume+0xb0>)
 8006c7c:	441a      	add	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7ff fbe0 	bl	800644a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <vTaskResume+0xa8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d307      	bcc.n	8006ca8 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006c98:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <vTaskResume+0xb4>)
 8006c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006ca8:	f000 fd46 	bl	8007738 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	200002e8 	.word	0x200002e8
 8006cb8:	200003f0 	.word	0x200003f0
 8006cbc:	200002ec 	.word	0x200002ec
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <xTaskResumeFromISR+0x2a>
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e7fe      	b.n	8006cec <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cee:	f000 fdd1 	bl	8007894 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	617a      	str	r2, [r7, #20]
 8006d08:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d0a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d0c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006d0e:	6a38      	ldr	r0, [r7, #32]
 8006d10:	f7ff ff4c 	bl	8006bac <prvTaskIsTaskSuspended>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02f      	beq.n	8006d7a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <xTaskResumeFromISR+0xcc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d125      	bne.n	8006d6e <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <xTaskResumeFromISR+0xd0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d301      	bcc.n	8006d34 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fbe3 	bl	8006504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	2201      	movs	r2, #1
 8006d44:	409a      	lsls	r2, r3
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <xTaskResumeFromISR+0xd4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <xTaskResumeFromISR+0xd4>)
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4a0f      	ldr	r2, [pc, #60]	; (8006d9c <xTaskResumeFromISR+0xd8>)
 8006d5e:	441a      	add	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4619      	mov	r1, r3
 8006d66:	4610      	mov	r0, r2
 8006d68:	f7ff fb6f 	bl	800644a <vListInsertEnd>
 8006d6c:	e005      	b.n	8006d7a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	3318      	adds	r3, #24
 8006d72:	4619      	mov	r1, r3
 8006d74:	480a      	ldr	r0, [pc, #40]	; (8006da0 <xTaskResumeFromISR+0xdc>)
 8006d76:	f7ff fb68 	bl	800644a <vListInsertEnd>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3728      	adds	r7, #40	; 0x28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000410 	.word	0x20000410
 8006d94:	200002e8 	.word	0x200002e8
 8006d98:	200003f0 	.word	0x200003f0
 8006d9c:	200002ec 	.word	0x200002ec
 8006da0:	200003a8 	.word	0x200003a8

08006da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	; 0x28
 8006da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006db2:	463a      	mov	r2, r7
 8006db4:	1d39      	adds	r1, r7, #4
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7f9 fde6 	bl	800098c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	9202      	str	r2, [sp, #8]
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	460a      	mov	r2, r1
 8006dd2:	491d      	ldr	r1, [pc, #116]	; (8006e48 <vTaskStartScheduler+0xa4>)
 8006dd4:	481d      	ldr	r0, [pc, #116]	; (8006e4c <vTaskStartScheduler+0xa8>)
 8006dd6:	f7ff fbbf 	bl	8006558 <xTaskCreateStatic>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <vTaskStartScheduler+0xac>)
 8006dde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006de0:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <vTaskStartScheduler+0xac>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006de8:	2301      	movs	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e001      	b.n	8006df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d115      	bne.n	8006e24 <vTaskStartScheduler+0x80>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <vTaskStartScheduler+0xb0>)
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <vTaskStartScheduler+0xb4>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <vTaskStartScheduler+0xb8>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e1e:	f000 fbbf 	bl	80075a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e22:	e00d      	b.n	8006e40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d109      	bne.n	8006e40 <vTaskStartScheduler+0x9c>
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e7fe      	b.n	8006e3e <vTaskStartScheduler+0x9a>
}
 8006e40:	bf00      	nop
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	08008710 	.word	0x08008710
 8006e4c:	0800721d 	.word	0x0800721d
 8006e50:	2000040c 	.word	0x2000040c
 8006e54:	20000408 	.word	0x20000408
 8006e58:	200003f4 	.word	0x200003f4
 8006e5c:	200003ec 	.word	0x200003ec

08006e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <vTaskSuspendAll+0x18>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	4a03      	ldr	r2, [pc, #12]	; (8006e78 <vTaskSuspendAll+0x18>)
 8006e6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e6e:	bf00      	nop
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	20000410 	.word	0x20000410

08006e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e8a:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <xTaskResumeAll+0x114>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <xTaskResumeAll+0x2a>
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ea6:	f000 fc19 	bl	80076dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eaa:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <xTaskResumeAll+0x114>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4a37      	ldr	r2, [pc, #220]	; (8006f90 <xTaskResumeAll+0x114>)
 8006eb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <xTaskResumeAll+0x114>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d161      	bne.n	8006f80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <xTaskResumeAll+0x118>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05d      	beq.n	8006f80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec4:	e02e      	b.n	8006f24 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec6:	4b34      	ldr	r3, [pc, #208]	; (8006f98 <xTaskResumeAll+0x11c>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3318      	adds	r3, #24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff fb16 	bl	8006504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fb11 	bl	8006504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	409a      	lsls	r2, r3
 8006eea:	4b2c      	ldr	r3, [pc, #176]	; (8006f9c <xTaskResumeAll+0x120>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <xTaskResumeAll+0x120>)
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <xTaskResumeAll+0x124>)
 8006f02:	441a      	add	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7ff fa9d 	bl	800644a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <xTaskResumeAll+0x128>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d302      	bcc.n	8006f24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006f1e:	4b22      	ldr	r3, [pc, #136]	; (8006fa8 <xTaskResumeAll+0x12c>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <xTaskResumeAll+0x11c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1cc      	bne.n	8006ec6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f32:	f000 fa25 	bl	8007380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f36:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <xTaskResumeAll+0x130>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d010      	beq.n	8006f64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f42:	f000 f859 	bl	8006ff8 <xTaskIncrementTick>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006f4c:	4b16      	ldr	r3, [pc, #88]	; (8006fa8 <xTaskResumeAll+0x12c>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f1      	bne.n	8006f42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <xTaskResumeAll+0x130>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f64:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <xTaskResumeAll+0x12c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <xTaskResumeAll+0x134>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f80:	f000 fbda 	bl	8007738 <vPortExitCritical>

	return xAlreadyYielded;
 8006f84:	68bb      	ldr	r3, [r7, #8]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000410 	.word	0x20000410
 8006f94:	200003e8 	.word	0x200003e8
 8006f98:	200003a8 	.word	0x200003a8
 8006f9c:	200003f0 	.word	0x200003f0
 8006fa0:	200002ec 	.word	0x200002ec
 8006fa4:	200002e8 	.word	0x200002e8
 8006fa8:	200003fc 	.word	0x200003fc
 8006fac:	200003f8 	.word	0x200003f8
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <xTaskGetTickCount+0x1c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fc0:	687b      	ldr	r3, [r7, #4]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	200003ec 	.word	0x200003ec

08006fd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fda:	f000 fc5b 	bl	8007894 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fe2:	4b04      	ldr	r3, [pc, #16]	; (8006ff4 <xTaskGetTickCountFromISR+0x20>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe8:	683b      	ldr	r3, [r7, #0]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200003ec 	.word	0x200003ec

08006ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007002:	4b4e      	ldr	r3, [pc, #312]	; (800713c <xTaskIncrementTick+0x144>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 8087 	bne.w	800711a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800700c:	4b4c      	ldr	r3, [pc, #304]	; (8007140 <xTaskIncrementTick+0x148>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007014:	4a4a      	ldr	r2, [pc, #296]	; (8007140 <xTaskIncrementTick+0x148>)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11f      	bne.n	8007060 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007020:	4b48      	ldr	r3, [pc, #288]	; (8007144 <xTaskIncrementTick+0x14c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <xTaskIncrementTick+0x46>
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	e7fe      	b.n	800703c <xTaskIncrementTick+0x44>
 800703e:	4b41      	ldr	r3, [pc, #260]	; (8007144 <xTaskIncrementTick+0x14c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	4b40      	ldr	r3, [pc, #256]	; (8007148 <xTaskIncrementTick+0x150>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a3e      	ldr	r2, [pc, #248]	; (8007144 <xTaskIncrementTick+0x14c>)
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4a3e      	ldr	r2, [pc, #248]	; (8007148 <xTaskIncrementTick+0x150>)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4b3e      	ldr	r3, [pc, #248]	; (800714c <xTaskIncrementTick+0x154>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a3c      	ldr	r2, [pc, #240]	; (800714c <xTaskIncrementTick+0x154>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	f000 f990 	bl	8007380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007060:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <xTaskIncrementTick+0x158>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d348      	bcc.n	80070fc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800706a:	4b36      	ldr	r3, [pc, #216]	; (8007144 <xTaskIncrementTick+0x14c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <xTaskIncrementTick+0x158>)
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	601a      	str	r2, [r3, #0]
					break;
 800707c:	e03e      	b.n	80070fc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <xTaskIncrementTick+0x14c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d203      	bcs.n	800709e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007096:	4a2e      	ldr	r2, [pc, #184]	; (8007150 <xTaskIncrementTick+0x158>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800709c:	e02e      	b.n	80070fc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fa2e 	bl	8006504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	3318      	adds	r3, #24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fa25 	bl	8006504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	2201      	movs	r2, #1
 80070c0:	409a      	lsls	r2, r3
 80070c2:	4b24      	ldr	r3, [pc, #144]	; (8007154 <xTaskIncrementTick+0x15c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	4a22      	ldr	r2, [pc, #136]	; (8007154 <xTaskIncrementTick+0x15c>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <xTaskIncrementTick+0x160>)
 80070da:	441a      	add	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7ff f9b1 	bl	800644a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <xTaskIncrementTick+0x164>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3b9      	bcc.n	800706a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070fa:	e7b6      	b.n	800706a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <xTaskIncrementTick+0x164>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	4915      	ldr	r1, [pc, #84]	; (8007158 <xTaskIncrementTick+0x160>)
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d907      	bls.n	8007124 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e004      	b.n	8007124 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800711a:	4b11      	ldr	r3, [pc, #68]	; (8007160 <xTaskIncrementTick+0x168>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <xTaskIncrementTick+0x168>)
 8007122:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007124:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <xTaskIncrementTick+0x16c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007130:	697b      	ldr	r3, [r7, #20]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000410 	.word	0x20000410
 8007140:	200003ec 	.word	0x200003ec
 8007144:	200003a0 	.word	0x200003a0
 8007148:	200003a4 	.word	0x200003a4
 800714c:	20000400 	.word	0x20000400
 8007150:	20000408 	.word	0x20000408
 8007154:	200003f0 	.word	0x200003f0
 8007158:	200002ec 	.word	0x200002ec
 800715c:	200002e8 	.word	0x200002e8
 8007160:	200003f8 	.word	0x200003f8
 8007164:	200003fc 	.word	0x200003fc

08007168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <vTaskSwitchContext+0xa0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007176:	4b25      	ldr	r3, [pc, #148]	; (800720c <vTaskSwitchContext+0xa4>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800717c:	e03e      	b.n	80071fc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800717e:	4b23      	ldr	r3, [pc, #140]	; (800720c <vTaskSwitchContext+0xa4>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007184:	4b22      	ldr	r3, [pc, #136]	; (8007210 <vTaskSwitchContext+0xa8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	fab3 f383 	clz	r3, r3
 8007190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	f1c3 031f 	rsb	r3, r3, #31
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	491e      	ldr	r1, [pc, #120]	; (8007214 <vTaskSwitchContext+0xac>)
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	e7fe      	b.n	80071c0 <vTaskSwitchContext+0x58>
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4a11      	ldr	r2, [pc, #68]	; (8007214 <vTaskSwitchContext+0xac>)
 80071ce:	4413      	add	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3308      	adds	r3, #8
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d104      	bne.n	80071f2 <vTaskSwitchContext+0x8a>
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4a07      	ldr	r2, [pc, #28]	; (8007218 <vTaskSwitchContext+0xb0>)
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	20000410 	.word	0x20000410
 800720c:	200003fc 	.word	0x200003fc
 8007210:	200003f0 	.word	0x200003f0
 8007214:	200002ec 	.word	0x200002ec
 8007218:	200002e8 	.word	0x200002e8

0800721c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007224:	f000 f852 	bl	80072cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <prvIdleTask+0x28>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d9f9      	bls.n	8007224 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <prvIdleTask+0x2c>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007240:	e7f0      	b.n	8007224 <prvIdleTask+0x8>
 8007242:	bf00      	nop
 8007244:	200002ec 	.word	0x200002ec
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007252:	2300      	movs	r3, #0
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	e00c      	b.n	8007272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4a12      	ldr	r2, [pc, #72]	; (80072ac <prvInitialiseTaskLists+0x60>)
 8007264:	4413      	add	r3, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff f8c2 	bl	80063f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3301      	adds	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b06      	cmp	r3, #6
 8007276:	d9ef      	bls.n	8007258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007278:	480d      	ldr	r0, [pc, #52]	; (80072b0 <prvInitialiseTaskLists+0x64>)
 800727a:	f7ff f8b9 	bl	80063f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800727e:	480d      	ldr	r0, [pc, #52]	; (80072b4 <prvInitialiseTaskLists+0x68>)
 8007280:	f7ff f8b6 	bl	80063f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007284:	480c      	ldr	r0, [pc, #48]	; (80072b8 <prvInitialiseTaskLists+0x6c>)
 8007286:	f7ff f8b3 	bl	80063f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800728a:	480c      	ldr	r0, [pc, #48]	; (80072bc <prvInitialiseTaskLists+0x70>)
 800728c:	f7ff f8b0 	bl	80063f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007290:	480b      	ldr	r0, [pc, #44]	; (80072c0 <prvInitialiseTaskLists+0x74>)
 8007292:	f7ff f8ad 	bl	80063f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <prvInitialiseTaskLists+0x78>)
 8007298:	4a05      	ldr	r2, [pc, #20]	; (80072b0 <prvInitialiseTaskLists+0x64>)
 800729a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <prvInitialiseTaskLists+0x7c>)
 800729e:	4a05      	ldr	r2, [pc, #20]	; (80072b4 <prvInitialiseTaskLists+0x68>)
 80072a0:	601a      	str	r2, [r3, #0]
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	200002ec 	.word	0x200002ec
 80072b0:	20000378 	.word	0x20000378
 80072b4:	2000038c 	.word	0x2000038c
 80072b8:	200003a8 	.word	0x200003a8
 80072bc:	200003bc 	.word	0x200003bc
 80072c0:	200003d4 	.word	0x200003d4
 80072c4:	200003a0 	.word	0x200003a0
 80072c8:	200003a4 	.word	0x200003a4

080072cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d2:	e019      	b.n	8007308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072d4:	f000 fa02 	bl	80076dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <prvCheckTasksWaitingTermination+0x4c>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff f90d 	bl	8006504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ea:	4b0c      	ldr	r3, [pc, #48]	; (800731c <prvCheckTasksWaitingTermination+0x50>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	4a0a      	ldr	r2, [pc, #40]	; (800731c <prvCheckTasksWaitingTermination+0x50>)
 80072f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <prvCheckTasksWaitingTermination+0x54>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <prvCheckTasksWaitingTermination+0x54>)
 80072fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072fe:	f000 fa1b 	bl	8007738 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f80e 	bl	8007324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <prvCheckTasksWaitingTermination+0x54>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e1      	bne.n	80072d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	200003bc 	.word	0x200003bc
 800731c:	200003e8 	.word	0x200003e8
 8007320:	200003d0 	.word	0x200003d0

08007324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007332:	2b00      	cmp	r3, #0
 8007334:	d108      	bne.n	8007348 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fbaa 	bl	8007a94 <vPortFree>
				vPortFree( pxTCB );
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fba7 	bl	8007a94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007346:	e017      	b.n	8007378 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800734e:	2b01      	cmp	r3, #1
 8007350:	d103      	bne.n	800735a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb9e 	bl	8007a94 <vPortFree>
	}
 8007358:	e00e      	b.n	8007378 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007360:	2b02      	cmp	r3, #2
 8007362:	d009      	beq.n	8007378 <prvDeleteTCB+0x54>
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e7fe      	b.n	8007376 <prvDeleteTCB+0x52>
	}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvResetNextTaskUnblockTime+0x38>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <prvResetNextTaskUnblockTime+0x3c>)
 8007392:	f04f 32ff 	mov.w	r2, #4294967295
 8007396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007398:	e008      	b.n	80073ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <prvResetNextTaskUnblockTime+0x38>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a04      	ldr	r2, [pc, #16]	; (80073bc <prvResetNextTaskUnblockTime+0x3c>)
 80073aa:	6013      	str	r3, [r2, #0]
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	200003a0 	.word	0x200003a0
 80073bc:	20000408 	.word	0x20000408

080073c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ca:	4b29      	ldr	r3, [pc, #164]	; (8007470 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d0:	4b28      	ldr	r3, [pc, #160]	; (8007474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff f894 	bl	8006504 <uxListRemove>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2201      	movs	r2, #1
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	43da      	mvns	r2, r3
 80073f0:	4b21      	ldr	r3, [pc, #132]	; (8007478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4013      	ands	r3, r2
 80073f6:	4a20      	ldr	r2, [pc, #128]	; (8007478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d10a      	bne.n	8007418 <prvAddCurrentTaskToDelayedList+0x58>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007408:	4b1a      	ldr	r3, [pc, #104]	; (8007474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3304      	adds	r3, #4
 800740e:	4619      	mov	r1, r3
 8007410:	481a      	ldr	r0, [pc, #104]	; (800747c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007412:	f7ff f81a 	bl	800644a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007416:	e026      	b.n	8007466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007420:	4b14      	ldr	r3, [pc, #80]	; (8007474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d209      	bcs.n	8007444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007430:	4b13      	ldr	r3, [pc, #76]	; (8007480 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3304      	adds	r3, #4
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f7ff f828 	bl	8006492 <vListInsert>
}
 8007442:	e010      	b.n	8007466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7ff f81e 	bl	8006492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	d202      	bcs.n	8007466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007460:	4a09      	ldr	r2, [pc, #36]	; (8007488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6013      	str	r3, [r2, #0]
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	200003ec 	.word	0x200003ec
 8007474:	200002e8 	.word	0x200002e8
 8007478:	200003f0 	.word	0x200003f0
 800747c:	200003d4 	.word	0x200003d4
 8007480:	200003a4 	.word	0x200003a4
 8007484:	200003a0 	.word	0x200003a0
 8007488:	20000408 	.word	0x20000408

0800748c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3b04      	subs	r3, #4
 800749c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3b04      	subs	r3, #4
 80074aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0201 	bic.w	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074bc:	4a0c      	ldr	r2, [pc, #48]	; (80074f0 <pxPortInitialiseStack+0x64>)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3b14      	subs	r3, #20
 80074c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f06f 0202 	mvn.w	r2, #2
 80074da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3b20      	subs	r3, #32
 80074e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074e2:	68fb      	ldr	r3, [r7, #12]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	080074f5 	.word	0x080074f5

080074f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <prvTaskExitError+0x50>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d009      	beq.n	800751c <prvTaskExitError+0x28>
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e7fe      	b.n	800751a <prvTaskExitError+0x26>
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800752e:	bf00      	nop
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0fc      	beq.n	8007530 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c
	...

08007550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <pxCurrentTCBConst2>)
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	6808      	ldr	r0, [r1, #0]
 8007556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	f380 8809 	msr	PSP, r0
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8811 	msr	BASEPRI, r0
 800756a:	4770      	bx	lr
 800756c:	f3af 8000 	nop.w

08007570 <pxCurrentTCBConst2>:
 8007570:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop

08007578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007578:	4808      	ldr	r0, [pc, #32]	; (800759c <prvPortStartFirstTask+0x24>)
 800757a:	6800      	ldr	r0, [r0, #0]
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	f380 8808 	msr	MSP, r0
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8814 	msr	CONTROL, r0
 800758a:	b662      	cpsie	i
 800758c:	b661      	cpsie	f
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	df00      	svc	0
 8007598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800759a:	bf00      	nop
 800759c:	e000ed08 	.word	0xe000ed08

080075a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075a6:	4b44      	ldr	r3, [pc, #272]	; (80076b8 <xPortStartScheduler+0x118>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a44      	ldr	r2, [pc, #272]	; (80076bc <xPortStartScheduler+0x11c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d109      	bne.n	80075c4 <xPortStartScheduler+0x24>
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	e7fe      	b.n	80075c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075c4:	4b3c      	ldr	r3, [pc, #240]	; (80076b8 <xPortStartScheduler+0x118>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a3d      	ldr	r2, [pc, #244]	; (80076c0 <xPortStartScheduler+0x120>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d109      	bne.n	80075e2 <xPortStartScheduler+0x42>
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e7fe      	b.n	80075e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075e2:	4b38      	ldr	r3, [pc, #224]	; (80076c4 <xPortStartScheduler+0x124>)
 80075e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	22ff      	movs	r2, #255	; 0xff
 80075f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007604:	b2da      	uxtb	r2, r3
 8007606:	4b30      	ldr	r3, [pc, #192]	; (80076c8 <xPortStartScheduler+0x128>)
 8007608:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800760a:	4b30      	ldr	r3, [pc, #192]	; (80076cc <xPortStartScheduler+0x12c>)
 800760c:	2207      	movs	r2, #7
 800760e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007610:	e009      	b.n	8007626 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007612:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <xPortStartScheduler+0x12c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3b01      	subs	r3, #1
 8007618:	4a2c      	ldr	r2, [pc, #176]	; (80076cc <xPortStartScheduler+0x12c>)
 800761a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	b2db      	uxtb	r3, r3
 8007624:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762e:	2b80      	cmp	r3, #128	; 0x80
 8007630:	d0ef      	beq.n	8007612 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007632:	4b26      	ldr	r3, [pc, #152]	; (80076cc <xPortStartScheduler+0x12c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1c3 0307 	rsb	r3, r3, #7
 800763a:	2b04      	cmp	r3, #4
 800763c:	d009      	beq.n	8007652 <xPortStartScheduler+0xb2>
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	e7fe      	b.n	8007650 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007652:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <xPortStartScheduler+0x12c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <xPortStartScheduler+0x12c>)
 800765a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <xPortStartScheduler+0x12c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007664:	4a19      	ldr	r2, [pc, #100]	; (80076cc <xPortStartScheduler+0x12c>)
 8007666:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	b2da      	uxtb	r2, r3
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007670:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <xPortStartScheduler+0x130>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <xPortStartScheduler+0x130>)
 8007676:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800767a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <xPortStartScheduler+0x130>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <xPortStartScheduler+0x130>)
 8007682:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007686:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007688:	f000 f8d6 	bl	8007838 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <xPortStartScheduler+0x134>)
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007692:	f000 f8f5 	bl	8007880 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <xPortStartScheduler+0x138>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a0f      	ldr	r2, [pc, #60]	; (80076d8 <xPortStartScheduler+0x138>)
 800769c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076a2:	f7ff ff69 	bl	8007578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076a6:	f7ff fd5f 	bl	8007168 <vTaskSwitchContext>
	prvTaskExitError();
 80076aa:	f7ff ff23 	bl	80074f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	e000ed00 	.word	0xe000ed00
 80076bc:	410fc271 	.word	0x410fc271
 80076c0:	410fc270 	.word	0x410fc270
 80076c4:	e000e400 	.word	0xe000e400
 80076c8:	20000414 	.word	0x20000414
 80076cc:	20000418 	.word	0x20000418
 80076d0:	e000ed20 	.word	0xe000ed20
 80076d4:	2000000c 	.word	0x2000000c
 80076d8:	e000ef34 	.word	0xe000ef34

080076dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <vPortEnterCritical+0x54>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3301      	adds	r3, #1
 80076fa:	4a0d      	ldr	r2, [pc, #52]	; (8007730 <vPortEnterCritical+0x54>)
 80076fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076fe:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <vPortEnterCritical+0x54>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d10e      	bne.n	8007724 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <vPortEnterCritical+0x58>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <vPortEnterCritical+0x48>
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	e7fe      	b.n	8007722 <vPortEnterCritical+0x46>
	}
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	2000000c 	.word	0x2000000c
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <vPortExitCritical+0x4c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <vPortExitCritical+0x22>
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	e7fe      	b.n	8007758 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <vPortExitCritical+0x4c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3b01      	subs	r3, #1
 8007760:	4a08      	ldr	r2, [pc, #32]	; (8007784 <vPortExitCritical+0x4c>)
 8007762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <vPortExitCritical+0x4c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <vPortExitCritical+0x3e>
 800776c:	2300      	movs	r3, #0
 800776e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2000000c 	.word	0x2000000c
	...

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7ff fcd2 	bl	8007168 <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007810:	f7ff fbf2 	bl	8006ff8 <xTaskIncrementTick>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <SysTick_Handler+0x3c>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <vPortSetupTimerInterrupt+0x34>)
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007842:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortSetupTimerInterrupt+0x38>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <vPortSetupTimerInterrupt+0x3c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <vPortSetupTimerInterrupt+0x40>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	099b      	lsrs	r3, r3, #6
 8007854:	4a09      	ldr	r2, [pc, #36]	; (800787c <vPortSetupTimerInterrupt+0x44>)
 8007856:	3b01      	subs	r3, #1
 8007858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800785a:	4b04      	ldr	r3, [pc, #16]	; (800786c <vPortSetupTimerInterrupt+0x34>)
 800785c:	2207      	movs	r2, #7
 800785e:	601a      	str	r2, [r3, #0]
}
 8007860:	bf00      	nop
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	e000e010 	.word	0xe000e010
 8007870:	e000e018 	.word	0xe000e018
 8007874:	20000000 	.word	0x20000000
 8007878:	10624dd3 	.word	0x10624dd3
 800787c:	e000e014 	.word	0xe000e014

08007880 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007880:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007890 <vPortEnableVFP+0x10>
 8007884:	6801      	ldr	r1, [r0, #0]
 8007886:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800788a:	6001      	str	r1, [r0, #0]
 800788c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800788e:	bf00      	nop
 8007890:	e000ed88 	.word	0xe000ed88

08007894 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800789a:	f3ef 8305 	mrs	r3, IPSR
 800789e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d913      	bls.n	80078ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078a6:	4a16      	ldr	r2, [pc, #88]	; (8007900 <vPortValidateInterruptPriority+0x6c>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078b0:	4b14      	ldr	r3, [pc, #80]	; (8007904 <vPortValidateInterruptPriority+0x70>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	7afa      	ldrb	r2, [r7, #11]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d209      	bcs.n	80078ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e7fe      	b.n	80078cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <vPortValidateInterruptPriority+0x74>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <vPortValidateInterruptPriority+0x78>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d909      	bls.n	80078f2 <vPortValidateInterruptPriority+0x5e>
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	e7fe      	b.n	80078f0 <vPortValidateInterruptPriority+0x5c>
	}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	e000e3f0 	.word	0xe000e3f0
 8007904:	20000414 	.word	0x20000414
 8007908:	e000ed0c 	.word	0xe000ed0c
 800790c:	20000418 	.word	0x20000418

08007910 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800791c:	f7ff faa0 	bl	8006e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007920:	4b57      	ldr	r3, [pc, #348]	; (8007a80 <pvPortMalloc+0x170>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007928:	f000 f90c 	bl	8007b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800792c:	4b55      	ldr	r3, [pc, #340]	; (8007a84 <pvPortMalloc+0x174>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4013      	ands	r3, r2
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 808c 	bne.w	8007a52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01c      	beq.n	800797a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007940:	2208      	movs	r2, #8
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4413      	add	r3, r2
 8007946:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	2b00      	cmp	r3, #0
 8007950:	d013      	beq.n	800797a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f023 0307 	bic.w	r3, r3, #7
 8007958:	3308      	adds	r3, #8
 800795a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <pvPortMalloc+0x6a>
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e7fe      	b.n	8007978 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d068      	beq.n	8007a52 <pvPortMalloc+0x142>
 8007980:	4b41      	ldr	r3, [pc, #260]	; (8007a88 <pvPortMalloc+0x178>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	429a      	cmp	r2, r3
 8007988:	d863      	bhi.n	8007a52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800798a:	4b40      	ldr	r3, [pc, #256]	; (8007a8c <pvPortMalloc+0x17c>)
 800798c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800798e:	4b3f      	ldr	r3, [pc, #252]	; (8007a8c <pvPortMalloc+0x17c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007994:	e004      	b.n	80079a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d903      	bls.n	80079b2 <pvPortMalloc+0xa2>
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f1      	bne.n	8007996 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079b2:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <pvPortMalloc+0x170>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d04a      	beq.n	8007a52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2208      	movs	r2, #8
 80079c2:	4413      	add	r3, r2
 80079c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	2308      	movs	r3, #8
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	429a      	cmp	r2, r3
 80079dc:	d91e      	bls.n	8007a1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <pvPortMalloc+0xf4>
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	e7fe      	b.n	8007a02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a16:	69b8      	ldr	r0, [r7, #24]
 8007a18:	f000 f8f6 	bl	8007c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <pvPortMalloc+0x178>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	4a18      	ldr	r2, [pc, #96]	; (8007a88 <pvPortMalloc+0x178>)
 8007a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a2a:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <pvPortMalloc+0x178>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b18      	ldr	r3, [pc, #96]	; (8007a90 <pvPortMalloc+0x180>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d203      	bcs.n	8007a3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <pvPortMalloc+0x178>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	; (8007a90 <pvPortMalloc+0x180>)
 8007a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <pvPortMalloc+0x174>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a52:	f7ff fa13 	bl	8006e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <pvPortMalloc+0x164>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e7fe      	b.n	8007a72 <pvPortMalloc+0x162>
	return pvReturn;
 8007a74:	69fb      	ldr	r3, [r7, #28]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20004024 	.word	0x20004024
 8007a84:	20004030 	.word	0x20004030
 8007a88:	20004028 	.word	0x20004028
 8007a8c:	2000401c 	.word	0x2000401c
 8007a90:	2000402c 	.word	0x2000402c

08007a94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d046      	beq.n	8007b34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	425b      	negs	r3, r3
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4413      	add	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <vPortFree+0xa8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <vPortFree+0x42>
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e7fe      	b.n	8007ad4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d009      	beq.n	8007af2 <vPortFree+0x5e>
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	60bb      	str	r3, [r7, #8]
 8007af0:	e7fe      	b.n	8007af0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <vPortFree+0xa8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d019      	beq.n	8007b34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d115      	bne.n	8007b34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <vPortFree+0xa8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	43db      	mvns	r3, r3
 8007b12:	401a      	ands	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b18:	f7ff f9a2 	bl	8006e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <vPortFree+0xac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4413      	add	r3, r2
 8007b26:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <vPortFree+0xac>)
 8007b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b2a:	6938      	ldr	r0, [r7, #16]
 8007b2c:	f000 f86c 	bl	8007c08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b30:	f7ff f9a4 	bl	8006e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b34:	bf00      	nop
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20004030 	.word	0x20004030
 8007b40:	20004028 	.word	0x20004028

08007b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b50:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <prvHeapInit+0xac>)
 8007b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3307      	adds	r3, #7
 8007b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	4a1f      	ldr	r2, [pc, #124]	; (8007bf0 <prvHeapInit+0xac>)
 8007b74:	4413      	add	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <prvHeapInit+0xb0>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <prvHeapInit+0xb0>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b90:	2208      	movs	r2, #8
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0307 	bic.w	r3, r3, #7
 8007b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <prvHeapInit+0xb4>)
 8007ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <prvHeapInit+0xb4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <prvHeapInit+0xb4>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvHeapInit+0xb4>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <prvHeapInit+0xb8>)
 8007bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <prvHeapInit+0xbc>)
 8007bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <prvHeapInit+0xc0>)
 8007bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	2000041c 	.word	0x2000041c
 8007bf4:	2000401c 	.word	0x2000401c
 8007bf8:	20004024 	.word	0x20004024
 8007bfc:	2000402c 	.word	0x2000402c
 8007c00:	20004028 	.word	0x20004028
 8007c04:	20004030 	.word	0x20004030

08007c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c10:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <prvInsertBlockIntoFreeList+0xac>)
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e002      	b.n	8007c1c <prvInsertBlockIntoFreeList+0x14>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d8f7      	bhi.n	8007c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d108      	bne.n	8007c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d118      	bne.n	8007c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d00d      	beq.n	8007c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e008      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e003      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d002      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	2000401c 	.word	0x2000401c
 8007cb8:	20004024 	.word	0x20004024

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	; (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000010 	.word	0x20000010

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4e0d      	ldr	r6, [pc, #52]	; (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	; (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1ba4      	subs	r4, r4, r6
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	42a5      	cmp	r5, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4e0b      	ldr	r6, [pc, #44]	; (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	; (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f000 fc28 	bl	8008530 <_init>
 8007ce0:	1ba4      	subs	r4, r4, r6
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	42a5      	cmp	r5, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cf0:	4798      	blx	r3
 8007cf2:	3501      	adds	r5, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cfa:	4798      	blx	r3
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	08008774 	.word	0x08008774
 8007d04:	08008774 	.word	0x08008774
 8007d08:	08008774 	.word	0x08008774
 8007d0c:	08008778 	.word	0x08008778

08007d10 <memcpy>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	1e43      	subs	r3, r0, #1
 8007d14:	440a      	add	r2, r1
 8007d16:	4291      	cmp	r1, r2
 8007d18:	d100      	bne.n	8007d1c <memcpy+0xc>
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d24:	e7f7      	b.n	8007d16 <memcpy+0x6>

08007d26 <memset>:
 8007d26:	4402      	add	r2, r0
 8007d28:	4603      	mov	r3, r0
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d100      	bne.n	8007d30 <memset+0xa>
 8007d2e:	4770      	bx	lr
 8007d30:	f803 1b01 	strb.w	r1, [r3], #1
 8007d34:	e7f9      	b.n	8007d2a <memset+0x4>
	...

08007d38 <siprintf>:
 8007d38:	b40e      	push	{r1, r2, r3}
 8007d3a:	b500      	push	{lr}
 8007d3c:	b09c      	sub	sp, #112	; 0x70
 8007d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d40:	9002      	str	r0, [sp, #8]
 8007d42:	9006      	str	r0, [sp, #24]
 8007d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d48:	4809      	ldr	r0, [pc, #36]	; (8007d70 <siprintf+0x38>)
 8007d4a:	9107      	str	r1, [sp, #28]
 8007d4c:	9104      	str	r1, [sp, #16]
 8007d4e:	4909      	ldr	r1, [pc, #36]	; (8007d74 <siprintf+0x3c>)
 8007d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d54:	9105      	str	r1, [sp, #20]
 8007d56:	6800      	ldr	r0, [r0, #0]
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	a902      	add	r1, sp, #8
 8007d5c:	f000 f866 	bl	8007e2c <_svfiprintf_r>
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	b01c      	add	sp, #112	; 0x70
 8007d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d6c:	b003      	add	sp, #12
 8007d6e:	4770      	bx	lr
 8007d70:	20000010 	.word	0x20000010
 8007d74:	ffff0208 	.word	0xffff0208

08007d78 <__ssputs_r>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	688e      	ldr	r6, [r1, #8]
 8007d7e:	429e      	cmp	r6, r3
 8007d80:	4682      	mov	sl, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	4690      	mov	r8, r2
 8007d86:	4699      	mov	r9, r3
 8007d88:	d837      	bhi.n	8007dfa <__ssputs_r+0x82>
 8007d8a:	898a      	ldrh	r2, [r1, #12]
 8007d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d90:	d031      	beq.n	8007df6 <__ssputs_r+0x7e>
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	6909      	ldr	r1, [r1, #16]
 8007d96:	1a6f      	subs	r7, r5, r1
 8007d98:	6965      	ldr	r5, [r4, #20]
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007da0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007da4:	f109 0301 	add.w	r3, r9, #1
 8007da8:	443b      	add	r3, r7
 8007daa:	429d      	cmp	r5, r3
 8007dac:	bf38      	it	cc
 8007dae:	461d      	movcc	r5, r3
 8007db0:	0553      	lsls	r3, r2, #21
 8007db2:	d530      	bpl.n	8007e16 <__ssputs_r+0x9e>
 8007db4:	4629      	mov	r1, r5
 8007db6:	f000 fb21 	bl	80083fc <_malloc_r>
 8007dba:	4606      	mov	r6, r0
 8007dbc:	b950      	cbnz	r0, 8007dd4 <__ssputs_r+0x5c>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	f8ca 3000 	str.w	r3, [sl]
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd4:	463a      	mov	r2, r7
 8007dd6:	6921      	ldr	r1, [r4, #16]
 8007dd8:	f7ff ff9a 	bl	8007d10 <memcpy>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	6126      	str	r6, [r4, #16]
 8007dea:	6165      	str	r5, [r4, #20]
 8007dec:	443e      	add	r6, r7
 8007dee:	1bed      	subs	r5, r5, r7
 8007df0:	6026      	str	r6, [r4, #0]
 8007df2:	60a5      	str	r5, [r4, #8]
 8007df4:	464e      	mov	r6, r9
 8007df6:	454e      	cmp	r6, r9
 8007df8:	d900      	bls.n	8007dfc <__ssputs_r+0x84>
 8007dfa:	464e      	mov	r6, r9
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4641      	mov	r1, r8
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	f000 fa93 	bl	800832c <memmove>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	1b9b      	subs	r3, r3, r6
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	441e      	add	r6, r3
 8007e10:	6026      	str	r6, [r4, #0]
 8007e12:	2000      	movs	r0, #0
 8007e14:	e7dc      	b.n	8007dd0 <__ssputs_r+0x58>
 8007e16:	462a      	mov	r2, r5
 8007e18:	f000 fb4a 	bl	80084b0 <_realloc_r>
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1e2      	bne.n	8007de8 <__ssputs_r+0x70>
 8007e22:	6921      	ldr	r1, [r4, #16]
 8007e24:	4650      	mov	r0, sl
 8007e26:	f000 fa9b 	bl	8008360 <_free_r>
 8007e2a:	e7c8      	b.n	8007dbe <__ssputs_r+0x46>

08007e2c <_svfiprintf_r>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	461d      	mov	r5, r3
 8007e32:	898b      	ldrh	r3, [r1, #12]
 8007e34:	061f      	lsls	r7, r3, #24
 8007e36:	b09d      	sub	sp, #116	; 0x74
 8007e38:	4680      	mov	r8, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	d50f      	bpl.n	8007e60 <_svfiprintf_r+0x34>
 8007e40:	690b      	ldr	r3, [r1, #16]
 8007e42:	b96b      	cbnz	r3, 8007e60 <_svfiprintf_r+0x34>
 8007e44:	2140      	movs	r1, #64	; 0x40
 8007e46:	f000 fad9 	bl	80083fc <_malloc_r>
 8007e4a:	6020      	str	r0, [r4, #0]
 8007e4c:	6120      	str	r0, [r4, #16]
 8007e4e:	b928      	cbnz	r0, 8007e5c <_svfiprintf_r+0x30>
 8007e50:	230c      	movs	r3, #12
 8007e52:	f8c8 3000 	str.w	r3, [r8]
 8007e56:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5a:	e0c8      	b.n	8007fee <_svfiprintf_r+0x1c2>
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	6163      	str	r3, [r4, #20]
 8007e60:	2300      	movs	r3, #0
 8007e62:	9309      	str	r3, [sp, #36]	; 0x24
 8007e64:	2320      	movs	r3, #32
 8007e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e6a:	2330      	movs	r3, #48	; 0x30
 8007e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e70:	9503      	str	r5, [sp, #12]
 8007e72:	f04f 0b01 	mov.w	fp, #1
 8007e76:	4637      	mov	r7, r6
 8007e78:	463d      	mov	r5, r7
 8007e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e7e:	b10b      	cbz	r3, 8007e84 <_svfiprintf_r+0x58>
 8007e80:	2b25      	cmp	r3, #37	; 0x25
 8007e82:	d13e      	bne.n	8007f02 <_svfiprintf_r+0xd6>
 8007e84:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e88:	d00b      	beq.n	8007ea2 <_svfiprintf_r+0x76>
 8007e8a:	4653      	mov	r3, sl
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4640      	mov	r0, r8
 8007e92:	f7ff ff71 	bl	8007d78 <__ssputs_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	f000 80a4 	beq.w	8007fe4 <_svfiprintf_r+0x1b8>
 8007e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9e:	4453      	add	r3, sl
 8007ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea2:	783b      	ldrb	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 809d 	beq.w	8007fe4 <_svfiprintf_r+0x1b8>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	9307      	str	r3, [sp, #28]
 8007eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ebe:	462f      	mov	r7, r5
 8007ec0:	2205      	movs	r2, #5
 8007ec2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ec6:	4850      	ldr	r0, [pc, #320]	; (8008008 <_svfiprintf_r+0x1dc>)
 8007ec8:	f7f8 f982 	bl	80001d0 <memchr>
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	b9d0      	cbnz	r0, 8007f06 <_svfiprintf_r+0xda>
 8007ed0:	06d9      	lsls	r1, r3, #27
 8007ed2:	bf44      	itt	mi
 8007ed4:	2220      	movmi	r2, #32
 8007ed6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007eda:	071a      	lsls	r2, r3, #28
 8007edc:	bf44      	itt	mi
 8007ede:	222b      	movmi	r2, #43	; 0x2b
 8007ee0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ee4:	782a      	ldrb	r2, [r5, #0]
 8007ee6:	2a2a      	cmp	r2, #42	; 0x2a
 8007ee8:	d015      	beq.n	8007f16 <_svfiprintf_r+0xea>
 8007eea:	9a07      	ldr	r2, [sp, #28]
 8007eec:	462f      	mov	r7, r5
 8007eee:	2000      	movs	r0, #0
 8007ef0:	250a      	movs	r5, #10
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef8:	3b30      	subs	r3, #48	; 0x30
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d94d      	bls.n	8007f9a <_svfiprintf_r+0x16e>
 8007efe:	b1b8      	cbz	r0, 8007f30 <_svfiprintf_r+0x104>
 8007f00:	e00f      	b.n	8007f22 <_svfiprintf_r+0xf6>
 8007f02:	462f      	mov	r7, r5
 8007f04:	e7b8      	b.n	8007e78 <_svfiprintf_r+0x4c>
 8007f06:	4a40      	ldr	r2, [pc, #256]	; (8008008 <_svfiprintf_r+0x1dc>)
 8007f08:	1a80      	subs	r0, r0, r2
 8007f0a:	fa0b f000 	lsl.w	r0, fp, r0
 8007f0e:	4318      	orrs	r0, r3
 8007f10:	9004      	str	r0, [sp, #16]
 8007f12:	463d      	mov	r5, r7
 8007f14:	e7d3      	b.n	8007ebe <_svfiprintf_r+0x92>
 8007f16:	9a03      	ldr	r2, [sp, #12]
 8007f18:	1d11      	adds	r1, r2, #4
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	9103      	str	r1, [sp, #12]
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	db01      	blt.n	8007f26 <_svfiprintf_r+0xfa>
 8007f22:	9207      	str	r2, [sp, #28]
 8007f24:	e004      	b.n	8007f30 <_svfiprintf_r+0x104>
 8007f26:	4252      	negs	r2, r2
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	9207      	str	r2, [sp, #28]
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	783b      	ldrb	r3, [r7, #0]
 8007f32:	2b2e      	cmp	r3, #46	; 0x2e
 8007f34:	d10c      	bne.n	8007f50 <_svfiprintf_r+0x124>
 8007f36:	787b      	ldrb	r3, [r7, #1]
 8007f38:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3a:	d133      	bne.n	8007fa4 <_svfiprintf_r+0x178>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	9203      	str	r2, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb8      	it	lt
 8007f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f4c:	3702      	adds	r7, #2
 8007f4e:	9305      	str	r3, [sp, #20]
 8007f50:	4d2e      	ldr	r5, [pc, #184]	; (800800c <_svfiprintf_r+0x1e0>)
 8007f52:	7839      	ldrb	r1, [r7, #0]
 8007f54:	2203      	movs	r2, #3
 8007f56:	4628      	mov	r0, r5
 8007f58:	f7f8 f93a 	bl	80001d0 <memchr>
 8007f5c:	b138      	cbz	r0, 8007f6e <_svfiprintf_r+0x142>
 8007f5e:	2340      	movs	r3, #64	; 0x40
 8007f60:	1b40      	subs	r0, r0, r5
 8007f62:	fa03 f000 	lsl.w	r0, r3, r0
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	4303      	orrs	r3, r0
 8007f6a:	3701      	adds	r7, #1
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	7839      	ldrb	r1, [r7, #0]
 8007f70:	4827      	ldr	r0, [pc, #156]	; (8008010 <_svfiprintf_r+0x1e4>)
 8007f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f76:	2206      	movs	r2, #6
 8007f78:	1c7e      	adds	r6, r7, #1
 8007f7a:	f7f8 f929 	bl	80001d0 <memchr>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d038      	beq.n	8007ff4 <_svfiprintf_r+0x1c8>
 8007f82:	4b24      	ldr	r3, [pc, #144]	; (8008014 <_svfiprintf_r+0x1e8>)
 8007f84:	bb13      	cbnz	r3, 8007fcc <_svfiprintf_r+0x1a0>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	3307      	adds	r3, #7
 8007f8a:	f023 0307 	bic.w	r3, r3, #7
 8007f8e:	3308      	adds	r3, #8
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f94:	444b      	add	r3, r9
 8007f96:	9309      	str	r3, [sp, #36]	; 0x24
 8007f98:	e76d      	b.n	8007e76 <_svfiprintf_r+0x4a>
 8007f9a:	fb05 3202 	mla	r2, r5, r2, r3
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	e7a6      	b.n	8007ef2 <_svfiprintf_r+0xc6>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	3701      	adds	r7, #1
 8007fa8:	9305      	str	r3, [sp, #20]
 8007faa:	4619      	mov	r1, r3
 8007fac:	250a      	movs	r5, #10
 8007fae:	4638      	mov	r0, r7
 8007fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fb4:	3a30      	subs	r2, #48	; 0x30
 8007fb6:	2a09      	cmp	r2, #9
 8007fb8:	d903      	bls.n	8007fc2 <_svfiprintf_r+0x196>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0c8      	beq.n	8007f50 <_svfiprintf_r+0x124>
 8007fbe:	9105      	str	r1, [sp, #20]
 8007fc0:	e7c6      	b.n	8007f50 <_svfiprintf_r+0x124>
 8007fc2:	fb05 2101 	mla	r1, r5, r1, r2
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4607      	mov	r7, r0
 8007fca:	e7f0      	b.n	8007fae <_svfiprintf_r+0x182>
 8007fcc:	ab03      	add	r3, sp, #12
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <_svfiprintf_r+0x1ec>)
 8007fd4:	a904      	add	r1, sp, #16
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	f3af 8000 	nop.w
 8007fdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	d1d6      	bne.n	8007f92 <_svfiprintf_r+0x166>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	065b      	lsls	r3, r3, #25
 8007fe8:	f53f af35 	bmi.w	8007e56 <_svfiprintf_r+0x2a>
 8007fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fee:	b01d      	add	sp, #116	; 0x74
 8007ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff4:	ab03      	add	r3, sp, #12
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <_svfiprintf_r+0x1ec>)
 8007ffc:	a904      	add	r1, sp, #16
 8007ffe:	4640      	mov	r0, r8
 8008000:	f000 f882 	bl	8008108 <_printf_i>
 8008004:	e7ea      	b.n	8007fdc <_svfiprintf_r+0x1b0>
 8008006:	bf00      	nop
 8008008:	08008738 	.word	0x08008738
 800800c:	0800873e 	.word	0x0800873e
 8008010:	08008742 	.word	0x08008742
 8008014:	00000000 	.word	0x00000000
 8008018:	08007d79 	.word	0x08007d79

0800801c <_printf_common>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	4691      	mov	r9, r2
 8008022:	461f      	mov	r7, r3
 8008024:	688a      	ldr	r2, [r1, #8]
 8008026:	690b      	ldr	r3, [r1, #16]
 8008028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800802c:	4293      	cmp	r3, r2
 800802e:	bfb8      	it	lt
 8008030:	4613      	movlt	r3, r2
 8008032:	f8c9 3000 	str.w	r3, [r9]
 8008036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800803a:	4606      	mov	r6, r0
 800803c:	460c      	mov	r4, r1
 800803e:	b112      	cbz	r2, 8008046 <_printf_common+0x2a>
 8008040:	3301      	adds	r3, #1
 8008042:	f8c9 3000 	str.w	r3, [r9]
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	0699      	lsls	r1, r3, #26
 800804a:	bf42      	ittt	mi
 800804c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008050:	3302      	addmi	r3, #2
 8008052:	f8c9 3000 	strmi.w	r3, [r9]
 8008056:	6825      	ldr	r5, [r4, #0]
 8008058:	f015 0506 	ands.w	r5, r5, #6
 800805c:	d107      	bne.n	800806e <_printf_common+0x52>
 800805e:	f104 0a19 	add.w	sl, r4, #25
 8008062:	68e3      	ldr	r3, [r4, #12]
 8008064:	f8d9 2000 	ldr.w	r2, [r9]
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	42ab      	cmp	r3, r5
 800806c:	dc28      	bgt.n	80080c0 <_printf_common+0xa4>
 800806e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	3300      	adds	r3, #0
 8008076:	bf18      	it	ne
 8008078:	2301      	movne	r3, #1
 800807a:	0692      	lsls	r2, r2, #26
 800807c:	d42d      	bmi.n	80080da <_printf_common+0xbe>
 800807e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008082:	4639      	mov	r1, r7
 8008084:	4630      	mov	r0, r6
 8008086:	47c0      	blx	r8
 8008088:	3001      	adds	r0, #1
 800808a:	d020      	beq.n	80080ce <_printf_common+0xb2>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	68e5      	ldr	r5, [r4, #12]
 8008090:	f8d9 2000 	ldr.w	r2, [r9]
 8008094:	f003 0306 	and.w	r3, r3, #6
 8008098:	2b04      	cmp	r3, #4
 800809a:	bf08      	it	eq
 800809c:	1aad      	subeq	r5, r5, r2
 800809e:	68a3      	ldr	r3, [r4, #8]
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	bf0c      	ite	eq
 80080a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a8:	2500      	movne	r5, #0
 80080aa:	4293      	cmp	r3, r2
 80080ac:	bfc4      	itt	gt
 80080ae:	1a9b      	subgt	r3, r3, r2
 80080b0:	18ed      	addgt	r5, r5, r3
 80080b2:	f04f 0900 	mov.w	r9, #0
 80080b6:	341a      	adds	r4, #26
 80080b8:	454d      	cmp	r5, r9
 80080ba:	d11a      	bne.n	80080f2 <_printf_common+0xd6>
 80080bc:	2000      	movs	r0, #0
 80080be:	e008      	b.n	80080d2 <_printf_common+0xb6>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4652      	mov	r2, sl
 80080c4:	4639      	mov	r1, r7
 80080c6:	4630      	mov	r0, r6
 80080c8:	47c0      	blx	r8
 80080ca:	3001      	adds	r0, #1
 80080cc:	d103      	bne.n	80080d6 <_printf_common+0xba>
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	3501      	adds	r5, #1
 80080d8:	e7c3      	b.n	8008062 <_printf_common+0x46>
 80080da:	18e1      	adds	r1, r4, r3
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	2030      	movs	r0, #48	; 0x30
 80080e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080e4:	4422      	add	r2, r4
 80080e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080ee:	3302      	adds	r3, #2
 80080f0:	e7c5      	b.n	800807e <_printf_common+0x62>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4622      	mov	r2, r4
 80080f6:	4639      	mov	r1, r7
 80080f8:	4630      	mov	r0, r6
 80080fa:	47c0      	blx	r8
 80080fc:	3001      	adds	r0, #1
 80080fe:	d0e6      	beq.n	80080ce <_printf_common+0xb2>
 8008100:	f109 0901 	add.w	r9, r9, #1
 8008104:	e7d8      	b.n	80080b8 <_printf_common+0x9c>
	...

08008108 <_printf_i>:
 8008108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800810c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008110:	460c      	mov	r4, r1
 8008112:	7e09      	ldrb	r1, [r1, #24]
 8008114:	b085      	sub	sp, #20
 8008116:	296e      	cmp	r1, #110	; 0x6e
 8008118:	4617      	mov	r7, r2
 800811a:	4606      	mov	r6, r0
 800811c:	4698      	mov	r8, r3
 800811e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008120:	f000 80b3 	beq.w	800828a <_printf_i+0x182>
 8008124:	d822      	bhi.n	800816c <_printf_i+0x64>
 8008126:	2963      	cmp	r1, #99	; 0x63
 8008128:	d036      	beq.n	8008198 <_printf_i+0x90>
 800812a:	d80a      	bhi.n	8008142 <_printf_i+0x3a>
 800812c:	2900      	cmp	r1, #0
 800812e:	f000 80b9 	beq.w	80082a4 <_printf_i+0x19c>
 8008132:	2958      	cmp	r1, #88	; 0x58
 8008134:	f000 8083 	beq.w	800823e <_printf_i+0x136>
 8008138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008140:	e032      	b.n	80081a8 <_printf_i+0xa0>
 8008142:	2964      	cmp	r1, #100	; 0x64
 8008144:	d001      	beq.n	800814a <_printf_i+0x42>
 8008146:	2969      	cmp	r1, #105	; 0x69
 8008148:	d1f6      	bne.n	8008138 <_printf_i+0x30>
 800814a:	6820      	ldr	r0, [r4, #0]
 800814c:	6813      	ldr	r3, [r2, #0]
 800814e:	0605      	lsls	r5, r0, #24
 8008150:	f103 0104 	add.w	r1, r3, #4
 8008154:	d52a      	bpl.n	80081ac <_printf_i+0xa4>
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	da03      	bge.n	8008166 <_printf_i+0x5e>
 800815e:	222d      	movs	r2, #45	; 0x2d
 8008160:	425b      	negs	r3, r3
 8008162:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008166:	486f      	ldr	r0, [pc, #444]	; (8008324 <_printf_i+0x21c>)
 8008168:	220a      	movs	r2, #10
 800816a:	e039      	b.n	80081e0 <_printf_i+0xd8>
 800816c:	2973      	cmp	r1, #115	; 0x73
 800816e:	f000 809d 	beq.w	80082ac <_printf_i+0x1a4>
 8008172:	d808      	bhi.n	8008186 <_printf_i+0x7e>
 8008174:	296f      	cmp	r1, #111	; 0x6f
 8008176:	d020      	beq.n	80081ba <_printf_i+0xb2>
 8008178:	2970      	cmp	r1, #112	; 0x70
 800817a:	d1dd      	bne.n	8008138 <_printf_i+0x30>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	e003      	b.n	800818e <_printf_i+0x86>
 8008186:	2975      	cmp	r1, #117	; 0x75
 8008188:	d017      	beq.n	80081ba <_printf_i+0xb2>
 800818a:	2978      	cmp	r1, #120	; 0x78
 800818c:	d1d4      	bne.n	8008138 <_printf_i+0x30>
 800818e:	2378      	movs	r3, #120	; 0x78
 8008190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008194:	4864      	ldr	r0, [pc, #400]	; (8008328 <_printf_i+0x220>)
 8008196:	e055      	b.n	8008244 <_printf_i+0x13c>
 8008198:	6813      	ldr	r3, [r2, #0]
 800819a:	1d19      	adds	r1, r3, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6011      	str	r1, [r2, #0]
 80081a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081a8:	2301      	movs	r3, #1
 80081aa:	e08c      	b.n	80082c6 <_printf_i+0x1be>
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6011      	str	r1, [r2, #0]
 80081b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081b4:	bf18      	it	ne
 80081b6:	b21b      	sxthne	r3, r3
 80081b8:	e7cf      	b.n	800815a <_printf_i+0x52>
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	6825      	ldr	r5, [r4, #0]
 80081be:	1d18      	adds	r0, r3, #4
 80081c0:	6010      	str	r0, [r2, #0]
 80081c2:	0628      	lsls	r0, r5, #24
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0xc2>
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <_printf_i+0xc8>
 80081ca:	0668      	lsls	r0, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0xbe>
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	4854      	ldr	r0, [pc, #336]	; (8008324 <_printf_i+0x21c>)
 80081d2:	296f      	cmp	r1, #111	; 0x6f
 80081d4:	bf14      	ite	ne
 80081d6:	220a      	movne	r2, #10
 80081d8:	2208      	moveq	r2, #8
 80081da:	2100      	movs	r1, #0
 80081dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081e0:	6865      	ldr	r5, [r4, #4]
 80081e2:	60a5      	str	r5, [r4, #8]
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	f2c0 8095 	blt.w	8008314 <_printf_i+0x20c>
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	f021 0104 	bic.w	r1, r1, #4
 80081f0:	6021      	str	r1, [r4, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d13d      	bne.n	8008272 <_printf_i+0x16a>
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	f040 808e 	bne.w	8008318 <_printf_i+0x210>
 80081fc:	4665      	mov	r5, ip
 80081fe:	2a08      	cmp	r2, #8
 8008200:	d10b      	bne.n	800821a <_printf_i+0x112>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	07db      	lsls	r3, r3, #31
 8008206:	d508      	bpl.n	800821a <_printf_i+0x112>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	6862      	ldr	r2, [r4, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	bfde      	ittt	le
 8008210:	2330      	movle	r3, #48	; 0x30
 8008212:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008216:	f105 35ff 	addle.w	r5, r5, #4294967295
 800821a:	ebac 0305 	sub.w	r3, ip, r5
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	f8cd 8000 	str.w	r8, [sp]
 8008224:	463b      	mov	r3, r7
 8008226:	aa03      	add	r2, sp, #12
 8008228:	4621      	mov	r1, r4
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff fef6 	bl	800801c <_printf_common>
 8008230:	3001      	adds	r0, #1
 8008232:	d14d      	bne.n	80082d0 <_printf_i+0x1c8>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b005      	add	sp, #20
 800823a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800823e:	4839      	ldr	r0, [pc, #228]	; (8008324 <_printf_i+0x21c>)
 8008240:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008244:	6813      	ldr	r3, [r2, #0]
 8008246:	6821      	ldr	r1, [r4, #0]
 8008248:	1d1d      	adds	r5, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6015      	str	r5, [r2, #0]
 800824e:	060a      	lsls	r2, r1, #24
 8008250:	d50b      	bpl.n	800826a <_printf_i+0x162>
 8008252:	07ca      	lsls	r2, r1, #31
 8008254:	bf44      	itt	mi
 8008256:	f041 0120 	orrmi.w	r1, r1, #32
 800825a:	6021      	strmi	r1, [r4, #0]
 800825c:	b91b      	cbnz	r3, 8008266 <_printf_i+0x15e>
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	f022 0220 	bic.w	r2, r2, #32
 8008264:	6022      	str	r2, [r4, #0]
 8008266:	2210      	movs	r2, #16
 8008268:	e7b7      	b.n	80081da <_printf_i+0xd2>
 800826a:	064d      	lsls	r5, r1, #25
 800826c:	bf48      	it	mi
 800826e:	b29b      	uxthmi	r3, r3
 8008270:	e7ef      	b.n	8008252 <_printf_i+0x14a>
 8008272:	4665      	mov	r5, ip
 8008274:	fbb3 f1f2 	udiv	r1, r3, r2
 8008278:	fb02 3311 	mls	r3, r2, r1, r3
 800827c:	5cc3      	ldrb	r3, [r0, r3]
 800827e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008282:	460b      	mov	r3, r1
 8008284:	2900      	cmp	r1, #0
 8008286:	d1f5      	bne.n	8008274 <_printf_i+0x16c>
 8008288:	e7b9      	b.n	80081fe <_printf_i+0xf6>
 800828a:	6813      	ldr	r3, [r2, #0]
 800828c:	6825      	ldr	r5, [r4, #0]
 800828e:	6961      	ldr	r1, [r4, #20]
 8008290:	1d18      	adds	r0, r3, #4
 8008292:	6010      	str	r0, [r2, #0]
 8008294:	0628      	lsls	r0, r5, #24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	d501      	bpl.n	800829e <_printf_i+0x196>
 800829a:	6019      	str	r1, [r3, #0]
 800829c:	e002      	b.n	80082a4 <_printf_i+0x19c>
 800829e:	066a      	lsls	r2, r5, #25
 80082a0:	d5fb      	bpl.n	800829a <_printf_i+0x192>
 80082a2:	8019      	strh	r1, [r3, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	6123      	str	r3, [r4, #16]
 80082a8:	4665      	mov	r5, ip
 80082aa:	e7b9      	b.n	8008220 <_printf_i+0x118>
 80082ac:	6813      	ldr	r3, [r2, #0]
 80082ae:	1d19      	adds	r1, r3, #4
 80082b0:	6011      	str	r1, [r2, #0]
 80082b2:	681d      	ldr	r5, [r3, #0]
 80082b4:	6862      	ldr	r2, [r4, #4]
 80082b6:	2100      	movs	r1, #0
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7f7 ff89 	bl	80001d0 <memchr>
 80082be:	b108      	cbz	r0, 80082c4 <_printf_i+0x1bc>
 80082c0:	1b40      	subs	r0, r0, r5
 80082c2:	6060      	str	r0, [r4, #4]
 80082c4:	6863      	ldr	r3, [r4, #4]
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	2300      	movs	r3, #0
 80082ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ce:	e7a7      	b.n	8008220 <_printf_i+0x118>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4639      	mov	r1, r7
 80082d6:	4630      	mov	r0, r6
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d0aa      	beq.n	8008234 <_printf_i+0x12c>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	079b      	lsls	r3, r3, #30
 80082e2:	d413      	bmi.n	800830c <_printf_i+0x204>
 80082e4:	68e0      	ldr	r0, [r4, #12]
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	4298      	cmp	r0, r3
 80082ea:	bfb8      	it	lt
 80082ec:	4618      	movlt	r0, r3
 80082ee:	e7a3      	b.n	8008238 <_printf_i+0x130>
 80082f0:	2301      	movs	r3, #1
 80082f2:	464a      	mov	r2, r9
 80082f4:	4639      	mov	r1, r7
 80082f6:	4630      	mov	r0, r6
 80082f8:	47c0      	blx	r8
 80082fa:	3001      	adds	r0, #1
 80082fc:	d09a      	beq.n	8008234 <_printf_i+0x12c>
 80082fe:	3501      	adds	r5, #1
 8008300:	68e3      	ldr	r3, [r4, #12]
 8008302:	9a03      	ldr	r2, [sp, #12]
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	42ab      	cmp	r3, r5
 8008308:	dcf2      	bgt.n	80082f0 <_printf_i+0x1e8>
 800830a:	e7eb      	b.n	80082e4 <_printf_i+0x1dc>
 800830c:	2500      	movs	r5, #0
 800830e:	f104 0919 	add.w	r9, r4, #25
 8008312:	e7f5      	b.n	8008300 <_printf_i+0x1f8>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ac      	bne.n	8008272 <_printf_i+0x16a>
 8008318:	7803      	ldrb	r3, [r0, #0]
 800831a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800831e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008322:	e76c      	b.n	80081fe <_printf_i+0xf6>
 8008324:	08008749 	.word	0x08008749
 8008328:	0800875a 	.word	0x0800875a

0800832c <memmove>:
 800832c:	4288      	cmp	r0, r1
 800832e:	b510      	push	{r4, lr}
 8008330:	eb01 0302 	add.w	r3, r1, r2
 8008334:	d807      	bhi.n	8008346 <memmove+0x1a>
 8008336:	1e42      	subs	r2, r0, #1
 8008338:	4299      	cmp	r1, r3
 800833a:	d00a      	beq.n	8008352 <memmove+0x26>
 800833c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008340:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008344:	e7f8      	b.n	8008338 <memmove+0xc>
 8008346:	4283      	cmp	r3, r0
 8008348:	d9f5      	bls.n	8008336 <memmove+0xa>
 800834a:	1881      	adds	r1, r0, r2
 800834c:	1ad2      	subs	r2, r2, r3
 800834e:	42d3      	cmn	r3, r2
 8008350:	d100      	bne.n	8008354 <memmove+0x28>
 8008352:	bd10      	pop	{r4, pc}
 8008354:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008358:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800835c:	e7f7      	b.n	800834e <memmove+0x22>
	...

08008360 <_free_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4605      	mov	r5, r0
 8008364:	2900      	cmp	r1, #0
 8008366:	d045      	beq.n	80083f4 <_free_r+0x94>
 8008368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836c:	1f0c      	subs	r4, r1, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfb8      	it	lt
 8008372:	18e4      	addlt	r4, r4, r3
 8008374:	f000 f8d2 	bl	800851c <__malloc_lock>
 8008378:	4a1f      	ldr	r2, [pc, #124]	; (80083f8 <_free_r+0x98>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	4610      	mov	r0, r2
 800837e:	b933      	cbnz	r3, 800838e <_free_r+0x2e>
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	6014      	str	r4, [r2, #0]
 8008384:	4628      	mov	r0, r5
 8008386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838a:	f000 b8c8 	b.w	800851e <__malloc_unlock>
 800838e:	42a3      	cmp	r3, r4
 8008390:	d90c      	bls.n	80083ac <_free_r+0x4c>
 8008392:	6821      	ldr	r1, [r4, #0]
 8008394:	1862      	adds	r2, r4, r1
 8008396:	4293      	cmp	r3, r2
 8008398:	bf04      	itt	eq
 800839a:	681a      	ldreq	r2, [r3, #0]
 800839c:	685b      	ldreq	r3, [r3, #4]
 800839e:	6063      	str	r3, [r4, #4]
 80083a0:	bf04      	itt	eq
 80083a2:	1852      	addeq	r2, r2, r1
 80083a4:	6022      	streq	r2, [r4, #0]
 80083a6:	6004      	str	r4, [r0, #0]
 80083a8:	e7ec      	b.n	8008384 <_free_r+0x24>
 80083aa:	4613      	mov	r3, r2
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	b10a      	cbz	r2, 80083b4 <_free_r+0x54>
 80083b0:	42a2      	cmp	r2, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x4a>
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	1858      	adds	r0, r3, r1
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x74>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	4401      	add	r1, r0
 80083c0:	1858      	adds	r0, r3, r1
 80083c2:	4282      	cmp	r2, r0
 80083c4:	6019      	str	r1, [r3, #0]
 80083c6:	d1dd      	bne.n	8008384 <_free_r+0x24>
 80083c8:	6810      	ldr	r0, [r2, #0]
 80083ca:	6852      	ldr	r2, [r2, #4]
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	4401      	add	r1, r0
 80083d0:	6019      	str	r1, [r3, #0]
 80083d2:	e7d7      	b.n	8008384 <_free_r+0x24>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x7c>
 80083d6:	230c      	movs	r3, #12
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	e7d3      	b.n	8008384 <_free_r+0x24>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	1821      	adds	r1, r4, r0
 80083e0:	428a      	cmp	r2, r1
 80083e2:	bf04      	itt	eq
 80083e4:	6811      	ldreq	r1, [r2, #0]
 80083e6:	6852      	ldreq	r2, [r2, #4]
 80083e8:	6062      	str	r2, [r4, #4]
 80083ea:	bf04      	itt	eq
 80083ec:	1809      	addeq	r1, r1, r0
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	605c      	str	r4, [r3, #4]
 80083f2:	e7c7      	b.n	8008384 <_free_r+0x24>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	20004034 	.word	0x20004034

080083fc <_malloc_r>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	1ccd      	adds	r5, r1, #3
 8008400:	f025 0503 	bic.w	r5, r5, #3
 8008404:	3508      	adds	r5, #8
 8008406:	2d0c      	cmp	r5, #12
 8008408:	bf38      	it	cc
 800840a:	250c      	movcc	r5, #12
 800840c:	2d00      	cmp	r5, #0
 800840e:	4606      	mov	r6, r0
 8008410:	db01      	blt.n	8008416 <_malloc_r+0x1a>
 8008412:	42a9      	cmp	r1, r5
 8008414:	d903      	bls.n	800841e <_malloc_r+0x22>
 8008416:	230c      	movs	r3, #12
 8008418:	6033      	str	r3, [r6, #0]
 800841a:	2000      	movs	r0, #0
 800841c:	bd70      	pop	{r4, r5, r6, pc}
 800841e:	f000 f87d 	bl	800851c <__malloc_lock>
 8008422:	4a21      	ldr	r2, [pc, #132]	; (80084a8 <_malloc_r+0xac>)
 8008424:	6814      	ldr	r4, [r2, #0]
 8008426:	4621      	mov	r1, r4
 8008428:	b991      	cbnz	r1, 8008450 <_malloc_r+0x54>
 800842a:	4c20      	ldr	r4, [pc, #128]	; (80084ac <_malloc_r+0xb0>)
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	b91b      	cbnz	r3, 8008438 <_malloc_r+0x3c>
 8008430:	4630      	mov	r0, r6
 8008432:	f000 f863 	bl	80084fc <_sbrk_r>
 8008436:	6020      	str	r0, [r4, #0]
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f000 f85e 	bl	80084fc <_sbrk_r>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d124      	bne.n	800848e <_malloc_r+0x92>
 8008444:	230c      	movs	r3, #12
 8008446:	6033      	str	r3, [r6, #0]
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f868 	bl	800851e <__malloc_unlock>
 800844e:	e7e4      	b.n	800841a <_malloc_r+0x1e>
 8008450:	680b      	ldr	r3, [r1, #0]
 8008452:	1b5b      	subs	r3, r3, r5
 8008454:	d418      	bmi.n	8008488 <_malloc_r+0x8c>
 8008456:	2b0b      	cmp	r3, #11
 8008458:	d90f      	bls.n	800847a <_malloc_r+0x7e>
 800845a:	600b      	str	r3, [r1, #0]
 800845c:	50cd      	str	r5, [r1, r3]
 800845e:	18cc      	adds	r4, r1, r3
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f85c 	bl	800851e <__malloc_unlock>
 8008466:	f104 000b 	add.w	r0, r4, #11
 800846a:	1d23      	adds	r3, r4, #4
 800846c:	f020 0007 	bic.w	r0, r0, #7
 8008470:	1ac3      	subs	r3, r0, r3
 8008472:	d0d3      	beq.n	800841c <_malloc_r+0x20>
 8008474:	425a      	negs	r2, r3
 8008476:	50e2      	str	r2, [r4, r3]
 8008478:	e7d0      	b.n	800841c <_malloc_r+0x20>
 800847a:	428c      	cmp	r4, r1
 800847c:	684b      	ldr	r3, [r1, #4]
 800847e:	bf16      	itet	ne
 8008480:	6063      	strne	r3, [r4, #4]
 8008482:	6013      	streq	r3, [r2, #0]
 8008484:	460c      	movne	r4, r1
 8008486:	e7eb      	b.n	8008460 <_malloc_r+0x64>
 8008488:	460c      	mov	r4, r1
 800848a:	6849      	ldr	r1, [r1, #4]
 800848c:	e7cc      	b.n	8008428 <_malloc_r+0x2c>
 800848e:	1cc4      	adds	r4, r0, #3
 8008490:	f024 0403 	bic.w	r4, r4, #3
 8008494:	42a0      	cmp	r0, r4
 8008496:	d005      	beq.n	80084a4 <_malloc_r+0xa8>
 8008498:	1a21      	subs	r1, r4, r0
 800849a:	4630      	mov	r0, r6
 800849c:	f000 f82e 	bl	80084fc <_sbrk_r>
 80084a0:	3001      	adds	r0, #1
 80084a2:	d0cf      	beq.n	8008444 <_malloc_r+0x48>
 80084a4:	6025      	str	r5, [r4, #0]
 80084a6:	e7db      	b.n	8008460 <_malloc_r+0x64>
 80084a8:	20004034 	.word	0x20004034
 80084ac:	20004038 	.word	0x20004038

080084b0 <_realloc_r>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	4607      	mov	r7, r0
 80084b4:	4614      	mov	r4, r2
 80084b6:	460e      	mov	r6, r1
 80084b8:	b921      	cbnz	r1, 80084c4 <_realloc_r+0x14>
 80084ba:	4611      	mov	r1, r2
 80084bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084c0:	f7ff bf9c 	b.w	80083fc <_malloc_r>
 80084c4:	b922      	cbnz	r2, 80084d0 <_realloc_r+0x20>
 80084c6:	f7ff ff4b 	bl	8008360 <_free_r>
 80084ca:	4625      	mov	r5, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	f000 f826 	bl	8008520 <_malloc_usable_size_r>
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d20f      	bcs.n	80084f8 <_realloc_r+0x48>
 80084d8:	4621      	mov	r1, r4
 80084da:	4638      	mov	r0, r7
 80084dc:	f7ff ff8e 	bl	80083fc <_malloc_r>
 80084e0:	4605      	mov	r5, r0
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d0f2      	beq.n	80084cc <_realloc_r+0x1c>
 80084e6:	4631      	mov	r1, r6
 80084e8:	4622      	mov	r2, r4
 80084ea:	f7ff fc11 	bl	8007d10 <memcpy>
 80084ee:	4631      	mov	r1, r6
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff ff35 	bl	8008360 <_free_r>
 80084f6:	e7e9      	b.n	80084cc <_realloc_r+0x1c>
 80084f8:	4635      	mov	r5, r6
 80084fa:	e7e7      	b.n	80084cc <_realloc_r+0x1c>

080084fc <_sbrk_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4c06      	ldr	r4, [pc, #24]	; (8008518 <_sbrk_r+0x1c>)
 8008500:	2300      	movs	r3, #0
 8008502:	4605      	mov	r5, r0
 8008504:	4608      	mov	r0, r1
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	f7f9 febe 	bl	8002288 <_sbrk>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_sbrk_r+0x1a>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	b103      	cbz	r3, 8008516 <_sbrk_r+0x1a>
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	200043bc 	.word	0x200043bc

0800851c <__malloc_lock>:
 800851c:	4770      	bx	lr

0800851e <__malloc_unlock>:
 800851e:	4770      	bx	lr

08008520 <_malloc_usable_size_r>:
 8008520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008524:	1f18      	subs	r0, r3, #4
 8008526:	2b00      	cmp	r3, #0
 8008528:	bfbc      	itt	lt
 800852a:	580b      	ldrlt	r3, [r1, r0]
 800852c:	18c0      	addlt	r0, r0, r3
 800852e:	4770      	bx	lr

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr
