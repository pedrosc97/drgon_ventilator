
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dcc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08009ee0  08009ee0  00019ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a380  0800a380  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a380  0800a380  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a380  0800a380  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a380  0800a380  0001a380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a384  0800a384  0001a384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002638  200001e0  0800a568  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002818  0800a568  00022818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001951a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b7  00000000  00000000  00039723  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d8  00000000  00000000  0003d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001610  00000000  00000000  0003e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000573a  00000000  00000000  0003fec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134f8  00000000  00000000  00045602  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000847ac  00000000  00000000  00058afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd2a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e64  00000000  00000000  000dd324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ec4 	.word	0x08009ec4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009ec4 	.word	0x08009ec4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <BuzzerInit>:
 */
#include "stm32f1xx_hal.h"
#include "buzzer_api.h"

void BuzzerInit(Buzzer_S *buzzer_)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	buzzer_->cycle_time = DEFAULT_BUZZER_CYCLE_TIME_MS;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ca:	605a      	str	r2, [r3, #4]
	buzzer_->duty_cycle = DEFAULT_BUZZER_DUTY_CYCLE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80010d2:	601a      	str	r2, [r3, #0]
	buzzer_->period = DEFAULT_BUZZER_PERIOD_MS;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010da:	811a      	strh	r2, [r3, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
	...

080010e8 <BuzzerUpdateParams>:

void BuzzerUpdateParams(Buzzer_S *buzzer_, uint16_t sound_frequency_, float duty_cycle_, uint16_t alarm_frequency_)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	461a      	mov	r2, r3
 80010f4:	460b      	mov	r3, r1
 80010f6:	817b      	strh	r3, [r7, #10]
 80010f8:	4613      	mov	r3, r2
 80010fa:	813b      	strh	r3, [r7, #8]
	buzzer_->cycle_time = (1 / (float) sound_frequency_) * 1000.0;
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd98 	bl	8000c34 <__aeabi_ui2f>
 8001104:	4603      	mov	r3, r0
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800110c:	f7ff fe9e 	bl	8000e4c <__aeabi_fdiv>
 8001110:	4603      	mov	r3, r0
 8001112:	4916      	ldr	r1, [pc, #88]	; (800116c <BuzzerUpdateParams+0x84>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fde5 	bl	8000ce4 <__aeabi_fmul>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	605a      	str	r2, [r3, #4]
	buzzer_->duty_cycle = duty_cycle_;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]
	buzzer_->period = (uint16_t) (1 / (float) alarm_frequency_ * 1000.0);
 8001128:	893b      	ldrh	r3, [r7, #8]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fd82 	bl	8000c34 <__aeabi_ui2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001138:	f7ff fe88 	bl	8000e4c <__aeabi_fdiv>
 800113c:	4603      	mov	r3, r0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f972 	bl	8000428 <__aeabi_f2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <BuzzerUpdateParams+0x88>)
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	4618      	mov	r0, r3
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc97 	bl	8000a88 <__aeabi_d2uiz>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	811a      	strh	r2, [r3, #8]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	447a0000 	.word	0x447a0000
 8001170:	408f4000 	.word	0x408f4000

08001174 <DCMotorInit>:
#include "stm32f1xx_hal.h"
#include "dc_motor_api.h"
#include "main.h"

void DCMotorInit(DCMotor_S *dc_motor_, TIM_HandleTypeDef *timer_handler_)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	dc_motor_->motor_pwm_ctrl = timer_handler_;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	601a      	str	r2, [r3, #0]
	dc_motor_->pwm_value = 0;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	811a      	strh	r2, [r3, #8]
	dc_motor_->direction_flag = MOTOR_SPIN_CW;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	729a      	strb	r2, [r3, #10]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <DCMotorRPMSet>:

void DCMotorRPMSet(DCMotor_S *dc_motor_)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = dc_motor_->pwm_value - 1;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	891b      	ldrh	r3, [r3, #8]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 f94c 	bl	8005468 <HAL_TIM_PWM_Stop>

    if (dc_motor_->direction_flag == MOTOR_SPIN_CW)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7a9b      	ldrb	r3, [r3, #10]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10c      	bne.n	80011f2 <DCMotorRPMSet+0x56>
    {
		HAL_GPIO_WritePin(GPIOB, MotorCW_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <DCMotorRPMSet+0xb4>)
 80011e0:	f002 fed8 	bl	8003f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MotorCCW_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ea:	4819      	ldr	r0, [pc, #100]	; (8001250 <DCMotorRPMSet+0xb4>)
 80011ec:	f002 fed2 	bl	8003f94 <HAL_GPIO_WritePin>
 80011f0:	e01c      	b.n	800122c <DCMotorRPMSet+0x90>
    }
	else if (dc_motor_->direction_flag == MOTOR_SPIN_CCW)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7a9b      	ldrb	r3, [r3, #10]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10c      	bne.n	8001214 <DCMotorRPMSet+0x78>
	{
			HAL_GPIO_WritePin(GPIOB, MotorCW_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <DCMotorRPMSet+0xb4>)
 8001202:	f002 fec7 	bl	8003f94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MotorCCW_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <DCMotorRPMSet+0xb4>)
 800120e:	f002 fec1 	bl	8003f94 <HAL_GPIO_WritePin>
 8001212:	e00b      	b.n	800122c <DCMotorRPMSet+0x90>
    }
	else
	{
			HAL_GPIO_WritePin(GPIOB, MotorCW_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <DCMotorRPMSet+0xb4>)
 800121c:	f002 feba 	bl	8003f94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MotorCCW_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <DCMotorRPMSet+0xb4>)
 8001228:	f002 feb4 	bl	8003f94 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f107 010c 	add.w	r1, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f004 fb50 	bl	80058dc <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f004 f8de 	bl	8005404 <HAL_TIM_PWM_Start>
}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40010c00 	.word	0x40010c00

08001254 <EncoderInit>:
 */

#include "encoder_api.h"

void EncoderInit(Encoder_S *encoder_, EncoderModel_E model_)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
	encoder_->model = model_;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	809a      	strh	r2, [r3, #4]
	encoder_->rpm = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
	encoder_->prev_pulse_count = 0;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	80da      	strh	r2, [r3, #6]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
	...

08001280 <UpdateEncoderParams>:

void UpdateEncoderParams(Encoder_S *encoder_, uint32_t encoder_timer_, uint16_t timestep_ms_)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	4613      	mov	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]
	int32_t delta_count;
	delta_count = encoder_timer_ - encoder_->prev_pulse_count;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	88db      	ldrh	r3, [r3, #6]
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	61fb      	str	r3, [r7, #28]
	encoder_->prev_pulse_count = (uint16_t) encoder_timer_;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	b29a      	uxth	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	80da      	strh	r2, [r3, #6]

	float pulses_per_second;
	pulses_per_second = ((float) delta_count / (float)timestep_ms_) * (float) MILISECONDS_PER_SECOND;
 80012a2:	69f8      	ldr	r0, [r7, #28]
 80012a4:	f7ff fcca 	bl	8000c3c <__aeabi_i2f>
 80012a8:	4604      	mov	r4, r0
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fcc1 	bl	8000c34 <__aeabi_ui2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fdc8 	bl	8000e4c <__aeabi_fdiv>
 80012bc:	4603      	mov	r3, r0
 80012be:	4917      	ldr	r1, [pc, #92]	; (800131c <UpdateEncoderParams+0x9c>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fd0f 	bl	8000ce4 <__aeabi_fmul>
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]

	float revs_per_minute;
	revs_per_minute = (pulses_per_second / (float) encoder_->model) * (float) SECONDS_PER_MINUTE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	889b      	ldrh	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fcb0 	bl	8000c34 <__aeabi_ui2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff fdb7 	bl	8000e4c <__aeabi_fdiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	490f      	ldr	r1, [pc, #60]	; (8001320 <UpdateEncoderParams+0xa0>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fcfe 	bl	8000ce4 <__aeabi_fmul>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]

	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 80012ec:	490d      	ldr	r1, [pc, #52]	; (8001324 <UpdateEncoderParams+0xa4>)
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff fe96 	bl	8001020 <__aeabi_fcmplt>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d100      	bne.n	80012fc <UpdateEncoderParams+0x7c>
	{
		encoder_->rpm = revs_per_minute;
	}
}
 80012fa:	e00a      	b.n	8001312 <UpdateEncoderParams+0x92>
	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 80012fc:	490a      	ldr	r1, [pc, #40]	; (8001328 <UpdateEncoderParams+0xa8>)
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff feac 	bl	800105c <__aeabi_fcmpgt>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <UpdateEncoderParams+0x8c>
}
 800130a:	e002      	b.n	8001312 <UpdateEncoderParams+0x92>
		encoder_->rpm = revs_per_minute;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	447a0000 	.word	0x447a0000
 8001320:	42700000 	.word	0x42700000
 8001324:	43160000 	.word	0x43160000
 8001328:	c3160000 	.word	0xc3160000

0800132c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <vApplicationGetIdleTaskMemory+0x28>)
 800133c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <vApplicationGetIdleTaskMemory+0x2c>)
 8001342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	200001fc 	.word	0x200001fc
 8001358:	20000250 	.word	0x20000250

0800135c <LCDSendCmd>:

#include "stm32f1xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	f023 030f 	bic.w	r3, r3, #15
 800136e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f043 030c 	orr.w	r3, r3, #12
 800137c:	b2db      	uxtb	r3, r3
 800137e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	b2db      	uxtb	r3, r3
 8001388:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	f043 030c 	orr.w	r3, r3, #12
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	b2db      	uxtb	r3, r3
 800139c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	b299      	uxth	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7a1b      	ldrb	r3, [r3, #8]
 80013ac:	b29c      	uxth	r4, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	88db      	ldrh	r3, [r3, #6]
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4623      	mov	r3, r4
 80013ba:	f002 ff43 	bl	8004244 <HAL_I2C_Master_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}

080013c6 <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 80013c6:	b590      	push	{r4, r7, lr}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af02      	add	r7, sp, #8
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	f023 030f 	bic.w	r3, r3, #15
 80013d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	f043 030d 	orr.w	r3, r3, #13
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	f043 0309 	orr.w	r3, r3, #9
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	f043 030d 	orr.w	r3, r3, #13
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	f043 0309 	orr.w	r3, r3, #9
 8001404:	b2db      	uxtb	r3, r3
 8001406:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	b299      	uxth	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7a1b      	ldrb	r3, [r3, #8]
 8001416:	b29c      	uxth	r4, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	88db      	ldrh	r3, [r3, #6]
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4623      	mov	r3, r4
 8001424:	f002 ff0e 	bl	8004244 <HAL_I2C_Master_Transmit>
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <LCDClear>:

void LCDClear(LCDDisplay_S *lcd_disp_)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	LCDSendCmd(lcd_disp_, 0x80);
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff8e 	bl	800135c <LCDSendCmd>
	for (int i = 0; i < 70; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e006      	b.n	8001454 <LCDClear+0x24>
	{
		LCDSendData(lcd_disp_, ' ');
 8001446:	2120      	movs	r1, #32
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ffbc 	bl	80013c6 <LCDSendData>
	for (int i = 0; i < 70; i++)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b45      	cmp	r3, #69	; 0x45
 8001458:	ddf5      	ble.n	8001446 <LCDClear+0x16>
	}
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <LCDSetCursorPos>:

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
 8001470:	4613      	mov	r3, r2
 8001472:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <LCDSetCursorPos+0x50>)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	f107 0210 	add.w	r2, r7, #16
 800148a:	4413      	add	r3, r2
 800148c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	78bb      	ldrb	r3, [r7, #2]
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b25b      	sxtb	r3, r3
 800149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff59 	bl	800135c <LCDSendCmd>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08009ee0 	.word	0x08009ee0

080014b8 <LCDInit>:

void LCDInit(LCDDisplay_S *lcd_disp_, I2C_HandleTypeDef *i2c_handler_)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	lcd_disp_->i2c_handler = i2c_handler_;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	601a      	str	r2, [r3, #0]
	lcd_disp_->byte_mode = LCD_DISP_4_BYTE_MODE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	721a      	strb	r2, [r3, #8]
	lcd_disp_->i2c_address = LCD_I2C_ADDRESS;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	224e      	movs	r2, #78	; 0x4e
 80014d2:	711a      	strb	r2, [r3, #4]
	lcd_disp_->i2c_timeout = LCD_DISP_I2C_TIMEOUT_MS;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2264      	movs	r2, #100	; 0x64
 80014d8:	80da      	strh	r2, [r3, #6]

	HAL_Delay(50);
 80014da:	2032      	movs	r0, #50	; 0x32
 80014dc:	f001 fd54 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80014e0:	2130      	movs	r1, #48	; 0x30
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff3a 	bl	800135c <LCDSendCmd>
	HAL_Delay(5);
 80014e8:	2005      	movs	r0, #5
 80014ea:	f001 fd4d 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80014ee:	2130      	movs	r1, #48	; 0x30
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff33 	bl	800135c <LCDSendCmd>
	HAL_Delay(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 fd46 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80014fc:	2130      	movs	r1, #48	; 0x30
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff2c 	bl	800135c <LCDSendCmd>
	HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f001 fd3f 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x20);
 800150a:	2120      	movs	r1, #32
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff25 	bl	800135c <LCDSendCmd>
	HAL_Delay(10);
 8001512:	200a      	movs	r0, #10
 8001514:	f001 fd38 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001518:	2128      	movs	r1, #40	; 0x28
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff1e 	bl	800135c <LCDSendCmd>
	HAL_Delay(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f001 fd31 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001526:	2108      	movs	r1, #8
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff17 	bl	800135c <LCDSendCmd>
	HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f001 fd2a 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x01); // clear display
 8001534:	2101      	movs	r1, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff10 	bl	800135c <LCDSendCmd>
	HAL_Delay(1);
 800153c:	2001      	movs	r0, #1
 800153e:	f001 fd23 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001542:	2106      	movs	r1, #6
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff09 	bl	800135c <LCDSendCmd>
	HAL_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f001 fd1c 	bl	8002f88 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001550:	210c      	movs	r1, #12
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff02 	bl	800135c <LCDSendCmd>
	HAL_Delay(100);
 8001558:	2064      	movs	r0, #100	; 0x64
 800155a:	f001 fd15 	bl	8002f88 <HAL_Delay>
	LCDClear(lcd_disp_);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff66 	bl	8001430 <LCDClear>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <LCDSendString>:

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	while (*str)
 8001576:	e007      	b.n	8001588 <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	603a      	str	r2, [r7, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff1f 	bl	80013c6 <LCDSendData>
	while (*str)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f3      	bne.n	8001578 <LCDSendString+0xc>
	}
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == EditBtnIn_Pin)
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a8:	d104      	bne.n	80015b4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osThreadResume(updatePotsHandle);
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 ffe2 	bl	8006578 <osThreadResume>
	}

	if (GPIO_Pin == CalibrationBtnIn_Pin)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ba:	d114      	bne.n	80015e6 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		uint32_t	WakeTime = osKernelSysTick();
 80015bc:	f004 ff67 	bl	800648e <osKernelSysTick>
 80015c0:	6178      	str	r0, [r7, #20]

		if ((WakeTime - prev_systick) > 500)
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_GPIO_EXTI_Callback+0xac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ce:	d90a      	bls.n	80015e6 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ToggleCalibrationParam(&ventilator);
 80015d0:	481d      	ldr	r0, [pc, #116]	; (8001648 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015d2:	f001 fc51 	bl	8002e78 <ToggleCalibrationParam>
			prev_systick = WakeTime;
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_GPIO_EXTI_Callback+0xac>)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	6013      	str	r3, [r2, #0]
			osThreadResume(calibRoutineHandle);
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_GPIO_EXTI_Callback+0xb4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 ffc9 	bl	8006578 <osThreadResume>
		}
	}

	if (GPIO_Pin == AlarmSilenceBtnIn_Pin)
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ec:	d10f      	bne.n	800160e <HAL_GPIO_EXTI_Callback+0x76>
	{
		uint32_t	WakeTime = osKernelSysTick();
 80015ee:	f004 ff4e 	bl	800648e <osKernelSysTick>
 80015f2:	6138      	str	r0, [r7, #16]
		if ((WakeTime - prev_systick) > 500)
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_GPIO_EXTI_Callback+0xac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001600:	d905      	bls.n	800160e <HAL_GPIO_EXTI_Callback+0x76>
		{
			ToggleSilenceAlarmParam(&ventilator);
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001604:	f001 fc17 	bl	8002e36 <ToggleSilenceAlarmParam>
			prev_systick = WakeTime;
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_GPIO_EXTI_Callback+0xac>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6013      	str	r3, [r2, #0]
		}
	}

	if (GPIO_Pin == StartStopBtnIn_Pin)
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001614:	d10f      	bne.n	8001636 <HAL_GPIO_EXTI_Callback+0x9e>
	{
		uint32_t	WakeTime = osKernelSysTick();
 8001616:	f004 ff3a 	bl	800648e <osKernelSysTick>
 800161a:	60f8      	str	r0, [r7, #12]
		if ((WakeTime - prev_systick) > 500)
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_GPIO_EXTI_Callback+0xac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001628:	d905      	bls.n	8001636 <HAL_GPIO_EXTI_Callback+0x9e>
		{
			ToggleRoutineEnaParam(&ventilator);
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <HAL_GPIO_EXTI_Callback+0xb0>)
 800162c:	f001 fbe2 	bl	8002df4 <ToggleRoutineEnaParam>
			prev_systick = WakeTime;
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_GPIO_EXTI_Callback+0xac>)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000273c 	.word	0x2000273c
 8001644:	20000450 	.word	0x20000450
 8001648:	20002638 	.word	0x20002638
 800164c:	20002604 	.word	0x20002604

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b0c6      	sub	sp, #280	; 0x118
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f001 fc65 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 f91d 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f000 fc03 	bl	8001e68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001662:	f000 fbe3 	bl	8001e2c <MX_DMA_Init>
  MX_I2C2_Init();
 8001666:	f000 fa1b 	bl	8001aa0 <MX_I2C2_Init>
  MX_TIM1_Init();
 800166a:	f000 fa7d 	bl	8001b68 <MX_TIM1_Init>
  MX_TIM3_Init();
 800166e:	f000 faff 	bl	8001c70 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001672:	f000 f96d 	bl	8001950 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001676:	f000 f9d5 	bl	8001a24 <MX_ADC2_Init>
  MX_TIM4_Init();
 800167a:	f000 fb53 	bl	8001d24 <MX_TIM4_Init>
  MX_SPI1_Init();
 800167e:	f000 fa3d 	bl	8001afc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001682:	f000 fba9 	bl	8001dd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DCMotorInit(&dc_motor, &htim1);
 8001686:	4969      	ldr	r1, [pc, #420]	; (800182c <main+0x1dc>)
 8001688:	4869      	ldr	r0, [pc, #420]	; (8001830 <main+0x1e0>)
 800168a:	f7ff fd73 	bl	8001174 <DCMotorInit>
  EncoderInit(&motor_encoder, HD_MODEL);
 800168e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001692:	4868      	ldr	r0, [pc, #416]	; (8001834 <main+0x1e4>)
 8001694:	f7ff fdde 	bl	8001254 <EncoderInit>
  LCDInit(&lcd_display, &hi2c2);
 8001698:	4967      	ldr	r1, [pc, #412]	; (8001838 <main+0x1e8>)
 800169a:	4868      	ldr	r0, [pc, #416]	; (800183c <main+0x1ec>)
 800169c:	f7ff ff0c 	bl	80014b8 <LCDInit>
  PotControlsInit(pot_controls_a);
 80016a0:	4867      	ldr	r0, [pc, #412]	; (8001840 <main+0x1f0>)
 80016a2:	f000 feee 	bl	8002482 <PotControlsInit>
  BuzzerInit(&buzzer);
 80016a6:	4867      	ldr	r0, [pc, #412]	; (8001844 <main+0x1f4>)
 80016a8:	f7ff fd08 	bl	80010bc <BuzzerInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainRoutine */
  osThreadDef(mainRoutine, startMainRoutine, osPriorityRealtime, 0, 128);
 80016ac:	4b66      	ldr	r3, [pc, #408]	; (8001848 <main+0x1f8>)
 80016ae:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 80016b2:	461d      	mov	r5, r3
 80016b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainRoutineHandle = osThreadCreate(osThread(mainRoutine), NULL);
 80016c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 fef1 	bl	80064ae <osThreadCreate>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b5f      	ldr	r3, [pc, #380]	; (800184c <main+0x1fc>)
 80016d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUpdate */
  osThreadDef(displayUpdate, startDisplayUpdate, osPriorityNormal, 0, 128);
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <main+0x200>)
 80016d4:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80016d8:	461d      	mov	r5, r3
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUpdateHandle = osThreadCreate(osThread(displayUpdate), NULL);
 80016e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fede 	bl	80064ae <osThreadCreate>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b57      	ldr	r3, [pc, #348]	; (8001854 <main+0x204>)
 80016f6:	601a      	str	r2, [r3, #0]

  /* definition and creation of motorEncoder */
  osThreadDef(motorEncoder, startMotorEncoder, osPriorityAboveNormal, 0, 128);
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <main+0x208>)
 80016fa:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80016fe:	461d      	mov	r5, r3
 8001700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorEncoderHandle = osThreadCreate(osThread(motorEncoder), NULL);
 800170c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fecb 	bl	80064ae <osThreadCreate>
 8001718:	4602      	mov	r2, r0
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <main+0x20c>)
 800171c:	601a      	str	r2, [r3, #0]

  /* definition and creation of initTask */
  osThreadDef(initTask, startInitTask, osPriorityRealtime, 0, 128);
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <main+0x210>)
 8001720:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001724:	461d      	mov	r5, r3
 8001726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800172e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(initTask), NULL);
 8001732:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f004 feb8 	bl	80064ae <osThreadCreate>
 800173e:	4602      	mov	r2, r0
 8001740:	4b48      	ldr	r3, [pc, #288]	; (8001864 <main+0x214>)
 8001742:	601a      	str	r2, [r3, #0]

  /* definition and creation of alarmsTask */
  osThreadDef(alarmsTask, startAlarmsTask, osPriorityAboveNormal, 0, 128);
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <main+0x218>)
 8001746:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800174a:	461d      	mov	r5, r3
 800174c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmsTaskHandle = osThreadCreate(osThread(alarmsTask), NULL);
 8001758:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f004 fea5 	bl	80064ae <osThreadCreate>
 8001764:	4602      	mov	r2, r0
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <main+0x21c>)
 8001768:	601a      	str	r2, [r3, #0]

  /* definition and creation of updatePots */
  osThreadDef(updatePots, startUpdatePots, osPriorityRealtime, 0, 128);
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <main+0x220>)
 800176c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001770:	461d      	mov	r5, r3
 8001772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001776:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800177a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updatePotsHandle = osThreadCreate(osThread(updatePots), NULL);
 800177e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fe92 	bl	80064ae <osThreadCreate>
 800178a:	4602      	mov	r2, r0
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <main+0x224>)
 800178e:	601a      	str	r2, [r3, #0]

  /* definition and creation of buzzerUpdate */
  osThreadDef(buzzerUpdate, startBuzzerUpdate, osPriorityAboveNormal, 0, 128);
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <main+0x228>)
 8001792:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001796:	461d      	mov	r5, r3
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzzerUpdateHandle = osThreadCreate(osThread(buzzerUpdate), NULL);
 80017a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fe7f 	bl	80064ae <osThreadCreate>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <main+0x22c>)
 80017b4:	601a      	str	r2, [r3, #0]

  /* definition and creation of calibRoutine */
  osThreadDef(calibRoutine, startCalibRoutine, osPriorityRealtime, 0, 128);
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <main+0x230>)
 80017b8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80017bc:	461d      	mov	r5, r3
 80017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calibRoutineHandle = osThreadCreate(osThread(calibRoutine), NULL);
 80017ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 fe6c 	bl	80064ae <osThreadCreate>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <main+0x234>)
 80017da:	601a      	str	r2, [r3, #0]

  /* definition and creation of armEncoder */
  osThreadDef(armEncoder, startArmEncoder, osPriorityAboveNormal, 0, 128);
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <main+0x238>)
 80017de:	f107 041c 	add.w	r4, r7, #28
 80017e2:	461d      	mov	r5, r3
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armEncoderHandle = osThreadCreate(osThread(armEncoder), NULL);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 fe59 	bl	80064ae <osThreadCreate>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <main+0x23c>)
 8001800:	601a      	str	r2, [r3, #0]

  /* definition and creation of diagnosticsTask */
  osThreadDef(diagnosticsTask, startDiagnostics, osPriorityAboveNormal, 0, 128);
 8001802:	463b      	mov	r3, r7
 8001804:	4a22      	ldr	r2, [pc, #136]	; (8001890 <main+0x240>)
 8001806:	461c      	mov	r4, r3
 8001808:	4615      	mov	r5, r2
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diagnosticsTaskHandle = osThreadCreate(osThread(diagnosticsTask), NULL);
 8001816:	463b      	mov	r3, r7
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fe47 	bl	80064ae <osThreadCreate>
 8001820:	4602      	mov	r2, r0
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <main+0x244>)
 8001824:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001826:	f004 fe2b 	bl	8006480 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800182a:	e7fe      	b.n	800182a <main+0x1da>
 800182c:	200026fc 	.word	0x200026fc
 8001830:	200026a0 	.word	0x200026a0
 8001834:	20002654 	.word	0x20002654
 8001838:	2000255c 	.word	0x2000255c
 800183c:	200025b8 	.word	0x200025b8
 8001840:	20002798 	.word	0x20002798
 8001844:	20002648 	.word	0x20002648
 8001848:	08009ef4 	.word	0x08009ef4
 800184c:	200026f8 	.word	0x200026f8
 8001850:	08009f20 	.word	0x08009f20
 8001854:	200025b4 	.word	0x200025b4
 8001858:	08009f4c 	.word	0x08009f4c
 800185c:	2000265c 	.word	0x2000265c
 8001860:	08009f74 	.word	0x08009f74
 8001864:	200027a8 	.word	0x200027a8
 8001868:	08009f9c 	.word	0x08009f9c
 800186c:	200027cc 	.word	0x200027cc
 8001870:	08009fc4 	.word	0x08009fc4
 8001874:	2000273c 	.word	0x2000273c
 8001878:	08009ff0 	.word	0x08009ff0
 800187c:	200026b0 	.word	0x200026b0
 8001880:	0800a01c 	.word	0x0800a01c
 8001884:	20002604 	.word	0x20002604
 8001888:	0800a044 	.word	0x0800a044
 800188c:	200026ac 	.word	0x200026ac
 8001890:	0800a070 	.word	0x0800a070
 8001894:	200025b0 	.word	0x200025b0

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	2228      	movs	r2, #40	; 0x28
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fad5 	bl	8007e56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80018e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 ffa2 	bl	8004838 <HAL_RCC_OscConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018fa:	f000 fdbc 	bl	8002476 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fe:	230f      	movs	r3, #15
 8001900:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fa0c 	bl	8004d38 <HAL_RCC_ClockConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001926:	f000 fda6 	bl	8002476 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800192a:	2302      	movs	r3, #2
 800192c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800192e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fbca 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001942:	f000 fd98 	bl	8002476 <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3750      	adds	r7, #80	; 0x50
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001962:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <MX_ADC1_Init+0xd0>)
 8001964:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001970:	2200      	movs	r2, #0
 8001972:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001976:	2200      	movs	r2, #0
 8001978:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_ADC1_Init+0xcc>)
 800197c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001980:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_ADC1_Init+0xcc>)
 800198a:	2204      	movs	r2, #4
 800198c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001990:	f001 fb1c 	bl	8002fcc <HAL_ADC_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800199a:	f000 fd6c 	bl	8002476 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	481b      	ldr	r0, [pc, #108]	; (8001a1c <MX_ADC1_Init+0xcc>)
 80019b0:	f001 fcde 	bl	8003370 <HAL_ADC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 fd5c 	bl	8002476 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019be:	2301      	movs	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019c2:	2302      	movs	r3, #2
 80019c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_ADC1_Init+0xcc>)
 80019cc:	f001 fcd0 	bl	8003370 <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80019d6:	f000 fd4e 	bl	8002476 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019da:	2302      	movs	r3, #2
 80019dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019de:	2303      	movs	r3, #3
 80019e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_ADC1_Init+0xcc>)
 80019e8:	f001 fcc2 	bl	8003370 <HAL_ADC_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80019f2:	f000 fd40 	bl	8002476 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019f6:	2303      	movs	r3, #3
 80019f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_ADC1_Init+0xcc>)
 8001a04:	f001 fcb4 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001a0e:	f000 fd32 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20002608 	.word	0x20002608
 8001a20:	40012400 	.word	0x40012400

08001a24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a36:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <MX_ADC2_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a52:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a62:	f001 fab3 	bl	8002fcc <HAL_ADC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 fd03 	bl	8002476 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_ADC2_Init+0x74>)
 8001a82:	f001 fc75 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001a8c:	f000 fcf3 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000252c 	.word	0x2000252c
 8001a9c:	40012800 	.word	0x40012800

08001aa0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <MX_I2C2_Init+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <MX_I2C2_Init+0x58>)
 8001aae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_I2C2_Init+0x50>)
 8001ade:	f002 fa89 	bl	8003ff4 <HAL_I2C_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ae8:	f000 fcc5 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000255c 	.word	0x2000255c
 8001af4:	40005800 	.word	0x40005800
 8001af8:	000186a0 	.word	0x000186a0

08001afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <MX_SPI1_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b2e:	2208      	movs	r2, #8
 8001b30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b46:	220a      	movs	r2, #10
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b4c:	f003 fb76 	bl	800523c <HAL_SPI_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8001b56:	f000 fc8e 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20002740 	.word	0x20002740
 8001b64:	40013000 	.word	0x40013000

08001b68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b092      	sub	sp, #72	; 0x48
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2220      	movs	r2, #32
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f006 f95f 	bl	8007e56 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001b9a:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <MX_TIM1_Init+0x104>)
 8001b9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b9e:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4800-1;
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001bac:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bc4:	4828      	ldr	r0, [pc, #160]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001bc6:	f003 fbf1 	bl	80053ac <HAL_TIM_PWM_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001bd0:	f000 fc51 	bl	8002476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be0:	4619      	mov	r1, r3
 8001be2:	4821      	ldr	r0, [pc, #132]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001be4:	f004 f972 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001bee:	f000 fc42 	bl	8002476 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	; 0x60
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	2200      	movs	r2, #0
 8001c14:	4619      	mov	r1, r3
 8001c16:	4814      	ldr	r0, [pc, #80]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001c18:	f003 fe60 	bl	80058dc <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c22:	f000 fc28 	bl	8002476 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001c4a:	f004 f983 	bl	8005f54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001c54:	f000 fc0f 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <MX_TIM1_Init+0x100>)
 8001c5a:	f000 fe6b 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001c5e:	bf00      	nop
 8001c60:	3748      	adds	r7, #72	; 0x48
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200026fc 	.word	0x200026fc
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 f8e9 	bl	8007e56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <MX_TIM3_Init+0xb0>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001ca0:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480f      	ldr	r0, [pc, #60]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001cde:	f003 fc0f 	bl	8005500 <HAL_TIM_Encoder_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f000 fbc5 	bl	8002476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001cfa:	f004 f8e7 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d04:	f000 fbb7 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, htim3.Channel);
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001d0a:	7f1b      	ldrb	r3, [r3, #28]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4803      	ldr	r0, [pc, #12]	; (8001d1c <MX_TIM3_Init+0xac>)
 8001d10:	f003 fc84 	bl	800561c <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3730      	adds	r7, #48	; 0x30
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200025c4 	.word	0x200025c4
 8001d20:	40000400 	.word	0x40000400

08001d24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2224      	movs	r2, #36	; 0x24
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f006 f88f 	bl	8007e56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d42:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <MX_TIM4_Init+0xb0>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2400-1;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d54:	f640 125f 	movw	r2, #2399	; 0x95f
 8001d58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d66:	2303      	movs	r3, #3
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001d92:	f003 fbb5 	bl	8005500 <HAL_TIM_Encoder_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d9c:	f000 fb6b 	bl	8002476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001dae:	f004 f88d 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001db8:	f000 fb5d 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim4, htim4.Channel);
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM4_Init+0xac>)
 8001dc4:	f003 fc2a 	bl	800561c <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	; 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200024ec 	.word	0x200024ec
 8001dd4:	40000800 	.word	0x40000800

08001dd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART1_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e00:	220c      	movs	r2, #12
 8001e02:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e12:	f004 f902 	bl	800601a <HAL_UART_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001e1c:	f000 fb2b 	bl	8002476 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20002660 	.word	0x20002660
 8001e28:	40013800 	.word	0x40013800

08001e2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_DMA_Init+0x38>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <MX_DMA_Init+0x38>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6153      	str	r3, [r2, #20]
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_DMA_Init+0x38>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2106      	movs	r1, #6
 8001e4e:	200b      	movs	r0, #11
 8001e50:	f001 fd2d 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e54:	200b      	movs	r0, #11
 8001e56:	f001 fd46 	bl	80038e6 <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a3e      	ldr	r2, [pc, #248]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a38      	ldr	r2, [pc, #224]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a2c      	ldr	r2, [pc, #176]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <MX_GPIO_Init+0x114>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PrsSnsrCSADCOut_Pin|PrsSnsrCSEEOut_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001ee2:	4827      	ldr	r0, [pc, #156]	; (8001f80 <MX_GPIO_Init+0x118>)
 8001ee4:	f002 f856 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BuzzerOut_Pin|MotorCW_Pin|MotorCCW_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f240 3101 	movw	r1, #769	; 0x301
 8001eee:	4825      	ldr	r0, [pc, #148]	; (8001f84 <MX_GPIO_Init+0x11c>)
 8001ef0:	f002 f850 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PrsSnsrCSADCOut_Pin PrsSnsrCSEEOut_Pin */
  GPIO_InitStruct.Pin = PrsSnsrCSADCOut_Pin|PrsSnsrCSEEOut_Pin;
 8001ef4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481c      	ldr	r0, [pc, #112]	; (8001f80 <MX_GPIO_Init+0x118>)
 8001f0e:	f001 fee7 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BuzzerOut_Pin MotorCW_Pin MotorCCW_Pin */
  GPIO_InitStruct.Pin = BuzzerOut_Pin|MotorCW_Pin|MotorCCW_Pin;
 8001f12:	f240 3301 	movw	r3, #769	; 0x301
 8001f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4816      	ldr	r0, [pc, #88]	; (8001f84 <MX_GPIO_Init+0x11c>)
 8001f2c:	f001 fed8 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EditBtnIn_Pin CalibrationBtnIn_Pin AlarmSilenceBtnIn_Pin */
  GPIO_InitStruct.Pin = EditBtnIn_Pin|CalibrationBtnIn_Pin|AlarmSilenceBtnIn_Pin;
 8001f30:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_GPIO_Init+0x120>)
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4619      	mov	r1, r3
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <MX_GPIO_Init+0x11c>)
 8001f46:	f001 fecb 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartStopBtnIn_Pin */
  GPIO_InitStruct.Pin = StartStopBtnIn_Pin;
 8001f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <MX_GPIO_Init+0x120>)
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(StartStopBtnIn_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <MX_GPIO_Init+0x124>)
 8001f60:	f001 febe 	bl	8003ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2105      	movs	r1, #5
 8001f68:	2028      	movs	r0, #40	; 0x28
 8001f6a:	f001 fca0 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f6e:	2028      	movs	r0, #40	; 0x28
 8001f70:	f001 fcb9 	bl	80038e6 <HAL_NVIC_EnableIRQ>

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	10110000 	.word	0x10110000
 8001f8c:	40010800 	.word	0x40010800

08001f90 <startMainRoutine>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_startMainRoutine */
void startMainRoutine(void const * argument)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001f98:	f004 fa79 	bl	800648e <osKernelSysTick>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if (((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE) && !((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION))
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <startMainRoutine+0x78>)
 8001fa2:	7b1b      	ldrb	r3, [r3, #12]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <startMainRoutine+0x2c>
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <startMainRoutine+0x78>)
 8001fb0:	7b1b      	ldrb	r3, [r3, #12]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d123      	bne.n	8002004 <startMainRoutine+0x74>




		}
		else if ((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <startMainRoutine+0x78>)
 8001fbe:	7b1b      	ldrb	r3, [r3, #12]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d106      	bne.n	8001fd8 <startMainRoutine+0x48>
		{
			osDelayUntil(&PreviousWakeTime, 10);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	210a      	movs	r1, #10
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 faf3 	bl	80065bc <osDelayUntil>
 8001fd6:	e7e3      	b.n	8001fa0 <startMainRoutine+0x10>
		}
		else
		{
			dc_motor.pwm_value = 0;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <startMainRoutine+0x7c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <startMainRoutine+0x7c>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <startMainRoutine+0x7c>)
 8001fe6:	f7ff f8d9 	bl	800119c <DCMotorRPMSet>
			BuzzerUpdateParams(&buzzer, 125, 0.5, 6);
 8001fea:	2306      	movs	r3, #6
 8001fec:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ff0:	217d      	movs	r1, #125	; 0x7d
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <startMainRoutine+0x80>)
 8001ff4:	f7ff f878 	bl	80010e8 <BuzzerUpdateParams>
			osDelayUntil(&PreviousWakeTime, 10);
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	210a      	movs	r1, #10
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fadc 	bl	80065bc <osDelayUntil>
		if (((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE) && !((ventilator.status_flags & START_CALIBRATION) == START_CALIBRATION))
 8002004:	e7cc      	b.n	8001fa0 <startMainRoutine+0x10>
 8002006:	bf00      	nop
 8002008:	20002638 	.word	0x20002638
 800200c:	200026a0 	.word	0x200026a0
 8002010:	20002648 	.word	0x20002648

08002014 <startDisplayUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplayUpdate */
void startDisplayUpdate(void const * argument)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b08d      	sub	sp, #52	; 0x34
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplayUpdate */
	char buffer[32];
	uint32_t PreviousWakeTime = osKernelSysTick();
 800201c:	f004 fa37 	bl	800648e <osKernelSysTick>
 8002020:	4603      	mov	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]
	osThreadResume(updatePotsHandle);
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <startDisplayUpdate+0xd4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f004 faa5 	bl	8006578 <osThreadResume>

  /* Infinite loop */
	for(;;)
	{
		LCDSetCursorPos(&lcd_display, 1, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2101      	movs	r1, #1
 8002032:	482e      	ldr	r0, [pc, #184]	; (80020ec <startDisplayUpdate+0xd8>)
 8002034:	f7ff fa16 	bl	8001464 <LCDSetCursorPos>
		sprintf(buffer, "VOL %03u  MOT %04lu", ventilator.tidal_volume, TIM3->CNT);
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <startDisplayUpdate+0xdc>)
 800203a:	885b      	ldrh	r3, [r3, #2]
 800203c:	461a      	mov	r2, r3
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <startDisplayUpdate+0xe0>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f107 0010 	add.w	r0, r7, #16
 8002046:	492c      	ldr	r1, [pc, #176]	; (80020f8 <startDisplayUpdate+0xe4>)
 8002048:	f006 fb5c 	bl	8008704 <siprintf>
		LCDSendString(&lcd_display, buffer);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4826      	ldr	r0, [pc, #152]	; (80020ec <startDisplayUpdate+0xd8>)
 8002054:	f7ff fa8a 	bl	800156c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 3, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2103      	movs	r1, #3
 800205c:	4823      	ldr	r0, [pc, #140]	; (80020ec <startDisplayUpdate+0xd8>)
 800205e:	f7ff fa01 	bl	8001464 <LCDSetCursorPos>
		sprintf(buffer, "RFQ %03u  ANGL", ventilator.respiration_frequency);
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <startDisplayUpdate+0xdc>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	461a      	mov	r2, r3
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4923      	ldr	r1, [pc, #140]	; (80020fc <startDisplayUpdate+0xe8>)
 800206e:	4618      	mov	r0, r3
 8002070:	f006 fb48 	bl	8008704 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	481c      	ldr	r0, [pc, #112]	; (80020ec <startDisplayUpdate+0xd8>)
 800207c:	f7ff fa76 	bl	800156c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	4819      	ldr	r0, [pc, #100]	; (80020ec <startDisplayUpdate+0xd8>)
 8002086:	f7ff f9ed 	bl	8001464 <LCDSetCursorPos>
		sprintf(buffer, "I:E %03u  T %06lu", ventilator.i_e_ratio, HAL_GetTick());
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <startDisplayUpdate+0xdc>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461c      	mov	r4, r3
 8002090:	f000 ff70 	bl	8002f74 <HAL_GetTick>
 8002094:	4603      	mov	r3, r0
 8002096:	f107 0010 	add.w	r0, r7, #16
 800209a:	4622      	mov	r2, r4
 800209c:	4918      	ldr	r1, [pc, #96]	; (8002100 <startDisplayUpdate+0xec>)
 800209e:	f006 fb31 	bl	8008704 <siprintf>
		LCDSendString(&lcd_display, buffer);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	4810      	ldr	r0, [pc, #64]	; (80020ec <startDisplayUpdate+0xd8>)
 80020aa:	f7ff fa5f 	bl	800156c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 2, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2102      	movs	r1, #2
 80020b2:	480e      	ldr	r0, [pc, #56]	; (80020ec <startDisplayUpdate+0xd8>)
 80020b4:	f7ff f9d6 	bl	8001464 <LCDSetCursorPos>
		sprintf(buffer, "PRS %03u  ARM %04lu", ventilator.pressure_level_alarm_value, TIM4->CNT);
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <startDisplayUpdate+0xdc>)
 80020ba:	791b      	ldrb	r3, [r3, #4]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <startDisplayUpdate+0xf0>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f107 0010 	add.w	r0, r7, #16
 80020c6:	4910      	ldr	r1, [pc, #64]	; (8002108 <startDisplayUpdate+0xf4>)
 80020c8:	f006 fb1c 	bl	8008704 <siprintf>
		LCDSendString(&lcd_display, buffer);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <startDisplayUpdate+0xd8>)
 80020d4:	f7ff fa4a 	bl	800156c <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_UPDATE_TIMESTEP_MS);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2164      	movs	r1, #100	; 0x64
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fa6c 	bl	80065bc <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 1, 0);
 80020e4:	e7a3      	b.n	800202e <startDisplayUpdate+0x1a>
 80020e6:	bf00      	nop
 80020e8:	2000273c 	.word	0x2000273c
 80020ec:	200025b8 	.word	0x200025b8
 80020f0:	20002638 	.word	0x20002638
 80020f4:	40000400 	.word	0x40000400
 80020f8:	0800a08c 	.word	0x0800a08c
 80020fc:	0800a0a0 	.word	0x0800a0a0
 8002100:	0800a0b0 	.word	0x0800a0b0
 8002104:	40000800 	.word	0x40000800
 8002108:	0800a0c4 	.word	0x0800a0c4

0800210c <startMotorEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorEncoder */
void startMotorEncoder(void const * argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMotorEncoder */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8002114:	f004 f9bb 	bl	800648e <osKernelSysTick>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, TIM3->CNT, MOTOR_RPM_CALCULATE_TIMESTEP_MS);
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <startMotorEncoder+0x2c>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	220a      	movs	r2, #10
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <startMotorEncoder+0x30>)
 8002126:	f7ff f8ab 	bl	8001280 <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, MOTOR_RPM_CALCULATE_TIMESTEP_MS);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	210a      	movs	r1, #10
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fa43 	bl	80065bc <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, TIM3->CNT, MOTOR_RPM_CALCULATE_TIMESTEP_MS);
 8002136:	e7f1      	b.n	800211c <startMotorEncoder+0x10>
 8002138:	40000400 	.word	0x40000400
 800213c:	20002654 	.word	0x20002654

08002140 <startInitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startInitTask */
void startInitTask(void const * argument)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startInitTask */
	VentilatorInit(&ventilator);
 8002148:	4808      	ldr	r0, [pc, #32]	; (800216c <startInitTask+0x2c>)
 800214a:	f000 fd6b 	bl	8002c24 <VentilatorInit>

	osThreadResume(updatePotsHandle);
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <startInitTask+0x30>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fa10 	bl	8006578 <osThreadResume>
	osThreadTerminate(initTaskHandle);
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <startInitTask+0x34>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f004 f9f2 	bl	8006546 <osThreadTerminate>
  /* USER CODE END startInitTask */
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20002638 	.word	0x20002638
 8002170:	2000273c 	.word	0x2000273c
 8002174:	200027a8 	.word	0x200027a8

08002178 <startAlarmsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarmsTask */
void startAlarmsTask(void const * argument)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAlarmsTask */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8002180:	f004 f985 	bl	800648e <osKernelSysTick>
 8002184:	4603      	mov	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]
	//osDelayUntil(&PreviousWakeTime, 1000);

  /* Infinite loop */
	for(;;)
	{
		if ((ventilator.status_flags & SILENCE_ALARMS) == SILENCE_ALARMS)
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <startAlarmsTask+0x24>)
 800218a:	7b1b      	ldrb	r3, [r3, #12]
			//ventilator.alarm_flags = 0x00;
			//osDelayUntil(&PreviousWakeTime, ALARM_SILENCE_TIMEOUT_MS);
			//ventilator.alarm_flags = 0x01;
			//ToggleSilenceAlarmParam(&ventilator);
		}
		osDelayUntil(&PreviousWakeTime, ALARM_UPDATE_TIMESTEP_MS);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	210a      	movs	r1, #10
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fa12 	bl	80065bc <osDelayUntil>
		if ((ventilator.status_flags & SILENCE_ALARMS) == SILENCE_ALARMS)
 8002198:	e7f6      	b.n	8002188 <startAlarmsTask+0x10>
 800219a:	bf00      	nop
 800219c:	20002638 	.word	0x20002638

080021a0 <startUpdatePots>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUpdatePots */
void startUpdatePots(void const * argument)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUpdatePots */
  /* Infinite loop */
	for(;;)
	{
	  uint16_t adc_values[TOTAL_CONTROLS_COUNT] = {0,0,0,0};
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, TOTAL_CONTROLS_COUNT);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2204      	movs	r2, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <startUpdatePots+0x40>)
 80021bc:	f000 ffde 	bl	800317c <HAL_ADC_Start_DMA>
	  PotControlsValueUpdate(pot_controls_a, adc_values);
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <startUpdatePots+0x44>)
 80021c8:	f000 f973 	bl	80024b2 <PotControlsValueUpdate>
	  UpdateVentilatorParams(&ventilator, pot_controls_a);
 80021cc:	4905      	ldr	r1, [pc, #20]	; (80021e4 <startUpdatePots+0x44>)
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <startUpdatePots+0x48>)
 80021d0:	f000 fd38 	bl	8002c44 <UpdateVentilatorParams>
	  osThreadSuspend(updatePotsHandle);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <startUpdatePots+0x4c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 f9c0 	bl	800655e <osThreadSuspend>
	{
 80021de:	e7e3      	b.n	80021a8 <startUpdatePots+0x8>
 80021e0:	20002608 	.word	0x20002608
 80021e4:	20002798 	.word	0x20002798
 80021e8:	20002638 	.word	0x20002638
 80021ec:	2000273c 	.word	0x2000273c

080021f0 <startBuzzerUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBuzzerUpdate */
void startBuzzerUpdate(void const * argument)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBuzzerUpdate */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80021f8:	f004 f949 	bl	800648e <osKernelSysTick>
 80021fc:	4603      	mov	r3, r0
 80021fe:	60fb      	str	r3, [r7, #12]
	uint32_t cycle_counter = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
	uint16_t cycles = (uint16_t) (0.5 * (float)(buzzer.period) / buzzer.cycle_time);
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <startBuzzerUpdate+0xb0>)
 8002206:	891b      	ldrh	r3, [r3, #8]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fd13 	bl	8000c34 <__aeabi_ui2f>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f909 	bl	8000428 <__aeabi_f2d>
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <startBuzzerUpdate+0xb4>)
 800221c:	f7fe f95c 	bl	80004d8 <__aeabi_dmul>
 8002220:	4603      	mov	r3, r0
 8002222:	460c      	mov	r4, r1
 8002224:	4625      	mov	r5, r4
 8002226:	461c      	mov	r4, r3
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <startBuzzerUpdate+0xb0>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f8fb 	bl	8000428 <__aeabi_f2d>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4620      	mov	r0, r4
 8002238:	4629      	mov	r1, r5
 800223a:	f7fe fa77 	bl	800072c <__aeabi_ddiv>
 800223e:	4603      	mov	r3, r0
 8002240:	460c      	mov	r4, r1
 8002242:	4618      	mov	r0, r3
 8002244:	4621      	mov	r1, r4
 8002246:	f7fe fc1f 	bl	8000a88 <__aeabi_d2uiz>
 800224a:	4603      	mov	r3, r0
 800224c:	827b      	strh	r3, [r7, #18]
	uint16_t dead_time = (uint16_t) ( (float) buzzer.period * 0.5);
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <startBuzzerUpdate+0xb0>)
 8002250:	891b      	ldrh	r3, [r3, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fcee 	bl	8000c34 <__aeabi_ui2f>
 8002258:	4603      	mov	r3, r0
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f8e4 	bl	8000428 <__aeabi_f2d>
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <startBuzzerUpdate+0xb4>)
 8002266:	f7fe f937 	bl	80004d8 <__aeabi_dmul>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	4618      	mov	r0, r3
 8002270:	4621      	mov	r1, r4
 8002272:	f7fe fc09 	bl	8000a88 <__aeabi_d2uiz>
 8002276:	4603      	mov	r3, r0
 8002278:	823b      	strh	r3, [r7, #16]

  /* Infinite loop */
	for(;;)
	{
		if (((ventilator.status_flags & SILENCE_ALARMS) == 0) && ((ventilator.status_flags & START_CALIBRATION) == 1))
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <startBuzzerUpdate+0xb8>)
 800227c:	7b1b      	ldrb	r3, [r3, #12]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <startBuzzerUpdate+0x9c>
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <startBuzzerUpdate+0xb8>)
 800228a:	7b1b      	ldrb	r3, [r3, #12]
			HAL_GPIO_WritePin(GPIOB, BuzzerOut_Pin, GPIO_PIN_RESET);
			osDelayUntil(&PreviousWakeTime, off_time);
		}
		else
		{
			cycle_counter = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
			osDelayUntil(&PreviousWakeTime, 10);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	210a      	movs	r1, #10
 8002296:	4618      	mov	r0, r3
 8002298:	f004 f990 	bl	80065bc <osDelayUntil>
		if (((ventilator.status_flags & SILENCE_ALARMS) == 0) && ((ventilator.status_flags & START_CALIBRATION) == 1))
 800229c:	e7ed      	b.n	800227a <startBuzzerUpdate+0x8a>
 800229e:	bf00      	nop
 80022a0:	20002648 	.word	0x20002648
 80022a4:	3fe00000 	.word	0x3fe00000
 80022a8:	20002638 	.word	0x20002638

080022ac <startCalibRoutine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCalibRoutine */
void startCalibRoutine(void const * argument)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCalibRoutine */
	uint32_t	PreviousWakeTime = osKernelSysTick();
 80022b4:	f004 f8eb 	bl	800648e <osKernelSysTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]
	uint8_t 	process_flag = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
	uint32_t init_count = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
	osThreadSuspend(calibRoutineHandle);
 80022c4:	4b33      	ldr	r3, [pc, #204]	; (8002394 <startCalibRoutine+0xe8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 f948 	bl	800655e <osThreadSuspend>

  /* Infinite loop */
	for(;;)
	{

			if (process_flag == 0)
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d133      	bne.n	800233c <startCalibRoutine+0x90>
			{
				osThreadSuspend(mainRoutineHandle);
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <startCalibRoutine+0xec>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 f940 	bl	800655e <osThreadSuspend>
				PreviousWakeTime = osKernelSysTick();
 80022de:	f004 f8d6 	bl	800648e <osKernelSysTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	60fb      	str	r3, [r7, #12]
				dc_motor.pwm_value = 600;
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <startCalibRoutine+0xf0>)
 80022e8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022ec:	811a      	strh	r2, [r3, #8]
				dc_motor.direction_flag = MOTOR_SPIN_CW;
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <startCalibRoutine+0xf0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 80022f4:	4829      	ldr	r0, [pc, #164]	; (800239c <startCalibRoutine+0xf0>)
 80022f6:	f7fe ff51 	bl	800119c <DCMotorRPMSet>
				osDelayUntil(&PreviousWakeTime, 3000);
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002302:	4618      	mov	r0, r3
 8002304:	f004 f95a 	bl	80065bc <osDelayUntil>

				dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <startCalibRoutine+0xf0>)
 800230a:	2202      	movs	r2, #2
 800230c:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 800230e:	4823      	ldr	r0, [pc, #140]	; (800239c <startCalibRoutine+0xf0>)
 8002310:	f7fe ff44 	bl	800119c <DCMotorRPMSet>
				osThreadSuspend(calibRoutineHandle);
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <startCalibRoutine+0xe8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f920 	bl	800655e <osThreadSuspend>

				init_count = TIM4->CNT;
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <startCalibRoutine+0xf4>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	613b      	str	r3, [r7, #16]
				dc_motor.pwm_value = 600;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <startCalibRoutine+0xf0>)
 8002326:	f44f 7216 	mov.w	r2, #600	; 0x258
 800232a:	811a      	strh	r2, [r3, #8]
				dc_motor.direction_flag = MOTOR_SPIN_CCW;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <startCalibRoutine+0xf0>)
 800232e:	2201      	movs	r2, #1
 8002330:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 8002332:	481a      	ldr	r0, [pc, #104]	; (800239c <startCalibRoutine+0xf0>)
 8002334:	f7fe ff32 	bl	800119c <DCMotorRPMSet>
				process_flag = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	75fb      	strb	r3, [r7, #23]
			}

			if (TIM4->CNT != init_count)
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <startCalibRoutine+0xf4>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d01e      	beq.n	8002384 <startCalibRoutine+0xd8>
			{
				dc_motor.pwm_value = 0;
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <startCalibRoutine+0xf0>)
 8002348:	2200      	movs	r2, #0
 800234a:	811a      	strh	r2, [r3, #8]
				dc_motor.direction_flag = MOTOR_SPIN_STOP;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <startCalibRoutine+0xf0>)
 800234e:	2202      	movs	r2, #2
 8002350:	729a      	strb	r2, [r3, #10]
				DCMotorRPMSet(&dc_motor);
 8002352:	4812      	ldr	r0, [pc, #72]	; (800239c <startCalibRoutine+0xf0>)
 8002354:	f7fe ff22 	bl	800119c <DCMotorRPMSet>
				process_flag = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	75fb      	strb	r3, [r7, #23]
				TIM3->CNT = 0;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <startCalibRoutine+0xf8>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
				TIM4->CNT = 0;
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <startCalibRoutine+0xf4>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
				ToggleCalibrationParam(&ventilator);
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <startCalibRoutine+0xfc>)
 800236a:	f000 fd85 	bl	8002e78 <ToggleCalibrationParam>
				osThreadResume(mainRoutineHandle);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <startCalibRoutine+0xec>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f004 f900 	bl	8006578 <osThreadResume>
				osThreadSuspend(calibRoutineHandle);
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <startCalibRoutine+0xe8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f8ee 	bl	800655e <osThreadSuspend>
 8002382:	e7a4      	b.n	80022ce <startCalibRoutine+0x22>
			}
			else
			{
				osDelayUntil(&PreviousWakeTime, 10);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	210a      	movs	r1, #10
 800238a:	4618      	mov	r0, r3
 800238c:	f004 f916 	bl	80065bc <osDelayUntil>
			if (process_flag == 0)
 8002390:	e79d      	b.n	80022ce <startCalibRoutine+0x22>
 8002392:	bf00      	nop
 8002394:	20002604 	.word	0x20002604
 8002398:	200026f8 	.word	0x200026f8
 800239c:	200026a0 	.word	0x200026a0
 80023a0:	40000800 	.word	0x40000800
 80023a4:	40000400 	.word	0x40000400
 80023a8:	20002638 	.word	0x20002638

080023ac <startArmEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startArmEncoder */
void startArmEncoder(void const * argument)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startArmEncoder */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80023b4:	f004 f86b 	bl	800648e <osKernelSysTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, TIM4->CNT, ARM_RPM_CALCULATE_TIMESTEP_MS);
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <startArmEncoder+0x2c>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	220a      	movs	r2, #10
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <startArmEncoder+0x30>)
 80023c6:	f7fe ff5b 	bl	8001280 <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, ARM_RPM_CALCULATE_TIMESTEP_MS);
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	210a      	movs	r1, #10
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 f8f3 	bl	80065bc <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, TIM4->CNT, ARM_RPM_CALCULATE_TIMESTEP_MS);
 80023d6:	e7f1      	b.n	80023bc <startArmEncoder+0x10>
 80023d8:	40000800 	.word	0x40000800
 80023dc:	20002654 	.word	0x20002654

080023e0 <startDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDiagnostics */
void startDiagnostics(void const * argument)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b08d      	sub	sp, #52	; 0x34
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDiagnostics */
	char buffer[21];
	uint32_t PreviousWakeTime = osKernelSysTick();
 80023e8:	f004 f851 	bl	800648e <osKernelSysTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if ((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <startDiagnostics+0x60>)
 80023f2:	7b1b      	ldrb	r3, [r3, #12]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d118      	bne.n	8002430 <startDiagnostics+0x50>
		{
			sprintf(buffer, "%04lu,%04lu,%04lu,%04u", HAL_GetTick(), TIM3->CNT, TIM4->CNT, dc_motor.pwm_value);
 80023fe:	f000 fdb9 	bl	8002f74 <HAL_GetTick>
 8002402:	4604      	mov	r4, r0
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <startDiagnostics+0x64>)
 8002406:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <startDiagnostics+0x68>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <startDiagnostics+0x6c>)
 800240e:	8912      	ldrh	r2, [r2, #8]
 8002410:	f107 0010 	add.w	r0, r7, #16
 8002414:	9201      	str	r2, [sp, #4]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	4622      	mov	r2, r4
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <startDiagnostics+0x70>)
 800241e:	f006 f971 	bl	8008704 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) buffer, sizeof(buffer), 100);
 8002422:	f107 0110 	add.w	r1, r7, #16
 8002426:	2364      	movs	r3, #100	; 0x64
 8002428:	2215      	movs	r2, #21
 800242a:	480a      	ldr	r0, [pc, #40]	; (8002454 <startDiagnostics+0x74>)
 800242c:	f003 fe42 	bl	80060b4 <HAL_UART_Transmit>
		}
		osDelayUntil(&PreviousWakeTime, 10);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	210a      	movs	r1, #10
 8002436:	4618      	mov	r0, r3
 8002438:	f004 f8c0 	bl	80065bc <osDelayUntil>
		if ((ventilator.status_flags & ENABLE_ROUTINE) == ENABLE_ROUTINE)
 800243c:	e7d8      	b.n	80023f0 <startDiagnostics+0x10>
 800243e:	bf00      	nop
 8002440:	20002638 	.word	0x20002638
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	200026a0 	.word	0x200026a0
 8002450:	0800a0d8 	.word	0x0800a0d8
 8002454:	20002660 	.word	0x20002660

08002458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d101      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800246a:	f000 fd71 	bl	8002f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <PotControlsInit>:

#include "stm32f1xx_hal.h"
#include "potentiometer_api.h"

void PotControlsInit(volatile Potentiometer_S *pot_array_)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
	pot_array_[TIDAL_VOLUME_CONTROL].rank 				= PIN_A0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]
	pot_array_[I_E_RATIO_CONTROL].rank 					= PIN_A1;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	2203      	movs	r2, #3
 8002496:	701a      	strb	r2, [r3, #0]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank 		= PIN_A2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3308      	adds	r3, #8
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
	pot_array_[PRESSURE_VALUE_CONTROL].rank 			= PIN_A3;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	330c      	adds	r3, #12
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <PotControlsValueUpdate>:

void PotControlsValueUpdate(volatile Potentiometer_S *pot_array_, uint16_t *adc_values_)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
	pot_array_[TIDAL_VOLUME_CONTROL].value 				= adc_values_[pot_array_[TIDAL_VOLUME_CONTROL].rank];
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	881a      	ldrh	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	805a      	strh	r2, [r3, #2]
	pot_array_[I_E_RATIO_CONTROL].value 				= adc_values_[pot_array_[I_E_RATIO_CONTROL].rank];
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	441a      	add	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	805a      	strh	r2, [r3, #2]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].value 	= adc_values_[pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank];
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3308      	adds	r3, #8
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3308      	adds	r3, #8
 80024f6:	8812      	ldrh	r2, [r2, #0]
 80024f8:	805a      	strh	r2, [r3, #2]
	pot_array_[PRESSURE_VALUE_CONTROL].value 			= adc_values_[pot_array_[PRESSURE_VALUE_CONTROL].rank];
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	330c      	adds	r3, #12
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	441a      	add	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	330c      	adds	r3, #12
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	805a      	strh	r2, [r3, #2]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_MspInit+0x68>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_MspInit+0x68>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6193      	str	r3, [r2, #24]
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_MspInit+0x68>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_MspInit+0x68>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_MspInit+0x68>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_MspInit+0x68>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	210f      	movs	r1, #15
 8002556:	f06f 0001 	mvn.w	r0, #1
 800255a:	f001 f9a8 	bl	80038ae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_MspInit+0x6c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_MspInit+0x6c>)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000

0800258c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0318 	add.w	r3, r7, #24
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3d      	ldr	r2, [pc, #244]	; (800269c <HAL_ADC_MspInit+0x110>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d14b      	bne.n	8002644 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ac:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = VolumePotIn_Pin|IERatioPotIn_Pin|FrequencyPotIn_Pin|PressureLvlPotIn_Pin;
 80025dc:	230f      	movs	r3, #15
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e0:	2303      	movs	r3, #3
 80025e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 0318 	add.w	r3, r7, #24
 80025e8:	4619      	mov	r1, r3
 80025ea:	482e      	ldr	r0, [pc, #184]	; (80026a4 <HAL_ADC_MspInit+0x118>)
 80025ec:	f001 fb78 	bl	8003ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 80025f2:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <HAL_ADC_MspInit+0x120>)
 80025f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f6:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002602:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 800260a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 8002612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002616:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 800261a:	2220      	movs	r2, #32
 800261c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 8002620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002624:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002626:	4820      	ldr	r0, [pc, #128]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 8002628:	f001 f96c 	bl	8003904 <HAL_DMA_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002632:	f7ff ff20 	bl	8002476 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 800263a:	621a      	str	r2, [r3, #32]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_ADC_MspInit+0x11c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002642:	e026      	b.n	8002692 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_ADC_MspInit+0x124>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d121      	bne.n	8002692 <HAL_ADC_MspInit+0x106>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 8002654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002658:	6193      	str	r3, [r2, #24]
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6193      	str	r3, [r2, #24]
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_ADC_MspInit+0x114>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PressureSensorIn_Pin|ADCPlaceholderIn_Pin;
 800267e:	2330      	movs	r3, #48	; 0x30
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002682:	2303      	movs	r3, #3
 8002684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_ADC_MspInit+0x118>)
 800268e:	f001 fb27 	bl	8003ce0 <HAL_GPIO_Init>
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40012400 	.word	0x40012400
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010800 	.word	0x40010800
 80026a8:	200026b4 	.word	0x200026b4
 80026ac:	40020008 	.word	0x40020008
 80026b0:	40012800 	.word	0x40012800

080026b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_I2C_MspInit+0x74>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d124      	bne.n	800271e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_I2C_MspInit+0x78>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_I2C_MspInit+0x78>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_I2C_MspInit+0x78>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80026ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f2:	2312      	movs	r3, #18
 80026f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	4619      	mov	r1, r3
 8002700:	480b      	ldr	r0, [pc, #44]	; (8002730 <HAL_I2C_MspInit+0x7c>)
 8002702:	f001 faed 	bl	8003ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_I2C_MspInit+0x78>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_I2C_MspInit+0x78>)
 800270c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_I2C_MspInit+0x78>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40005800 	.word	0x40005800
 800272c:	40021000 	.word	0x40021000
 8002730:	40010c00 	.word	0x40010c00

08002734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <HAL_SPI_MspInit+0xd8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d156      	bne.n	8002802 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002754:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 800275a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_SPI_MspInit+0xdc>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800279c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4818      	ldr	r0, [pc, #96]	; (8002814 <HAL_SPI_MspInit+0xe0>)
 80027b2:	f001 fa95 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80027b6:	2328      	movs	r3, #40	; 0x28
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4813      	ldr	r0, [pc, #76]	; (8002818 <HAL_SPI_MspInit+0xe4>)
 80027ca:	f001 fa89 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ce:	2310      	movs	r3, #16
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <HAL_SPI_MspInit+0xe4>)
 80027e2:	f001 fa7d 	bl	8003ce0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_SPI_MspInit+0xe8>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_SPI_MspInit+0xe8>)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40013000 	.word	0x40013000
 8002810:	40021000 	.word	0x40021000
 8002814:	40010800 	.word	0x40010800
 8002818:	40010c00 	.word	0x40010c00
 800281c:	40010000 	.word	0x40010000

08002820 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_TIM_PWM_MspInit+0x34>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10b      	bne.n	800284a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_TIM_PWM_MspInit+0x38>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <HAL_TIM_PWM_MspInit+0x38>)
 8002838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800283c:	6193      	str	r3, [r2, #24]
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_TIM_PWM_MspInit+0x38>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0318 	add.w	r3, r7, #24
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2a      	ldr	r2, [pc, #168]	; (8002920 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d124      	bne.n	80028c6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	4a28      	ldr	r2, [pc, #160]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	61d3      	str	r3, [r2, #28]
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 80028ac:	23c0      	movs	r3, #192	; 0xc0
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 0318 	add.w	r3, r7, #24
 80028bc:	4619      	mov	r1, r3
 80028be:	481a      	ldr	r0, [pc, #104]	; (8002928 <HAL_TIM_Encoder_MspInit+0xcc>)
 80028c0:	f001 fa0e 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c4:	e028      	b.n	8002918 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_TIM_Encoder_MspInit+0xd0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d123      	bne.n	8002918 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a13      	ldr	r2, [pc, #76]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	61d3      	str	r3, [r2, #28]
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ArmEncoderA_Pin|ArmEncoderB_Pin;
 8002900:	23c0      	movs	r3, #192	; 0xc0
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f107 0318 	add.w	r3, r7, #24
 8002910:	4619      	mov	r1, r3
 8002912:	4807      	ldr	r0, [pc, #28]	; (8002930 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002914:	f001 f9e4 	bl	8003ce0 <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40000400 	.word	0x40000400
 8002924:	40021000 	.word	0x40021000
 8002928:	40010800 	.word	0x40010800
 800292c:	40000800 	.word	0x40000800
 8002930:	40010c00 	.word	0x40010c00

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_TIM_MspPostInit+0x5c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d118      	bne.n	8002986 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_TIM_MspPostInit+0x60>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_TIM_MspPostInit+0x60>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_TIM_MspPostInit+0x60>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 800296c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2302      	movs	r3, #2
 8002978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_TIM_MspPostInit+0x64>)
 8002982:	f001 f9ad 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002986:	bf00      	nop
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40021000 	.word	0x40021000
 8002998:	40010800 	.word	0x40010800

0800299c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_UART_MspInit+0x8c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d131      	bne.n	8002a20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_UART_MspInit+0x90>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_UART_MspInit+0x90>)
 80029c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_UART_MspInit+0x90>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_UART_MspInit+0x90>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_UART_MspInit+0x90>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6193      	str	r3, [r2, #24]
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_UART_MspInit+0x90>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4619      	mov	r1, r3
 8002a00:	480b      	ldr	r0, [pc, #44]	; (8002a30 <HAL_UART_MspInit+0x94>)
 8002a02:	f001 f96d 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_UART_MspInit+0x94>)
 8002a1c:	f001 f960 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010800 	.word	0x40010800

08002a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002a44:	2200      	movs	r2, #0
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	201c      	movs	r0, #28
 8002a4a:	f000 ff30 	bl	80038ae <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002a4e:	201c      	movs	r0, #28
 8002a50:	f000 ff49 	bl	80038e6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_InitTick+0xa4>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_InitTick+0xa4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	61d3      	str	r3, [r2, #28]
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_InitTick+0xa4>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a6c:	f107 0210 	add.w	r2, r7, #16
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fadc 	bl	8005034 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a7c:	f002 fab2 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 8002a80:	4603      	mov	r3, r0
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_InitTick+0xa8>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	3b01      	subs	r3, #1
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0xac>)
 8002a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_InitTick+0xac>)
 8002a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_InitTick+0xac>)
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_InitTick+0xac>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_InitTick+0xac>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002ab6:	480a      	ldr	r0, [pc, #40]	; (8002ae0 <HAL_InitTick+0xac>)
 8002ab8:	f002 fc21 	bl	80052fe <HAL_TIM_Base_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002ac2:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <HAL_InitTick+0xac>)
 8002ac4:	f002 fc4f 	bl	8005366 <HAL_TIM_Base_Start_IT>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	e000      	b.n	8002ace <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3730      	adds	r7, #48	; 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	431bde83 	.word	0x431bde83
 8002ae0:	200027d0 	.word	0x200027d0

08002ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <HardFault_Handler+0x4>

08002af6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <MemManage_Handler+0x4>

08002afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <BusFault_Handler+0x4>

08002b02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <UsageFault_Handler+0x4>

08002b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA1_Channel1_IRQHandler+0x10>)
 8002b1a:	f000 ffad 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200026b4 	.word	0x200026b4

08002b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <TIM2_IRQHandler+0x10>)
 8002b2e:	f002 fdcc 	bl	80056ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200027d0 	.word	0x200027d0

08002b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002b40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b44:	f001 fa3e 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b4c:	f001 fa3a 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b54:	f001 fa36 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b5c:	f001 fa32 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <_sbrk+0x50>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x16>
		heap_end = &end;
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <_sbrk+0x50>)
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <_sbrk+0x54>)
 8002b78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <_sbrk+0x50>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <_sbrk+0x50>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	466a      	mov	r2, sp
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d907      	bls.n	8002b9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b8e:	f005 f92d 	bl	8007dec <__errno>
 8002b92:	4602      	mov	r2, r0
 8002b94:	230c      	movs	r3, #12
 8002b96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	e006      	b.n	8002bac <_sbrk+0x48>
	}

	heap_end += incr;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_sbrk+0x50>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <_sbrk+0x50>)
 8002ba8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000454 	.word	0x20000454
 8002bb8:	20002818 	.word	0x20002818

08002bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <SystemInit+0x5c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <SystemInit+0x5c>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <SystemInit+0x5c>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4911      	ldr	r1, [pc, #68]	; (8002c18 <SystemInit+0x5c>)
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <SystemInit+0x60>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <SystemInit+0x5c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <SystemInit+0x5c>)
 8002bde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <SystemInit+0x5c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SystemInit+0x5c>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <SystemInit+0x5c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <SystemInit+0x5c>)
 8002bfa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002bfe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SystemInit+0x5c>)
 8002c02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SystemInit+0x64>)
 8002c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	f8ff0000 	.word	0xf8ff0000
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <VentilatorInit>:

#include "stm32f1xx_hal.h"
#include "ventilator_api.h"

void VentilatorInit(Ventilator_S *ventilator_)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	ventilator_->status_flags = DISABLE_ALL;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	731a      	strb	r2, [r3, #12]
	ventilator_->alarm_flags = DISABLE_ALL;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	735a      	strb	r2, [r3, #13]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <UpdateVentilatorParams>:

void UpdateVentilatorParams(Ventilator_S *ventilator_, Potentiometer_S *potentiometer_)
{
 8002c44:	b5b0      	push	{r4, r5, r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	if (potentiometer_[I_E_RATIO_CONTROL].value < 1024)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3304      	adds	r3, #4
 8002c52:	885b      	ldrh	r3, [r3, #2]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5a:	d203      	bcs.n	8002c64 <UpdateVentilatorParams+0x20>
	{
		ventilator_->i_e_ratio = 1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e018      	b.n	8002c96 <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < 2048)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	3304      	adds	r3, #4
 8002c68:	885b      	ldrh	r3, [r3, #2]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c70:	d203      	bcs.n	8002c7a <UpdateVentilatorParams+0x36>
	{
		ventilator_->i_e_ratio = 2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e00d      	b.n	8002c96 <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < 3072)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	885b      	ldrh	r3, [r3, #2]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c86:	d203      	bcs.n	8002c90 <UpdateVentilatorParams+0x4c>
	{
		ventilator_->i_e_ratio = 3;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e002      	b.n	8002c96 <UpdateVentilatorParams+0x52>
	}
	else
	{
		ventilator_->i_e_ratio = 4;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
	}

	ventilator_->tidal_volume 				= (int) (((TIDAL_VOLUME_MAX_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[TIDAL_VOLUME_CONTROL].value));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	885b      	ldrh	r3, [r3, #2]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd ffc9 	bl	8000c34 <__aeabi_ui2f>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	494e      	ldr	r1, [pc, #312]	; (8002de0 <UpdateVentilatorParams+0x19c>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f81c 	bl	8000ce4 <__aeabi_fmul>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f9de 	bl	8001070 <__aeabi_f2iz>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	805a      	strh	r2, [r3, #2]
	ventilator_->respiration_frequency 		= (int) (((RESPIRATION_FREQ_MAX_VAL - RESPIRATION_FREQ_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[RESPIRATORY_FREQUENCY_CONTROL].value) + RESPIRATION_FREQ_MIN_VAL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	885b      	ldrh	r3, [r3, #2]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd ffb5 	bl	8000c34 <__aeabi_ui2f>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4945      	ldr	r1, [pc, #276]	; (8002de4 <UpdateVentilatorParams+0x1a0>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f808 	bl	8000ce4 <__aeabi_fmul>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fefa 	bl	8000ad4 <__addsf3>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe f9c4 	bl	8001070 <__aeabi_f2iz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	705a      	strb	r2, [r3, #1]
	ventilator_->pressure_level_alarm_value = (int) (((PRESSURE_LEVEL_ALARM_MAX_VAL - PRESSURE_LEVEL_ALARM_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[PRESSURE_VALUE_CONTROL].value) + PRESSURE_LEVEL_ALARM_MIN_VAL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	885b      	ldrh	r3, [r3, #2]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd ff9b 	bl	8000c34 <__aeabi_ui2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4939      	ldr	r1, [pc, #228]	; (8002de8 <UpdateVentilatorParams+0x1a4>)
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd ffee 	bl	8000ce4 <__aeabi_fmul>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fee0 	bl	8000ad4 <__addsf3>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe f9aa 	bl	8001070 <__aeabi_f2iz>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	711a      	strb	r2, [r3, #4]

	ventilator_->respiration_period_ms		= (int) ((60000.0f / (float) ventilator_->respiration_frequency));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd ff83 	bl	8000c34 <__aeabi_ui2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4619      	mov	r1, r3
 8002d32:	482e      	ldr	r0, [pc, #184]	; (8002dec <UpdateVentilatorParams+0x1a8>)
 8002d34:	f7fe f88a 	bl	8000e4c <__aeabi_fdiv>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f998 	bl	8001070 <__aeabi_f2iz>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	80da      	strh	r2, [r3, #6]
	ventilator_->inspiration_period_ms		= (int) ((1.0 / ((float) ventilator_->i_e_ratio + 1.0)) * ventilator_->respiration_period_ms);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd ff71 	bl	8000c34 <__aeabi_ui2f>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fb67 	bl	8000428 <__aeabi_f2d>
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <UpdateVentilatorParams+0x1ac>)
 8002d60:	f7fd fa04 	bl	800016c <__adddf3>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	f04f 0000 	mov.w	r0, #0
 8002d70:	491f      	ldr	r1, [pc, #124]	; (8002df0 <UpdateVentilatorParams+0x1ac>)
 8002d72:	f7fd fcdb 	bl	800072c <__aeabi_ddiv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	4625      	mov	r5, r4
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	88db      	ldrh	r3, [r3, #6]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fb3e 	bl	8000404 <__aeabi_i2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fba2 	bl	80004d8 <__aeabi_dmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	460c      	mov	r4, r1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	f7fd fe4c 	bl	8000a38 <__aeabi_d2iz>
 8002da0:	4603      	mov	r3, r0
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	811a      	strh	r2, [r3, #8]
	ventilator_->exhalation_period_ms		= (int) ((float) ventilator_->i_e_ratio * ventilator_->inspiration_period_ms);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ff41 	bl	8000c34 <__aeabi_ui2f>
 8002db2:	4604      	mov	r4, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	891b      	ldrh	r3, [r3, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd ff3f 	bl	8000c3c <__aeabi_i2f>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7fd ff8e 	bl	8000ce4 <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f950 	bl	8001070 <__aeabi_f2iz>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	815a      	strh	r2, [r3, #10]
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bdb0      	pop	{r4, r5, r7, pc}
 8002de0:	3e480c81 	.word	0x3e480c81
 8002de4:	3c000801 	.word	0x3c000801
 8002de8:	3ca00a01 	.word	0x3ca00a01
 8002dec:	476a6000 	.word	0x476a6000
 8002df0:	3ff00000 	.word	0x3ff00000

08002df4 <ToggleRoutineEnaParam>:

void ToggleRoutineEnaParam(Ventilator_S *ventilator_)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	if ((ventilator_->status_flags & ENABLE_ROUTINE) == 0)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7b1b      	ldrb	r3, [r3, #12]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <ToggleRoutineEnaParam+0x28>
	{
		ventilator_->status_flags = ventilator_->status_flags | ENABLE_ROUTINE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	731a      	strb	r2, [r3, #12]
	}
	else
	{
		ventilator_->status_flags = ventilator_->status_flags & DISABLE_ROUTINE;
	}
}
 8002e1a:	e007      	b.n	8002e2c <ToggleRoutineEnaParam+0x38>
		ventilator_->status_flags = ventilator_->status_flags & DISABLE_ROUTINE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7b1b      	ldrb	r3, [r3, #12]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	731a      	strb	r2, [r3, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <ToggleSilenceAlarmParam>:

void ToggleSilenceAlarmParam(Ventilator_S *ventilator_)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
	if ((ventilator_->status_flags & SILENCE_ALARMS) == 0)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7b1b      	ldrb	r3, [r3, #12]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d108      	bne.n	8002e5e <ToggleSilenceAlarmParam+0x28>
	{
		ventilator_->status_flags = ventilator_->status_flags | SILENCE_ALARMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7b1b      	ldrb	r3, [r3, #12]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0302 	orr.w	r3, r3, #2
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	731a      	strb	r2, [r3, #12]
	}
	else
	{
		ventilator_->status_flags = ventilator_->status_flags & ENABLE_ALARMS;
	}
}
 8002e5c:	e007      	b.n	8002e6e <ToggleSilenceAlarmParam+0x38>
		ventilator_->status_flags = ventilator_->status_flags & ENABLE_ALARMS;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7b1b      	ldrb	r3, [r3, #12]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f023 0302 	bic.w	r3, r3, #2
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	731a      	strb	r2, [r3, #12]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <ToggleCalibrationParam>:

void ToggleCalibrationParam(Ventilator_S *ventilator_)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	uint8_t state_ = ventilator_->status_flags & (0x0C);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	73fb      	strb	r3, [r7, #15]

	if (state_ == 0x00)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <ToggleCalibrationParam+0x2c>
	{
		ventilator_->status_flags |= START_CALIBRATION;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	731a      	strb	r2, [r3, #12]
	}
	else
	{
		ventilator_->status_flags &= STOP_CALIBRATION;
	}
}
 8002ea2:	e013      	b.n	8002ecc <ToggleCalibrationParam+0x54>
	else if (state_ == 0x04)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d108      	bne.n	8002ebc <ToggleCalibrationParam+0x44>
		ventilator_->status_flags |= PLACE_AMBU_CALIBRATION;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7b1b      	ldrb	r3, [r3, #12]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	731a      	strb	r2, [r3, #12]
}
 8002eba:	e007      	b.n	8002ecc <ToggleCalibrationParam+0x54>
		ventilator_->status_flags &= STOP_CALIBRATION;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f023 030c 	bic.w	r3, r3, #12
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	731a      	strb	r2, [r3, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ed8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002eda:	e003      	b.n	8002ee4 <LoopCopyDataInit>

08002edc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ede:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ee0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ee2:	3104      	adds	r1, #4

08002ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ee4:	480a      	ldr	r0, [pc, #40]	; (8002f10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ee8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002eea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002eec:	d3f6      	bcc.n	8002edc <CopyDataInit>
  ldr r2, =_sbss
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ef0:	e002      	b.n	8002ef8 <LoopFillZerobss>

08002ef2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ef4:	f842 3b04 	str.w	r3, [r2], #4

08002ef8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002efa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002efc:	d3f9      	bcc.n	8002ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002efe:	f7ff fe5d 	bl	8002bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f02:	f004 ff79 	bl	8007df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f06:	f7fe fba3 	bl	8001650 <main>
  bx lr
 8002f0a:	4770      	bx	lr
  ldr r3, =_sidata
 8002f0c:	0800a388 	.word	0x0800a388
  ldr r0, =_sdata
 8002f10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f14:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002f18:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002f1c:	20002818 	.word	0x20002818

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_2_IRQHandler>
	...

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_Init+0x28>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <HAL_Init+0x28>)
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f34:	2003      	movs	r0, #3
 8002f36:	f000 fcaf 	bl	8003898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7ff fd7a 	bl	8002a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f40:	f7ff faec 	bl	800251c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40022000 	.word	0x40022000

08002f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_IncTick+0x1c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_IncTick+0x20>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <HAL_IncTick+0x20>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	20002810 	.word	0x20002810

08002f74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return uwTick;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <HAL_GetTick+0x10>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	20002810 	.word	0x20002810

08002f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d005      	beq.n	8002fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_Delay+0x40>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fae:	bf00      	nop
 8002fb0:	f7ff ffe0 	bl	8002f74 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d8f7      	bhi.n	8002fb0 <HAL_Delay+0x28>
  {
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000008 	.word	0x20000008

08002fcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0be      	b.n	800316c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fabe 	bl	800258c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 faf7 	bl	8003604 <ADC_ConversionStop_Disable>
 8003016:	4603      	mov	r3, r0
 8003018:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 8099 	bne.w	800315a <HAL_ADC_Init+0x18e>
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 8095 	bne.w	800315a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003038:	f023 0302 	bic.w	r3, r3, #2
 800303c:	f043 0202 	orr.w	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800304c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7b1b      	ldrb	r3, [r3, #12]
 8003052:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003054:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003064:	d003      	beq.n	800306e <HAL_ADC_Init+0xa2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_ADC_Init+0xa8>
 800306e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003072:	e000      	b.n	8003076 <HAL_ADC_Init+0xaa>
 8003074:	2300      	movs	r3, #0
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7d1b      	ldrb	r3, [r3, #20]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d119      	bne.n	80030b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7b1b      	ldrb	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	3b01      	subs	r3, #1
 8003092:	035a      	lsls	r2, r3, #13
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e00b      	b.n	80030b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_ADC_Init+0x1a8>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e8:	d003      	beq.n	80030f2 <HAL_ADC_Init+0x126>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d104      	bne.n	80030fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	430a      	orrs	r2, r1
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <HAL_ADC_Init+0x1ac>)
 8003118:	4013      	ands	r3, r2
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	429a      	cmp	r2, r3
 800311e:	d10b      	bne.n	8003138 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003136:	e018      	b.n	800316a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	f023 0312 	bic.w	r3, r3, #18
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003158:	e007      	b.n	800316a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	f043 0210 	orr.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	ffe1f7fd 	.word	0xffe1f7fd
 8003178:	ff1f0efe 	.word	0xff1f0efe

0800317c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a64      	ldr	r2, [pc, #400]	; (8003324 <HAL_ADC_Start_DMA+0x1a8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_ADC_Start_DMA+0x24>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a63      	ldr	r2, [pc, #396]	; (8003328 <HAL_ADC_Start_DMA+0x1ac>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d106      	bne.n	80031ae <HAL_ADC_Start_DMA+0x32>
 80031a0:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_ADC_Start_DMA+0x1a8>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 80b3 	bne.w	8003314 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_Start_DMA+0x40>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0ae      	b.n	800331a <HAL_ADC_Start_DMA+0x19e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f9cb 	bl	8003560 <ADC_Enable>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 809a 	bne.w	800330a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <HAL_ADC_Start_DMA+0x1ac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_Start_DMA+0x84>
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_ADC_Start_DMA+0x1a8>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d115      	bne.n	800322c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d026      	beq.n	8003268 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003222:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800322a:	e01d      	b.n	8003268 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a39      	ldr	r2, [pc, #228]	; (8003324 <HAL_ADC_Start_DMA+0x1a8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_ADC_Start_DMA+0xd0>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a38      	ldr	r2, [pc, #224]	; (8003328 <HAL_ADC_Start_DMA+0x1ac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10d      	bne.n	8003268 <HAL_ADC_Start_DMA+0xec>
 800324c:	4b35      	ldr	r3, [pc, #212]	; (8003324 <HAL_ADC_Start_DMA+0x1a8>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003260:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d006      	beq.n	8003282 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f023 0206 	bic.w	r2, r3, #6
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003280:	e002      	b.n	8003288 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <HAL_ADC_Start_DMA+0x1b0>)
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <HAL_ADC_Start_DMA+0x1b4>)
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <HAL_ADC_Start_DMA+0x1b8>)
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0202 	mvn.w	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a18      	ldr	r0, [r3, #32]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	334c      	adds	r3, #76	; 0x4c
 80032cc:	4619      	mov	r1, r3
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f000 fb71 	bl	80039b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032e4:	d108      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032f4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80032f6:	e00f      	b.n	8003318 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003306:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003308:	e006      	b.n	8003318 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003312:	e001      	b.n	8003318 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40012400 	.word	0x40012400
 8003328:	40012800 	.word	0x40012800
 800332c:	08003679 	.word	0x08003679
 8003330:	080036f5 	.word	0x080036f5
 8003334:	08003711 	.word	0x08003711

08003338 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
	...

08003370 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x20>
 800338c:	2302      	movs	r3, #2
 800338e:	e0dc      	b.n	800354a <HAL_ADC_ConfigChannel+0x1da>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b06      	cmp	r3, #6
 800339e:	d81c      	bhi.n	80033da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	3b05      	subs	r3, #5
 80033b2:	221f      	movs	r2, #31
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4019      	ands	r1, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b05      	subs	r3, #5
 80033cc:	fa00 f203 	lsl.w	r2, r0, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34
 80033d8:	e03c      	b.n	8003454 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d81c      	bhi.n	800341c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b23      	subs	r3, #35	; 0x23
 80033f4:	221f      	movs	r2, #31
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	4019      	ands	r1, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	3b23      	subs	r3, #35	; 0x23
 800340e:	fa00 f203 	lsl.w	r2, r0, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
 800341a:	e01b      	b.n	8003454 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	3b41      	subs	r3, #65	; 0x41
 800342e:	221f      	movs	r2, #31
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	4019      	ands	r1, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	3b41      	subs	r3, #65	; 0x41
 8003448:	fa00 f203 	lsl.w	r2, r0, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b09      	cmp	r3, #9
 800345a:	d91c      	bls.n	8003496 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68d9      	ldr	r1, [r3, #12]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	3b1e      	subs	r3, #30
 800346e:	2207      	movs	r2, #7
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	4019      	ands	r1, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6898      	ldr	r0, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	3b1e      	subs	r3, #30
 8003488:	fa00 f203 	lsl.w	r2, r0, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]
 8003494:	e019      	b.n	80034ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6919      	ldr	r1, [r3, #16]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	2207      	movs	r2, #7
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	4019      	ands	r1, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6898      	ldr	r0, [r3, #8]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	fa00 f203 	lsl.w	r2, r0, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d003      	beq.n	80034da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034d6:	2b11      	cmp	r3, #17
 80034d8:	d132      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <HAL_ADC_ConfigChannel+0x1e4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d125      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d126      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003500:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b10      	cmp	r3, #16
 8003508:	d11a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_ADC_ConfigChannel+0x1e8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_ADC_ConfigChannel+0x1ec>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	0c9a      	lsrs	r2, r3, #18
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003520:	e002      	b.n	8003528 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3b01      	subs	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f9      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x1b2>
 800352e:	e007      	b.n	8003540 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40012400 	.word	0x40012400
 8003558:	20000000 	.word	0x20000000
 800355c:	431bde83 	.word	0x431bde83

08003560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d039      	beq.n	80035f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <ADC_Enable+0x9c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <ADC_Enable+0xa0>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800359c:	e002      	b.n	80035a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f9      	bne.n	800359e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035aa:	f7ff fce3 	bl	8002f74 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035b0:	e018      	b.n	80035e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b2:	f7ff fcdf 	bl	8002f74 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d911      	bls.n	80035e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f043 0210 	orr.w	r2, r3, #16
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e007      	b.n	80035f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d1df      	bne.n	80035b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000000 	.word	0x20000000
 8003600:	431bde83 	.word	0x431bde83

08003604 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d127      	bne.n	800366e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800362e:	f7ff fca1 	bl	8002f74 <HAL_GetTick>
 8003632:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003634:	e014      	b.n	8003660 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003636:	f7ff fc9d 	bl	8002f74 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d90d      	bls.n	8003660 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f043 0210 	orr.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d0e3      	beq.n	8003636 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800368e:	2b00      	cmp	r3, #0
 8003690:	d127      	bne.n	80036e2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036ac:	d115      	bne.n	80036da <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d111      	bne.n	80036da <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fe2c 	bl	8003338 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80036e0:	e004      	b.n	80036ec <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff fe21 	bl	800334a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fe10 	bl	800335c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800376c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	f003 0307 	and.w	r3, r3, #7
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db0b      	blt.n	80037d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4906      	ldr	r1, [pc, #24]	; (80037dc <__NVIC_EnableIRQ+0x34>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db0a      	blt.n	800380a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	490c      	ldr	r1, [pc, #48]	; (800382c <__NVIC_SetPriority+0x4c>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	440b      	add	r3, r1
 8003804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003808:	e00a      	b.n	8003820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4908      	ldr	r1, [pc, #32]	; (8003830 <__NVIC_SetPriority+0x50>)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	3b04      	subs	r3, #4
 8003818:	0112      	lsls	r2, r2, #4
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	440b      	add	r3, r1
 800381e:	761a      	strb	r2, [r3, #24]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f1c3 0307 	rsb	r3, r3, #7
 800384e:	2b04      	cmp	r3, #4
 8003850:	bf28      	it	cs
 8003852:	2304      	movcs	r3, #4
 8003854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3304      	adds	r3, #4
 800385a:	2b06      	cmp	r3, #6
 800385c:	d902      	bls.n	8003864 <NVIC_EncodePriority+0x30>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3b03      	subs	r3, #3
 8003862:	e000      	b.n	8003866 <NVIC_EncodePriority+0x32>
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	f04f 32ff 	mov.w	r2, #4294967295
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	401a      	ands	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800387c:	f04f 31ff 	mov.w	r1, #4294967295
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	43d9      	mvns	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	4313      	orrs	r3, r2
         );
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff4f 	bl	8003744 <__NVIC_SetPriorityGrouping>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c0:	f7ff ff64 	bl	800378c <__NVIC_GetPriorityGrouping>
 80038c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	6978      	ldr	r0, [r7, #20]
 80038cc:	f7ff ffb2 	bl	8003834 <NVIC_EncodePriority>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff81 	bl	80037e0 <__NVIC_SetPriority>
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff57 	bl	80037a8 <__NVIC_EnableIRQ>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e043      	b.n	80039a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_DMA_Init+0xa8>)
 8003922:	4413      	add	r3, r2
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <HAL_DMA_Init+0xac>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	009a      	lsls	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <HAL_DMA_Init+0xb0>)
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800394e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800395c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	bffdfff8 	.word	0xbffdfff8
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020000 	.word	0x40020000

080039b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_DMA_Start_IT+0x20>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e04a      	b.n	8003a6e <HAL_DMA_Start_IT+0xb6>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d13a      	bne.n	8003a60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f938 	bl	8003c84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 020e 	orr.w	r2, r2, #14
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e00f      	b.n	8003a4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0204 	bic.w	r2, r2, #4
 8003a3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 020a 	orr.w	r2, r2, #10
 8003a4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e005      	b.n	8003a6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2204      	movs	r2, #4
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d04f      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xc8>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <HAL_DMA_IRQHandler+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d029      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xae>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_DMA_IRQHandler+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xaa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a63      	ldr	r2, [pc, #396]	; (8003c70 <HAL_DMA_IRQHandler+0x1f8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0xa4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a62      	ldr	r2, [pc, #392]	; (8003c74 <HAL_DMA_IRQHandler+0x1fc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d012      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x9e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <HAL_DMA_IRQHandler+0x200>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x98>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5f      	ldr	r2, [pc, #380]	; (8003c7c <HAL_DMA_IRQHandler+0x204>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x92>
 8003b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b08:	e00e      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b0e:	e00b      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b14:	e008      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b1a:	e005      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b20:	e002      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b22:	2340      	movs	r3, #64	; 0x40
 8003b24:	e000      	b.n	8003b28 <HAL_DMA_IRQHandler+0xb0>
 8003b26:	2304      	movs	r3, #4
 8003b28:	4a55      	ldr	r2, [pc, #340]	; (8003c80 <HAL_DMA_IRQHandler+0x208>)
 8003b2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8094 	beq.w	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b3e:	e08e      	b.n	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2202      	movs	r2, #2
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d056      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x186>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d051      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 020a 	bic.w	r2, r2, #10
 8003b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_DMA_IRQHandler+0x1f0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d029      	beq.n	8003bde <HAL_DMA_IRQHandler+0x166>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a37      	ldr	r2, [pc, #220]	; (8003c6c <HAL_DMA_IRQHandler+0x1f4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_IRQHandler+0x162>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <HAL_DMA_IRQHandler+0x1f8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01a      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x15c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <HAL_DMA_IRQHandler+0x1fc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d012      	beq.n	8003bce <HAL_DMA_IRQHandler+0x156>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a32      	ldr	r2, [pc, #200]	; (8003c78 <HAL_DMA_IRQHandler+0x200>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x150>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a31      	ldr	r2, [pc, #196]	; (8003c7c <HAL_DMA_IRQHandler+0x204>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d102      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x14a>
 8003bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bc0:	e00e      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc6:	e00b      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	e008      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd2:	e005      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd8:	e002      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bda:	2320      	movs	r3, #32
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_IRQHandler+0x168>
 8003bde:	2302      	movs	r3, #2
 8003be0:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <HAL_DMA_IRQHandler+0x208>)
 8003be2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d034      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bfc:	e02f      	b.n	8003c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2208      	movs	r2, #8
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x1e8>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d023      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020e 	bic.w	r2, r2, #14
 8003c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	2101      	movs	r1, #1
 8003c32:	fa01 f202 	lsl.w	r2, r1, r2
 8003c36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
    }
  }
  return;
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
}
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40020008 	.word	0x40020008
 8003c6c:	4002001c 	.word	0x4002001c
 8003c70:	40020030 	.word	0x40020030
 8003c74:	40020044 	.word	0x40020044
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	4002006c 	.word	0x4002006c
 8003c80:	40020000 	.word	0x40020000

08003c84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d108      	bne.n	8003cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cc2:	e007      	b.n	8003cd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b08b      	sub	sp, #44	; 0x2c
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf2:	e127      	b.n	8003f44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f040 8116 	bne.w	8003f3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b12      	cmp	r3, #18
 8003d18:	d034      	beq.n	8003d84 <HAL_GPIO_Init+0xa4>
 8003d1a:	2b12      	cmp	r3, #18
 8003d1c:	d80d      	bhi.n	8003d3a <HAL_GPIO_Init+0x5a>
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d02b      	beq.n	8003d7a <HAL_GPIO_Init+0x9a>
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d804      	bhi.n	8003d30 <HAL_GPIO_Init+0x50>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d031      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d01c      	beq.n	8003d68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d2e:	e048      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d043      	beq.n	8003dbc <HAL_GPIO_Init+0xdc>
 8003d34:	2b11      	cmp	r3, #17
 8003d36:	d01b      	beq.n	8003d70 <HAL_GPIO_Init+0x90>
          break;
 8003d38:	e043      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d3a:	4a89      	ldr	r2, [pc, #548]	; (8003f60 <HAL_GPIO_Init+0x280>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d026      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
 8003d40:	4a87      	ldr	r2, [pc, #540]	; (8003f60 <HAL_GPIO_Init+0x280>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d806      	bhi.n	8003d54 <HAL_GPIO_Init+0x74>
 8003d46:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <HAL_GPIO_Init+0x284>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d020      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
 8003d4c:	4a86      	ldr	r2, [pc, #536]	; (8003f68 <HAL_GPIO_Init+0x288>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
          break;
 8003d52:	e036      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d54:	4a85      	ldr	r2, [pc, #532]	; (8003f6c <HAL_GPIO_Init+0x28c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d019      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
 8003d5a:	4a85      	ldr	r2, [pc, #532]	; (8003f70 <HAL_GPIO_Init+0x290>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d016      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
 8003d60:	4a84      	ldr	r2, [pc, #528]	; (8003f74 <HAL_GPIO_Init+0x294>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_Init+0xae>
          break;
 8003d66:	e02c      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	623b      	str	r3, [r7, #32]
          break;
 8003d6e:	e028      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	3304      	adds	r3, #4
 8003d76:	623b      	str	r3, [r7, #32]
          break;
 8003d78:	e023      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	623b      	str	r3, [r7, #32]
          break;
 8003d82:	e01e      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	623b      	str	r3, [r7, #32]
          break;
 8003d8c:	e019      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d96:	2304      	movs	r3, #4
 8003d98:	623b      	str	r3, [r7, #32]
          break;
 8003d9a:	e012      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da4:	2308      	movs	r3, #8
 8003da6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	611a      	str	r2, [r3, #16]
          break;
 8003dae:	e008      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db0:	2308      	movs	r3, #8
 8003db2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	615a      	str	r2, [r3, #20]
          break;
 8003dba:	e002      	b.n	8003dc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
          break;
 8003dc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d801      	bhi.n	8003dcc <HAL_GPIO_Init+0xec>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	e001      	b.n	8003dd0 <HAL_GPIO_Init+0xf0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2bff      	cmp	r3, #255	; 0xff
 8003dd6:	d802      	bhi.n	8003dde <HAL_GPIO_Init+0xfe>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_Init+0x104>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	3b08      	subs	r3, #8
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	210f      	movs	r1, #15
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	401a      	ands	r2, r3
 8003df6:	6a39      	ldr	r1, [r7, #32]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8096 	beq.w	8003f3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_GPIO_Init+0x298>)
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_GPIO_Init+0x298>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6193      	str	r3, [r2, #24]
 8003e1e:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_GPIO_Init+0x298>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e2a:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_GPIO_Init+0x29c>)
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <HAL_GPIO_Init+0x2a0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_GPIO_Init+0x19e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <HAL_GPIO_Init+0x2a4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00d      	beq.n	8003e7a <HAL_GPIO_Init+0x19a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a49      	ldr	r2, [pc, #292]	; (8003f88 <HAL_GPIO_Init+0x2a8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <HAL_GPIO_Init+0x196>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a48      	ldr	r2, [pc, #288]	; (8003f8c <HAL_GPIO_Init+0x2ac>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_GPIO_Init+0x192>
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x1a0>
 8003e72:	2304      	movs	r3, #4
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x1a0>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x1a0>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x1a0>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e90:	493a      	ldr	r1, [pc, #232]	; (8003f7c <HAL_GPIO_Init+0x29c>)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4938      	ldr	r1, [pc, #224]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
 8003eb6:	e006      	b.n	8003ec6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eb8:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	4933      	ldr	r1, [pc, #204]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	492e      	ldr	r1, [pc, #184]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
 8003ede:	e006      	b.n	8003eee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	4929      	ldr	r1, [pc, #164]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003efa:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	4924      	ldr	r1, [pc, #144]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
 8003f06:	e006      	b.n	8003f16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	491f      	ldr	r1, [pc, #124]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	491a      	ldr	r1, [pc, #104]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
 8003f2e:	e006      	b.n	8003f3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	4915      	ldr	r1, [pc, #84]	; (8003f90 <HAL_GPIO_Init+0x2b0>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	3301      	adds	r3, #1
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f47f aed0 	bne.w	8003cf4 <HAL_GPIO_Init+0x14>
  }
}
 8003f54:	bf00      	nop
 8003f56:	372c      	adds	r7, #44	; 0x2c
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	10210000 	.word	0x10210000
 8003f64:	10110000 	.word	0x10110000
 8003f68:	10120000 	.word	0x10120000
 8003f6c:	10310000 	.word	0x10310000
 8003f70:	10320000 	.word	0x10320000
 8003f74:	10220000 	.word	0x10220000
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40010800 	.word	0x40010800
 8003f84:	40010c00 	.word	0x40010c00
 8003f88:	40011000 	.word	0x40011000
 8003f8c:	40011400 	.word	0x40011400
 8003f90:	40010400 	.word	0x40010400

08003f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fa4:	787b      	ldrb	r3, [r7, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fb0:	e003      	b.n	8003fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	611a      	str	r2, [r3, #16]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fad8 	bl	8001598 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e10f      	b.n	8004226 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe fb4a 	bl	80026b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004038:	f000 ffd4 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a7b      	ldr	r2, [pc, #492]	; (8004230 <HAL_I2C_Init+0x23c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d807      	bhi.n	8004058 <HAL_I2C_Init+0x64>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_I2C_Init+0x240>)
 800404c:	4293      	cmp	r3, r2
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e006      	b.n	8004066 <HAL_I2C_Init+0x72>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_I2C_Init+0x244>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0db      	b.n	8004226 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a72      	ldr	r2, [pc, #456]	; (800423c <HAL_I2C_Init+0x248>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0c9b      	lsrs	r3, r3, #18
 8004078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a64      	ldr	r2, [pc, #400]	; (8004230 <HAL_I2C_Init+0x23c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d802      	bhi.n	80040a8 <HAL_I2C_Init+0xb4>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3301      	adds	r3, #1
 80040a6:	e009      	b.n	80040bc <HAL_I2C_Init+0xc8>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_I2C_Init+0x24c>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	3301      	adds	r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4956      	ldr	r1, [pc, #344]	; (8004230 <HAL_I2C_Init+0x23c>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d80d      	bhi.n	80040f8 <HAL_I2C_Init+0x104>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e59      	subs	r1, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	bf38      	it	cc
 80040f4:	2304      	movcc	r3, #4
 80040f6:	e04f      	b.n	8004198 <HAL_I2C_Init+0x1a4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <HAL_I2C_Init+0x130>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e012      	b.n	800414a <HAL_I2C_Init+0x156>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	0099      	lsls	r1, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Init+0x15e>
 800414e:	2301      	movs	r3, #1
 8004150:	e022      	b.n	8004198 <HAL_I2C_Init+0x1a4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10e      	bne.n	8004178 <HAL_I2C_Init+0x184>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1e58      	subs	r0, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	440b      	add	r3, r1
 8004168:	fbb0 f3f3 	udiv	r3, r0, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004176:	e00f      	b.n	8004198 <HAL_I2C_Init+0x1a4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	0099      	lsls	r1, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	fbb0 f3f3 	udiv	r3, r0, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	6809      	ldr	r1, [r1, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6911      	ldr	r1, [r2, #16]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	000186a0 	.word	0x000186a0
 8004234:	001e847f 	.word	0x001e847f
 8004238:	003d08ff 	.word	0x003d08ff
 800423c:	431bde83 	.word	0x431bde83
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	460b      	mov	r3, r1
 8004252:	817b      	strh	r3, [r7, #10]
 8004254:	4613      	mov	r3, r2
 8004256:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004258:	f7fe fe8c 	bl	8002f74 <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 80e0 	bne.w	800442c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2319      	movs	r3, #25
 8004272:	2201      	movs	r2, #1
 8004274:	4970      	ldr	r1, [pc, #448]	; (8004438 <HAL_I2C_Master_Transmit+0x1f4>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f958 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	e0d3      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_I2C_Master_Transmit+0x50>
 8004290:	2302      	movs	r3, #2
 8004292:	e0cc      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d007      	beq.n	80042ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2221      	movs	r2, #33	; 0x21
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2210      	movs	r2, #16
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	893a      	ldrh	r2, [r7, #8]
 80042ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a50      	ldr	r2, [pc, #320]	; (800443c <HAL_I2C_Master_Transmit+0x1f8>)
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042fc:	8979      	ldrh	r1, [r7, #10]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6a3a      	ldr	r2, [r7, #32]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f89c 	bl	8004440 <I2C_MasterRequestWrite>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e08d      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004328:	e066      	b.n	80043f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f9d2 	bl	80046d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06b      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d11b      	bne.n	80043cc <HAL_I2C_Master_Transmit+0x188>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	6a39      	ldr	r1, [r7, #32]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f9c2 	bl	800475a <I2C_WaitOnBTFFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d107      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e01a      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d194      	bne.n	800432a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	00100002 	.word	0x00100002
 800443c:	ffff0000 	.word	0xffff0000

08004440 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	460b      	mov	r3, r1
 800444e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d006      	beq.n	800446a <I2C_MasterRequestWrite+0x2a>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d003      	beq.n	800446a <I2C_MasterRequestWrite+0x2a>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004468:	d108      	bne.n	800447c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e00b      	b.n	8004494 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	2b12      	cmp	r3, #18
 8004482:	d107      	bne.n	8004494 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004492:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f843 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e035      	b.n	800451c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b8:	d108      	bne.n	80044cc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ba:	897b      	ldrh	r3, [r7, #10]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	e01b      	b.n	8004504 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044cc:	897b      	ldrh	r3, [r7, #10]
 80044ce:	11db      	asrs	r3, r3, #7
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0306 	and.w	r3, r3, #6
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f063 030f 	orn	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	490e      	ldr	r1, [pc, #56]	; (8004524 <I2C_MasterRequestWrite+0xe4>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f875 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e010      	b.n	800451c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <I2C_MasterRequestWrite+0xe8>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f865 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	00010008 	.word	0x00010008
 8004528:	00010002 	.word	0x00010002

0800452c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453c:	e025      	b.n	800458a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d021      	beq.n	800458a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe fd15 	bl	8002f74 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e023      	b.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10d      	bne.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	e00c      	b.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d0b6      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e8:	e051      	b.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f8:	d123      	bne.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e046      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d021      	beq.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fe fc93 	bl	8002f74 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d302      	bcc.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e020      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10c      	bne.n	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e00b      	b.n	80046ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	43da      	mvns	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d18d      	bne.n	80045ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e4:	e02d      	b.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f878 	bl	80047dc <I2C_IsAcknowledgeFailed>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e02d      	b.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d021      	beq.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fe fc39 	bl	8002f74 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e007      	b.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d1ca      	bne.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004766:	e02d      	b.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f837 	bl	80047dc <I2C_IsAcknowledgeFailed>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e02d      	b.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d021      	beq.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004780:	f7fe fbf8 	bl	8002f74 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d116      	bne.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e007      	b.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d1ca      	bne.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d11b      	bne.n	800482c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e26c      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8087 	beq.w	8004966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004858:	4b92      	ldr	r3, [pc, #584]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b04      	cmp	r3, #4
 8004862:	d00c      	beq.n	800487e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004864:	4b8f      	ldr	r3, [pc, #572]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b08      	cmp	r3, #8
 800486e:	d112      	bne.n	8004896 <HAL_RCC_OscConfig+0x5e>
 8004870:	4b8c      	ldr	r3, [pc, #560]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d10b      	bne.n	8004896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487e:	4b89      	ldr	r3, [pc, #548]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d06c      	beq.n	8004964 <HAL_RCC_OscConfig+0x12c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d168      	bne.n	8004964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e246      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x76>
 80048a0:	4b80      	ldr	r3, [pc, #512]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a7f      	ldr	r2, [pc, #508]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e02e      	b.n	800490c <HAL_RCC_OscConfig+0xd4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x98>
 80048b6:	4b7b      	ldr	r3, [pc, #492]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7a      	ldr	r2, [pc, #488]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b78      	ldr	r3, [pc, #480]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a77      	ldr	r2, [pc, #476]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xd4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0xbc>
 80048da:	4b72      	ldr	r3, [pc, #456]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a71      	ldr	r2, [pc, #452]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xd4>
 80048f4:	4b6b      	ldr	r3, [pc, #428]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6a      	ldr	r2, [pc, #424]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b68      	ldr	r3, [pc, #416]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fe fb2e 	bl	8002f74 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fe fb2a 	bl	8002f74 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e1fa      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xe4>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fe fb1a 	bl	8002f74 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004944:	f7fe fb16 	bl	8002f74 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	; 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1e6      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	4b53      	ldr	r3, [pc, #332]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x10c>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d063      	beq.n	8004a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004972:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800497e:	4b49      	ldr	r3, [pc, #292]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b08      	cmp	r3, #8
 8004988:	d11c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x18c>
 800498a:	4b46      	ldr	r3, [pc, #280]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d116      	bne.n	80049c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCC_OscConfig+0x176>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e1ba      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4939      	ldr	r1, [pc, #228]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c2:	e03a      	b.n	8004a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049cc:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d2:	f7fe facf 	bl	8002f74 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049da:	f7fe facb 	bl	8002f74 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e19b      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4927      	ldr	r1, [pc, #156]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
 8004a0c:	e015      	b.n	8004a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0e:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fe faae 	bl	8002f74 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7fe faaa 	bl	8002f74 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e17a      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d03a      	beq.n	8004abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d019      	beq.n	8004a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_RCC_OscConfig+0x274>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a54:	f7fe fa8e 	bl	8002f74 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fe fa8a 	bl	8002f74 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e15a      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f000 fb0a 	bl	8005094 <RCC_Delay>
 8004a80:	e01c      	b.n	8004abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCC_OscConfig+0x274>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a88:	f7fe fa74 	bl	8002f74 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8e:	e00f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a90:	f7fe fa70 	bl	8002f74 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d908      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e140      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	42420000 	.word	0x42420000
 8004aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b9e      	ldr	r3, [pc, #632]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e9      	bne.n	8004a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a6 	beq.w	8004c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b97      	ldr	r3, [pc, #604]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	4b94      	ldr	r3, [pc, #592]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4a93      	ldr	r2, [pc, #588]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	61d3      	str	r3, [r2, #28]
 8004ae6:	4b91      	ldr	r3, [pc, #580]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b8e      	ldr	r3, [pc, #568]	; (8004d30 <HAL_RCC_OscConfig+0x4f8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d118      	bne.n	8004b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b02:	4b8b      	ldr	r3, [pc, #556]	; (8004d30 <HAL_RCC_OscConfig+0x4f8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a8a      	ldr	r2, [pc, #552]	; (8004d30 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fa31 	bl	8002f74 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fe fa2d 	bl	8002f74 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b64      	cmp	r3, #100	; 0x64
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0fd      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCC_OscConfig+0x4f8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x312>
 8004b3c:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a7a      	ldr	r2, [pc, #488]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6213      	str	r3, [r2, #32]
 8004b48:	e02d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x36e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x334>
 8004b52:	4b76      	ldr	r3, [pc, #472]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4a75      	ldr	r2, [pc, #468]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	6213      	str	r3, [r2, #32]
 8004b5e:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4a72      	ldr	r2, [pc, #456]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	6213      	str	r3, [r2, #32]
 8004b6a:	e01c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x36e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d10c      	bne.n	8004b8e <HAL_RCC_OscConfig+0x356>
 8004b74:	4b6d      	ldr	r3, [pc, #436]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4a6c      	ldr	r2, [pc, #432]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b7a:	f043 0304 	orr.w	r3, r3, #4
 8004b7e:	6213      	str	r3, [r2, #32]
 8004b80:	4b6a      	ldr	r3, [pc, #424]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4a69      	ldr	r2, [pc, #420]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	e00b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x36e>
 8004b8e:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4a66      	ldr	r2, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	6213      	str	r3, [r2, #32]
 8004b9a:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4a63      	ldr	r2, [pc, #396]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	f023 0304 	bic.w	r3, r3, #4
 8004ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d015      	beq.n	8004bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bae:	f7fe f9e1 	bl	8002f74 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fe f9dd 	bl	8002f74 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0ab      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ee      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x37e>
 8004bd8:	e014      	b.n	8004c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fe f9cb 	bl	8002f74 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fe f9c7 	bl	8002f74 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e095      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf8:	4b4c      	ldr	r3, [pc, #304]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ee      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0a:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4a47      	ldr	r2, [pc, #284]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8081 	beq.w	8004d22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c20:	4b42      	ldr	r3, [pc, #264]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d061      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d146      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c34:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <HAL_RCC_OscConfig+0x4fc>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7fe f99b 	bl	8002f74 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fe f997 	bl	8002f74 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e067      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	492d      	ldr	r1, [pc, #180]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a19      	ldr	r1, [r3, #32]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	4927      	ldr	r1, [pc, #156]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x4fc>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fe f96b 	bl	8002f74 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fe f967 	bl	8002f74 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e037      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x46a>
 8004cc0:	e02f      	b.n	8004d22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <HAL_RCC_OscConfig+0x4fc>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe f954 	bl	8002f74 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fe f950 	bl	8002f74 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e020      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x498>
 8004cee:	e018      	b.n	8004d22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e013      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d106      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40007000 	.word	0x40007000
 8004d34:	42420060 	.word	0x42420060

08004d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0d0      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b6a      	ldr	r3, [pc, #424]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d910      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b67      	ldr	r3, [pc, #412]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 0207 	bic.w	r2, r3, #7
 8004d62:	4965      	ldr	r1, [pc, #404]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0b8      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a58      	ldr	r2, [pc, #352]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a52      	ldr	r2, [pc, #328]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	494d      	ldr	r1, [pc, #308]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d040      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d115      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e07f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df6:	4b41      	ldr	r3, [pc, #260]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e073      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e06:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e06b      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f023 0203 	bic.w	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4936      	ldr	r1, [pc, #216]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e28:	f7fe f8a4 	bl	8002f74 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e30:	f7fe f8a0 	bl	8002f74 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e053      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 020c 	and.w	r2, r3, #12
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1eb      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d210      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 0207 	bic.w	r2, r3, #7
 8004e6e:	4922      	ldr	r1, [pc, #136]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e032      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4916      	ldr	r1, [pc, #88]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	490e      	ldr	r1, [pc, #56]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ec6:	f000 f821 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004eca:	4601      	mov	r1, r0
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	fa21 f303 	lsr.w	r3, r1, r3
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1cc>)
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1d0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd fda4 	bl	8002a34 <HAL_InitTick>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40022000 	.word	0x40022000
 8004efc:	40021000 	.word	0x40021000
 8004f00:	0800a10c 	.word	0x0800a10c
 8004f04:	20000000 	.word	0x20000000
 8004f08:	20000004 	.word	0x20000004

08004f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b490      	push	{r4, r7}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f12:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f14:	1d3c      	adds	r4, r7, #4
 8004f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f36:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d002      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x40>
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d003      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0x46>
 8004f4a:	e02d      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f4e:	623b      	str	r3, [r7, #32]
      break;
 8004f50:	e02d      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	0c9b      	lsrs	r3, r3, #18
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f5e:	4413      	add	r3, r2
 8004f60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f70:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c5b      	lsrs	r3, r3, #17
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f7e:	4413      	add	r3, r2
 8004f80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4a0f      	ldr	r2, [pc, #60]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f8a:	fb02 f203 	mul.w	r2, r2, r3
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
 8004f96:	e004      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	623b      	str	r3, [r7, #32]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004faa:	623b      	str	r3, [r7, #32]
      break;
 8004fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fae:	6a3b      	ldr	r3, [r7, #32]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc90      	pop	{r4, r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	0800a0f0 	.word	0x0800a0f0
 8004fc0:	0800a100 	.word	0x0800a100
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	007a1200 	.word	0x007a1200
 8004fcc:	003d0900 	.word	0x003d0900

08004fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd4:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	20000000 	.word	0x20000000

08004fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fe8:	f7ff fff2 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8004fec:	4601      	mov	r1, r0
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000
 8005008:	0800a11c 	.word	0x0800a11c

0800500c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005010:	f7ff ffde 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8005014:	4601      	mov	r1, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	0adb      	lsrs	r3, r3, #11
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4a03      	ldr	r2, [pc, #12]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005022:	5cd3      	ldrb	r3, [r2, r3]
 8005024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	0800a11c 	.word	0x0800a11c

08005034 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	220f      	movs	r2, #15
 8005042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_RCC_GetClockConfig+0x58>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0203 	and.w	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <HAL_RCC_GetClockConfig+0x58>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_GetClockConfig+0x58>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <HAL_RCC_GetClockConfig+0x58>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetClockConfig+0x5c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0207 	and.w	r2, r3, #7
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	40021000 	.word	0x40021000
 8005090:	40022000 	.word	0x40022000

08005094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <RCC_Delay+0x34>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <RCC_Delay+0x38>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0a5b      	lsrs	r3, r3, #9
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050b0:	bf00      	nop
  }
  while (Delay --);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	60fa      	str	r2, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f9      	bne.n	80050b0 <RCC_Delay+0x1c>
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000000 	.word	0x20000000
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d07d      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f0:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fc:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4a4b      	ldr	r2, [pc, #300]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	61d3      	str	r3, [r2, #28]
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	4b46      	ldr	r3, [pc, #280]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d118      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005124:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a42      	ldr	r2, [pc, #264]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005130:	f7fd ff20 	bl	8002f74 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fd ff1c 	bl	8002f74 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e06d      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514a:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005156:	4b36      	ldr	r3, [pc, #216]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	d027      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800517e:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005184:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800518a:	4a29      	ldr	r2, [pc, #164]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d014      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fd feeb 	bl	8002f74 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fd fee7 	bl	8002f74 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e036      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ee      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4917      	ldr	r1, [pc, #92]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	490b      	ldr	r1, [pc, #44]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4904      	ldr	r1, [pc, #16]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	40007000 	.word	0x40007000
 8005238:	42420440 	.word	0x42420440

0800523c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e053      	b.n	80052f6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fd fa63 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005284:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	ea42 0103 	orr.w	r1, r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	0c1a      	lsrs	r2, r3, #16
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f002 0204 	and.w	r2, r2, #4
 80052d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e01d      	b.n	800534c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f815 	bl	8005354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f000 fbb7 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b06      	cmp	r3, #6
 800538e:	d007      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e01d      	b.n	80053fa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd fa24 	bl	8002820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f000 fb60 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fd34 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a10      	ldr	r2, [pc, #64]	; (8005464 <HAL_TIM_PWM_Start+0x60>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d107      	bne.n	8005436 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005434:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b06      	cmp	r3, #6
 8005446:	d007      	beq.n	8005458 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40012c00 	.word	0x40012c00

08005468 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fd02 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1d      	ldr	r2, [pc, #116]	; (80054fc <HAL_TIM_PWM_Stop+0x94>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d117      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	f241 1311 	movw	r3, #4369	; 0x1111
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x52>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	f240 4344 	movw	r3, #1092	; 0x444
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x52>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_TIM_PWM_Stop+0x82>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	f240 4344 	movw	r3, #1092	; 0x444
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_PWM_Stop+0x82>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40012c00 	.word	0x40012c00

08005500 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e07f      	b.n	8005614 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fd f997 	bl	800285c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f000 faab 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	4313      	orrs	r3, r2
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055a0:	f023 030c 	bic.w	r3, r3, #12
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	4313      	orrs	r3, r2
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	011a      	lsls	r2, r3, #4
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	031b      	lsls	r3, r3, #12
 80055d0:	4313      	orrs	r3, r2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	4313      	orrs	r3, r2
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_TIM_Encoder_Start_IT+0x16>
 800562c:	2b04      	cmp	r3, #4
 800562e:	d010      	beq.n	8005652 <HAL_TIM_Encoder_Start_IT+0x36>
 8005630:	e01f      	b.n	8005672 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fc22 	bl	8005e84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0202 	orr.w	r2, r2, #2
 800564e:	60da      	str	r2, [r3, #12]
      break;
 8005650:	e02e      	b.n	80056b0 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	2104      	movs	r1, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fc12 	bl	8005e84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0204 	orr.w	r2, r2, #4
 800566e:	60da      	str	r2, [r3, #12]
      break;
 8005670:	e01e      	b.n	80056b0 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fc02 	bl	8005e84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2201      	movs	r2, #1
 8005686:	2104      	movs	r1, #4
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fbfb 	bl	8005e84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0202 	orr.w	r2, r2, #2
 800569c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0204 	orr.w	r2, r2, #4
 80056ac:	60da      	str	r2, [r3, #12]
      break;
 80056ae:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d122      	bne.n	8005726 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d11b      	bne.n	8005726 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f06f 0202 	mvn.w	r2, #2
 80056f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f9b4 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 8005712:	e005      	b.n	8005720 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f9a7 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9b6 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b04      	cmp	r3, #4
 8005732:	d122      	bne.n	800577a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d11b      	bne.n	800577a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0204 	mvn.w	r2, #4
 800574a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f98a 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 8005766:	e005      	b.n	8005774 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f97d 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f98c 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d122      	bne.n	80057ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b08      	cmp	r3, #8
 8005794:	d11b      	bne.n	80057ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0208 	mvn.w	r2, #8
 800579e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f960 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 80057ba:	e005      	b.n	80057c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f953 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f962 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d122      	bne.n	8005822 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d11b      	bne.n	8005822 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0210 	mvn.w	r2, #16
 80057f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2208      	movs	r2, #8
 80057f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f936 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 800580e:	e005      	b.n	800581c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f929 	bl	8005a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f938 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10e      	bne.n	800584e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0201 	mvn.w	r2, #1
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fc fe05 	bl	8002458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005858:	2b80      	cmp	r3, #128	; 0x80
 800585a:	d10e      	bne.n	800587a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fbc7 	bl	8006008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d10e      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d107      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8fc 	bl	8005a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d10e      	bne.n	80058d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d107      	bne.n	80058d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f06f 0220 	mvn.w	r2, #32
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fb92 	bl	8005ff6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0b4      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x184>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	f200 809f 	bhi.w	8005a4c <HAL_TIM_PWM_ConfigChannel+0x170>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005949 	.word	0x08005949
 8005918:	08005a4d 	.word	0x08005a4d
 800591c:	08005a4d 	.word	0x08005a4d
 8005920:	08005a4d 	.word	0x08005a4d
 8005924:	08005989 	.word	0x08005989
 8005928:	08005a4d 	.word	0x08005a4d
 800592c:	08005a4d 	.word	0x08005a4d
 8005930:	08005a4d 	.word	0x08005a4d
 8005934:	080059cb 	.word	0x080059cb
 8005938:	08005a4d 	.word	0x08005a4d
 800593c:	08005a4d 	.word	0x08005a4d
 8005940:	08005a4d 	.word	0x08005a4d
 8005944:	08005a0b 	.word	0x08005a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f910 	bl	8005b74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0204 	bic.w	r2, r2, #4
 8005972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6999      	ldr	r1, [r3, #24]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	619a      	str	r2, [r3, #24]
      break;
 8005986:	e062      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f956 	bl	8005c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6999      	ldr	r1, [r3, #24]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	619a      	str	r2, [r3, #24]
      break;
 80059c8:	e041      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f99f 	bl	8005d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0208 	orr.w	r2, r2, #8
 80059e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0204 	bic.w	r2, r2, #4
 80059f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69d9      	ldr	r1, [r3, #28]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	61da      	str	r2, [r3, #28]
      break;
 8005a08:	e021      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f9e9 	bl	8005de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	021a      	lsls	r2, r3, #8
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	61da      	str	r2, [r3, #28]
      break;
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a4c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <TIM_Base_SetConfig+0xb8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0x30>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0x30>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <TIM_Base_SetConfig+0xbc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0x30>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <TIM_Base_SetConfig+0xc0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d108      	bne.n	8005af2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <TIM_Base_SetConfig+0xb8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_Base_SetConfig+0x62>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d007      	beq.n	8005b12 <TIM_Base_SetConfig+0x62>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <TIM_Base_SetConfig+0xbc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_Base_SetConfig+0x62>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <TIM_Base_SetConfig+0xc0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <TIM_Base_SetConfig+0xb8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d103      	bne.n	8005b58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	615a      	str	r2, [r3, #20]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800

08005b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 0302 	bic.w	r3, r3, #2
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <TIM_OC1_SetConfig+0xc8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10c      	bne.n	8005bea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0308 	bic.w	r3, r3, #8
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <TIM_OC1_SetConfig+0xc8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00

08005c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0210 	bic.w	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0320 	bic.w	r3, r3, #32
 8005c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	; (8005d10 <TIM_OC2_SetConfig+0xd0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10d      	bne.n	8005cbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <TIM_OC2_SetConfig+0xd0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d113      	bne.n	8005cec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	40012c00 	.word	0x40012c00

08005d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <TIM_OC3_SetConfig+0xd0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10d      	bne.n	8005d8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <TIM_OC3_SetConfig+0xd0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d113      	bne.n	8005dbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc80      	pop	{r7}
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40012c00 	.word	0x40012c00

08005de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	031b      	lsls	r3, r3, #12
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a0f      	ldr	r2, [pc, #60]	; (8005e80 <TIM_OC4_SetConfig+0x98>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d109      	bne.n	8005e5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr
 8005e80:	40012c00 	.word	0x40012c00

08005e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2201      	movs	r2, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e032      	b.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e03d      	b.n	8005fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e03f      	b.n	80060ac <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fc fcab 	bl	800299c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2224      	movs	r2, #36	; 0x24
 800604a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f90c 	bl	800627c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006072:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006082:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006092:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	f040 8083 	bne.w	80061dc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_UART_Transmit+0x2e>
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e07b      	b.n	80061de <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UART_Transmit+0x40>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e074      	b.n	80061de <HAL_UART_Transmit+0x12a>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2221      	movs	r2, #33	; 0x21
 8006106:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800610a:	f7fc ff33 	bl	8002f74 <HAL_GetTick>
 800610e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800611c:	e042      	b.n	80061a4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d122      	bne.n	800617c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f850 	bl	80061e6 <UART_WaitOnFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e046      	b.n	80061de <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006162:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	3302      	adds	r3, #2
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	e017      	b.n	80061a4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3301      	adds	r3, #1
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	e013      	b.n	80061a4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f82d 	bl	80061e6 <UART_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e023      	b.n	80061de <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	60ba      	str	r2, [r7, #8]
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1b7      	bne.n	800611e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2140      	movs	r1, #64	; 0x40
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f814 	bl	80061e6 <UART_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e00a      	b.n	80061de <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f6:	e02c      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d028      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0x30>
 8006206:	f7fc feb5 	bl	8002f74 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	429a      	cmp	r2, r3
 8006214:	d21d      	bcs.n	8006252 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006224:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e00f      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	429a      	cmp	r2, r3
 800626e:	d0c3      	beq.n	80061f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062b6:	f023 030c 	bic.w	r3, r3, #12
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a52      	ldr	r2, [pc, #328]	; (8006428 <UART_SetConfig+0x1ac>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d14e      	bne.n	8006382 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062e4:	f7fe fe92 	bl	800500c <HAL_RCC_GetPCLK2Freq>
 80062e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009a      	lsls	r2, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	4a4a      	ldr	r2, [pc, #296]	; (800642c <UART_SetConfig+0x1b0>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	0119      	lsls	r1, r3, #4
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009a      	lsls	r2, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006320:	4b42      	ldr	r3, [pc, #264]	; (800642c <UART_SetConfig+0x1b0>)
 8006322:	fba3 0302 	umull	r0, r3, r3, r2
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	2064      	movs	r0, #100	; 0x64
 800632a:	fb00 f303 	mul.w	r3, r0, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	3332      	adds	r3, #50	; 0x32
 8006334:	4a3d      	ldr	r2, [pc, #244]	; (800642c <UART_SetConfig+0x1b0>)
 8006336:	fba2 2303 	umull	r2, r3, r2, r3
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006340:	4419      	add	r1, r3
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009a      	lsls	r2, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	fbb2 f2f3 	udiv	r2, r2, r3
 8006358:	4b34      	ldr	r3, [pc, #208]	; (800642c <UART_SetConfig+0x1b0>)
 800635a:	fba3 0302 	umull	r0, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	2064      	movs	r0, #100	; 0x64
 8006362:	fb00 f303 	mul.w	r3, r0, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	3332      	adds	r3, #50	; 0x32
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <UART_SetConfig+0x1b0>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	440a      	add	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006380:	e04d      	b.n	800641e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fe fe2f 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 8006386:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009a      	lsls	r2, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	4a23      	ldr	r2, [pc, #140]	; (800642c <UART_SetConfig+0x1b0>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	0119      	lsls	r1, r3, #4
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009a      	lsls	r2, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <UART_SetConfig+0x1b0>)
 80063c0:	fba3 0302 	umull	r0, r3, r3, r2
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	2064      	movs	r0, #100	; 0x64
 80063c8:	fb00 f303 	mul.w	r3, r0, r3
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	3332      	adds	r3, #50	; 0x32
 80063d2:	4a16      	ldr	r2, [pc, #88]	; (800642c <UART_SetConfig+0x1b0>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063de:	4419      	add	r1, r3
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009a      	lsls	r2, r3, #2
 80063ea:	441a      	add	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <UART_SetConfig+0x1b0>)
 80063f8:	fba3 0302 	umull	r0, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2064      	movs	r0, #100	; 0x64
 8006400:	fb00 f303 	mul.w	r3, r0, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	3332      	adds	r3, #50	; 0x32
 800640a:	4a08      	ldr	r2, [pc, #32]	; (800642c <UART_SetConfig+0x1b0>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 020f 	and.w	r2, r3, #15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	440a      	add	r2, r1
 800641c:	609a      	str	r2, [r3, #8]
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40013800 	.word	0x40013800
 800642c:	51eb851f 	.word	0x51eb851f

08006430 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800643e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006442:	2b84      	cmp	r3, #132	; 0x84
 8006444:	d005      	beq.n	8006452 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006446:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	3303      	adds	r3, #3
 8006450:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006452:	68fb      	ldr	r3, [r7, #12]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr

0800645e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006464:	f3ef 8305 	mrs	r3, IPSR
 8006468:	607b      	str	r3, [r7, #4]
  return(result);
 800646a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006484:	f000 fd86 	bl	8006f94 <vTaskStartScheduler>
  
  return osOK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	bd80      	pop	{r7, pc}

0800648e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006492:	f7ff ffe4 	bl	800645e <inHandlerMode>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800649c:	f000 fe90 	bl	80071c0 <xTaskGetTickCountFromISR>
 80064a0:	4603      	mov	r3, r0
 80064a2:	e002      	b.n	80064aa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80064a4:	f000 fe7e 	bl	80071a4 <xTaskGetTickCount>
 80064a8:	4603      	mov	r3, r0
  }
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	bd80      	pop	{r7, pc}

080064ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b0:	b089      	sub	sp, #36	; 0x24
 80064b2:	af04      	add	r7, sp, #16
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d020      	beq.n	8006502 <osThreadCreate+0x54>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01c      	beq.n	8006502 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685c      	ldr	r4, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681d      	ldr	r5, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691e      	ldr	r6, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff ffa8 	bl	8006430 <makeFreeRtosPriority>
 80064e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ea:	9202      	str	r2, [sp, #8]
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	9100      	str	r1, [sp, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	4632      	mov	r2, r6
 80064f4:	4629      	mov	r1, r5
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 f925 	bl	8006746 <xTaskCreateStatic>
 80064fc:	4603      	mov	r3, r0
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	e01c      	b.n	800653c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685c      	ldr	r4, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650e:	b29e      	uxth	r6, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff ff8a 	bl	8006430 <makeFreeRtosPriority>
 800651c:	4602      	mov	r2, r0
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	9200      	str	r2, [sp, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	4632      	mov	r2, r6
 800652a:	4629      	mov	r1, r5
 800652c:	4620      	mov	r0, r4
 800652e:	f000 f963 	bl	80067f8 <xTaskCreate>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	d001      	beq.n	800653c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006546 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa80 	bl	8006a54 <vTaskDelete>
  return osOK;
 8006554:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fb7c 	bl	8006c64 <vTaskSuspend>
  
  return osOK;
 800656c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8006580:	f7ff ff6d 	bl	800645e <inHandlerMode>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fc92 	bl	8006eb4 <xTaskResumeFromISR>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10b      	bne.n	80065ae <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <osThreadResume+0x40>)
 8006598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	e002      	b.n	80065ae <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fc27 	bl	8006dfc <vTaskResume>
  }
  return osOK;
 80065ae:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <osDelayUntil+0x18>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	e000      	b.n	80065d6 <osDelayUntil+0x1a>
 80065d4:	2301      	movs	r3, #1
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fac9 	bl	8006b70 <vTaskDelayUntil>
  
  return osOK;
 80065de:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f103 0208 	add.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f103 0208 	add.w	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f103 0208 	add.w	r2, r3, #8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr

0800663e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	601a      	str	r2, [r3, #0]
}
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d103      	bne.n	80066a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e00c      	b.n	80066be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3308      	adds	r3, #8
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e002      	b.n	80066b2 <vListInsert+0x2e>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d2f6      	bcs.n	80066ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6892      	ldr	r2, [r2, #8]
 800670a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d103      	bne.n	8006728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006746:	b580      	push	{r7, lr}
 8006748:	b08e      	sub	sp, #56	; 0x38
 800674a:	af04      	add	r7, sp, #16
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	623b      	str	r3, [r7, #32]
 800676c:	e7fe      	b.n	800676c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <xTaskCreateStatic+0x42>
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e7fe      	b.n	8006786 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006788:	2354      	movs	r3, #84	; 0x54
 800678a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b54      	cmp	r3, #84	; 0x54
 8006790:	d009      	beq.n	80067a6 <xTaskCreateStatic+0x60>
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e7fe      	b.n	80067a4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01e      	beq.n	80067ea <xTaskCreateStatic+0xa4>
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01b      	beq.n	80067ea <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067c4:	2300      	movs	r3, #0
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	9302      	str	r3, [sp, #8]
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f850 	bl	8006882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067e4:	f000 f8cc 	bl	8006980 <prvAddNewTaskToReadyList>
 80067e8:	e001      	b.n	80067ee <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067ee:	697b      	ldr	r3, [r7, #20]
	}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	; 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08c      	sub	sp, #48	; 0x30
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4618      	mov	r0, r3
 800680e:	f001 f919 	bl	8007a44 <pvPortMalloc>
 8006812:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800681a:	2054      	movs	r0, #84	; 0x54
 800681c:	f001 f912 	bl	8007a44 <pvPortMalloc>
 8006820:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
 800682e:	e005      	b.n	800683c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006830:	6978      	ldr	r0, [r7, #20]
 8006832:	f001 f9c9 	bl	8007bc8 <vPortFree>
 8006836:	e001      	b.n	800683c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	2300      	movs	r3, #0
 800684e:	9303      	str	r3, [sp, #12]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f80e 	bl	8006882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006866:	69f8      	ldr	r0, [r7, #28]
 8006868:	f000 f88a 	bl	8006980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800686c:	2301      	movs	r3, #1
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	e002      	b.n	8006878 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006872:	f04f 33ff 	mov.w	r3, #4294967295
 8006876:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006878:	69bb      	ldr	r3, [r7, #24]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800689a:	3b01      	subs	r3, #1
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f023 0307 	bic.w	r3, r3, #7
 80068a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <prvInitialiseNewTask+0x46>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e7fe      	b.n	80068c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068c8:	2300      	movs	r3, #0
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	e012      	b.n	80068f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	3334      	adds	r3, #52	; 0x34
 80068de:	460a      	mov	r2, r1
 80068e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d006      	beq.n	80068fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3301      	adds	r3, #1
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d9e9      	bls.n	80068ce <prvInitialiseNewTask+0x4c>
 80068fa:	e000      	b.n	80068fe <prvInitialiseNewTask+0x7c>
		{
			break;
 80068fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	2b06      	cmp	r3, #6
 800690a:	d901      	bls.n	8006910 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800690c:	2306      	movs	r3, #6
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	2200      	movs	r2, #0
 8006920:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	3304      	adds	r3, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fe7d 	bl	8006626 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	3318      	adds	r3, #24
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fe78 	bl	8006626 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f1c3 0207 	rsb	r2, r3, #7
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	2200      	movs	r2, #0
 8006950:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	68f9      	ldr	r1, [r7, #12]
 800695e:	69b8      	ldr	r0, [r7, #24]
 8006960:	f000 fe92 	bl	8007688 <pxPortInitialiseStack>
 8006964:	4602      	mov	r2, r0
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006976:	bf00      	nop
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006988:	f000 ff66 	bl	8007858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800698c:	4b2a      	ldr	r3, [pc, #168]	; (8006a38 <prvAddNewTaskToReadyList+0xb8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	4a29      	ldr	r2, [pc, #164]	; (8006a38 <prvAddNewTaskToReadyList+0xb8>)
 8006994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006996:	4b29      	ldr	r3, [pc, #164]	; (8006a3c <prvAddNewTaskToReadyList+0xbc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800699e:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <prvAddNewTaskToReadyList+0xbc>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069a4:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <prvAddNewTaskToReadyList+0xb8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d110      	bne.n	80069ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069ac:	f000 fd48 	bl	8007440 <prvInitialiseTaskLists>
 80069b0:	e00d      	b.n	80069ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069b2:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <prvAddNewTaskToReadyList+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ba:	4b20      	ldr	r3, [pc, #128]	; (8006a3c <prvAddNewTaskToReadyList+0xbc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d802      	bhi.n	80069ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069c8:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <prvAddNewTaskToReadyList+0xbc>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <prvAddNewTaskToReadyList+0xc4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3301      	adds	r3, #1
 80069d4:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <prvAddNewTaskToReadyList+0xc4>)
 80069d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	2201      	movs	r2, #1
 80069de:	409a      	lsls	r2, r3
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <prvAddNewTaskToReadyList+0xcc>)
 80069f8:	441a      	add	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7ff fe1c 	bl	800663e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a06:	f000 ff55 	bl	80078b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <prvAddNewTaskToReadyList+0xc0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00e      	beq.n	8006a30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvAddNewTaskToReadyList+0xbc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d207      	bcs.n	8006a30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <prvAddNewTaskToReadyList+0xd0>)
 8006a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000558 	.word	0x20000558
 8006a3c:	20000458 	.word	0x20000458
 8006a40:	20000564 	.word	0x20000564
 8006a44:	20000574 	.word	0x20000574
 8006a48:	20000560 	.word	0x20000560
 8006a4c:	2000045c 	.word	0x2000045c
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006a5c:	f000 fefc 	bl	8007858 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <vTaskDelete+0x18>
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <vTaskDelete+0xf4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	e000      	b.n	8006a6e <vTaskDelete+0x1a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fe3d 	bl	80066f4 <uxListRemove>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d115      	bne.n	8006aac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	4931      	ldr	r1, [pc, #196]	; (8006b4c <vTaskDelete+0xf8>)
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <vTaskDelete+0x58>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	4b2b      	ldr	r3, [pc, #172]	; (8006b50 <vTaskDelete+0xfc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <vTaskDelete+0xfc>)
 8006aaa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3318      	adds	r3, #24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fe1b 	bl	80066f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <vTaskDelete+0x100>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <vTaskDelete+0x100>)
 8006ac6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006ac8:	4b1f      	ldr	r3, [pc, #124]	; (8006b48 <vTaskDelete+0xf4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d10b      	bne.n	8006aea <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	481f      	ldr	r0, [pc, #124]	; (8006b58 <vTaskDelete+0x104>)
 8006ada:	f7ff fdb0 	bl	800663e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006ade:	4b1f      	ldr	r3, [pc, #124]	; (8006b5c <vTaskDelete+0x108>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	; (8006b5c <vTaskDelete+0x108>)
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e009      	b.n	8006afe <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006aea:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <vTaskDelete+0x10c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <vTaskDelete+0x10c>)
 8006af2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fd0f 	bl	8007518 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006afa:	f000 fd3b 	bl	8007574 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006afe:	f000 fed9 	bl	80078b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006b02:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <vTaskDelete+0x110>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01a      	beq.n	8006b40 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <vTaskDelete+0xf4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d115      	bne.n	8006b40 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006b14:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <vTaskDelete+0x114>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d009      	beq.n	8006b30 <vTaskDelete+0xdc>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	e7fe      	b.n	8006b2e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8006b30:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <vTaskDelete+0x118>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000458 	.word	0x20000458
 8006b4c:	2000045c 	.word	0x2000045c
 8006b50:	20000560 	.word	0x20000560
 8006b54:	20000574 	.word	0x20000574
 8006b58:	2000052c 	.word	0x2000052c
 8006b5c:	20000540 	.word	0x20000540
 8006b60:	20000558 	.word	0x20000558
 8006b64:	20000564 	.word	0x20000564
 8006b68:	20000580 	.word	0x20000580
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d109      	bne.n	8006b98 <vTaskDelayUntil+0x28>
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	e7fe      	b.n	8006b96 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <vTaskDelayUntil+0x42>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	e7fe      	b.n	8006bb0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <vTaskDelayUntil+0xe8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <vTaskDelayUntil+0x5e>
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e7fe      	b.n	8006bcc <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8006bce:	f000 fa3f 	bl	8007050 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <vTaskDelayUntil+0xec>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	4413      	add	r3, r2
 8006be0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d20b      	bcs.n	8006c04 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d211      	bcs.n	8006c1a <vTaskDelayUntil+0xaa>
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d90d      	bls.n	8006c1a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	e00a      	b.n	8006c1a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d303      	bcc.n	8006c16 <vTaskDelayUntil+0xa6>
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d901      	bls.n	8006c1a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006c16:	2301      	movs	r3, #1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fcc4 	bl	80075bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006c34:	f000 fa1a 	bl	800706c <xTaskResumeAll>
 8006c38:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d107      	bne.n	8006c50 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <vTaskDelayUntil+0xf0>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c50:	bf00      	nop
 8006c52:	3728      	adds	r7, #40	; 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	20000580 	.word	0x20000580
 8006c5c:	2000055c 	.word	0x2000055c
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c6c:	f000 fdf4 	bl	8007858 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <vTaskSuspend+0x18>
 8006c76:	4b3c      	ldr	r3, [pc, #240]	; (8006d68 <vTaskSuspend+0x104>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	e000      	b.n	8006c7e <vTaskSuspend+0x1a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fd35 	bl	80066f4 <uxListRemove>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d115      	bne.n	8006cbc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4935      	ldr	r1, [pc, #212]	; (8006d6c <vTaskSuspend+0x108>)
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <vTaskSuspend+0x58>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	2201      	movs	r2, #1
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	43da      	mvns	r2, r3
 8006cb2:	4b2f      	ldr	r3, [pc, #188]	; (8006d70 <vTaskSuspend+0x10c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <vTaskSuspend+0x10c>)
 8006cba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3318      	adds	r3, #24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fd13 	bl	80066f4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4827      	ldr	r0, [pc, #156]	; (8006d74 <vTaskSuspend+0x110>)
 8006cd6:	f7ff fcb2 	bl	800663e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d103      	bne.n	8006cee <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006cee:	f000 fde1 	bl	80078b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <vTaskSuspend+0x114>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006cfa:	f000 fdad 	bl	8007858 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006cfe:	f000 fc39 	bl	8007574 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006d02:	f000 fdd7 	bl	80078b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <vTaskSuspend+0x104>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d126      	bne.n	8006d5e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8006d10:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <vTaskSuspend+0x114>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d016      	beq.n	8006d46 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006d18:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <vTaskSuspend+0x118>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <vTaskSuspend+0xd0>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	e7fe      	b.n	8006d32 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8006d34:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <vTaskSuspend+0x11c>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d44:	e00b      	b.n	8006d5e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <vTaskSuspend+0x110>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <vTaskSuspend+0x120>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d103      	bne.n	8006d5a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8006d52:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <vTaskSuspend+0x104>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
	}
 8006d58:	e001      	b.n	8006d5e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8006d5a:	f000 faff 	bl	800735c <vTaskSwitchContext>
	}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000458 	.word	0x20000458
 8006d6c:	2000045c 	.word	0x2000045c
 8006d70:	20000560 	.word	0x20000560
 8006d74:	20000544 	.word	0x20000544
 8006d78:	20000564 	.word	0x20000564
 8006d7c:	20000580 	.word	0x20000580
 8006d80:	e000ed04 	.word	0xe000ed04
 8006d84:	20000558 	.word	0x20000558

08006d88 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <prvTaskIsTaskSuspended+0x2a>
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	e7fe      	b.n	8006db0 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	4a0f      	ldr	r2, [pc, #60]	; (8006df4 <prvTaskIsTaskSuspended+0x6c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d101      	bne.n	8006dc0 <prvTaskIsTaskSuspended+0x38>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <prvTaskIsTaskSuspended+0x3a>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00f      	beq.n	8006de6 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <prvTaskIsTaskSuspended+0x70>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00a      	beq.n	8006de6 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <prvTaskIsTaskSuspended+0x54>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <prvTaskIsTaskSuspended+0x56>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006de6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006de8:	4618      	mov	r0, r3
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000544 	.word	0x20000544
 8006df8:	20000518 	.word	0x20000518

08006dfc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <vTaskResume+0x26>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	e7fe      	b.n	8006e20 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d039      	beq.n	8006e9c <vTaskResume+0xa0>
 8006e28:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <vTaskResume+0xa8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d034      	beq.n	8006e9c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8006e32:	f000 fd11 	bl	8007858 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff ffa6 	bl	8006d88 <prvTaskIsTaskSuspended>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d02a      	beq.n	8006e98 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff fc54 	bl	80066f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	2201      	movs	r2, #1
 8006e52:	409a      	lsls	r2, r3
 8006e54:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <vTaskResume+0xac>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <vTaskResume+0xac>)
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <vTaskResume+0xb0>)
 8006e6c:	441a      	add	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7ff fbe2 	bl	800663e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <vTaskResume+0xa8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d307      	bcc.n	8006e98 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006e88:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <vTaskResume+0xb4>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006e98:	f000 fd0c 	bl	80078b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e9c:	bf00      	nop
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000458 	.word	0x20000458
 8006ea8:	20000560 	.word	0x20000560
 8006eac:	2000045c 	.word	0x2000045c
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <xTaskResumeFromISR+0x2a>
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	e7fe      	b.n	8006edc <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ede:	f000 fd75 	bl	80079cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	617a      	str	r2, [r7, #20]
 8006ef8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006efa:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006efc:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006efe:	6a38      	ldr	r0, [r7, #32]
 8006f00:	f7ff ff42 	bl	8006d88 <prvTaskIsTaskSuspended>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d02f      	beq.n	8006f6a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <xTaskResumeFromISR+0xcc>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d125      	bne.n	8006f5e <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <xTaskResumeFromISR+0xd0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d301      	bcc.n	8006f24 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fbe3 	bl	80066f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	2201      	movs	r2, #1
 8006f34:	409a      	lsls	r2, r3
 8006f36:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <xTaskResumeFromISR+0xd4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	4a12      	ldr	r2, [pc, #72]	; (8006f88 <xTaskResumeFromISR+0xd4>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a0f      	ldr	r2, [pc, #60]	; (8006f8c <xTaskResumeFromISR+0xd8>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7ff fb71 	bl	800663e <vListInsertEnd>
 8006f5c:	e005      	b.n	8006f6a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	3318      	adds	r3, #24
 8006f62:	4619      	mov	r1, r3
 8006f64:	480a      	ldr	r0, [pc, #40]	; (8006f90 <xTaskResumeFromISR+0xdc>)
 8006f66:	f7ff fb6a 	bl	800663e <vListInsertEnd>
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3728      	adds	r7, #40	; 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000580 	.word	0x20000580
 8006f84:	20000458 	.word	0x20000458
 8006f88:	20000560 	.word	0x20000560
 8006f8c:	2000045c 	.word	0x2000045c
 8006f90:	20000518 	.word	0x20000518

08006f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	1d39      	adds	r1, r7, #4
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fa f9be 	bl	800132c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	9202      	str	r2, [sp, #8]
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	491d      	ldr	r1, [pc, #116]	; (8007038 <vTaskStartScheduler+0xa4>)
 8006fc4:	481d      	ldr	r0, [pc, #116]	; (800703c <vTaskStartScheduler+0xa8>)
 8006fc6:	f7ff fbbe 	bl	8006746 <xTaskCreateStatic>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <vTaskStartScheduler+0xac>)
 8006fce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fd0:	4b1b      	ldr	r3, [pc, #108]	; (8007040 <vTaskStartScheduler+0xac>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e001      	b.n	8006fe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d115      	bne.n	8007014 <vTaskStartScheduler+0x80>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ffa:	4b12      	ldr	r3, [pc, #72]	; (8007044 <vTaskStartScheduler+0xb0>)
 8006ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8007000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <vTaskStartScheduler+0xb4>)
 8007004:	2201      	movs	r2, #1
 8007006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007008:	4b10      	ldr	r3, [pc, #64]	; (800704c <vTaskStartScheduler+0xb8>)
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800700e:	f000 fbb3 	bl	8007778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007012:	e00d      	b.n	8007030 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d109      	bne.n	8007030 <vTaskStartScheduler+0x9c>
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e7fe      	b.n	800702e <vTaskStartScheduler+0x9a>
}
 8007030:	bf00      	nop
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	0800a104 	.word	0x0800a104
 800703c:	08007411 	.word	0x08007411
 8007040:	2000057c 	.word	0x2000057c
 8007044:	20000578 	.word	0x20000578
 8007048:	20000564 	.word	0x20000564
 800704c:	2000055c 	.word	0x2000055c

08007050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <vTaskSuspendAll+0x18>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	4a03      	ldr	r2, [pc, #12]	; (8007068 <vTaskSuspendAll+0x18>)
 800705c:	6013      	str	r3, [r2, #0]
}
 800705e:	bf00      	nop
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000580 	.word	0x20000580

0800706c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007076:	2300      	movs	r3, #0
 8007078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800707a:	4b41      	ldr	r3, [pc, #260]	; (8007180 <xTaskResumeAll+0x114>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <xTaskResumeAll+0x2a>
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	e7fe      	b.n	8007094 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007096:	f000 fbdf 	bl	8007858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800709a:	4b39      	ldr	r3, [pc, #228]	; (8007180 <xTaskResumeAll+0x114>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	4a37      	ldr	r2, [pc, #220]	; (8007180 <xTaskResumeAll+0x114>)
 80070a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a4:	4b36      	ldr	r3, [pc, #216]	; (8007180 <xTaskResumeAll+0x114>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d161      	bne.n	8007170 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ac:	4b35      	ldr	r3, [pc, #212]	; (8007184 <xTaskResumeAll+0x118>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d05d      	beq.n	8007170 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070b4:	e02e      	b.n	8007114 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070b6:	4b34      	ldr	r3, [pc, #208]	; (8007188 <xTaskResumeAll+0x11c>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3318      	adds	r3, #24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fb16 	bl	80066f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fb11 	bl	80066f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	2201      	movs	r2, #1
 80070d8:	409a      	lsls	r2, r3
 80070da:	4b2c      	ldr	r3, [pc, #176]	; (800718c <xTaskResumeAll+0x120>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	4a2a      	ldr	r2, [pc, #168]	; (800718c <xTaskResumeAll+0x120>)
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4a27      	ldr	r2, [pc, #156]	; (8007190 <xTaskResumeAll+0x124>)
 80070f2:	441a      	add	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f7ff fa9f 	bl	800663e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4b23      	ldr	r3, [pc, #140]	; (8007194 <xTaskResumeAll+0x128>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800710e:	4b22      	ldr	r3, [pc, #136]	; (8007198 <xTaskResumeAll+0x12c>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007114:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <xTaskResumeAll+0x11c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1cc      	bne.n	80070b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007122:	f000 fa27 	bl	8007574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007126:	4b1d      	ldr	r3, [pc, #116]	; (800719c <xTaskResumeAll+0x130>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d010      	beq.n	8007154 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007132:	f000 f857 	bl	80071e4 <xTaskIncrementTick>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <xTaskResumeAll+0x12c>)
 800713e:	2201      	movs	r2, #1
 8007140:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3b01      	subs	r3, #1
 8007146:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f1      	bne.n	8007132 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <xTaskResumeAll+0x130>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007154:	4b10      	ldr	r3, [pc, #64]	; (8007198 <xTaskResumeAll+0x12c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <xTaskResumeAll+0x134>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007170:	f000 fba0 	bl	80078b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007174:	68bb      	ldr	r3, [r7, #8]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000580 	.word	0x20000580
 8007184:	20000558 	.word	0x20000558
 8007188:	20000518 	.word	0x20000518
 800718c:	20000560 	.word	0x20000560
 8007190:	2000045c 	.word	0x2000045c
 8007194:	20000458 	.word	0x20000458
 8007198:	2000056c 	.word	0x2000056c
 800719c:	20000568 	.word	0x20000568
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071aa:	4b04      	ldr	r3, [pc, #16]	; (80071bc <xTaskGetTickCount+0x18>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071b0:	687b      	ldr	r3, [r7, #4]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	2000055c 	.word	0x2000055c

080071c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071c6:	f000 fc01 	bl	80079cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071ce:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <xTaskGetTickCountFromISR+0x20>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071d4:	683b      	ldr	r3, [r7, #0]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	2000055c 	.word	0x2000055c

080071e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ee:	4b50      	ldr	r3, [pc, #320]	; (8007330 <xTaskIncrementTick+0x14c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 808c 	bne.w	8007310 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071f8:	4b4e      	ldr	r3, [pc, #312]	; (8007334 <xTaskIncrementTick+0x150>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007200:	4a4c      	ldr	r2, [pc, #304]	; (8007334 <xTaskIncrementTick+0x150>)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11f      	bne.n	800724c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800720c:	4b4a      	ldr	r3, [pc, #296]	; (8007338 <xTaskIncrementTick+0x154>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <xTaskIncrementTick+0x46>
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	e7fe      	b.n	8007228 <xTaskIncrementTick+0x44>
 800722a:	4b43      	ldr	r3, [pc, #268]	; (8007338 <xTaskIncrementTick+0x154>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	4b42      	ldr	r3, [pc, #264]	; (800733c <xTaskIncrementTick+0x158>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a40      	ldr	r2, [pc, #256]	; (8007338 <xTaskIncrementTick+0x154>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	4a40      	ldr	r2, [pc, #256]	; (800733c <xTaskIncrementTick+0x158>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	4b40      	ldr	r3, [pc, #256]	; (8007340 <xTaskIncrementTick+0x15c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	4a3e      	ldr	r2, [pc, #248]	; (8007340 <xTaskIncrementTick+0x15c>)
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	f000 f994 	bl	8007574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800724c:	4b3d      	ldr	r3, [pc, #244]	; (8007344 <xTaskIncrementTick+0x160>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	429a      	cmp	r2, r3
 8007254:	d34d      	bcc.n	80072f2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007256:	4b38      	ldr	r3, [pc, #224]	; (8007338 <xTaskIncrementTick+0x154>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <xTaskIncrementTick+0x80>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <xTaskIncrementTick+0x82>
 8007264:	2300      	movs	r3, #0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726a:	4b36      	ldr	r3, [pc, #216]	; (8007344 <xTaskIncrementTick+0x160>)
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	601a      	str	r2, [r3, #0]
					break;
 8007272:	e03e      	b.n	80072f2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007274:	4b30      	ldr	r3, [pc, #192]	; (8007338 <xTaskIncrementTick+0x154>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d203      	bcs.n	8007294 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800728c:	4a2d      	ldr	r2, [pc, #180]	; (8007344 <xTaskIncrementTick+0x160>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
						break;
 8007292:	e02e      	b.n	80072f2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fa2b 	bl	80066f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3318      	adds	r3, #24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fa22 	bl	80066f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	2201      	movs	r2, #1
 80072b6:	409a      	lsls	r2, r3
 80072b8:	4b23      	ldr	r3, [pc, #140]	; (8007348 <xTaskIncrementTick+0x164>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4313      	orrs	r3, r2
 80072be:	4a22      	ldr	r2, [pc, #136]	; (8007348 <xTaskIncrementTick+0x164>)
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4a1f      	ldr	r2, [pc, #124]	; (800734c <xTaskIncrementTick+0x168>)
 80072d0:	441a      	add	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff f9b0 	bl	800663e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <xTaskIncrementTick+0x16c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d3b4      	bcc.n	8007256 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072f0:	e7b1      	b.n	8007256 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072f2:	4b17      	ldr	r3, [pc, #92]	; (8007350 <xTaskIncrementTick+0x16c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	4914      	ldr	r1, [pc, #80]	; (800734c <xTaskIncrementTick+0x168>)
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	440b      	add	r3, r1
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d907      	bls.n	800731a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800730a:	2301      	movs	r3, #1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e004      	b.n	800731a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <xTaskIncrementTick+0x170>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3301      	adds	r3, #1
 8007316:	4a0f      	ldr	r2, [pc, #60]	; (8007354 <xTaskIncrementTick+0x170>)
 8007318:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <xTaskIncrementTick+0x174>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007326:	697b      	ldr	r3, [r7, #20]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000580 	.word	0x20000580
 8007334:	2000055c 	.word	0x2000055c
 8007338:	20000510 	.word	0x20000510
 800733c:	20000514 	.word	0x20000514
 8007340:	20000570 	.word	0x20000570
 8007344:	20000578 	.word	0x20000578
 8007348:	20000560 	.word	0x20000560
 800734c:	2000045c 	.word	0x2000045c
 8007350:	20000458 	.word	0x20000458
 8007354:	20000568 	.word	0x20000568
 8007358:	2000056c 	.word	0x2000056c

0800735c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007362:	4b26      	ldr	r3, [pc, #152]	; (80073fc <vTaskSwitchContext+0xa0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800736a:	4b25      	ldr	r3, [pc, #148]	; (8007400 <vTaskSwitchContext+0xa4>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007370:	e03e      	b.n	80073f0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007372:	4b23      	ldr	r3, [pc, #140]	; (8007400 <vTaskSwitchContext+0xa4>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007378:	4b22      	ldr	r3, [pc, #136]	; (8007404 <vTaskSwitchContext+0xa8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	fab3 f383 	clz	r3, r3
 8007384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	f1c3 031f 	rsb	r3, r3, #31
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	491e      	ldr	r1, [pc, #120]	; (8007408 <vTaskSwitchContext+0xac>)
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e7fe      	b.n	80073b4 <vTaskSwitchContext+0x58>
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4a11      	ldr	r2, [pc, #68]	; (8007408 <vTaskSwitchContext+0xac>)
 80073c2:	4413      	add	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	605a      	str	r2, [r3, #4]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3308      	adds	r3, #8
 80073d8:	429a      	cmp	r2, r3
 80073da:	d104      	bne.n	80073e6 <vTaskSwitchContext+0x8a>
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4a07      	ldr	r2, [pc, #28]	; (800740c <vTaskSwitchContext+0xb0>)
 80073ee:	6013      	str	r3, [r2, #0]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000580 	.word	0x20000580
 8007400:	2000056c 	.word	0x2000056c
 8007404:	20000560 	.word	0x20000560
 8007408:	2000045c 	.word	0x2000045c
 800740c:	20000458 	.word	0x20000458

08007410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007418:	f000 f852 	bl	80074c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <prvIdleTask+0x28>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d9f9      	bls.n	8007418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <prvIdleTask+0x2c>)
 8007426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007434:	e7f0      	b.n	8007418 <prvIdleTask+0x8>
 8007436:	bf00      	nop
 8007438:	2000045c 	.word	0x2000045c
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007446:	2300      	movs	r3, #0
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	e00c      	b.n	8007466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <prvInitialiseTaskLists+0x60>)
 8007458:	4413      	add	r3, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff f8c4 	bl	80065e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3301      	adds	r3, #1
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b06      	cmp	r3, #6
 800746a:	d9ef      	bls.n	800744c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800746c:	480d      	ldr	r0, [pc, #52]	; (80074a4 <prvInitialiseTaskLists+0x64>)
 800746e:	f7ff f8bb 	bl	80065e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007472:	480d      	ldr	r0, [pc, #52]	; (80074a8 <prvInitialiseTaskLists+0x68>)
 8007474:	f7ff f8b8 	bl	80065e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007478:	480c      	ldr	r0, [pc, #48]	; (80074ac <prvInitialiseTaskLists+0x6c>)
 800747a:	f7ff f8b5 	bl	80065e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800747e:	480c      	ldr	r0, [pc, #48]	; (80074b0 <prvInitialiseTaskLists+0x70>)
 8007480:	f7ff f8b2 	bl	80065e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007484:	480b      	ldr	r0, [pc, #44]	; (80074b4 <prvInitialiseTaskLists+0x74>)
 8007486:	f7ff f8af 	bl	80065e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <prvInitialiseTaskLists+0x78>)
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <prvInitialiseTaskLists+0x64>)
 800748e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <prvInitialiseTaskLists+0x7c>)
 8007492:	4a05      	ldr	r2, [pc, #20]	; (80074a8 <prvInitialiseTaskLists+0x68>)
 8007494:	601a      	str	r2, [r3, #0]
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	2000045c 	.word	0x2000045c
 80074a4:	200004e8 	.word	0x200004e8
 80074a8:	200004fc 	.word	0x200004fc
 80074ac:	20000518 	.word	0x20000518
 80074b0:	2000052c 	.word	0x2000052c
 80074b4:	20000544 	.word	0x20000544
 80074b8:	20000510 	.word	0x20000510
 80074bc:	20000514 	.word	0x20000514

080074c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074c6:	e019      	b.n	80074fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074c8:	f000 f9c6 	bl	8007858 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074cc:	4b0f      	ldr	r3, [pc, #60]	; (800750c <prvCheckTasksWaitingTermination+0x4c>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4618      	mov	r0, r3
 80074da:	f7ff f90b 	bl	80066f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <prvCheckTasksWaitingTermination+0x50>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <prvCheckTasksWaitingTermination+0x50>)
 80074e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074e8:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074f2:	f000 f9df 	bl	80078b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f80e 	bl	8007518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e1      	bne.n	80074c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	2000052c 	.word	0x2000052c
 8007510:	20000558 	.word	0x20000558
 8007514:	20000540 	.word	0x20000540

08007518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007526:	2b00      	cmp	r3, #0
 8007528:	d108      	bne.n	800753c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fb4a 	bl	8007bc8 <vPortFree>
				vPortFree( pxTCB );
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fb47 	bl	8007bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800753a:	e017      	b.n	800756c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007542:	2b01      	cmp	r3, #1
 8007544:	d103      	bne.n	800754e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fb3e 	bl	8007bc8 <vPortFree>
	}
 800754c:	e00e      	b.n	800756c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007554:	2b02      	cmp	r3, #2
 8007556:	d009      	beq.n	800756c <prvDeleteTCB+0x54>
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e7fe      	b.n	800756a <prvDeleteTCB+0x52>
	}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800757a:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <prvResetNextTaskUnblockTime+0x40>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <prvResetNextTaskUnblockTime+0x14>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <prvResetNextTaskUnblockTime+0x16>
 8007588:	2300      	movs	r3, #0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <prvResetNextTaskUnblockTime+0x44>)
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007596:	e008      	b.n	80075aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007598:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <prvResetNextTaskUnblockTime+0x40>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <prvResetNextTaskUnblockTime+0x44>)
 80075a8:	6013      	str	r3, [r2, #0]
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr
 80075b4:	20000510 	.word	0x20000510
 80075b8:	20000578 	.word	0x20000578

080075bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075c6:	4b29      	ldr	r3, [pc, #164]	; (800766c <prvAddCurrentTaskToDelayedList+0xb0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075cc:	4b28      	ldr	r3, [pc, #160]	; (8007670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff f88e 	bl	80066f4 <uxListRemove>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	2201      	movs	r2, #1
 80075e6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ea:	43da      	mvns	r2, r3
 80075ec:	4b21      	ldr	r3, [pc, #132]	; (8007674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4013      	ands	r3, r2
 80075f2:	4a20      	ldr	r2, [pc, #128]	; (8007674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d10a      	bne.n	8007614 <prvAddCurrentTaskToDelayedList+0x58>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007604:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	481a      	ldr	r0, [pc, #104]	; (8007678 <prvAddCurrentTaskToDelayedList+0xbc>)
 800760e:	f7ff f816 	bl	800663e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007612:	e026      	b.n	8007662 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4413      	add	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800761c:	4b14      	ldr	r3, [pc, #80]	; (8007670 <prvAddCurrentTaskToDelayedList+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	429a      	cmp	r2, r3
 800762a:	d209      	bcs.n	8007640 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800762c:	4b13      	ldr	r3, [pc, #76]	; (800767c <prvAddCurrentTaskToDelayedList+0xc0>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7ff f823 	bl	8006684 <vListInsert>
}
 800763e:	e010      	b.n	8007662 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007640:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3304      	adds	r3, #4
 800764a:	4619      	mov	r1, r3
 800764c:	4610      	mov	r0, r2
 800764e:	f7ff f819 	bl	8006684 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	429a      	cmp	r2, r3
 800765a:	d202      	bcs.n	8007662 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800765c:	4a09      	ldr	r2, [pc, #36]	; (8007684 <prvAddCurrentTaskToDelayedList+0xc8>)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6013      	str	r3, [r2, #0]
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000055c 	.word	0x2000055c
 8007670:	20000458 	.word	0x20000458
 8007674:	20000560 	.word	0x20000560
 8007678:	20000544 	.word	0x20000544
 800767c:	20000514 	.word	0x20000514
 8007680:	20000510 	.word	0x20000510
 8007684:	20000578 	.word	0x20000578

08007688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3b04      	subs	r3, #4
 8007698:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f023 0201 	bic.w	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3b04      	subs	r3, #4
 80076b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076b8:	4a08      	ldr	r2, [pc, #32]	; (80076dc <pxPortInitialiseStack+0x54>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3b14      	subs	r3, #20
 80076c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b20      	subs	r3, #32
 80076ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr
 80076dc:	080076e1 	.word	0x080076e1

080076e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076ea:	4b10      	ldr	r3, [pc, #64]	; (800772c <prvTaskExitError+0x4c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d009      	beq.n	8007708 <prvTaskExitError+0x28>
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e7fe      	b.n	8007706 <prvTaskExitError+0x26>
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800771a:	bf00      	nop
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0fc      	beq.n	800771c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	2000000c 	.word	0x2000000c

08007730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <pxCurrentTCBConst2>)
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800773a:	f380 8809 	msr	PSP, r0
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f04f 0000 	mov.w	r0, #0
 8007746:	f380 8811 	msr	BASEPRI, r0
 800774a:	f04e 0e0d 	orr.w	lr, lr, #13
 800774e:	4770      	bx	lr

08007750 <pxCurrentTCBConst2>:
 8007750:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007758:	4806      	ldr	r0, [pc, #24]	; (8007774 <prvPortStartFirstTask+0x1c>)
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	6800      	ldr	r0, [r0, #0]
 800775e:	f380 8808 	msr	MSP, r0
 8007762:	b662      	cpsie	i
 8007764:	b661      	cpsie	f
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	df00      	svc	0
 8007770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007772:	bf00      	nop
 8007774:	e000ed08 	.word	0xe000ed08

08007778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800777e:	4b31      	ldr	r3, [pc, #196]	; (8007844 <xPortStartScheduler+0xcc>)
 8007780:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	22ff      	movs	r2, #255	; 0xff
 800778e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	4b29      	ldr	r3, [pc, #164]	; (8007848 <xPortStartScheduler+0xd0>)
 80077a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077a6:	4b29      	ldr	r3, [pc, #164]	; (800784c <xPortStartScheduler+0xd4>)
 80077a8:	2207      	movs	r2, #7
 80077aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ac:	e009      	b.n	80077c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077ae:	4b27      	ldr	r3, [pc, #156]	; (800784c <xPortStartScheduler+0xd4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	4a25      	ldr	r2, [pc, #148]	; (800784c <xPortStartScheduler+0xd4>)
 80077b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d0ef      	beq.n	80077ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077ce:	4b1f      	ldr	r3, [pc, #124]	; (800784c <xPortStartScheduler+0xd4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f1c3 0307 	rsb	r3, r3, #7
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d009      	beq.n	80077ee <xPortStartScheduler+0x76>
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60bb      	str	r3, [r7, #8]
 80077ec:	e7fe      	b.n	80077ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077ee:	4b17      	ldr	r3, [pc, #92]	; (800784c <xPortStartScheduler+0xd4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <xPortStartScheduler+0xd4>)
 80077f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f8:	4b14      	ldr	r3, [pc, #80]	; (800784c <xPortStartScheduler+0xd4>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007800:	4a12      	ldr	r2, [pc, #72]	; (800784c <xPortStartScheduler+0xd4>)
 8007802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <xPortStartScheduler+0xd8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a0f      	ldr	r2, [pc, #60]	; (8007850 <xPortStartScheduler+0xd8>)
 8007812:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007818:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <xPortStartScheduler+0xd8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <xPortStartScheduler+0xd8>)
 800781e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007824:	f000 f8b0 	bl	8007988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <xPortStartScheduler+0xdc>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800782e:	f7ff ff93 	bl	8007758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007832:	f7ff fd93 	bl	800735c <vTaskSwitchContext>
	prvTaskExitError();
 8007836:	f7ff ff53 	bl	80076e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	e000e400 	.word	0xe000e400
 8007848:	20000584 	.word	0x20000584
 800784c:	20000588 	.word	0x20000588
 8007850:	e000ed20 	.word	0xe000ed20
 8007854:	2000000c 	.word	0x2000000c

08007858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007870:	4b0e      	ldr	r3, [pc, #56]	; (80078ac <vPortEnterCritical+0x54>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a0d      	ldr	r2, [pc, #52]	; (80078ac <vPortEnterCritical+0x54>)
 8007878:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <vPortEnterCritical+0x54>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d10e      	bne.n	80078a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007882:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <vPortEnterCritical+0x58>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <vPortEnterCritical+0x48>
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	e7fe      	b.n	800789e <vPortEnterCritical+0x46>
	}
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	2000000c 	.word	0x2000000c
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078ba:	4b10      	ldr	r3, [pc, #64]	; (80078fc <vPortExitCritical+0x48>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <vPortExitCritical+0x22>
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	e7fe      	b.n	80078d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <vPortExitCritical+0x48>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3b01      	subs	r3, #1
 80078dc:	4a07      	ldr	r2, [pc, #28]	; (80078fc <vPortExitCritical+0x48>)
 80078de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <vPortExitCritical+0x48>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d104      	bne.n	80078f2 <vPortExitCritical+0x3e>
 80078e8:	2300      	movs	r3, #0
 80078ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr
 80078fc:	2000000c 	.word	0x2000000c

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007910:	6010      	str	r0, [r2, #0]
 8007912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007916:	f04f 0050 	mov.w	r0, #80	; 0x50
 800791a:	f380 8811 	msr	BASEPRI, r0
 800791e:	f7ff fd1d 	bl	800735c <vTaskSwitchContext>
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007936:	f380 8809 	msr	PSP, r0
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	4770      	bx	lr

08007940 <pxCurrentTCBConst>:
 8007940:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007960:	f7ff fc40 	bl	80071e4 <xTaskIncrementTick>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <SysTick_Handler+0x3c>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortSetupTimerInterrupt+0x30>)
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007992:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <vPortSetupTimerInterrupt+0x34>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007998:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <vPortSetupTimerInterrupt+0x38>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <vPortSetupTimerInterrupt+0x3c>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	099b      	lsrs	r3, r3, #6
 80079a4:	4a08      	ldr	r2, [pc, #32]	; (80079c8 <vPortSetupTimerInterrupt+0x40>)
 80079a6:	3b01      	subs	r3, #1
 80079a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079aa:	4b03      	ldr	r3, [pc, #12]	; (80079b8 <vPortSetupTimerInterrupt+0x30>)
 80079ac:	2207      	movs	r2, #7
 80079ae:	601a      	str	r2, [r3, #0]
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr
 80079b8:	e000e010 	.word	0xe000e010
 80079bc:	e000e018 	.word	0xe000e018
 80079c0:	20000000 	.word	0x20000000
 80079c4:	10624dd3 	.word	0x10624dd3
 80079c8:	e000e014 	.word	0xe000e014

080079cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079d2:	f3ef 8305 	mrs	r3, IPSR
 80079d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b0f      	cmp	r3, #15
 80079dc:	d913      	bls.n	8007a06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079de:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <vPortValidateInterruptPriority+0x68>)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e8:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <vPortValidateInterruptPriority+0x6c>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	7afa      	ldrb	r2, [r7, #11]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d209      	bcs.n	8007a06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	e7fe      	b.n	8007a04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <vPortValidateInterruptPriority+0x70>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <vPortValidateInterruptPriority+0x74>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d909      	bls.n	8007a2a <vPortValidateInterruptPriority+0x5e>
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	e7fe      	b.n	8007a28 <vPortValidateInterruptPriority+0x5c>
	}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr
 8007a34:	e000e3f0 	.word	0xe000e3f0
 8007a38:	20000584 	.word	0x20000584
 8007a3c:	e000ed0c 	.word	0xe000ed0c
 8007a40:	20000588 	.word	0x20000588

08007a44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a50:	f7ff fafe 	bl	8007050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a54:	4b57      	ldr	r3, [pc, #348]	; (8007bb4 <pvPortMalloc+0x170>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a5c:	f000 f90c 	bl	8007c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a60:	4b55      	ldr	r3, [pc, #340]	; (8007bb8 <pvPortMalloc+0x174>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 808c 	bne.w	8007b86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d01c      	beq.n	8007aae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007a74:	2208      	movs	r2, #8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d013      	beq.n	8007aae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f023 0307 	bic.w	r3, r3, #7
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <pvPortMalloc+0x6a>
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e7fe      	b.n	8007aac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d068      	beq.n	8007b86 <pvPortMalloc+0x142>
 8007ab4:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <pvPortMalloc+0x178>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d863      	bhi.n	8007b86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007abe:	4b40      	ldr	r3, [pc, #256]	; (8007bc0 <pvPortMalloc+0x17c>)
 8007ac0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ac2:	4b3f      	ldr	r3, [pc, #252]	; (8007bc0 <pvPortMalloc+0x17c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ac8:	e004      	b.n	8007ad4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d903      	bls.n	8007ae6 <pvPortMalloc+0xa2>
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f1      	bne.n	8007aca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ae6:	4b33      	ldr	r3, [pc, #204]	; (8007bb4 <pvPortMalloc+0x170>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d04a      	beq.n	8007b86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2208      	movs	r2, #8
 8007af6:	4413      	add	r3, r2
 8007af8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	1ad2      	subs	r2, r2, r3
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d91e      	bls.n	8007b50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4413      	add	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <pvPortMalloc+0xf4>
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e7fe      	b.n	8007b36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b4a:	69b8      	ldr	r0, [r7, #24]
 8007b4c:	f000 f8f6 	bl	8007d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b50:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <pvPortMalloc+0x178>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <pvPortMalloc+0x178>)
 8007b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b5e:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <pvPortMalloc+0x178>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b18      	ldr	r3, [pc, #96]	; (8007bc4 <pvPortMalloc+0x180>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d203      	bcs.n	8007b72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b6a:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <pvPortMalloc+0x178>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a15      	ldr	r2, [pc, #84]	; (8007bc4 <pvPortMalloc+0x180>)
 8007b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <pvPortMalloc+0x174>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b86:	f7ff fa71 	bl	800706c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <pvPortMalloc+0x164>
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e7fe      	b.n	8007ba6 <pvPortMalloc+0x162>
	return pvReturn;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3728      	adds	r7, #40	; 0x28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200024d4 	.word	0x200024d4
 8007bb8:	200024e0 	.word	0x200024e0
 8007bbc:	200024d8 	.word	0x200024d8
 8007bc0:	200024cc 	.word	0x200024cc
 8007bc4:	200024dc 	.word	0x200024dc

08007bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d046      	beq.n	8007c68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bda:	2308      	movs	r3, #8
 8007bdc:	425b      	negs	r3, r3
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4413      	add	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <vPortFree+0xa8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <vPortFree+0x42>
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e7fe      	b.n	8007c08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <vPortFree+0x5e>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60bb      	str	r3, [r7, #8]
 8007c24:	e7fe      	b.n	8007c24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <vPortFree+0xa8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d019      	beq.n	8007c68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d115      	bne.n	8007c68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <vPortFree+0xa8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	43db      	mvns	r3, r3
 8007c46:	401a      	ands	r2, r3
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c4c:	f7ff fa00 	bl	8007050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <vPortFree+0xac>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4413      	add	r3, r2
 8007c5a:	4a06      	ldr	r2, [pc, #24]	; (8007c74 <vPortFree+0xac>)
 8007c5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c5e:	6938      	ldr	r0, [r7, #16]
 8007c60:	f000 f86c 	bl	8007d3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c64:	f7ff fa02 	bl	800706c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c68:	bf00      	nop
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	200024e0 	.word	0x200024e0
 8007c74:	200024d8 	.word	0x200024d8

08007c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c7e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c84:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <prvHeapInit+0xac>)
 8007c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00c      	beq.n	8007cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3307      	adds	r3, #7
 8007c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	4a1f      	ldr	r2, [pc, #124]	; (8007d24 <prvHeapInit+0xac>)
 8007ca8:	4413      	add	r3, r2
 8007caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <prvHeapInit+0xb0>)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <prvHeapInit+0xb0>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	1a9b      	subs	r3, r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0307 	bic.w	r3, r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <prvHeapInit+0xb4>)
 8007cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <prvHeapInit+0xb4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <prvHeapInit+0xb4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	1ad2      	subs	r2, r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <prvHeapInit+0xb4>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4a0a      	ldr	r2, [pc, #40]	; (8007d30 <prvHeapInit+0xb8>)
 8007d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <prvHeapInit+0xbc>)
 8007d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d10:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <prvHeapInit+0xc0>)
 8007d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d16:	601a      	str	r2, [r3, #0]
}
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	2000058c 	.word	0x2000058c
 8007d28:	200024cc 	.word	0x200024cc
 8007d2c:	200024d4 	.word	0x200024d4
 8007d30:	200024dc 	.word	0x200024dc
 8007d34:	200024d8 	.word	0x200024d8
 8007d38:	200024e0 	.word	0x200024e0

08007d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d44:	4b27      	ldr	r3, [pc, #156]	; (8007de4 <prvInsertBlockIntoFreeList+0xa8>)
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e002      	b.n	8007d50 <prvInsertBlockIntoFreeList+0x14>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d8f7      	bhi.n	8007d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	4413      	add	r3, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d108      	bne.n	8007d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	441a      	add	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	441a      	add	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d118      	bne.n	8007dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <prvInsertBlockIntoFreeList+0xac>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d00d      	beq.n	8007dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	441a      	add	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e008      	b.n	8007dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dba:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <prvInsertBlockIntoFreeList+0xac>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	e003      	b.n	8007dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d002      	beq.n	8007dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	200024cc 	.word	0x200024cc
 8007de8:	200024d4 	.word	0x200024d4

08007dec <__errno>:
 8007dec:	4b01      	ldr	r3, [pc, #4]	; (8007df4 <__errno+0x8>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000010 	.word	0x20000010

08007df8 <__libc_init_array>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	4e0c      	ldr	r6, [pc, #48]	; (8007e30 <__libc_init_array+0x38>)
 8007dfe:	4c0d      	ldr	r4, [pc, #52]	; (8007e34 <__libc_init_array+0x3c>)
 8007e00:	1ba4      	subs	r4, r4, r6
 8007e02:	10a4      	asrs	r4, r4, #2
 8007e04:	42a5      	cmp	r5, r4
 8007e06:	d109      	bne.n	8007e1c <__libc_init_array+0x24>
 8007e08:	f002 f85c 	bl	8009ec4 <_init>
 8007e0c:	2500      	movs	r5, #0
 8007e0e:	4e0a      	ldr	r6, [pc, #40]	; (8007e38 <__libc_init_array+0x40>)
 8007e10:	4c0a      	ldr	r4, [pc, #40]	; (8007e3c <__libc_init_array+0x44>)
 8007e12:	1ba4      	subs	r4, r4, r6
 8007e14:	10a4      	asrs	r4, r4, #2
 8007e16:	42a5      	cmp	r5, r4
 8007e18:	d105      	bne.n	8007e26 <__libc_init_array+0x2e>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e20:	4798      	blx	r3
 8007e22:	3501      	adds	r5, #1
 8007e24:	e7ee      	b.n	8007e04 <__libc_init_array+0xc>
 8007e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e2a:	4798      	blx	r3
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	e7f2      	b.n	8007e16 <__libc_init_array+0x1e>
 8007e30:	0800a380 	.word	0x0800a380
 8007e34:	0800a380 	.word	0x0800a380
 8007e38:	0800a380 	.word	0x0800a380
 8007e3c:	0800a384 	.word	0x0800a384

08007e40 <memcpy>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	1e43      	subs	r3, r0, #1
 8007e44:	440a      	add	r2, r1
 8007e46:	4291      	cmp	r1, r2
 8007e48:	d100      	bne.n	8007e4c <memcpy+0xc>
 8007e4a:	bd10      	pop	{r4, pc}
 8007e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e54:	e7f7      	b.n	8007e46 <memcpy+0x6>

08007e56 <memset>:
 8007e56:	4603      	mov	r3, r0
 8007e58:	4402      	add	r2, r0
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d100      	bne.n	8007e60 <memset+0xa>
 8007e5e:	4770      	bx	lr
 8007e60:	f803 1b01 	strb.w	r1, [r3], #1
 8007e64:	e7f9      	b.n	8007e5a <memset+0x4>

08007e66 <__cvt>:
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	461e      	mov	r6, r3
 8007e6e:	bfbb      	ittet	lt
 8007e70:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007e74:	461e      	movlt	r6, r3
 8007e76:	2300      	movge	r3, #0
 8007e78:	232d      	movlt	r3, #45	; 0x2d
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e7e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007e82:	f027 0720 	bic.w	r7, r7, #32
 8007e86:	2f46      	cmp	r7, #70	; 0x46
 8007e88:	4614      	mov	r4, r2
 8007e8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e8c:	700b      	strb	r3, [r1, #0]
 8007e8e:	d004      	beq.n	8007e9a <__cvt+0x34>
 8007e90:	2f45      	cmp	r7, #69	; 0x45
 8007e92:	d100      	bne.n	8007e96 <__cvt+0x30>
 8007e94:	3501      	adds	r5, #1
 8007e96:	2302      	movs	r3, #2
 8007e98:	e000      	b.n	8007e9c <__cvt+0x36>
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	aa07      	add	r2, sp, #28
 8007e9e:	9204      	str	r2, [sp, #16]
 8007ea0:	aa06      	add	r2, sp, #24
 8007ea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ea6:	e9cd 3500 	strd	r3, r5, [sp]
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4633      	mov	r3, r6
 8007eae:	f000 fcd7 	bl	8008860 <_dtoa_r>
 8007eb2:	2f47      	cmp	r7, #71	; 0x47
 8007eb4:	4680      	mov	r8, r0
 8007eb6:	d102      	bne.n	8007ebe <__cvt+0x58>
 8007eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007eba:	07db      	lsls	r3, r3, #31
 8007ebc:	d526      	bpl.n	8007f0c <__cvt+0xa6>
 8007ebe:	2f46      	cmp	r7, #70	; 0x46
 8007ec0:	eb08 0905 	add.w	r9, r8, r5
 8007ec4:	d111      	bne.n	8007eea <__cvt+0x84>
 8007ec6:	f898 3000 	ldrb.w	r3, [r8]
 8007eca:	2b30      	cmp	r3, #48	; 0x30
 8007ecc:	d10a      	bne.n	8007ee4 <__cvt+0x7e>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	f7f8 fd67 	bl	80009a8 <__aeabi_dcmpeq>
 8007eda:	b918      	cbnz	r0, 8007ee4 <__cvt+0x7e>
 8007edc:	f1c5 0501 	rsb	r5, r5, #1
 8007ee0:	f8ca 5000 	str.w	r5, [sl]
 8007ee4:	f8da 3000 	ldr.w	r3, [sl]
 8007ee8:	4499      	add	r9, r3
 8007eea:	2200      	movs	r2, #0
 8007eec:	2300      	movs	r3, #0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	f7f8 fd59 	bl	80009a8 <__aeabi_dcmpeq>
 8007ef6:	b938      	cbnz	r0, 8007f08 <__cvt+0xa2>
 8007ef8:	2230      	movs	r2, #48	; 0x30
 8007efa:	9b07      	ldr	r3, [sp, #28]
 8007efc:	454b      	cmp	r3, r9
 8007efe:	d205      	bcs.n	8007f0c <__cvt+0xa6>
 8007f00:	1c59      	adds	r1, r3, #1
 8007f02:	9107      	str	r1, [sp, #28]
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	e7f8      	b.n	8007efa <__cvt+0x94>
 8007f08:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	9b07      	ldr	r3, [sp, #28]
 8007f10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f12:	eba3 0308 	sub.w	r3, r3, r8
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	b008      	add	sp, #32
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f1e <__exponent>:
 8007f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f20:	2900      	cmp	r1, #0
 8007f22:	bfb4      	ite	lt
 8007f24:	232d      	movlt	r3, #45	; 0x2d
 8007f26:	232b      	movge	r3, #43	; 0x2b
 8007f28:	4604      	mov	r4, r0
 8007f2a:	bfb8      	it	lt
 8007f2c:	4249      	neglt	r1, r1
 8007f2e:	2909      	cmp	r1, #9
 8007f30:	f804 2b02 	strb.w	r2, [r4], #2
 8007f34:	7043      	strb	r3, [r0, #1]
 8007f36:	dd21      	ble.n	8007f7c <__exponent+0x5e>
 8007f38:	f10d 0307 	add.w	r3, sp, #7
 8007f3c:	461f      	mov	r7, r3
 8007f3e:	260a      	movs	r6, #10
 8007f40:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f44:	fb06 1115 	mls	r1, r6, r5, r1
 8007f48:	2d09      	cmp	r5, #9
 8007f4a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007f4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f52:	f103 32ff 	add.w	r2, r3, #4294967295
 8007f56:	4629      	mov	r1, r5
 8007f58:	dc09      	bgt.n	8007f6e <__exponent+0x50>
 8007f5a:	3130      	adds	r1, #48	; 0x30
 8007f5c:	3b02      	subs	r3, #2
 8007f5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f62:	42bb      	cmp	r3, r7
 8007f64:	4622      	mov	r2, r4
 8007f66:	d304      	bcc.n	8007f72 <__exponent+0x54>
 8007f68:	1a10      	subs	r0, r2, r0
 8007f6a:	b003      	add	sp, #12
 8007f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6e:	4613      	mov	r3, r2
 8007f70:	e7e6      	b.n	8007f40 <__exponent+0x22>
 8007f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f76:	f804 2b01 	strb.w	r2, [r4], #1
 8007f7a:	e7f2      	b.n	8007f62 <__exponent+0x44>
 8007f7c:	2330      	movs	r3, #48	; 0x30
 8007f7e:	4419      	add	r1, r3
 8007f80:	7083      	strb	r3, [r0, #2]
 8007f82:	1d02      	adds	r2, r0, #4
 8007f84:	70c1      	strb	r1, [r0, #3]
 8007f86:	e7ef      	b.n	8007f68 <__exponent+0x4a>

08007f88 <_printf_float>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	b091      	sub	sp, #68	; 0x44
 8007f8e:	460c      	mov	r4, r1
 8007f90:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007f92:	4693      	mov	fp, r2
 8007f94:	461e      	mov	r6, r3
 8007f96:	4605      	mov	r5, r0
 8007f98:	f001 fa16 	bl	80093c8 <_localeconv_r>
 8007f9c:	6803      	ldr	r3, [r0, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa2:	f7f8 f8d5 	bl	8000150 <strlen>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	930e      	str	r3, [sp, #56]	; 0x38
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	900a      	str	r0, [sp, #40]	; 0x28
 8007fae:	3307      	adds	r3, #7
 8007fb0:	f023 0307 	bic.w	r3, r3, #7
 8007fb4:	f103 0208 	add.w	r2, r3, #8
 8007fb8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007fbc:	f8d4 a000 	ldr.w	sl, [r4]
 8007fc0:	603a      	str	r2, [r7, #0]
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007fce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd8:	4ba6      	ldr	r3, [pc, #664]	; (8008274 <_printf_float+0x2ec>)
 8007fda:	4638      	mov	r0, r7
 8007fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fde:	f7f8 fd15 	bl	8000a0c <__aeabi_dcmpun>
 8007fe2:	bb68      	cbnz	r0, 8008040 <_printf_float+0xb8>
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	4ba2      	ldr	r3, [pc, #648]	; (8008274 <_printf_float+0x2ec>)
 8007fea:	4638      	mov	r0, r7
 8007fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fee:	f7f8 fcef 	bl	80009d0 <__aeabi_dcmple>
 8007ff2:	bb28      	cbnz	r0, 8008040 <_printf_float+0xb8>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	f7f8 fcde 	bl	80009bc <__aeabi_dcmplt>
 8008000:	b110      	cbz	r0, 8008008 <_printf_float+0x80>
 8008002:	232d      	movs	r3, #45	; 0x2d
 8008004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008008:	4f9b      	ldr	r7, [pc, #620]	; (8008278 <_printf_float+0x2f0>)
 800800a:	4b9c      	ldr	r3, [pc, #624]	; (800827c <_printf_float+0x2f4>)
 800800c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008010:	bf98      	it	ls
 8008012:	461f      	movls	r7, r3
 8008014:	2303      	movs	r3, #3
 8008016:	f04f 0900 	mov.w	r9, #0
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	f02a 0304 	bic.w	r3, sl, #4
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	9600      	str	r6, [sp, #0]
 8008024:	465b      	mov	r3, fp
 8008026:	aa0f      	add	r2, sp, #60	; 0x3c
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 f9e2 	bl	80083f4 <_printf_common>
 8008030:	3001      	adds	r0, #1
 8008032:	f040 8090 	bne.w	8008156 <_printf_float+0x1ce>
 8008036:	f04f 30ff 	mov.w	r0, #4294967295
 800803a:	b011      	add	sp, #68	; 0x44
 800803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008040:	463a      	mov	r2, r7
 8008042:	464b      	mov	r3, r9
 8008044:	4638      	mov	r0, r7
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fce0 	bl	8000a0c <__aeabi_dcmpun>
 800804c:	b110      	cbz	r0, 8008054 <_printf_float+0xcc>
 800804e:	4f8c      	ldr	r7, [pc, #560]	; (8008280 <_printf_float+0x2f8>)
 8008050:	4b8c      	ldr	r3, [pc, #560]	; (8008284 <_printf_float+0x2fc>)
 8008052:	e7db      	b.n	800800c <_printf_float+0x84>
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	a80d      	add	r0, sp, #52	; 0x34
 800805e:	a90e      	add	r1, sp, #56	; 0x38
 8008060:	d140      	bne.n	80080e4 <_printf_float+0x15c>
 8008062:	2306      	movs	r3, #6
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	f04f 0c00 	mov.w	ip, #0
 800806a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800806e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	6022      	str	r2, [r4, #0]
 8008076:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	463a      	mov	r2, r7
 800807e:	464b      	mov	r3, r9
 8008080:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008084:	4628      	mov	r0, r5
 8008086:	f7ff feee 	bl	8007e66 <__cvt>
 800808a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800808e:	2b47      	cmp	r3, #71	; 0x47
 8008090:	4607      	mov	r7, r0
 8008092:	d109      	bne.n	80080a8 <_printf_float+0x120>
 8008094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008096:	1cd8      	adds	r0, r3, #3
 8008098:	db02      	blt.n	80080a0 <_printf_float+0x118>
 800809a:	6862      	ldr	r2, [r4, #4]
 800809c:	4293      	cmp	r3, r2
 800809e:	dd47      	ble.n	8008130 <_printf_float+0x1a8>
 80080a0:	f1a8 0802 	sub.w	r8, r8, #2
 80080a4:	fa5f f888 	uxtb.w	r8, r8
 80080a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80080ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080ae:	d824      	bhi.n	80080fa <_printf_float+0x172>
 80080b0:	3901      	subs	r1, #1
 80080b2:	4642      	mov	r2, r8
 80080b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080b8:	910d      	str	r1, [sp, #52]	; 0x34
 80080ba:	f7ff ff30 	bl	8007f1e <__exponent>
 80080be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c0:	4681      	mov	r9, r0
 80080c2:	1813      	adds	r3, r2, r0
 80080c4:	2a01      	cmp	r2, #1
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	dc02      	bgt.n	80080d0 <_printf_float+0x148>
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	07d1      	lsls	r1, r2, #31
 80080ce:	d501      	bpl.n	80080d4 <_printf_float+0x14c>
 80080d0:	3301      	adds	r3, #1
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0a2      	beq.n	8008022 <_printf_float+0x9a>
 80080dc:	232d      	movs	r3, #45	; 0x2d
 80080de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e2:	e79e      	b.n	8008022 <_printf_float+0x9a>
 80080e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80080e8:	f000 816e 	beq.w	80083c8 <_printf_float+0x440>
 80080ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080f0:	d1b9      	bne.n	8008066 <_printf_float+0xde>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1b7      	bne.n	8008066 <_printf_float+0xde>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e7b4      	b.n	8008064 <_printf_float+0xdc>
 80080fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80080fe:	d119      	bne.n	8008134 <_printf_float+0x1ac>
 8008100:	2900      	cmp	r1, #0
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	dd0c      	ble.n	8008120 <_printf_float+0x198>
 8008106:	6121      	str	r1, [r4, #16]
 8008108:	b913      	cbnz	r3, 8008110 <_printf_float+0x188>
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	07d2      	lsls	r2, r2, #31
 800810e:	d502      	bpl.n	8008116 <_printf_float+0x18e>
 8008110:	3301      	adds	r3, #1
 8008112:	440b      	add	r3, r1
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008118:	f04f 0900 	mov.w	r9, #0
 800811c:	65a3      	str	r3, [r4, #88]	; 0x58
 800811e:	e7d9      	b.n	80080d4 <_printf_float+0x14c>
 8008120:	b913      	cbnz	r3, 8008128 <_printf_float+0x1a0>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	07d0      	lsls	r0, r2, #31
 8008126:	d501      	bpl.n	800812c <_printf_float+0x1a4>
 8008128:	3302      	adds	r3, #2
 800812a:	e7f3      	b.n	8008114 <_printf_float+0x18c>
 800812c:	2301      	movs	r3, #1
 800812e:	e7f1      	b.n	8008114 <_printf_float+0x18c>
 8008130:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008134:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008138:	4293      	cmp	r3, r2
 800813a:	db05      	blt.n	8008148 <_printf_float+0x1c0>
 800813c:	6822      	ldr	r2, [r4, #0]
 800813e:	6123      	str	r3, [r4, #16]
 8008140:	07d1      	lsls	r1, r2, #31
 8008142:	d5e8      	bpl.n	8008116 <_printf_float+0x18e>
 8008144:	3301      	adds	r3, #1
 8008146:	e7e5      	b.n	8008114 <_printf_float+0x18c>
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfcc      	ite	gt
 800814c:	2301      	movgt	r3, #1
 800814e:	f1c3 0302 	rsble	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	e7de      	b.n	8008114 <_printf_float+0x18c>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	055a      	lsls	r2, r3, #21
 800815a:	d407      	bmi.n	800816c <_printf_float+0x1e4>
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	463a      	mov	r2, r7
 8008160:	4659      	mov	r1, fp
 8008162:	4628      	mov	r0, r5
 8008164:	47b0      	blx	r6
 8008166:	3001      	adds	r0, #1
 8008168:	d129      	bne.n	80081be <_printf_float+0x236>
 800816a:	e764      	b.n	8008036 <_printf_float+0xae>
 800816c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008170:	f240 80d7 	bls.w	8008322 <_printf_float+0x39a>
 8008174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008178:	2200      	movs	r2, #0
 800817a:	2300      	movs	r3, #0
 800817c:	f7f8 fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8008180:	b388      	cbz	r0, 80081e6 <_printf_float+0x25e>
 8008182:	2301      	movs	r3, #1
 8008184:	4a40      	ldr	r2, [pc, #256]	; (8008288 <_printf_float+0x300>)
 8008186:	4659      	mov	r1, fp
 8008188:	4628      	mov	r0, r5
 800818a:	47b0      	blx	r6
 800818c:	3001      	adds	r0, #1
 800818e:	f43f af52 	beq.w	8008036 <_printf_float+0xae>
 8008192:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008196:	429a      	cmp	r2, r3
 8008198:	db02      	blt.n	80081a0 <_printf_float+0x218>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d8      	lsls	r0, r3, #31
 800819e:	d50e      	bpl.n	80081be <_printf_float+0x236>
 80081a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a4:	4659      	mov	r1, fp
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b0      	blx	r6
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af43 	beq.w	8008036 <_printf_float+0xae>
 80081b0:	2700      	movs	r7, #0
 80081b2:	f104 081a 	add.w	r8, r4, #26
 80081b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b8:	3b01      	subs	r3, #1
 80081ba:	42bb      	cmp	r3, r7
 80081bc:	dc09      	bgt.n	80081d2 <_printf_float+0x24a>
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	079f      	lsls	r7, r3, #30
 80081c2:	f100 80fd 	bmi.w	80083c0 <_printf_float+0x438>
 80081c6:	68e0      	ldr	r0, [r4, #12]
 80081c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081ca:	4298      	cmp	r0, r3
 80081cc:	bfb8      	it	lt
 80081ce:	4618      	movlt	r0, r3
 80081d0:	e733      	b.n	800803a <_printf_float+0xb2>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4642      	mov	r2, r8
 80081d6:	4659      	mov	r1, fp
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	3001      	adds	r0, #1
 80081de:	f43f af2a 	beq.w	8008036 <_printf_float+0xae>
 80081e2:	3701      	adds	r7, #1
 80081e4:	e7e7      	b.n	80081b6 <_printf_float+0x22e>
 80081e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc2b      	bgt.n	8008244 <_printf_float+0x2bc>
 80081ec:	2301      	movs	r3, #1
 80081ee:	4a26      	ldr	r2, [pc, #152]	; (8008288 <_printf_float+0x300>)
 80081f0:	4659      	mov	r1, fp
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b0      	blx	r6
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af1d 	beq.w	8008036 <_printf_float+0xae>
 80081fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081fe:	b923      	cbnz	r3, 800820a <_printf_float+0x282>
 8008200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008202:	b913      	cbnz	r3, 800820a <_printf_float+0x282>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d5d9      	bpl.n	80081be <_printf_float+0x236>
 800820a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800820e:	4659      	mov	r1, fp
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	3001      	adds	r0, #1
 8008216:	f43f af0e 	beq.w	8008036 <_printf_float+0xae>
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	f104 091a 	add.w	r9, r4, #26
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	425b      	negs	r3, r3
 8008226:	4543      	cmp	r3, r8
 8008228:	dc01      	bgt.n	800822e <_printf_float+0x2a6>
 800822a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822c:	e797      	b.n	800815e <_printf_float+0x1d6>
 800822e:	2301      	movs	r3, #1
 8008230:	464a      	mov	r2, r9
 8008232:	4659      	mov	r1, fp
 8008234:	4628      	mov	r0, r5
 8008236:	47b0      	blx	r6
 8008238:	3001      	adds	r0, #1
 800823a:	f43f aefc 	beq.w	8008036 <_printf_float+0xae>
 800823e:	f108 0801 	add.w	r8, r8, #1
 8008242:	e7ee      	b.n	8008222 <_printf_float+0x29a>
 8008244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008248:	429a      	cmp	r2, r3
 800824a:	bfa8      	it	ge
 800824c:	461a      	movge	r2, r3
 800824e:	2a00      	cmp	r2, #0
 8008250:	4690      	mov	r8, r2
 8008252:	dd07      	ble.n	8008264 <_printf_float+0x2dc>
 8008254:	4613      	mov	r3, r2
 8008256:	4659      	mov	r1, fp
 8008258:	463a      	mov	r2, r7
 800825a:	4628      	mov	r0, r5
 800825c:	47b0      	blx	r6
 800825e:	3001      	adds	r0, #1
 8008260:	f43f aee9 	beq.w	8008036 <_printf_float+0xae>
 8008264:	f104 031a 	add.w	r3, r4, #26
 8008268:	f04f 0a00 	mov.w	sl, #0
 800826c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008270:	930b      	str	r3, [sp, #44]	; 0x2c
 8008272:	e015      	b.n	80082a0 <_printf_float+0x318>
 8008274:	7fefffff 	.word	0x7fefffff
 8008278:	0800a128 	.word	0x0800a128
 800827c:	0800a124 	.word	0x0800a124
 8008280:	0800a130 	.word	0x0800a130
 8008284:	0800a12c 	.word	0x0800a12c
 8008288:	0800a134 	.word	0x0800a134
 800828c:	2301      	movs	r3, #1
 800828e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008290:	4659      	mov	r1, fp
 8008292:	4628      	mov	r0, r5
 8008294:	47b0      	blx	r6
 8008296:	3001      	adds	r0, #1
 8008298:	f43f aecd 	beq.w	8008036 <_printf_float+0xae>
 800829c:	f10a 0a01 	add.w	sl, sl, #1
 80082a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80082a4:	eba9 0308 	sub.w	r3, r9, r8
 80082a8:	4553      	cmp	r3, sl
 80082aa:	dcef      	bgt.n	800828c <_printf_float+0x304>
 80082ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082b0:	429a      	cmp	r2, r3
 80082b2:	444f      	add	r7, r9
 80082b4:	db14      	blt.n	80082e0 <_printf_float+0x358>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	07da      	lsls	r2, r3, #31
 80082ba:	d411      	bmi.n	80082e0 <_printf_float+0x358>
 80082bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082c0:	eba3 0209 	sub.w	r2, r3, r9
 80082c4:	eba3 0901 	sub.w	r9, r3, r1
 80082c8:	4591      	cmp	r9, r2
 80082ca:	bfa8      	it	ge
 80082cc:	4691      	movge	r9, r2
 80082ce:	f1b9 0f00 	cmp.w	r9, #0
 80082d2:	dc0d      	bgt.n	80082f0 <_printf_float+0x368>
 80082d4:	2700      	movs	r7, #0
 80082d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082da:	f104 081a 	add.w	r8, r4, #26
 80082de:	e018      	b.n	8008312 <_printf_float+0x38a>
 80082e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082e4:	4659      	mov	r1, fp
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b0      	blx	r6
 80082ea:	3001      	adds	r0, #1
 80082ec:	d1e6      	bne.n	80082bc <_printf_float+0x334>
 80082ee:	e6a2      	b.n	8008036 <_printf_float+0xae>
 80082f0:	464b      	mov	r3, r9
 80082f2:	463a      	mov	r2, r7
 80082f4:	4659      	mov	r1, fp
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b0      	blx	r6
 80082fa:	3001      	adds	r0, #1
 80082fc:	d1ea      	bne.n	80082d4 <_printf_float+0x34c>
 80082fe:	e69a      	b.n	8008036 <_printf_float+0xae>
 8008300:	2301      	movs	r3, #1
 8008302:	4642      	mov	r2, r8
 8008304:	4659      	mov	r1, fp
 8008306:	4628      	mov	r0, r5
 8008308:	47b0      	blx	r6
 800830a:	3001      	adds	r0, #1
 800830c:	f43f ae93 	beq.w	8008036 <_printf_float+0xae>
 8008310:	3701      	adds	r7, #1
 8008312:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	eba3 0309 	sub.w	r3, r3, r9
 800831c:	42bb      	cmp	r3, r7
 800831e:	dcef      	bgt.n	8008300 <_printf_float+0x378>
 8008320:	e74d      	b.n	80081be <_printf_float+0x236>
 8008322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008324:	2a01      	cmp	r2, #1
 8008326:	dc01      	bgt.n	800832c <_printf_float+0x3a4>
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d538      	bpl.n	800839e <_printf_float+0x416>
 800832c:	2301      	movs	r3, #1
 800832e:	463a      	mov	r2, r7
 8008330:	4659      	mov	r1, fp
 8008332:	4628      	mov	r0, r5
 8008334:	47b0      	blx	r6
 8008336:	3001      	adds	r0, #1
 8008338:	f43f ae7d 	beq.w	8008036 <_printf_float+0xae>
 800833c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008340:	4659      	mov	r1, fp
 8008342:	4628      	mov	r0, r5
 8008344:	47b0      	blx	r6
 8008346:	3001      	adds	r0, #1
 8008348:	f107 0701 	add.w	r7, r7, #1
 800834c:	f43f ae73 	beq.w	8008036 <_printf_float+0xae>
 8008350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008356:	2200      	movs	r2, #0
 8008358:	f103 38ff 	add.w	r8, r3, #4294967295
 800835c:	2300      	movs	r3, #0
 800835e:	f7f8 fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8008362:	b9c0      	cbnz	r0, 8008396 <_printf_float+0x40e>
 8008364:	4643      	mov	r3, r8
 8008366:	463a      	mov	r2, r7
 8008368:	4659      	mov	r1, fp
 800836a:	4628      	mov	r0, r5
 800836c:	47b0      	blx	r6
 800836e:	3001      	adds	r0, #1
 8008370:	d10d      	bne.n	800838e <_printf_float+0x406>
 8008372:	e660      	b.n	8008036 <_printf_float+0xae>
 8008374:	2301      	movs	r3, #1
 8008376:	4642      	mov	r2, r8
 8008378:	4659      	mov	r1, fp
 800837a:	4628      	mov	r0, r5
 800837c:	47b0      	blx	r6
 800837e:	3001      	adds	r0, #1
 8008380:	f43f ae59 	beq.w	8008036 <_printf_float+0xae>
 8008384:	3701      	adds	r7, #1
 8008386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008388:	3b01      	subs	r3, #1
 800838a:	42bb      	cmp	r3, r7
 800838c:	dcf2      	bgt.n	8008374 <_printf_float+0x3ec>
 800838e:	464b      	mov	r3, r9
 8008390:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008394:	e6e4      	b.n	8008160 <_printf_float+0x1d8>
 8008396:	2700      	movs	r7, #0
 8008398:	f104 081a 	add.w	r8, r4, #26
 800839c:	e7f3      	b.n	8008386 <_printf_float+0x3fe>
 800839e:	2301      	movs	r3, #1
 80083a0:	e7e1      	b.n	8008366 <_printf_float+0x3de>
 80083a2:	2301      	movs	r3, #1
 80083a4:	4642      	mov	r2, r8
 80083a6:	4659      	mov	r1, fp
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b0      	blx	r6
 80083ac:	3001      	adds	r0, #1
 80083ae:	f43f ae42 	beq.w	8008036 <_printf_float+0xae>
 80083b2:	3701      	adds	r7, #1
 80083b4:	68e3      	ldr	r3, [r4, #12]
 80083b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	42bb      	cmp	r3, r7
 80083bc:	dcf1      	bgt.n	80083a2 <_printf_float+0x41a>
 80083be:	e702      	b.n	80081c6 <_printf_float+0x23e>
 80083c0:	2700      	movs	r7, #0
 80083c2:	f104 0819 	add.w	r8, r4, #25
 80083c6:	e7f5      	b.n	80083b4 <_printf_float+0x42c>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f43f ae94 	beq.w	80080f6 <_printf_float+0x16e>
 80083ce:	f04f 0c00 	mov.w	ip, #0
 80083d2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80083d6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80083da:	6022      	str	r2, [r4, #0]
 80083dc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80083e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	463a      	mov	r2, r7
 80083e8:	464b      	mov	r3, r9
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7ff fd3b 	bl	8007e66 <__cvt>
 80083f0:	4607      	mov	r7, r0
 80083f2:	e64f      	b.n	8008094 <_printf_float+0x10c>

080083f4 <_printf_common>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	4691      	mov	r9, r2
 80083fa:	461f      	mov	r7, r3
 80083fc:	688a      	ldr	r2, [r1, #8]
 80083fe:	690b      	ldr	r3, [r1, #16]
 8008400:	4606      	mov	r6, r0
 8008402:	4293      	cmp	r3, r2
 8008404:	bfb8      	it	lt
 8008406:	4613      	movlt	r3, r2
 8008408:	f8c9 3000 	str.w	r3, [r9]
 800840c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008410:	460c      	mov	r4, r1
 8008412:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008416:	b112      	cbz	r2, 800841e <_printf_common+0x2a>
 8008418:	3301      	adds	r3, #1
 800841a:	f8c9 3000 	str.w	r3, [r9]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	0699      	lsls	r1, r3, #26
 8008422:	bf42      	ittt	mi
 8008424:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008428:	3302      	addmi	r3, #2
 800842a:	f8c9 3000 	strmi.w	r3, [r9]
 800842e:	6825      	ldr	r5, [r4, #0]
 8008430:	f015 0506 	ands.w	r5, r5, #6
 8008434:	d107      	bne.n	8008446 <_printf_common+0x52>
 8008436:	f104 0a19 	add.w	sl, r4, #25
 800843a:	68e3      	ldr	r3, [r4, #12]
 800843c:	f8d9 2000 	ldr.w	r2, [r9]
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	42ab      	cmp	r3, r5
 8008444:	dc29      	bgt.n	800849a <_printf_common+0xa6>
 8008446:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800844a:	6822      	ldr	r2, [r4, #0]
 800844c:	3300      	adds	r3, #0
 800844e:	bf18      	it	ne
 8008450:	2301      	movne	r3, #1
 8008452:	0692      	lsls	r2, r2, #26
 8008454:	d42e      	bmi.n	80084b4 <_printf_common+0xc0>
 8008456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800845a:	4639      	mov	r1, r7
 800845c:	4630      	mov	r0, r6
 800845e:	47c0      	blx	r8
 8008460:	3001      	adds	r0, #1
 8008462:	d021      	beq.n	80084a8 <_printf_common+0xb4>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	68e5      	ldr	r5, [r4, #12]
 8008468:	f003 0306 	and.w	r3, r3, #6
 800846c:	2b04      	cmp	r3, #4
 800846e:	bf18      	it	ne
 8008470:	2500      	movne	r5, #0
 8008472:	f8d9 2000 	ldr.w	r2, [r9]
 8008476:	f04f 0900 	mov.w	r9, #0
 800847a:	bf08      	it	eq
 800847c:	1aad      	subeq	r5, r5, r2
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	6922      	ldr	r2, [r4, #16]
 8008482:	bf08      	it	eq
 8008484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008488:	4293      	cmp	r3, r2
 800848a:	bfc4      	itt	gt
 800848c:	1a9b      	subgt	r3, r3, r2
 800848e:	18ed      	addgt	r5, r5, r3
 8008490:	341a      	adds	r4, #26
 8008492:	454d      	cmp	r5, r9
 8008494:	d11a      	bne.n	80084cc <_printf_common+0xd8>
 8008496:	2000      	movs	r0, #0
 8008498:	e008      	b.n	80084ac <_printf_common+0xb8>
 800849a:	2301      	movs	r3, #1
 800849c:	4652      	mov	r2, sl
 800849e:	4639      	mov	r1, r7
 80084a0:	4630      	mov	r0, r6
 80084a2:	47c0      	blx	r8
 80084a4:	3001      	adds	r0, #1
 80084a6:	d103      	bne.n	80084b0 <_printf_common+0xbc>
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b0:	3501      	adds	r5, #1
 80084b2:	e7c2      	b.n	800843a <_printf_common+0x46>
 80084b4:	2030      	movs	r0, #48	; 0x30
 80084b6:	18e1      	adds	r1, r4, r3
 80084b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084c2:	4422      	add	r2, r4
 80084c4:	3302      	adds	r3, #2
 80084c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084ca:	e7c4      	b.n	8008456 <_printf_common+0x62>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4622      	mov	r2, r4
 80084d0:	4639      	mov	r1, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d0e6      	beq.n	80084a8 <_printf_common+0xb4>
 80084da:	f109 0901 	add.w	r9, r9, #1
 80084de:	e7d8      	b.n	8008492 <_printf_common+0x9e>

080084e0 <_printf_i>:
 80084e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084e8:	460c      	mov	r4, r1
 80084ea:	7e09      	ldrb	r1, [r1, #24]
 80084ec:	b085      	sub	sp, #20
 80084ee:	296e      	cmp	r1, #110	; 0x6e
 80084f0:	4617      	mov	r7, r2
 80084f2:	4606      	mov	r6, r0
 80084f4:	4698      	mov	r8, r3
 80084f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084f8:	f000 80b3 	beq.w	8008662 <_printf_i+0x182>
 80084fc:	d822      	bhi.n	8008544 <_printf_i+0x64>
 80084fe:	2963      	cmp	r1, #99	; 0x63
 8008500:	d036      	beq.n	8008570 <_printf_i+0x90>
 8008502:	d80a      	bhi.n	800851a <_printf_i+0x3a>
 8008504:	2900      	cmp	r1, #0
 8008506:	f000 80b9 	beq.w	800867c <_printf_i+0x19c>
 800850a:	2958      	cmp	r1, #88	; 0x58
 800850c:	f000 8083 	beq.w	8008616 <_printf_i+0x136>
 8008510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008514:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008518:	e032      	b.n	8008580 <_printf_i+0xa0>
 800851a:	2964      	cmp	r1, #100	; 0x64
 800851c:	d001      	beq.n	8008522 <_printf_i+0x42>
 800851e:	2969      	cmp	r1, #105	; 0x69
 8008520:	d1f6      	bne.n	8008510 <_printf_i+0x30>
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	6813      	ldr	r3, [r2, #0]
 8008526:	0605      	lsls	r5, r0, #24
 8008528:	f103 0104 	add.w	r1, r3, #4
 800852c:	d52a      	bpl.n	8008584 <_printf_i+0xa4>
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	da03      	bge.n	800853e <_printf_i+0x5e>
 8008536:	222d      	movs	r2, #45	; 0x2d
 8008538:	425b      	negs	r3, r3
 800853a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800853e:	486f      	ldr	r0, [pc, #444]	; (80086fc <_printf_i+0x21c>)
 8008540:	220a      	movs	r2, #10
 8008542:	e039      	b.n	80085b8 <_printf_i+0xd8>
 8008544:	2973      	cmp	r1, #115	; 0x73
 8008546:	f000 809d 	beq.w	8008684 <_printf_i+0x1a4>
 800854a:	d808      	bhi.n	800855e <_printf_i+0x7e>
 800854c:	296f      	cmp	r1, #111	; 0x6f
 800854e:	d020      	beq.n	8008592 <_printf_i+0xb2>
 8008550:	2970      	cmp	r1, #112	; 0x70
 8008552:	d1dd      	bne.n	8008510 <_printf_i+0x30>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	f043 0320 	orr.w	r3, r3, #32
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	e003      	b.n	8008566 <_printf_i+0x86>
 800855e:	2975      	cmp	r1, #117	; 0x75
 8008560:	d017      	beq.n	8008592 <_printf_i+0xb2>
 8008562:	2978      	cmp	r1, #120	; 0x78
 8008564:	d1d4      	bne.n	8008510 <_printf_i+0x30>
 8008566:	2378      	movs	r3, #120	; 0x78
 8008568:	4865      	ldr	r0, [pc, #404]	; (8008700 <_printf_i+0x220>)
 800856a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800856e:	e055      	b.n	800861c <_printf_i+0x13c>
 8008570:	6813      	ldr	r3, [r2, #0]
 8008572:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008576:	1d19      	adds	r1, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6011      	str	r1, [r2, #0]
 800857c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008580:	2301      	movs	r3, #1
 8008582:	e08c      	b.n	800869e <_printf_i+0x1be>
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800858a:	6011      	str	r1, [r2, #0]
 800858c:	bf18      	it	ne
 800858e:	b21b      	sxthne	r3, r3
 8008590:	e7cf      	b.n	8008532 <_printf_i+0x52>
 8008592:	6813      	ldr	r3, [r2, #0]
 8008594:	6825      	ldr	r5, [r4, #0]
 8008596:	1d18      	adds	r0, r3, #4
 8008598:	6010      	str	r0, [r2, #0]
 800859a:	0628      	lsls	r0, r5, #24
 800859c:	d501      	bpl.n	80085a2 <_printf_i+0xc2>
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	e002      	b.n	80085a8 <_printf_i+0xc8>
 80085a2:	0668      	lsls	r0, r5, #25
 80085a4:	d5fb      	bpl.n	800859e <_printf_i+0xbe>
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	296f      	cmp	r1, #111	; 0x6f
 80085aa:	bf14      	ite	ne
 80085ac:	220a      	movne	r2, #10
 80085ae:	2208      	moveq	r2, #8
 80085b0:	4852      	ldr	r0, [pc, #328]	; (80086fc <_printf_i+0x21c>)
 80085b2:	2100      	movs	r1, #0
 80085b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085b8:	6865      	ldr	r5, [r4, #4]
 80085ba:	2d00      	cmp	r5, #0
 80085bc:	60a5      	str	r5, [r4, #8]
 80085be:	f2c0 8095 	blt.w	80086ec <_printf_i+0x20c>
 80085c2:	6821      	ldr	r1, [r4, #0]
 80085c4:	f021 0104 	bic.w	r1, r1, #4
 80085c8:	6021      	str	r1, [r4, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d13d      	bne.n	800864a <_printf_i+0x16a>
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	f040 808e 	bne.w	80086f0 <_printf_i+0x210>
 80085d4:	4665      	mov	r5, ip
 80085d6:	2a08      	cmp	r2, #8
 80085d8:	d10b      	bne.n	80085f2 <_printf_i+0x112>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	07db      	lsls	r3, r3, #31
 80085de:	d508      	bpl.n	80085f2 <_printf_i+0x112>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	bfde      	ittt	le
 80085e8:	2330      	movle	r3, #48	; 0x30
 80085ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085f2:	ebac 0305 	sub.w	r3, ip, r5
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	f8cd 8000 	str.w	r8, [sp]
 80085fc:	463b      	mov	r3, r7
 80085fe:	aa03      	add	r2, sp, #12
 8008600:	4621      	mov	r1, r4
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff fef6 	bl	80083f4 <_printf_common>
 8008608:	3001      	adds	r0, #1
 800860a:	d14d      	bne.n	80086a8 <_printf_i+0x1c8>
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	b005      	add	sp, #20
 8008612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008616:	4839      	ldr	r0, [pc, #228]	; (80086fc <_printf_i+0x21c>)
 8008618:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800861c:	6813      	ldr	r3, [r2, #0]
 800861e:	6821      	ldr	r1, [r4, #0]
 8008620:	1d1d      	adds	r5, r3, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6015      	str	r5, [r2, #0]
 8008626:	060a      	lsls	r2, r1, #24
 8008628:	d50b      	bpl.n	8008642 <_printf_i+0x162>
 800862a:	07ca      	lsls	r2, r1, #31
 800862c:	bf44      	itt	mi
 800862e:	f041 0120 	orrmi.w	r1, r1, #32
 8008632:	6021      	strmi	r1, [r4, #0]
 8008634:	b91b      	cbnz	r3, 800863e <_printf_i+0x15e>
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	f022 0220 	bic.w	r2, r2, #32
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	2210      	movs	r2, #16
 8008640:	e7b7      	b.n	80085b2 <_printf_i+0xd2>
 8008642:	064d      	lsls	r5, r1, #25
 8008644:	bf48      	it	mi
 8008646:	b29b      	uxthmi	r3, r3
 8008648:	e7ef      	b.n	800862a <_printf_i+0x14a>
 800864a:	4665      	mov	r5, ip
 800864c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008650:	fb02 3311 	mls	r3, r2, r1, r3
 8008654:	5cc3      	ldrb	r3, [r0, r3]
 8008656:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800865a:	460b      	mov	r3, r1
 800865c:	2900      	cmp	r1, #0
 800865e:	d1f5      	bne.n	800864c <_printf_i+0x16c>
 8008660:	e7b9      	b.n	80085d6 <_printf_i+0xf6>
 8008662:	6813      	ldr	r3, [r2, #0]
 8008664:	6825      	ldr	r5, [r4, #0]
 8008666:	1d18      	adds	r0, r3, #4
 8008668:	6961      	ldr	r1, [r4, #20]
 800866a:	6010      	str	r0, [r2, #0]
 800866c:	0628      	lsls	r0, r5, #24
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	d501      	bpl.n	8008676 <_printf_i+0x196>
 8008672:	6019      	str	r1, [r3, #0]
 8008674:	e002      	b.n	800867c <_printf_i+0x19c>
 8008676:	066a      	lsls	r2, r5, #25
 8008678:	d5fb      	bpl.n	8008672 <_printf_i+0x192>
 800867a:	8019      	strh	r1, [r3, #0]
 800867c:	2300      	movs	r3, #0
 800867e:	4665      	mov	r5, ip
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	e7b9      	b.n	80085f8 <_printf_i+0x118>
 8008684:	6813      	ldr	r3, [r2, #0]
 8008686:	1d19      	adds	r1, r3, #4
 8008688:	6011      	str	r1, [r2, #0]
 800868a:	681d      	ldr	r5, [r3, #0]
 800868c:	6862      	ldr	r2, [r4, #4]
 800868e:	2100      	movs	r1, #0
 8008690:	4628      	mov	r0, r5
 8008692:	f000 feaf 	bl	80093f4 <memchr>
 8008696:	b108      	cbz	r0, 800869c <_printf_i+0x1bc>
 8008698:	1b40      	subs	r0, r0, r5
 800869a:	6060      	str	r0, [r4, #4]
 800869c:	6863      	ldr	r3, [r4, #4]
 800869e:	6123      	str	r3, [r4, #16]
 80086a0:	2300      	movs	r3, #0
 80086a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a6:	e7a7      	b.n	80085f8 <_printf_i+0x118>
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	462a      	mov	r2, r5
 80086ac:	4639      	mov	r1, r7
 80086ae:	4630      	mov	r0, r6
 80086b0:	47c0      	blx	r8
 80086b2:	3001      	adds	r0, #1
 80086b4:	d0aa      	beq.n	800860c <_printf_i+0x12c>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	079b      	lsls	r3, r3, #30
 80086ba:	d413      	bmi.n	80086e4 <_printf_i+0x204>
 80086bc:	68e0      	ldr	r0, [r4, #12]
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	4298      	cmp	r0, r3
 80086c2:	bfb8      	it	lt
 80086c4:	4618      	movlt	r0, r3
 80086c6:	e7a3      	b.n	8008610 <_printf_i+0x130>
 80086c8:	2301      	movs	r3, #1
 80086ca:	464a      	mov	r2, r9
 80086cc:	4639      	mov	r1, r7
 80086ce:	4630      	mov	r0, r6
 80086d0:	47c0      	blx	r8
 80086d2:	3001      	adds	r0, #1
 80086d4:	d09a      	beq.n	800860c <_printf_i+0x12c>
 80086d6:	3501      	adds	r5, #1
 80086d8:	68e3      	ldr	r3, [r4, #12]
 80086da:	9a03      	ldr	r2, [sp, #12]
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	42ab      	cmp	r3, r5
 80086e0:	dcf2      	bgt.n	80086c8 <_printf_i+0x1e8>
 80086e2:	e7eb      	b.n	80086bc <_printf_i+0x1dc>
 80086e4:	2500      	movs	r5, #0
 80086e6:	f104 0919 	add.w	r9, r4, #25
 80086ea:	e7f5      	b.n	80086d8 <_printf_i+0x1f8>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1ac      	bne.n	800864a <_printf_i+0x16a>
 80086f0:	7803      	ldrb	r3, [r0, #0]
 80086f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fa:	e76c      	b.n	80085d6 <_printf_i+0xf6>
 80086fc:	0800a136 	.word	0x0800a136
 8008700:	0800a147 	.word	0x0800a147

08008704 <siprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800870a:	b500      	push	{lr}
 800870c:	b09c      	sub	sp, #112	; 0x70
 800870e:	ab1d      	add	r3, sp, #116	; 0x74
 8008710:	9002      	str	r0, [sp, #8]
 8008712:	9006      	str	r0, [sp, #24]
 8008714:	9107      	str	r1, [sp, #28]
 8008716:	9104      	str	r1, [sp, #16]
 8008718:	4808      	ldr	r0, [pc, #32]	; (800873c <siprintf+0x38>)
 800871a:	4909      	ldr	r1, [pc, #36]	; (8008740 <siprintf+0x3c>)
 800871c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008720:	9105      	str	r1, [sp, #20]
 8008722:	6800      	ldr	r0, [r0, #0]
 8008724:	a902      	add	r1, sp, #8
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	f001 fa5c 	bl	8009be4 <_svfiprintf_r>
 800872c:	2200      	movs	r2, #0
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	b01c      	add	sp, #112	; 0x70
 8008734:	f85d eb04 	ldr.w	lr, [sp], #4
 8008738:	b003      	add	sp, #12
 800873a:	4770      	bx	lr
 800873c:	20000010 	.word	0x20000010
 8008740:	ffff0208 	.word	0xffff0208

08008744 <quorem>:
 8008744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	6903      	ldr	r3, [r0, #16]
 800874a:	690c      	ldr	r4, [r1, #16]
 800874c:	4680      	mov	r8, r0
 800874e:	42a3      	cmp	r3, r4
 8008750:	f2c0 8084 	blt.w	800885c <quorem+0x118>
 8008754:	3c01      	subs	r4, #1
 8008756:	f101 0714 	add.w	r7, r1, #20
 800875a:	f100 0614 	add.w	r6, r0, #20
 800875e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008762:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008766:	3501      	adds	r5, #1
 8008768:	fbb0 f5f5 	udiv	r5, r0, r5
 800876c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008770:	eb06 030c 	add.w	r3, r6, ip
 8008774:	eb07 090c 	add.w	r9, r7, ip
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	b39d      	cbz	r5, 80087e4 <quorem+0xa0>
 800877c:	f04f 0a00 	mov.w	sl, #0
 8008780:	4638      	mov	r0, r7
 8008782:	46b6      	mov	lr, r6
 8008784:	46d3      	mov	fp, sl
 8008786:	f850 2b04 	ldr.w	r2, [r0], #4
 800878a:	b293      	uxth	r3, r2
 800878c:	fb05 a303 	mla	r3, r5, r3, sl
 8008790:	0c12      	lsrs	r2, r2, #16
 8008792:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008796:	fb05 a202 	mla	r2, r5, r2, sl
 800879a:	b29b      	uxth	r3, r3
 800879c:	ebab 0303 	sub.w	r3, fp, r3
 80087a0:	f8de b000 	ldr.w	fp, [lr]
 80087a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80087a8:	fa1f fb8b 	uxth.w	fp, fp
 80087ac:	445b      	add	r3, fp
 80087ae:	fa1f fb82 	uxth.w	fp, r2
 80087b2:	f8de 2000 	ldr.w	r2, [lr]
 80087b6:	4581      	cmp	r9, r0
 80087b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80087bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087ca:	f84e 3b04 	str.w	r3, [lr], #4
 80087ce:	d2da      	bcs.n	8008786 <quorem+0x42>
 80087d0:	f856 300c 	ldr.w	r3, [r6, ip]
 80087d4:	b933      	cbnz	r3, 80087e4 <quorem+0xa0>
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	3b04      	subs	r3, #4
 80087da:	429e      	cmp	r6, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	d331      	bcc.n	8008844 <quorem+0x100>
 80087e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80087e4:	4640      	mov	r0, r8
 80087e6:	f001 f827 	bl	8009838 <__mcmp>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	db26      	blt.n	800883c <quorem+0xf8>
 80087ee:	4630      	mov	r0, r6
 80087f0:	f04f 0c00 	mov.w	ip, #0
 80087f4:	3501      	adds	r5, #1
 80087f6:	f857 1b04 	ldr.w	r1, [r7], #4
 80087fa:	f8d0 e000 	ldr.w	lr, [r0]
 80087fe:	b28b      	uxth	r3, r1
 8008800:	ebac 0303 	sub.w	r3, ip, r3
 8008804:	fa1f f28e 	uxth.w	r2, lr
 8008808:	4413      	add	r3, r2
 800880a:	0c0a      	lsrs	r2, r1, #16
 800880c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008810:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008814:	b29b      	uxth	r3, r3
 8008816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800881a:	45b9      	cmp	r9, r7
 800881c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008820:	f840 3b04 	str.w	r3, [r0], #4
 8008824:	d2e7      	bcs.n	80087f6 <quorem+0xb2>
 8008826:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800882a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800882e:	b92a      	cbnz	r2, 800883c <quorem+0xf8>
 8008830:	3b04      	subs	r3, #4
 8008832:	429e      	cmp	r6, r3
 8008834:	461a      	mov	r2, r3
 8008836:	d30b      	bcc.n	8008850 <quorem+0x10c>
 8008838:	f8c8 4010 	str.w	r4, [r8, #16]
 800883c:	4628      	mov	r0, r5
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	3b04      	subs	r3, #4
 8008848:	2a00      	cmp	r2, #0
 800884a:	d1c9      	bne.n	80087e0 <quorem+0x9c>
 800884c:	3c01      	subs	r4, #1
 800884e:	e7c4      	b.n	80087da <quorem+0x96>
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	3b04      	subs	r3, #4
 8008854:	2a00      	cmp	r2, #0
 8008856:	d1ef      	bne.n	8008838 <quorem+0xf4>
 8008858:	3c01      	subs	r4, #1
 800885a:	e7ea      	b.n	8008832 <quorem+0xee>
 800885c:	2000      	movs	r0, #0
 800885e:	e7ee      	b.n	800883e <quorem+0xfa>

08008860 <_dtoa_r>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	4616      	mov	r6, r2
 8008866:	461f      	mov	r7, r3
 8008868:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800886a:	b095      	sub	sp, #84	; 0x54
 800886c:	4604      	mov	r4, r0
 800886e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008872:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008876:	b93d      	cbnz	r5, 8008888 <_dtoa_r+0x28>
 8008878:	2010      	movs	r0, #16
 800887a:	f000 fdb3 	bl	80093e4 <malloc>
 800887e:	6260      	str	r0, [r4, #36]	; 0x24
 8008880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008884:	6005      	str	r5, [r0, #0]
 8008886:	60c5      	str	r5, [r0, #12]
 8008888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	b151      	cbz	r1, 80088a4 <_dtoa_r+0x44>
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	2301      	movs	r3, #1
 8008892:	4093      	lsls	r3, r2
 8008894:	604a      	str	r2, [r1, #4]
 8008896:	608b      	str	r3, [r1, #8]
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fded 	bl	8009478 <_Bfree>
 800889e:	2200      	movs	r2, #0
 80088a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	1e3b      	subs	r3, r7, #0
 80088a6:	bfaf      	iteee	ge
 80088a8:	2300      	movge	r3, #0
 80088aa:	2201      	movlt	r2, #1
 80088ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	9303      	strlt	r3, [sp, #12]
 80088b2:	bfac      	ite	ge
 80088b4:	f8c8 3000 	strge.w	r3, [r8]
 80088b8:	f8c8 2000 	strlt.w	r2, [r8]
 80088bc:	4bae      	ldr	r3, [pc, #696]	; (8008b78 <_dtoa_r+0x318>)
 80088be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80088c2:	ea33 0308 	bics.w	r3, r3, r8
 80088c6:	d11b      	bne.n	8008900 <_dtoa_r+0xa0>
 80088c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80088cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	b923      	cbnz	r3, 80088de <_dtoa_r+0x7e>
 80088d4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80088d8:	2800      	cmp	r0, #0
 80088da:	f000 8545 	beq.w	8009368 <_dtoa_r+0xb08>
 80088de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088e0:	b953      	cbnz	r3, 80088f8 <_dtoa_r+0x98>
 80088e2:	4ba6      	ldr	r3, [pc, #664]	; (8008b7c <_dtoa_r+0x31c>)
 80088e4:	e021      	b.n	800892a <_dtoa_r+0xca>
 80088e6:	4ba6      	ldr	r3, [pc, #664]	; (8008b80 <_dtoa_r+0x320>)
 80088e8:	9306      	str	r3, [sp, #24]
 80088ea:	3308      	adds	r3, #8
 80088ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	9806      	ldr	r0, [sp, #24]
 80088f2:	b015      	add	sp, #84	; 0x54
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	4ba0      	ldr	r3, [pc, #640]	; (8008b7c <_dtoa_r+0x31c>)
 80088fa:	9306      	str	r3, [sp, #24]
 80088fc:	3303      	adds	r3, #3
 80088fe:	e7f5      	b.n	80088ec <_dtoa_r+0x8c>
 8008900:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	2300      	movs	r3, #0
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f8 f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8008910:	4682      	mov	sl, r0
 8008912:	b160      	cbz	r0, 800892e <_dtoa_r+0xce>
 8008914:	2301      	movs	r3, #1
 8008916:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 8520 	beq.w	8009362 <_dtoa_r+0xb02>
 8008922:	4b98      	ldr	r3, [pc, #608]	; (8008b84 <_dtoa_r+0x324>)
 8008924:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	3b01      	subs	r3, #1
 800892a:	9306      	str	r3, [sp, #24]
 800892c:	e7e0      	b.n	80088f0 <_dtoa_r+0x90>
 800892e:	ab12      	add	r3, sp, #72	; 0x48
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	ab13      	add	r3, sp, #76	; 0x4c
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4632      	mov	r2, r6
 8008938:	463b      	mov	r3, r7
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fff4 	bl	8009928 <__d2b>
 8008940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008944:	4683      	mov	fp, r0
 8008946:	2d00      	cmp	r5, #0
 8008948:	d07d      	beq.n	8008a46 <_dtoa_r+0x1e6>
 800894a:	46b0      	mov	r8, r6
 800894c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008950:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008954:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008958:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800895c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008960:	2200      	movs	r2, #0
 8008962:	4b89      	ldr	r3, [pc, #548]	; (8008b88 <_dtoa_r+0x328>)
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f7 fbfe 	bl	8000168 <__aeabi_dsub>
 800896c:	a37c      	add	r3, pc, #496	; (adr r3, 8008b60 <_dtoa_r+0x300>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fdb1 	bl	80004d8 <__aeabi_dmul>
 8008976:	a37c      	add	r3, pc, #496	; (adr r3, 8008b68 <_dtoa_r+0x308>)
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	f7f7 fbf6 	bl	800016c <__adddf3>
 8008980:	4606      	mov	r6, r0
 8008982:	4628      	mov	r0, r5
 8008984:	460f      	mov	r7, r1
 8008986:	f7f7 fd3d 	bl	8000404 <__aeabi_i2d>
 800898a:	a379      	add	r3, pc, #484	; (adr r3, 8008b70 <_dtoa_r+0x310>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f7f7 fda2 	bl	80004d8 <__aeabi_dmul>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	f7f7 fbe6 	bl	800016c <__adddf3>
 80089a0:	4606      	mov	r6, r0
 80089a2:	460f      	mov	r7, r1
 80089a4:	f7f8 f848 	bl	8000a38 <__aeabi_d2iz>
 80089a8:	2200      	movs	r2, #0
 80089aa:	4682      	mov	sl, r0
 80089ac:	2300      	movs	r3, #0
 80089ae:	4630      	mov	r0, r6
 80089b0:	4639      	mov	r1, r7
 80089b2:	f7f8 f803 	bl	80009bc <__aeabi_dcmplt>
 80089b6:	b148      	cbz	r0, 80089cc <_dtoa_r+0x16c>
 80089b8:	4650      	mov	r0, sl
 80089ba:	f7f7 fd23 	bl	8000404 <__aeabi_i2d>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	f7f7 fff1 	bl	80009a8 <__aeabi_dcmpeq>
 80089c6:	b908      	cbnz	r0, 80089cc <_dtoa_r+0x16c>
 80089c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089cc:	f1ba 0f16 	cmp.w	sl, #22
 80089d0:	d85a      	bhi.n	8008a88 <_dtoa_r+0x228>
 80089d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089d6:	496d      	ldr	r1, [pc, #436]	; (8008b8c <_dtoa_r+0x32c>)
 80089d8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80089dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e0:	f7f8 f80a 	bl	80009f8 <__aeabi_dcmpgt>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d051      	beq.n	8008a8c <_dtoa_r+0x22c>
 80089e8:	2300      	movs	r3, #0
 80089ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ee:	930d      	str	r3, [sp, #52]	; 0x34
 80089f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089f2:	1b5d      	subs	r5, r3, r5
 80089f4:	1e6b      	subs	r3, r5, #1
 80089f6:	9307      	str	r3, [sp, #28]
 80089f8:	bf43      	ittte	mi
 80089fa:	2300      	movmi	r3, #0
 80089fc:	f1c5 0901 	rsbmi	r9, r5, #1
 8008a00:	9307      	strmi	r3, [sp, #28]
 8008a02:	f04f 0900 	movpl.w	r9, #0
 8008a06:	f1ba 0f00 	cmp.w	sl, #0
 8008a0a:	db41      	blt.n	8008a90 <_dtoa_r+0x230>
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008a12:	4453      	add	r3, sl
 8008a14:	9307      	str	r3, [sp, #28]
 8008a16:	2300      	movs	r3, #0
 8008a18:	9308      	str	r3, [sp, #32]
 8008a1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	f200 808f 	bhi.w	8008b40 <_dtoa_r+0x2e0>
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	bfc4      	itt	gt
 8008a26:	3b04      	subgt	r3, #4
 8008a28:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008a2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a2c:	bfc8      	it	gt
 8008a2e:	2500      	movgt	r5, #0
 8008a30:	f1a3 0302 	sub.w	r3, r3, #2
 8008a34:	bfd8      	it	le
 8008a36:	2501      	movle	r5, #1
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	f200 808d 	bhi.w	8008b58 <_dtoa_r+0x2f8>
 8008a3e:	e8df f003 	tbb	[pc, r3]
 8008a42:	7d7b      	.short	0x7d7b
 8008a44:	6f2f      	.short	0x6f2f
 8008a46:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a4a:	441d      	add	r5, r3
 8008a4c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a50:	2820      	cmp	r0, #32
 8008a52:	dd13      	ble.n	8008a7c <_dtoa_r+0x21c>
 8008a54:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a58:	9b02      	ldr	r3, [sp, #8]
 8008a5a:	fa08 f800 	lsl.w	r8, r8, r0
 8008a5e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a62:	fa23 f000 	lsr.w	r0, r3, r0
 8008a66:	ea48 0000 	orr.w	r0, r8, r0
 8008a6a:	f7f7 fcbb 	bl	80003e4 <__aeabi_ui2d>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4680      	mov	r8, r0
 8008a72:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008a76:	3d01      	subs	r5, #1
 8008a78:	9310      	str	r3, [sp, #64]	; 0x40
 8008a7a:	e771      	b.n	8008960 <_dtoa_r+0x100>
 8008a7c:	9b02      	ldr	r3, [sp, #8]
 8008a7e:	f1c0 0020 	rsb	r0, r0, #32
 8008a82:	fa03 f000 	lsl.w	r0, r3, r0
 8008a86:	e7f0      	b.n	8008a6a <_dtoa_r+0x20a>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e7b0      	b.n	80089ee <_dtoa_r+0x18e>
 8008a8c:	900d      	str	r0, [sp, #52]	; 0x34
 8008a8e:	e7af      	b.n	80089f0 <_dtoa_r+0x190>
 8008a90:	f1ca 0300 	rsb	r3, sl, #0
 8008a94:	9308      	str	r3, [sp, #32]
 8008a96:	2300      	movs	r3, #0
 8008a98:	eba9 090a 	sub.w	r9, r9, sl
 8008a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8008a9e:	e7bc      	b.n	8008a1a <_dtoa_r+0x1ba>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd74      	ble.n	8008b94 <_dtoa_r+0x334>
 8008aaa:	4698      	mov	r8, r3
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ab2:	6072      	str	r2, [r6, #4]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	f102 0014 	add.w	r0, r2, #20
 8008aba:	4298      	cmp	r0, r3
 8008abc:	6871      	ldr	r1, [r6, #4]
 8008abe:	d96e      	bls.n	8008b9e <_dtoa_r+0x33e>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fca5 	bl	8009410 <_Balloc>
 8008ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac8:	6030      	str	r0, [r6, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f1b8 0f0e 	cmp.w	r8, #14
 8008ad0:	9306      	str	r3, [sp, #24]
 8008ad2:	f200 80ed 	bhi.w	8008cb0 <_dtoa_r+0x450>
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	f000 80ea 	beq.w	8008cb0 <_dtoa_r+0x450>
 8008adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008ae8:	dd77      	ble.n	8008bda <_dtoa_r+0x37a>
 8008aea:	4a28      	ldr	r2, [pc, #160]	; (8008b8c <_dtoa_r+0x32c>)
 8008aec:	f00a 030f 	and.w	r3, sl, #15
 8008af0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008af4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008af8:	06f0      	lsls	r0, r6, #27
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b02:	d568      	bpl.n	8008bd6 <_dtoa_r+0x376>
 8008b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <_dtoa_r+0x330>)
 8008b0a:	2503      	movs	r5, #3
 8008b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b10:	f7f7 fe0c 	bl	800072c <__aeabi_ddiv>
 8008b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b18:	f006 060f 	and.w	r6, r6, #15
 8008b1c:	4f1c      	ldr	r7, [pc, #112]	; (8008b90 <_dtoa_r+0x330>)
 8008b1e:	e04f      	b.n	8008bc0 <_dtoa_r+0x360>
 8008b20:	2301      	movs	r3, #1
 8008b22:	9309      	str	r3, [sp, #36]	; 0x24
 8008b24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b26:	4453      	add	r3, sl
 8008b28:	f103 0801 	add.w	r8, r3, #1
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	4643      	mov	r3, r8
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	bfb8      	it	lt
 8008b34:	2301      	movlt	r3, #1
 8008b36:	e7ba      	b.n	8008aae <_dtoa_r+0x24e>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e7b2      	b.n	8008aa2 <_dtoa_r+0x242>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e7f0      	b.n	8008b22 <_dtoa_r+0x2c2>
 8008b40:	2501      	movs	r5, #1
 8008b42:	2300      	movs	r3, #0
 8008b44:	9509      	str	r5, [sp, #36]	; 0x24
 8008b46:	931e      	str	r3, [sp, #120]	; 0x78
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	4698      	mov	r8, r3
 8008b52:	2312      	movs	r3, #18
 8008b54:	921f      	str	r2, [sp, #124]	; 0x7c
 8008b56:	e7aa      	b.n	8008aae <_dtoa_r+0x24e>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5c:	e7f4      	b.n	8008b48 <_dtoa_r+0x2e8>
 8008b5e:	bf00      	nop
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	7ff00000 	.word	0x7ff00000
 8008b7c:	0800a161 	.word	0x0800a161
 8008b80:	0800a158 	.word	0x0800a158
 8008b84:	0800a135 	.word	0x0800a135
 8008b88:	3ff80000 	.word	0x3ff80000
 8008b8c:	0800a190 	.word	0x0800a190
 8008b90:	0800a168 	.word	0x0800a168
 8008b94:	2301      	movs	r3, #1
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	4698      	mov	r8, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	e7da      	b.n	8008b54 <_dtoa_r+0x2f4>
 8008b9e:	3101      	adds	r1, #1
 8008ba0:	6071      	str	r1, [r6, #4]
 8008ba2:	0052      	lsls	r2, r2, #1
 8008ba4:	e787      	b.n	8008ab6 <_dtoa_r+0x256>
 8008ba6:	07f1      	lsls	r1, r6, #31
 8008ba8:	d508      	bpl.n	8008bbc <_dtoa_r+0x35c>
 8008baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb2:	f7f7 fc91 	bl	80004d8 <__aeabi_dmul>
 8008bb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bba:	3501      	adds	r5, #1
 8008bbc:	1076      	asrs	r6, r6, #1
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	2e00      	cmp	r6, #0
 8008bc2:	d1f0      	bne.n	8008ba6 <_dtoa_r+0x346>
 8008bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bcc:	f7f7 fdae 	bl	800072c <__aeabi_ddiv>
 8008bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd4:	e01b      	b.n	8008c0e <_dtoa_r+0x3ae>
 8008bd6:	2502      	movs	r5, #2
 8008bd8:	e7a0      	b.n	8008b1c <_dtoa_r+0x2bc>
 8008bda:	f000 80a4 	beq.w	8008d26 <_dtoa_r+0x4c6>
 8008bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008be2:	f1ca 0600 	rsb	r6, sl, #0
 8008be6:	4ba0      	ldr	r3, [pc, #640]	; (8008e68 <_dtoa_r+0x608>)
 8008be8:	f006 020f 	and.w	r2, r6, #15
 8008bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7f7 fc70 	bl	80004d8 <__aeabi_dmul>
 8008bf8:	2502      	movs	r5, #2
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c00:	4f9a      	ldr	r7, [pc, #616]	; (8008e6c <_dtoa_r+0x60c>)
 8008c02:	1136      	asrs	r6, r6, #4
 8008c04:	2e00      	cmp	r6, #0
 8008c06:	f040 8083 	bne.w	8008d10 <_dtoa_r+0x4b0>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e0      	bne.n	8008bd0 <_dtoa_r+0x370>
 8008c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 808a 	beq.w	8008d2a <_dtoa_r+0x4ca>
 8008c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c22:	2200      	movs	r2, #0
 8008c24:	4b92      	ldr	r3, [pc, #584]	; (8008e70 <_dtoa_r+0x610>)
 8008c26:	f7f7 fec9 	bl	80009bc <__aeabi_dcmplt>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d07d      	beq.n	8008d2a <_dtoa_r+0x4ca>
 8008c2e:	f1b8 0f00 	cmp.w	r8, #0
 8008c32:	d07a      	beq.n	8008d2a <_dtoa_r+0x4ca>
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dd36      	ble.n	8008ca8 <_dtoa_r+0x448>
 8008c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4b8c      	ldr	r3, [pc, #560]	; (8008e74 <_dtoa_r+0x614>)
 8008c42:	f7f7 fc49 	bl	80004d8 <__aeabi_dmul>
 8008c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4a:	9e04      	ldr	r6, [sp, #16]
 8008c4c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008c50:	3501      	adds	r5, #1
 8008c52:	4628      	mov	r0, r5
 8008c54:	f7f7 fbd6 	bl	8000404 <__aeabi_i2d>
 8008c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5c:	f7f7 fc3c 	bl	80004d8 <__aeabi_dmul>
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b85      	ldr	r3, [pc, #532]	; (8008e78 <_dtoa_r+0x618>)
 8008c64:	f7f7 fa82 	bl	800016c <__adddf3>
 8008c68:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008c6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c70:	950b      	str	r5, [sp, #44]	; 0x2c
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d15c      	bne.n	8008d30 <_dtoa_r+0x4d0>
 8008c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4b7f      	ldr	r3, [pc, #508]	; (8008e7c <_dtoa_r+0x61c>)
 8008c7e:	f7f7 fa73 	bl	8000168 <__aeabi_dsub>
 8008c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c84:	462b      	mov	r3, r5
 8008c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8a:	f7f7 feb5 	bl	80009f8 <__aeabi_dcmpgt>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	f040 8281 	bne.w	8009196 <_dtoa_r+0x936>
 8008c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008c9e:	f7f7 fe8d 	bl	80009bc <__aeabi_dcmplt>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f040 8275 	bne.w	8009192 <_dtoa_r+0x932>
 8008ca8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f2c0 814b 	blt.w	8008f4e <_dtoa_r+0x6ee>
 8008cb8:	f1ba 0f0e 	cmp.w	sl, #14
 8008cbc:	f300 8147 	bgt.w	8008f4e <_dtoa_r+0x6ee>
 8008cc0:	4b69      	ldr	r3, [pc, #420]	; (8008e68 <_dtoa_r+0x608>)
 8008cc2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f280 80d7 	bge.w	8008e84 <_dtoa_r+0x624>
 8008cd6:	f1b8 0f00 	cmp.w	r8, #0
 8008cda:	f300 80d3 	bgt.w	8008e84 <_dtoa_r+0x624>
 8008cde:	f040 8257 	bne.w	8009190 <_dtoa_r+0x930>
 8008ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4b64      	ldr	r3, [pc, #400]	; (8008e7c <_dtoa_r+0x61c>)
 8008cea:	f7f7 fbf5 	bl	80004d8 <__aeabi_dmul>
 8008cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cf2:	f7f7 fe77 	bl	80009e4 <__aeabi_dcmpge>
 8008cf6:	4646      	mov	r6, r8
 8008cf8:	4647      	mov	r7, r8
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f040 822d 	bne.w	800915a <_dtoa_r+0x8fa>
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	9a06      	ldr	r2, [sp, #24]
 8008d04:	1c5d      	adds	r5, r3, #1
 8008d06:	2331      	movs	r3, #49	; 0x31
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	7013      	strb	r3, [r2, #0]
 8008d0e:	e228      	b.n	8009162 <_dtoa_r+0x902>
 8008d10:	07f2      	lsls	r2, r6, #31
 8008d12:	d505      	bpl.n	8008d20 <_dtoa_r+0x4c0>
 8008d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d18:	f7f7 fbde 	bl	80004d8 <__aeabi_dmul>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	3501      	adds	r5, #1
 8008d20:	1076      	asrs	r6, r6, #1
 8008d22:	3708      	adds	r7, #8
 8008d24:	e76e      	b.n	8008c04 <_dtoa_r+0x3a4>
 8008d26:	2502      	movs	r5, #2
 8008d28:	e771      	b.n	8008c0e <_dtoa_r+0x3ae>
 8008d2a:	4657      	mov	r7, sl
 8008d2c:	4646      	mov	r6, r8
 8008d2e:	e790      	b.n	8008c52 <_dtoa_r+0x3f2>
 8008d30:	4b4d      	ldr	r3, [pc, #308]	; (8008e68 <_dtoa_r+0x608>)
 8008d32:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d36:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d048      	beq.n	8008dd2 <_dtoa_r+0x572>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	2000      	movs	r0, #0
 8008d46:	494e      	ldr	r1, [pc, #312]	; (8008e80 <_dtoa_r+0x620>)
 8008d48:	f7f7 fcf0 	bl	800072c <__aeabi_ddiv>
 8008d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d50:	f7f7 fa0a 	bl	8000168 <__aeabi_dsub>
 8008d54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d58:	9d06      	ldr	r5, [sp, #24]
 8008d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d5e:	f7f7 fe6b 	bl	8000a38 <__aeabi_d2iz>
 8008d62:	9011      	str	r0, [sp, #68]	; 0x44
 8008d64:	f7f7 fb4e 	bl	8000404 <__aeabi_i2d>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d70:	f7f7 f9fa 	bl	8000168 <__aeabi_dsub>
 8008d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d7a:	3330      	adds	r3, #48	; 0x30
 8008d7c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d84:	f7f7 fe1a 	bl	80009bc <__aeabi_dcmplt>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d163      	bne.n	8008e54 <_dtoa_r+0x5f4>
 8008d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d90:	2000      	movs	r0, #0
 8008d92:	4937      	ldr	r1, [pc, #220]	; (8008e70 <_dtoa_r+0x610>)
 8008d94:	f7f7 f9e8 	bl	8000168 <__aeabi_dsub>
 8008d98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d9c:	f7f7 fe0e 	bl	80009bc <__aeabi_dcmplt>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f040 80b5 	bne.w	8008f10 <_dtoa_r+0x6b0>
 8008da6:	9b06      	ldr	r3, [sp, #24]
 8008da8:	1aeb      	subs	r3, r5, r3
 8008daa:	429e      	cmp	r6, r3
 8008dac:	f77f af7c 	ble.w	8008ca8 <_dtoa_r+0x448>
 8008db0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008db4:	2200      	movs	r2, #0
 8008db6:	4b2f      	ldr	r3, [pc, #188]	; (8008e74 <_dtoa_r+0x614>)
 8008db8:	f7f7 fb8e 	bl	80004d8 <__aeabi_dmul>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dc6:	4b2b      	ldr	r3, [pc, #172]	; (8008e74 <_dtoa_r+0x614>)
 8008dc8:	f7f7 fb86 	bl	80004d8 <__aeabi_dmul>
 8008dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd0:	e7c3      	b.n	8008d5a <_dtoa_r+0x4fa>
 8008dd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dd6:	f7f7 fb7f 	bl	80004d8 <__aeabi_dmul>
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008de0:	199d      	adds	r5, r3, r6
 8008de2:	461e      	mov	r6, r3
 8008de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de8:	f7f7 fe26 	bl	8000a38 <__aeabi_d2iz>
 8008dec:	9011      	str	r0, [sp, #68]	; 0x44
 8008dee:	f7f7 fb09 	bl	8000404 <__aeabi_i2d>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfa:	f7f7 f9b5 	bl	8000168 <__aeabi_dsub>
 8008dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e04:	3330      	adds	r3, #48	; 0x30
 8008e06:	f806 3b01 	strb.w	r3, [r6], #1
 8008e0a:	42ae      	cmp	r6, r5
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	d124      	bne.n	8008e5c <_dtoa_r+0x5fc>
 8008e12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <_dtoa_r+0x620>)
 8008e18:	f7f7 f9a8 	bl	800016c <__adddf3>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e24:	f7f7 fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d171      	bne.n	8008f10 <_dtoa_r+0x6b0>
 8008e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e30:	2000      	movs	r0, #0
 8008e32:	4913      	ldr	r1, [pc, #76]	; (8008e80 <_dtoa_r+0x620>)
 8008e34:	f7f7 f998 	bl	8000168 <__aeabi_dsub>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e40:	f7f7 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f43f af2f 	beq.w	8008ca8 <_dtoa_r+0x448>
 8008e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e4e:	1e6a      	subs	r2, r5, #1
 8008e50:	2b30      	cmp	r3, #48	; 0x30
 8008e52:	d001      	beq.n	8008e58 <_dtoa_r+0x5f8>
 8008e54:	46ba      	mov	sl, r7
 8008e56:	e04a      	b.n	8008eee <_dtoa_r+0x68e>
 8008e58:	4615      	mov	r5, r2
 8008e5a:	e7f6      	b.n	8008e4a <_dtoa_r+0x5ea>
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <_dtoa_r+0x614>)
 8008e5e:	f7f7 fb3b 	bl	80004d8 <__aeabi_dmul>
 8008e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e66:	e7bd      	b.n	8008de4 <_dtoa_r+0x584>
 8008e68:	0800a190 	.word	0x0800a190
 8008e6c:	0800a168 	.word	0x0800a168
 8008e70:	3ff00000 	.word	0x3ff00000
 8008e74:	40240000 	.word	0x40240000
 8008e78:	401c0000 	.word	0x401c0000
 8008e7c:	40140000 	.word	0x40140000
 8008e80:	3fe00000 	.word	0x3fe00000
 8008e84:	9d06      	ldr	r5, [sp, #24]
 8008e86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e8e:	4630      	mov	r0, r6
 8008e90:	4639      	mov	r1, r7
 8008e92:	f7f7 fc4b 	bl	800072c <__aeabi_ddiv>
 8008e96:	f7f7 fdcf 	bl	8000a38 <__aeabi_d2iz>
 8008e9a:	4681      	mov	r9, r0
 8008e9c:	f7f7 fab2 	bl	8000404 <__aeabi_i2d>
 8008ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea4:	f7f7 fb18 	bl	80004d8 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4630      	mov	r0, r6
 8008eae:	4639      	mov	r1, r7
 8008eb0:	f7f7 f95a 	bl	8000168 <__aeabi_dsub>
 8008eb4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008eb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008ebc:	9e06      	ldr	r6, [sp, #24]
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	1bae      	subs	r6, r5, r6
 8008ec2:	45b0      	cmp	r8, r6
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	d135      	bne.n	8008f34 <_dtoa_r+0x6d4>
 8008ec8:	f7f7 f950 	bl	800016c <__adddf3>
 8008ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	460f      	mov	r7, r1
 8008ed4:	f7f7 fd90 	bl	80009f8 <__aeabi_dcmpgt>
 8008ed8:	b9c8      	cbnz	r0, 8008f0e <_dtoa_r+0x6ae>
 8008eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8008ee6:	b110      	cbz	r0, 8008eee <_dtoa_r+0x68e>
 8008ee8:	f019 0f01 	tst.w	r9, #1
 8008eec:	d10f      	bne.n	8008f0e <_dtoa_r+0x6ae>
 8008eee:	4659      	mov	r1, fp
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fac1 	bl	8009478 <_Bfree>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008efa:	702b      	strb	r3, [r5, #0]
 8008efc:	f10a 0301 	add.w	r3, sl, #1
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f43f acf3 	beq.w	80088f0 <_dtoa_r+0x90>
 8008f0a:	601d      	str	r5, [r3, #0]
 8008f0c:	e4f0      	b.n	80088f0 <_dtoa_r+0x90>
 8008f0e:	4657      	mov	r7, sl
 8008f10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f14:	1e6b      	subs	r3, r5, #1
 8008f16:	2a39      	cmp	r2, #57	; 0x39
 8008f18:	d106      	bne.n	8008f28 <_dtoa_r+0x6c8>
 8008f1a:	9a06      	ldr	r2, [sp, #24]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d107      	bne.n	8008f30 <_dtoa_r+0x6d0>
 8008f20:	2330      	movs	r3, #48	; 0x30
 8008f22:	7013      	strb	r3, [r2, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	3701      	adds	r7, #1
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e791      	b.n	8008e54 <_dtoa_r+0x5f4>
 8008f30:	461d      	mov	r5, r3
 8008f32:	e7ed      	b.n	8008f10 <_dtoa_r+0x6b0>
 8008f34:	2200      	movs	r2, #0
 8008f36:	4b99      	ldr	r3, [pc, #612]	; (800919c <_dtoa_r+0x93c>)
 8008f38:	f7f7 face 	bl	80004d8 <__aeabi_dmul>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4606      	mov	r6, r0
 8008f42:	460f      	mov	r7, r1
 8008f44:	f7f7 fd30 	bl	80009a8 <__aeabi_dcmpeq>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d09e      	beq.n	8008e8a <_dtoa_r+0x62a>
 8008f4c:	e7cf      	b.n	8008eee <_dtoa_r+0x68e>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	f000 8088 	beq.w	8009066 <_dtoa_r+0x806>
 8008f56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008f58:	2a01      	cmp	r2, #1
 8008f5a:	dc6d      	bgt.n	8009038 <_dtoa_r+0x7d8>
 8008f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	d066      	beq.n	8009030 <_dtoa_r+0x7d0>
 8008f62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f66:	464d      	mov	r5, r9
 8008f68:	9e08      	ldr	r6, [sp, #32]
 8008f6a:	9a07      	ldr	r2, [sp, #28]
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	441a      	add	r2, r3
 8008f70:	4620      	mov	r0, r4
 8008f72:	4499      	add	r9, r3
 8008f74:	9207      	str	r2, [sp, #28]
 8008f76:	f000 fb1f 	bl	80095b8 <__i2b>
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	dd0b      	ble.n	8008f98 <_dtoa_r+0x738>
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dd08      	ble.n	8008f98 <_dtoa_r+0x738>
 8008f86:	42ab      	cmp	r3, r5
 8008f88:	bfa8      	it	ge
 8008f8a:	462b      	movge	r3, r5
 8008f8c:	9a07      	ldr	r2, [sp, #28]
 8008f8e:	eba9 0903 	sub.w	r9, r9, r3
 8008f92:	1aed      	subs	r5, r5, r3
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	9b08      	ldr	r3, [sp, #32]
 8008f9a:	b1eb      	cbz	r3, 8008fd8 <_dtoa_r+0x778>
 8008f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d065      	beq.n	800906e <_dtoa_r+0x80e>
 8008fa2:	b18e      	cbz	r6, 8008fc8 <_dtoa_r+0x768>
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4632      	mov	r2, r6
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fba3 	bl	80096f4 <__pow5mult>
 8008fae:	465a      	mov	r2, fp
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fb08 	bl	80095ca <__multiply>
 8008fba:	4659      	mov	r1, fp
 8008fbc:	900a      	str	r0, [sp, #40]	; 0x28
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fa5a 	bl	8009478 <_Bfree>
 8008fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc6:	469b      	mov	fp, r3
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	1b9a      	subs	r2, r3, r6
 8008fcc:	d004      	beq.n	8008fd8 <_dtoa_r+0x778>
 8008fce:	4659      	mov	r1, fp
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fb8f 	bl	80096f4 <__pow5mult>
 8008fd6:	4683      	mov	fp, r0
 8008fd8:	2101      	movs	r1, #1
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 faec 	bl	80095b8 <__i2b>
 8008fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 81c6 	beq.w	8009376 <_dtoa_r+0xb16>
 8008fea:	461a      	mov	r2, r3
 8008fec:	4601      	mov	r1, r0
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 fb80 	bl	80096f4 <__pow5mult>
 8008ff4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	dc3e      	bgt.n	800907a <_dtoa_r+0x81a>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d137      	bne.n	8009072 <_dtoa_r+0x812>
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009008:	2b00      	cmp	r3, #0
 800900a:	d134      	bne.n	8009076 <_dtoa_r+0x816>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009012:	0d1b      	lsrs	r3, r3, #20
 8009014:	051b      	lsls	r3, r3, #20
 8009016:	b12b      	cbz	r3, 8009024 <_dtoa_r+0x7c4>
 8009018:	9b07      	ldr	r3, [sp, #28]
 800901a:	f109 0901 	add.w	r9, r9, #1
 800901e:	3301      	adds	r3, #1
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	2301      	movs	r3, #1
 8009024:	9308      	str	r3, [sp, #32]
 8009026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009028:	2b00      	cmp	r3, #0
 800902a:	d128      	bne.n	800907e <_dtoa_r+0x81e>
 800902c:	2001      	movs	r0, #1
 800902e:	e02e      	b.n	800908e <_dtoa_r+0x82e>
 8009030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009032:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009036:	e796      	b.n	8008f66 <_dtoa_r+0x706>
 8009038:	9b08      	ldr	r3, [sp, #32]
 800903a:	f108 36ff 	add.w	r6, r8, #4294967295
 800903e:	42b3      	cmp	r3, r6
 8009040:	bfb7      	itett	lt
 8009042:	9b08      	ldrlt	r3, [sp, #32]
 8009044:	1b9e      	subge	r6, r3, r6
 8009046:	1af2      	sublt	r2, r6, r3
 8009048:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800904a:	bfbf      	itttt	lt
 800904c:	9608      	strlt	r6, [sp, #32]
 800904e:	189b      	addlt	r3, r3, r2
 8009050:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009052:	2600      	movlt	r6, #0
 8009054:	f1b8 0f00 	cmp.w	r8, #0
 8009058:	bfb9      	ittee	lt
 800905a:	eba9 0508 	sublt.w	r5, r9, r8
 800905e:	2300      	movlt	r3, #0
 8009060:	464d      	movge	r5, r9
 8009062:	4643      	movge	r3, r8
 8009064:	e781      	b.n	8008f6a <_dtoa_r+0x70a>
 8009066:	9e08      	ldr	r6, [sp, #32]
 8009068:	464d      	mov	r5, r9
 800906a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800906c:	e786      	b.n	8008f7c <_dtoa_r+0x71c>
 800906e:	9a08      	ldr	r2, [sp, #32]
 8009070:	e7ad      	b.n	8008fce <_dtoa_r+0x76e>
 8009072:	2300      	movs	r3, #0
 8009074:	e7d6      	b.n	8009024 <_dtoa_r+0x7c4>
 8009076:	9b02      	ldr	r3, [sp, #8]
 8009078:	e7d4      	b.n	8009024 <_dtoa_r+0x7c4>
 800907a:	2300      	movs	r3, #0
 800907c:	9308      	str	r3, [sp, #32]
 800907e:	6933      	ldr	r3, [r6, #16]
 8009080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009084:	6918      	ldr	r0, [r3, #16]
 8009086:	f000 fa49 	bl	800951c <__hi0bits>
 800908a:	f1c0 0020 	rsb	r0, r0, #32
 800908e:	9b07      	ldr	r3, [sp, #28]
 8009090:	4418      	add	r0, r3
 8009092:	f010 001f 	ands.w	r0, r0, #31
 8009096:	d047      	beq.n	8009128 <_dtoa_r+0x8c8>
 8009098:	f1c0 0320 	rsb	r3, r0, #32
 800909c:	2b04      	cmp	r3, #4
 800909e:	dd3b      	ble.n	8009118 <_dtoa_r+0x8b8>
 80090a0:	9b07      	ldr	r3, [sp, #28]
 80090a2:	f1c0 001c 	rsb	r0, r0, #28
 80090a6:	4481      	add	r9, r0
 80090a8:	4405      	add	r5, r0
 80090aa:	4403      	add	r3, r0
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	dd05      	ble.n	80090c0 <_dtoa_r+0x860>
 80090b4:	4659      	mov	r1, fp
 80090b6:	464a      	mov	r2, r9
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fb69 	bl	8009790 <__lshift>
 80090be:	4683      	mov	fp, r0
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd05      	ble.n	80090d2 <_dtoa_r+0x872>
 80090c6:	4631      	mov	r1, r6
 80090c8:	461a      	mov	r2, r3
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fb60 	bl	8009790 <__lshift>
 80090d0:	4606      	mov	r6, r0
 80090d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d4:	b353      	cbz	r3, 800912c <_dtoa_r+0x8cc>
 80090d6:	4631      	mov	r1, r6
 80090d8:	4658      	mov	r0, fp
 80090da:	f000 fbad 	bl	8009838 <__mcmp>
 80090de:	2800      	cmp	r0, #0
 80090e0:	da24      	bge.n	800912c <_dtoa_r+0x8cc>
 80090e2:	2300      	movs	r3, #0
 80090e4:	4659      	mov	r1, fp
 80090e6:	220a      	movs	r2, #10
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 f9dc 	bl	80094a6 <__multadd>
 80090ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090f4:	4683      	mov	fp, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 8144 	beq.w	8009384 <_dtoa_r+0xb24>
 80090fc:	2300      	movs	r3, #0
 80090fe:	4639      	mov	r1, r7
 8009100:	220a      	movs	r2, #10
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f9cf 	bl	80094a6 <__multadd>
 8009108:	9b04      	ldr	r3, [sp, #16]
 800910a:	4607      	mov	r7, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	dc4d      	bgt.n	80091ac <_dtoa_r+0x94c>
 8009110:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009112:	2b02      	cmp	r3, #2
 8009114:	dd4a      	ble.n	80091ac <_dtoa_r+0x94c>
 8009116:	e011      	b.n	800913c <_dtoa_r+0x8dc>
 8009118:	d0c9      	beq.n	80090ae <_dtoa_r+0x84e>
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	331c      	adds	r3, #28
 800911e:	441a      	add	r2, r3
 8009120:	4499      	add	r9, r3
 8009122:	441d      	add	r5, r3
 8009124:	4613      	mov	r3, r2
 8009126:	e7c1      	b.n	80090ac <_dtoa_r+0x84c>
 8009128:	4603      	mov	r3, r0
 800912a:	e7f6      	b.n	800911a <_dtoa_r+0x8ba>
 800912c:	f1b8 0f00 	cmp.w	r8, #0
 8009130:	dc36      	bgt.n	80091a0 <_dtoa_r+0x940>
 8009132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009134:	2b02      	cmp	r3, #2
 8009136:	dd33      	ble.n	80091a0 <_dtoa_r+0x940>
 8009138:	f8cd 8010 	str.w	r8, [sp, #16]
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	b963      	cbnz	r3, 800915a <_dtoa_r+0x8fa>
 8009140:	4631      	mov	r1, r6
 8009142:	2205      	movs	r2, #5
 8009144:	4620      	mov	r0, r4
 8009146:	f000 f9ae 	bl	80094a6 <__multadd>
 800914a:	4601      	mov	r1, r0
 800914c:	4606      	mov	r6, r0
 800914e:	4658      	mov	r0, fp
 8009150:	f000 fb72 	bl	8009838 <__mcmp>
 8009154:	2800      	cmp	r0, #0
 8009156:	f73f add3 	bgt.w	8008d00 <_dtoa_r+0x4a0>
 800915a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800915c:	9d06      	ldr	r5, [sp, #24]
 800915e:	ea6f 0a03 	mvn.w	sl, r3
 8009162:	f04f 0900 	mov.w	r9, #0
 8009166:	4631      	mov	r1, r6
 8009168:	4620      	mov	r0, r4
 800916a:	f000 f985 	bl	8009478 <_Bfree>
 800916e:	2f00      	cmp	r7, #0
 8009170:	f43f aebd 	beq.w	8008eee <_dtoa_r+0x68e>
 8009174:	f1b9 0f00 	cmp.w	r9, #0
 8009178:	d005      	beq.n	8009186 <_dtoa_r+0x926>
 800917a:	45b9      	cmp	r9, r7
 800917c:	d003      	beq.n	8009186 <_dtoa_r+0x926>
 800917e:	4649      	mov	r1, r9
 8009180:	4620      	mov	r0, r4
 8009182:	f000 f979 	bl	8009478 <_Bfree>
 8009186:	4639      	mov	r1, r7
 8009188:	4620      	mov	r0, r4
 800918a:	f000 f975 	bl	8009478 <_Bfree>
 800918e:	e6ae      	b.n	8008eee <_dtoa_r+0x68e>
 8009190:	2600      	movs	r6, #0
 8009192:	4637      	mov	r7, r6
 8009194:	e7e1      	b.n	800915a <_dtoa_r+0x8fa>
 8009196:	46ba      	mov	sl, r7
 8009198:	4637      	mov	r7, r6
 800919a:	e5b1      	b.n	8008d00 <_dtoa_r+0x4a0>
 800919c:	40240000 	.word	0x40240000
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80f3 	beq.w	8009392 <_dtoa_r+0xb32>
 80091ac:	2d00      	cmp	r5, #0
 80091ae:	dd05      	ble.n	80091bc <_dtoa_r+0x95c>
 80091b0:	4639      	mov	r1, r7
 80091b2:	462a      	mov	r2, r5
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 faeb 	bl	8009790 <__lshift>
 80091ba:	4607      	mov	r7, r0
 80091bc:	9b08      	ldr	r3, [sp, #32]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d04c      	beq.n	800925c <_dtoa_r+0x9fc>
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 f923 	bl	8009410 <_Balloc>
 80091ca:	4605      	mov	r5, r0
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	f107 010c 	add.w	r1, r7, #12
 80091d2:	3202      	adds	r2, #2
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	300c      	adds	r0, #12
 80091d8:	f7fe fe32 	bl	8007e40 <memcpy>
 80091dc:	2201      	movs	r2, #1
 80091de:	4629      	mov	r1, r5
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fad5 	bl	8009790 <__lshift>
 80091e6:	46b9      	mov	r9, r7
 80091e8:	4607      	mov	r7, r0
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	9307      	str	r3, [sp, #28]
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	9308      	str	r3, [sp, #32]
 80091f6:	4631      	mov	r1, r6
 80091f8:	4658      	mov	r0, fp
 80091fa:	f7ff faa3 	bl	8008744 <quorem>
 80091fe:	4649      	mov	r1, r9
 8009200:	4605      	mov	r5, r0
 8009202:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009206:	4658      	mov	r0, fp
 8009208:	f000 fb16 	bl	8009838 <__mcmp>
 800920c:	463a      	mov	r2, r7
 800920e:	9002      	str	r0, [sp, #8]
 8009210:	4631      	mov	r1, r6
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fb2a 	bl	800986c <__mdiff>
 8009218:	68c3      	ldr	r3, [r0, #12]
 800921a:	4602      	mov	r2, r0
 800921c:	bb03      	cbnz	r3, 8009260 <_dtoa_r+0xa00>
 800921e:	4601      	mov	r1, r0
 8009220:	9009      	str	r0, [sp, #36]	; 0x24
 8009222:	4658      	mov	r0, fp
 8009224:	f000 fb08 	bl	8009838 <__mcmp>
 8009228:	4603      	mov	r3, r0
 800922a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800922c:	4611      	mov	r1, r2
 800922e:	4620      	mov	r0, r4
 8009230:	9309      	str	r3, [sp, #36]	; 0x24
 8009232:	f000 f921 	bl	8009478 <_Bfree>
 8009236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009238:	b9a3      	cbnz	r3, 8009264 <_dtoa_r+0xa04>
 800923a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800923c:	b992      	cbnz	r2, 8009264 <_dtoa_r+0xa04>
 800923e:	9a08      	ldr	r2, [sp, #32]
 8009240:	b982      	cbnz	r2, 8009264 <_dtoa_r+0xa04>
 8009242:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009246:	d029      	beq.n	800929c <_dtoa_r+0xa3c>
 8009248:	9b02      	ldr	r3, [sp, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	dd01      	ble.n	8009252 <_dtoa_r+0x9f2>
 800924e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009252:	9b07      	ldr	r3, [sp, #28]
 8009254:	1c5d      	adds	r5, r3, #1
 8009256:	f883 8000 	strb.w	r8, [r3]
 800925a:	e784      	b.n	8009166 <_dtoa_r+0x906>
 800925c:	4638      	mov	r0, r7
 800925e:	e7c2      	b.n	80091e6 <_dtoa_r+0x986>
 8009260:	2301      	movs	r3, #1
 8009262:	e7e3      	b.n	800922c <_dtoa_r+0x9cc>
 8009264:	9a02      	ldr	r2, [sp, #8]
 8009266:	2a00      	cmp	r2, #0
 8009268:	db04      	blt.n	8009274 <_dtoa_r+0xa14>
 800926a:	d123      	bne.n	80092b4 <_dtoa_r+0xa54>
 800926c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800926e:	bb0a      	cbnz	r2, 80092b4 <_dtoa_r+0xa54>
 8009270:	9a08      	ldr	r2, [sp, #32]
 8009272:	b9fa      	cbnz	r2, 80092b4 <_dtoa_r+0xa54>
 8009274:	2b00      	cmp	r3, #0
 8009276:	ddec      	ble.n	8009252 <_dtoa_r+0x9f2>
 8009278:	4659      	mov	r1, fp
 800927a:	2201      	movs	r2, #1
 800927c:	4620      	mov	r0, r4
 800927e:	f000 fa87 	bl	8009790 <__lshift>
 8009282:	4631      	mov	r1, r6
 8009284:	4683      	mov	fp, r0
 8009286:	f000 fad7 	bl	8009838 <__mcmp>
 800928a:	2800      	cmp	r0, #0
 800928c:	dc03      	bgt.n	8009296 <_dtoa_r+0xa36>
 800928e:	d1e0      	bne.n	8009252 <_dtoa_r+0x9f2>
 8009290:	f018 0f01 	tst.w	r8, #1
 8009294:	d0dd      	beq.n	8009252 <_dtoa_r+0x9f2>
 8009296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800929a:	d1d8      	bne.n	800924e <_dtoa_r+0x9ee>
 800929c:	9b07      	ldr	r3, [sp, #28]
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	1c5d      	adds	r5, r3, #1
 80092a2:	2339      	movs	r3, #57	; 0x39
 80092a4:	7013      	strb	r3, [r2, #0]
 80092a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092aa:	1e6a      	subs	r2, r5, #1
 80092ac:	2b39      	cmp	r3, #57	; 0x39
 80092ae:	d04d      	beq.n	800934c <_dtoa_r+0xaec>
 80092b0:	3301      	adds	r3, #1
 80092b2:	e052      	b.n	800935a <_dtoa_r+0xafa>
 80092b4:	9a07      	ldr	r2, [sp, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f102 0501 	add.w	r5, r2, #1
 80092bc:	dd06      	ble.n	80092cc <_dtoa_r+0xa6c>
 80092be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092c2:	d0eb      	beq.n	800929c <_dtoa_r+0xa3c>
 80092c4:	f108 0801 	add.w	r8, r8, #1
 80092c8:	9b07      	ldr	r3, [sp, #28]
 80092ca:	e7c4      	b.n	8009256 <_dtoa_r+0x9f6>
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	9a04      	ldr	r2, [sp, #16]
 80092d0:	1aeb      	subs	r3, r5, r3
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80092d8:	d021      	beq.n	800931e <_dtoa_r+0xabe>
 80092da:	4659      	mov	r1, fp
 80092dc:	2300      	movs	r3, #0
 80092de:	220a      	movs	r2, #10
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 f8e0 	bl	80094a6 <__multadd>
 80092e6:	45b9      	cmp	r9, r7
 80092e8:	4683      	mov	fp, r0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	f04f 020a 	mov.w	r2, #10
 80092f2:	4649      	mov	r1, r9
 80092f4:	4620      	mov	r0, r4
 80092f6:	d105      	bne.n	8009304 <_dtoa_r+0xaa4>
 80092f8:	f000 f8d5 	bl	80094a6 <__multadd>
 80092fc:	4681      	mov	r9, r0
 80092fe:	4607      	mov	r7, r0
 8009300:	9507      	str	r5, [sp, #28]
 8009302:	e778      	b.n	80091f6 <_dtoa_r+0x996>
 8009304:	f000 f8cf 	bl	80094a6 <__multadd>
 8009308:	4639      	mov	r1, r7
 800930a:	4681      	mov	r9, r0
 800930c:	2300      	movs	r3, #0
 800930e:	220a      	movs	r2, #10
 8009310:	4620      	mov	r0, r4
 8009312:	f000 f8c8 	bl	80094a6 <__multadd>
 8009316:	4607      	mov	r7, r0
 8009318:	e7f2      	b.n	8009300 <_dtoa_r+0xaa0>
 800931a:	f04f 0900 	mov.w	r9, #0
 800931e:	4659      	mov	r1, fp
 8009320:	2201      	movs	r2, #1
 8009322:	4620      	mov	r0, r4
 8009324:	f000 fa34 	bl	8009790 <__lshift>
 8009328:	4631      	mov	r1, r6
 800932a:	4683      	mov	fp, r0
 800932c:	f000 fa84 	bl	8009838 <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	dcb8      	bgt.n	80092a6 <_dtoa_r+0xa46>
 8009334:	d102      	bne.n	800933c <_dtoa_r+0xadc>
 8009336:	f018 0f01 	tst.w	r8, #1
 800933a:	d1b4      	bne.n	80092a6 <_dtoa_r+0xa46>
 800933c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009340:	1e6a      	subs	r2, r5, #1
 8009342:	2b30      	cmp	r3, #48	; 0x30
 8009344:	f47f af0f 	bne.w	8009166 <_dtoa_r+0x906>
 8009348:	4615      	mov	r5, r2
 800934a:	e7f7      	b.n	800933c <_dtoa_r+0xadc>
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	4293      	cmp	r3, r2
 8009350:	d105      	bne.n	800935e <_dtoa_r+0xafe>
 8009352:	2331      	movs	r3, #49	; 0x31
 8009354:	9a06      	ldr	r2, [sp, #24]
 8009356:	f10a 0a01 	add.w	sl, sl, #1
 800935a:	7013      	strb	r3, [r2, #0]
 800935c:	e703      	b.n	8009166 <_dtoa_r+0x906>
 800935e:	4615      	mov	r5, r2
 8009360:	e7a1      	b.n	80092a6 <_dtoa_r+0xa46>
 8009362:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <_dtoa_r+0xb60>)
 8009364:	f7ff bae1 	b.w	800892a <_dtoa_r+0xca>
 8009368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f aabb 	bne.w	80088e6 <_dtoa_r+0x86>
 8009370:	4b14      	ldr	r3, [pc, #80]	; (80093c4 <_dtoa_r+0xb64>)
 8009372:	f7ff bada 	b.w	800892a <_dtoa_r+0xca>
 8009376:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009378:	2b01      	cmp	r3, #1
 800937a:	f77f ae3f 	ble.w	8008ffc <_dtoa_r+0x79c>
 800937e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009380:	9308      	str	r3, [sp, #32]
 8009382:	e653      	b.n	800902c <_dtoa_r+0x7cc>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	dc03      	bgt.n	8009392 <_dtoa_r+0xb32>
 800938a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800938c:	2b02      	cmp	r3, #2
 800938e:	f73f aed5 	bgt.w	800913c <_dtoa_r+0x8dc>
 8009392:	9d06      	ldr	r5, [sp, #24]
 8009394:	4631      	mov	r1, r6
 8009396:	4658      	mov	r0, fp
 8009398:	f7ff f9d4 	bl	8008744 <quorem>
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093a2:	f805 8b01 	strb.w	r8, [r5], #1
 80093a6:	9a04      	ldr	r2, [sp, #16]
 80093a8:	1aeb      	subs	r3, r5, r3
 80093aa:	429a      	cmp	r2, r3
 80093ac:	ddb5      	ble.n	800931a <_dtoa_r+0xaba>
 80093ae:	4659      	mov	r1, fp
 80093b0:	2300      	movs	r3, #0
 80093b2:	220a      	movs	r2, #10
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 f876 	bl	80094a6 <__multadd>
 80093ba:	4683      	mov	fp, r0
 80093bc:	e7ea      	b.n	8009394 <_dtoa_r+0xb34>
 80093be:	bf00      	nop
 80093c0:	0800a134 	.word	0x0800a134
 80093c4:	0800a158 	.word	0x0800a158

080093c8 <_localeconv_r>:
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <_localeconv_r+0x14>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6a18      	ldr	r0, [r3, #32]
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <_localeconv_r+0x18>)
 80093d0:	2800      	cmp	r0, #0
 80093d2:	bf08      	it	eq
 80093d4:	4618      	moveq	r0, r3
 80093d6:	30f0      	adds	r0, #240	; 0xf0
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000010 	.word	0x20000010
 80093e0:	20000074 	.word	0x20000074

080093e4 <malloc>:
 80093e4:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <malloc+0xc>)
 80093e6:	4601      	mov	r1, r0
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f000 bb47 	b.w	8009a7c <_malloc_r>
 80093ee:	bf00      	nop
 80093f0:	20000010 	.word	0x20000010

080093f4 <memchr>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	b2c9      	uxtb	r1, r1
 80093f8:	4402      	add	r2, r0
 80093fa:	4290      	cmp	r0, r2
 80093fc:	4603      	mov	r3, r0
 80093fe:	d101      	bne.n	8009404 <memchr+0x10>
 8009400:	2300      	movs	r3, #0
 8009402:	e003      	b.n	800940c <memchr+0x18>
 8009404:	781c      	ldrb	r4, [r3, #0]
 8009406:	3001      	adds	r0, #1
 8009408:	428c      	cmp	r4, r1
 800940a:	d1f6      	bne.n	80093fa <memchr+0x6>
 800940c:	4618      	mov	r0, r3
 800940e:	bd10      	pop	{r4, pc}

08009410 <_Balloc>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009414:	4604      	mov	r4, r0
 8009416:	460e      	mov	r6, r1
 8009418:	b93d      	cbnz	r5, 800942a <_Balloc+0x1a>
 800941a:	2010      	movs	r0, #16
 800941c:	f7ff ffe2 	bl	80093e4 <malloc>
 8009420:	6260      	str	r0, [r4, #36]	; 0x24
 8009422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009426:	6005      	str	r5, [r0, #0]
 8009428:	60c5      	str	r5, [r0, #12]
 800942a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800942c:	68eb      	ldr	r3, [r5, #12]
 800942e:	b183      	cbz	r3, 8009452 <_Balloc+0x42>
 8009430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009438:	b9b8      	cbnz	r0, 800946a <_Balloc+0x5a>
 800943a:	2101      	movs	r1, #1
 800943c:	fa01 f506 	lsl.w	r5, r1, r6
 8009440:	1d6a      	adds	r2, r5, #5
 8009442:	0092      	lsls	r2, r2, #2
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fabe 	bl	80099c6 <_calloc_r>
 800944a:	b160      	cbz	r0, 8009466 <_Balloc+0x56>
 800944c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009450:	e00e      	b.n	8009470 <_Balloc+0x60>
 8009452:	2221      	movs	r2, #33	; 0x21
 8009454:	2104      	movs	r1, #4
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fab5 	bl	80099c6 <_calloc_r>
 800945c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945e:	60e8      	str	r0, [r5, #12]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e4      	bne.n	8009430 <_Balloc+0x20>
 8009466:	2000      	movs	r0, #0
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	6802      	ldr	r2, [r0, #0]
 800946c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009470:	2300      	movs	r3, #0
 8009472:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009476:	e7f7      	b.n	8009468 <_Balloc+0x58>

08009478 <_Bfree>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800947c:	4606      	mov	r6, r0
 800947e:	460d      	mov	r5, r1
 8009480:	b93c      	cbnz	r4, 8009492 <_Bfree+0x1a>
 8009482:	2010      	movs	r0, #16
 8009484:	f7ff ffae 	bl	80093e4 <malloc>
 8009488:	6270      	str	r0, [r6, #36]	; 0x24
 800948a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800948e:	6004      	str	r4, [r0, #0]
 8009490:	60c4      	str	r4, [r0, #12]
 8009492:	b13d      	cbz	r5, 80094a4 <_Bfree+0x2c>
 8009494:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009496:	686a      	ldr	r2, [r5, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800949e:	6029      	str	r1, [r5, #0]
 80094a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094a4:	bd70      	pop	{r4, r5, r6, pc}

080094a6 <__multadd>:
 80094a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094aa:	461f      	mov	r7, r3
 80094ac:	4606      	mov	r6, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	2300      	movs	r3, #0
 80094b2:	690d      	ldr	r5, [r1, #16]
 80094b4:	f101 0c14 	add.w	ip, r1, #20
 80094b8:	f8dc 0000 	ldr.w	r0, [ip]
 80094bc:	3301      	adds	r3, #1
 80094be:	b281      	uxth	r1, r0
 80094c0:	fb02 7101 	mla	r1, r2, r1, r7
 80094c4:	0c00      	lsrs	r0, r0, #16
 80094c6:	0c0f      	lsrs	r7, r1, #16
 80094c8:	fb02 7000 	mla	r0, r2, r0, r7
 80094cc:	b289      	uxth	r1, r1
 80094ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80094d2:	429d      	cmp	r5, r3
 80094d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80094d8:	f84c 1b04 	str.w	r1, [ip], #4
 80094dc:	dcec      	bgt.n	80094b8 <__multadd+0x12>
 80094de:	b1d7      	cbz	r7, 8009516 <__multadd+0x70>
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	42ab      	cmp	r3, r5
 80094e4:	dc12      	bgt.n	800950c <__multadd+0x66>
 80094e6:	6861      	ldr	r1, [r4, #4]
 80094e8:	4630      	mov	r0, r6
 80094ea:	3101      	adds	r1, #1
 80094ec:	f7ff ff90 	bl	8009410 <_Balloc>
 80094f0:	4680      	mov	r8, r0
 80094f2:	6922      	ldr	r2, [r4, #16]
 80094f4:	f104 010c 	add.w	r1, r4, #12
 80094f8:	3202      	adds	r2, #2
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	300c      	adds	r0, #12
 80094fe:	f7fe fc9f 	bl	8007e40 <memcpy>
 8009502:	4621      	mov	r1, r4
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff ffb7 	bl	8009478 <_Bfree>
 800950a:	4644      	mov	r4, r8
 800950c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009510:	3501      	adds	r5, #1
 8009512:	615f      	str	r7, [r3, #20]
 8009514:	6125      	str	r5, [r4, #16]
 8009516:	4620      	mov	r0, r4
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800951c <__hi0bits>:
 800951c:	0c02      	lsrs	r2, r0, #16
 800951e:	0412      	lsls	r2, r2, #16
 8009520:	4603      	mov	r3, r0
 8009522:	b9b2      	cbnz	r2, 8009552 <__hi0bits+0x36>
 8009524:	0403      	lsls	r3, r0, #16
 8009526:	2010      	movs	r0, #16
 8009528:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800952c:	bf04      	itt	eq
 800952e:	021b      	lsleq	r3, r3, #8
 8009530:	3008      	addeq	r0, #8
 8009532:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009536:	bf04      	itt	eq
 8009538:	011b      	lsleq	r3, r3, #4
 800953a:	3004      	addeq	r0, #4
 800953c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009540:	bf04      	itt	eq
 8009542:	009b      	lsleq	r3, r3, #2
 8009544:	3002      	addeq	r0, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	db06      	blt.n	8009558 <__hi0bits+0x3c>
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	d503      	bpl.n	8009556 <__hi0bits+0x3a>
 800954e:	3001      	adds	r0, #1
 8009550:	4770      	bx	lr
 8009552:	2000      	movs	r0, #0
 8009554:	e7e8      	b.n	8009528 <__hi0bits+0xc>
 8009556:	2020      	movs	r0, #32
 8009558:	4770      	bx	lr

0800955a <__lo0bits>:
 800955a:	6803      	ldr	r3, [r0, #0]
 800955c:	4601      	mov	r1, r0
 800955e:	f013 0207 	ands.w	r2, r3, #7
 8009562:	d00b      	beq.n	800957c <__lo0bits+0x22>
 8009564:	07da      	lsls	r2, r3, #31
 8009566:	d423      	bmi.n	80095b0 <__lo0bits+0x56>
 8009568:	0798      	lsls	r0, r3, #30
 800956a:	bf49      	itett	mi
 800956c:	085b      	lsrmi	r3, r3, #1
 800956e:	089b      	lsrpl	r3, r3, #2
 8009570:	2001      	movmi	r0, #1
 8009572:	600b      	strmi	r3, [r1, #0]
 8009574:	bf5c      	itt	pl
 8009576:	600b      	strpl	r3, [r1, #0]
 8009578:	2002      	movpl	r0, #2
 800957a:	4770      	bx	lr
 800957c:	b298      	uxth	r0, r3
 800957e:	b9a8      	cbnz	r0, 80095ac <__lo0bits+0x52>
 8009580:	2010      	movs	r0, #16
 8009582:	0c1b      	lsrs	r3, r3, #16
 8009584:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009588:	bf04      	itt	eq
 800958a:	0a1b      	lsreq	r3, r3, #8
 800958c:	3008      	addeq	r0, #8
 800958e:	071a      	lsls	r2, r3, #28
 8009590:	bf04      	itt	eq
 8009592:	091b      	lsreq	r3, r3, #4
 8009594:	3004      	addeq	r0, #4
 8009596:	079a      	lsls	r2, r3, #30
 8009598:	bf04      	itt	eq
 800959a:	089b      	lsreq	r3, r3, #2
 800959c:	3002      	addeq	r0, #2
 800959e:	07da      	lsls	r2, r3, #31
 80095a0:	d402      	bmi.n	80095a8 <__lo0bits+0x4e>
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	d006      	beq.n	80095b4 <__lo0bits+0x5a>
 80095a6:	3001      	adds	r0, #1
 80095a8:	600b      	str	r3, [r1, #0]
 80095aa:	4770      	bx	lr
 80095ac:	4610      	mov	r0, r2
 80095ae:	e7e9      	b.n	8009584 <__lo0bits+0x2a>
 80095b0:	2000      	movs	r0, #0
 80095b2:	4770      	bx	lr
 80095b4:	2020      	movs	r0, #32
 80095b6:	4770      	bx	lr

080095b8 <__i2b>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	460c      	mov	r4, r1
 80095bc:	2101      	movs	r1, #1
 80095be:	f7ff ff27 	bl	8009410 <_Balloc>
 80095c2:	2201      	movs	r2, #1
 80095c4:	6144      	str	r4, [r0, #20]
 80095c6:	6102      	str	r2, [r0, #16]
 80095c8:	bd10      	pop	{r4, pc}

080095ca <__multiply>:
 80095ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ce:	4614      	mov	r4, r2
 80095d0:	690a      	ldr	r2, [r1, #16]
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	4688      	mov	r8, r1
 80095d6:	429a      	cmp	r2, r3
 80095d8:	bfbe      	ittt	lt
 80095da:	460b      	movlt	r3, r1
 80095dc:	46a0      	movlt	r8, r4
 80095de:	461c      	movlt	r4, r3
 80095e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095f0:	eb07 0609 	add.w	r6, r7, r9
 80095f4:	42b3      	cmp	r3, r6
 80095f6:	bfb8      	it	lt
 80095f8:	3101      	addlt	r1, #1
 80095fa:	f7ff ff09 	bl	8009410 <_Balloc>
 80095fe:	f100 0514 	add.w	r5, r0, #20
 8009602:	462b      	mov	r3, r5
 8009604:	2200      	movs	r2, #0
 8009606:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800960a:	4573      	cmp	r3, lr
 800960c:	d316      	bcc.n	800963c <__multiply+0x72>
 800960e:	f104 0214 	add.w	r2, r4, #20
 8009612:	f108 0114 	add.w	r1, r8, #20
 8009616:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800961a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	9b00      	ldr	r3, [sp, #0]
 8009622:	9201      	str	r2, [sp, #4]
 8009624:	4293      	cmp	r3, r2
 8009626:	d80c      	bhi.n	8009642 <__multiply+0x78>
 8009628:	2e00      	cmp	r6, #0
 800962a:	dd03      	ble.n	8009634 <__multiply+0x6a>
 800962c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009630:	2b00      	cmp	r3, #0
 8009632:	d05d      	beq.n	80096f0 <__multiply+0x126>
 8009634:	6106      	str	r6, [r0, #16]
 8009636:	b003      	add	sp, #12
 8009638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	f843 2b04 	str.w	r2, [r3], #4
 8009640:	e7e3      	b.n	800960a <__multiply+0x40>
 8009642:	f8b2 b000 	ldrh.w	fp, [r2]
 8009646:	f1bb 0f00 	cmp.w	fp, #0
 800964a:	d023      	beq.n	8009694 <__multiply+0xca>
 800964c:	4689      	mov	r9, r1
 800964e:	46ac      	mov	ip, r5
 8009650:	f04f 0800 	mov.w	r8, #0
 8009654:	f859 4b04 	ldr.w	r4, [r9], #4
 8009658:	f8dc a000 	ldr.w	sl, [ip]
 800965c:	b2a3      	uxth	r3, r4
 800965e:	fa1f fa8a 	uxth.w	sl, sl
 8009662:	fb0b a303 	mla	r3, fp, r3, sl
 8009666:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800966a:	f8dc 4000 	ldr.w	r4, [ip]
 800966e:	4443      	add	r3, r8
 8009670:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009674:	fb0b 840a 	mla	r4, fp, sl, r8
 8009678:	46e2      	mov	sl, ip
 800967a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800967e:	b29b      	uxth	r3, r3
 8009680:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009684:	454f      	cmp	r7, r9
 8009686:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800968a:	f84a 3b04 	str.w	r3, [sl], #4
 800968e:	d82b      	bhi.n	80096e8 <__multiply+0x11e>
 8009690:	f8cc 8004 	str.w	r8, [ip, #4]
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	3204      	adds	r2, #4
 8009698:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800969c:	f1ba 0f00 	cmp.w	sl, #0
 80096a0:	d020      	beq.n	80096e4 <__multiply+0x11a>
 80096a2:	4689      	mov	r9, r1
 80096a4:	46a8      	mov	r8, r5
 80096a6:	f04f 0b00 	mov.w	fp, #0
 80096aa:	682b      	ldr	r3, [r5, #0]
 80096ac:	f8b9 c000 	ldrh.w	ip, [r9]
 80096b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	fb0a 440c 	mla	r4, sl, ip, r4
 80096ba:	46c4      	mov	ip, r8
 80096bc:	445c      	add	r4, fp
 80096be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096c2:	f84c 3b04 	str.w	r3, [ip], #4
 80096c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80096ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	fb0a b303 	mla	r3, sl, r3, fp
 80096d4:	454f      	cmp	r7, r9
 80096d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80096da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80096de:	d805      	bhi.n	80096ec <__multiply+0x122>
 80096e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80096e4:	3504      	adds	r5, #4
 80096e6:	e79b      	b.n	8009620 <__multiply+0x56>
 80096e8:	46d4      	mov	ip, sl
 80096ea:	e7b3      	b.n	8009654 <__multiply+0x8a>
 80096ec:	46e0      	mov	r8, ip
 80096ee:	e7dd      	b.n	80096ac <__multiply+0xe2>
 80096f0:	3e01      	subs	r6, #1
 80096f2:	e799      	b.n	8009628 <__multiply+0x5e>

080096f4 <__pow5mult>:
 80096f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f8:	4615      	mov	r5, r2
 80096fa:	f012 0203 	ands.w	r2, r2, #3
 80096fe:	4606      	mov	r6, r0
 8009700:	460f      	mov	r7, r1
 8009702:	d007      	beq.n	8009714 <__pow5mult+0x20>
 8009704:	4c21      	ldr	r4, [pc, #132]	; (800978c <__pow5mult+0x98>)
 8009706:	3a01      	subs	r2, #1
 8009708:	2300      	movs	r3, #0
 800970a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800970e:	f7ff feca 	bl	80094a6 <__multadd>
 8009712:	4607      	mov	r7, r0
 8009714:	10ad      	asrs	r5, r5, #2
 8009716:	d035      	beq.n	8009784 <__pow5mult+0x90>
 8009718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800971a:	b93c      	cbnz	r4, 800972c <__pow5mult+0x38>
 800971c:	2010      	movs	r0, #16
 800971e:	f7ff fe61 	bl	80093e4 <malloc>
 8009722:	6270      	str	r0, [r6, #36]	; 0x24
 8009724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009728:	6004      	str	r4, [r0, #0]
 800972a:	60c4      	str	r4, [r0, #12]
 800972c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009734:	b94c      	cbnz	r4, 800974a <__pow5mult+0x56>
 8009736:	f240 2171 	movw	r1, #625	; 0x271
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff3c 	bl	80095b8 <__i2b>
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	f8c8 0008 	str.w	r0, [r8, #8]
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	07eb      	lsls	r3, r5, #31
 8009750:	d50a      	bpl.n	8009768 <__pow5mult+0x74>
 8009752:	4639      	mov	r1, r7
 8009754:	4622      	mov	r2, r4
 8009756:	4630      	mov	r0, r6
 8009758:	f7ff ff37 	bl	80095ca <__multiply>
 800975c:	4681      	mov	r9, r0
 800975e:	4639      	mov	r1, r7
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff fe89 	bl	8009478 <_Bfree>
 8009766:	464f      	mov	r7, r9
 8009768:	106d      	asrs	r5, r5, #1
 800976a:	d00b      	beq.n	8009784 <__pow5mult+0x90>
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	b938      	cbnz	r0, 8009780 <__pow5mult+0x8c>
 8009770:	4622      	mov	r2, r4
 8009772:	4621      	mov	r1, r4
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ff28 	bl	80095ca <__multiply>
 800977a:	6020      	str	r0, [r4, #0]
 800977c:	f8c0 8000 	str.w	r8, [r0]
 8009780:	4604      	mov	r4, r0
 8009782:	e7e4      	b.n	800974e <__pow5mult+0x5a>
 8009784:	4638      	mov	r0, r7
 8009786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978a:	bf00      	nop
 800978c:	0800a258 	.word	0x0800a258

08009790 <__lshift>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	4607      	mov	r7, r0
 8009798:	4616      	mov	r6, r2
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a0:	eb0a 0903 	add.w	r9, sl, r3
 80097a4:	6849      	ldr	r1, [r1, #4]
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	f109 0501 	add.w	r5, r9, #1
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	db32      	blt.n	8009816 <__lshift+0x86>
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff fe2d 	bl	8009410 <_Balloc>
 80097b6:	2300      	movs	r3, #0
 80097b8:	4680      	mov	r8, r0
 80097ba:	461a      	mov	r2, r3
 80097bc:	f100 0114 	add.w	r1, r0, #20
 80097c0:	4553      	cmp	r3, sl
 80097c2:	db2b      	blt.n	800981c <__lshift+0x8c>
 80097c4:	6920      	ldr	r0, [r4, #16]
 80097c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097ca:	f104 0314 	add.w	r3, r4, #20
 80097ce:	f016 021f 	ands.w	r2, r6, #31
 80097d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097da:	d025      	beq.n	8009828 <__lshift+0x98>
 80097dc:	2000      	movs	r0, #0
 80097de:	f1c2 0e20 	rsb	lr, r2, #32
 80097e2:	468a      	mov	sl, r1
 80097e4:	681e      	ldr	r6, [r3, #0]
 80097e6:	4096      	lsls	r6, r2
 80097e8:	4330      	orrs	r0, r6
 80097ea:	f84a 0b04 	str.w	r0, [sl], #4
 80097ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80097f2:	459c      	cmp	ip, r3
 80097f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80097f8:	d814      	bhi.n	8009824 <__lshift+0x94>
 80097fa:	6048      	str	r0, [r1, #4]
 80097fc:	b108      	cbz	r0, 8009802 <__lshift+0x72>
 80097fe:	f109 0502 	add.w	r5, r9, #2
 8009802:	3d01      	subs	r5, #1
 8009804:	4638      	mov	r0, r7
 8009806:	f8c8 5010 	str.w	r5, [r8, #16]
 800980a:	4621      	mov	r1, r4
 800980c:	f7ff fe34 	bl	8009478 <_Bfree>
 8009810:	4640      	mov	r0, r8
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	3101      	adds	r1, #1
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	e7c7      	b.n	80097ac <__lshift+0x1c>
 800981c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009820:	3301      	adds	r3, #1
 8009822:	e7cd      	b.n	80097c0 <__lshift+0x30>
 8009824:	4651      	mov	r1, sl
 8009826:	e7dc      	b.n	80097e2 <__lshift+0x52>
 8009828:	3904      	subs	r1, #4
 800982a:	f853 2b04 	ldr.w	r2, [r3], #4
 800982e:	459c      	cmp	ip, r3
 8009830:	f841 2f04 	str.w	r2, [r1, #4]!
 8009834:	d8f9      	bhi.n	800982a <__lshift+0x9a>
 8009836:	e7e4      	b.n	8009802 <__lshift+0x72>

08009838 <__mcmp>:
 8009838:	6903      	ldr	r3, [r0, #16]
 800983a:	690a      	ldr	r2, [r1, #16]
 800983c:	b530      	push	{r4, r5, lr}
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	d10c      	bne.n	800985c <__mcmp+0x24>
 8009842:	0092      	lsls	r2, r2, #2
 8009844:	3014      	adds	r0, #20
 8009846:	3114      	adds	r1, #20
 8009848:	1884      	adds	r4, r0, r2
 800984a:	4411      	add	r1, r2
 800984c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009854:	4295      	cmp	r5, r2
 8009856:	d003      	beq.n	8009860 <__mcmp+0x28>
 8009858:	d305      	bcc.n	8009866 <__mcmp+0x2e>
 800985a:	2301      	movs	r3, #1
 800985c:	4618      	mov	r0, r3
 800985e:	bd30      	pop	{r4, r5, pc}
 8009860:	42a0      	cmp	r0, r4
 8009862:	d3f3      	bcc.n	800984c <__mcmp+0x14>
 8009864:	e7fa      	b.n	800985c <__mcmp+0x24>
 8009866:	f04f 33ff 	mov.w	r3, #4294967295
 800986a:	e7f7      	b.n	800985c <__mcmp+0x24>

0800986c <__mdiff>:
 800986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	460d      	mov	r5, r1
 8009872:	4607      	mov	r7, r0
 8009874:	4611      	mov	r1, r2
 8009876:	4628      	mov	r0, r5
 8009878:	4614      	mov	r4, r2
 800987a:	f7ff ffdd 	bl	8009838 <__mcmp>
 800987e:	1e06      	subs	r6, r0, #0
 8009880:	d108      	bne.n	8009894 <__mdiff+0x28>
 8009882:	4631      	mov	r1, r6
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff fdc3 	bl	8009410 <_Balloc>
 800988a:	2301      	movs	r3, #1
 800988c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	bfa4      	itt	ge
 8009896:	4623      	movge	r3, r4
 8009898:	462c      	movge	r4, r5
 800989a:	4638      	mov	r0, r7
 800989c:	6861      	ldr	r1, [r4, #4]
 800989e:	bfa6      	itte	ge
 80098a0:	461d      	movge	r5, r3
 80098a2:	2600      	movge	r6, #0
 80098a4:	2601      	movlt	r6, #1
 80098a6:	f7ff fdb3 	bl	8009410 <_Balloc>
 80098aa:	f04f 0e00 	mov.w	lr, #0
 80098ae:	60c6      	str	r6, [r0, #12]
 80098b0:	692b      	ldr	r3, [r5, #16]
 80098b2:	6926      	ldr	r6, [r4, #16]
 80098b4:	f104 0214 	add.w	r2, r4, #20
 80098b8:	f105 0914 	add.w	r9, r5, #20
 80098bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80098c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80098c4:	f100 0114 	add.w	r1, r0, #20
 80098c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80098cc:	f859 5b04 	ldr.w	r5, [r9], #4
 80098d0:	fa1f f38a 	uxth.w	r3, sl
 80098d4:	4473      	add	r3, lr
 80098d6:	b2ac      	uxth	r4, r5
 80098d8:	1b1b      	subs	r3, r3, r4
 80098da:	0c2c      	lsrs	r4, r5, #16
 80098dc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80098e0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80098ea:	45c8      	cmp	r8, r9
 80098ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80098f0:	4694      	mov	ip, r2
 80098f2:	f841 4b04 	str.w	r4, [r1], #4
 80098f6:	d8e7      	bhi.n	80098c8 <__mdiff+0x5c>
 80098f8:	45bc      	cmp	ip, r7
 80098fa:	d304      	bcc.n	8009906 <__mdiff+0x9a>
 80098fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009900:	b183      	cbz	r3, 8009924 <__mdiff+0xb8>
 8009902:	6106      	str	r6, [r0, #16]
 8009904:	e7c4      	b.n	8009890 <__mdiff+0x24>
 8009906:	f85c 4b04 	ldr.w	r4, [ip], #4
 800990a:	b2a2      	uxth	r2, r4
 800990c:	4472      	add	r2, lr
 800990e:	1413      	asrs	r3, r2, #16
 8009910:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009914:	b292      	uxth	r2, r2
 8009916:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800991a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800991e:	f841 2b04 	str.w	r2, [r1], #4
 8009922:	e7e9      	b.n	80098f8 <__mdiff+0x8c>
 8009924:	3e01      	subs	r6, #1
 8009926:	e7e9      	b.n	80098fc <__mdiff+0x90>

08009928 <__d2b>:
 8009928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800992c:	461c      	mov	r4, r3
 800992e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009932:	2101      	movs	r1, #1
 8009934:	4690      	mov	r8, r2
 8009936:	f7ff fd6b 	bl	8009410 <_Balloc>
 800993a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800993e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009942:	4607      	mov	r7, r0
 8009944:	bb34      	cbnz	r4, 8009994 <__d2b+0x6c>
 8009946:	9201      	str	r2, [sp, #4]
 8009948:	f1b8 0200 	subs.w	r2, r8, #0
 800994c:	d027      	beq.n	800999e <__d2b+0x76>
 800994e:	a802      	add	r0, sp, #8
 8009950:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009954:	f7ff fe01 	bl	800955a <__lo0bits>
 8009958:	9900      	ldr	r1, [sp, #0]
 800995a:	b1f0      	cbz	r0, 800999a <__d2b+0x72>
 800995c:	9a01      	ldr	r2, [sp, #4]
 800995e:	f1c0 0320 	rsb	r3, r0, #32
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	430b      	orrs	r3, r1
 8009968:	40c2      	lsrs	r2, r0
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	9201      	str	r2, [sp, #4]
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bf14      	ite	ne
 8009974:	2102      	movne	r1, #2
 8009976:	2101      	moveq	r1, #1
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	6139      	str	r1, [r7, #16]
 800997c:	b1c4      	cbz	r4, 80099b0 <__d2b+0x88>
 800997e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009982:	4404      	add	r4, r0
 8009984:	6034      	str	r4, [r6, #0]
 8009986:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800998a:	6028      	str	r0, [r5, #0]
 800998c:	4638      	mov	r0, r7
 800998e:	b002      	add	sp, #8
 8009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009994:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009998:	e7d5      	b.n	8009946 <__d2b+0x1e>
 800999a:	6179      	str	r1, [r7, #20]
 800999c:	e7e7      	b.n	800996e <__d2b+0x46>
 800999e:	a801      	add	r0, sp, #4
 80099a0:	f7ff fddb 	bl	800955a <__lo0bits>
 80099a4:	2101      	movs	r1, #1
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	6139      	str	r1, [r7, #16]
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	3020      	adds	r0, #32
 80099ae:	e7e5      	b.n	800997c <__d2b+0x54>
 80099b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099b8:	6030      	str	r0, [r6, #0]
 80099ba:	6918      	ldr	r0, [r3, #16]
 80099bc:	f7ff fdae 	bl	800951c <__hi0bits>
 80099c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099c4:	e7e1      	b.n	800998a <__d2b+0x62>

080099c6 <_calloc_r>:
 80099c6:	b538      	push	{r3, r4, r5, lr}
 80099c8:	fb02 f401 	mul.w	r4, r2, r1
 80099cc:	4621      	mov	r1, r4
 80099ce:	f000 f855 	bl	8009a7c <_malloc_r>
 80099d2:	4605      	mov	r5, r0
 80099d4:	b118      	cbz	r0, 80099de <_calloc_r+0x18>
 80099d6:	4622      	mov	r2, r4
 80099d8:	2100      	movs	r1, #0
 80099da:	f7fe fa3c 	bl	8007e56 <memset>
 80099de:	4628      	mov	r0, r5
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080099e4 <_free_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4605      	mov	r5, r0
 80099e8:	2900      	cmp	r1, #0
 80099ea:	d043      	beq.n	8009a74 <_free_r+0x90>
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f0c      	subs	r4, r1, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfb8      	it	lt
 80099f6:	18e4      	addlt	r4, r4, r3
 80099f8:	f000 fa27 	bl	8009e4a <__malloc_lock>
 80099fc:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <_free_r+0x94>)
 80099fe:	6813      	ldr	r3, [r2, #0]
 8009a00:	4610      	mov	r0, r2
 8009a02:	b933      	cbnz	r3, 8009a12 <_free_r+0x2e>
 8009a04:	6063      	str	r3, [r4, #4]
 8009a06:	6014      	str	r4, [r2, #0]
 8009a08:	4628      	mov	r0, r5
 8009a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0e:	f000 ba1d 	b.w	8009e4c <__malloc_unlock>
 8009a12:	42a3      	cmp	r3, r4
 8009a14:	d90b      	bls.n	8009a2e <_free_r+0x4a>
 8009a16:	6821      	ldr	r1, [r4, #0]
 8009a18:	1862      	adds	r2, r4, r1
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bf01      	itttt	eq
 8009a1e:	681a      	ldreq	r2, [r3, #0]
 8009a20:	685b      	ldreq	r3, [r3, #4]
 8009a22:	1852      	addeq	r2, r2, r1
 8009a24:	6022      	streq	r2, [r4, #0]
 8009a26:	6063      	str	r3, [r4, #4]
 8009a28:	6004      	str	r4, [r0, #0]
 8009a2a:	e7ed      	b.n	8009a08 <_free_r+0x24>
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	b10a      	cbz	r2, 8009a36 <_free_r+0x52>
 8009a32:	42a2      	cmp	r2, r4
 8009a34:	d9fa      	bls.n	8009a2c <_free_r+0x48>
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	1858      	adds	r0, r3, r1
 8009a3a:	42a0      	cmp	r0, r4
 8009a3c:	d10b      	bne.n	8009a56 <_free_r+0x72>
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	4401      	add	r1, r0
 8009a42:	1858      	adds	r0, r3, r1
 8009a44:	4282      	cmp	r2, r0
 8009a46:	6019      	str	r1, [r3, #0]
 8009a48:	d1de      	bne.n	8009a08 <_free_r+0x24>
 8009a4a:	6810      	ldr	r0, [r2, #0]
 8009a4c:	6852      	ldr	r2, [r2, #4]
 8009a4e:	4401      	add	r1, r0
 8009a50:	6019      	str	r1, [r3, #0]
 8009a52:	605a      	str	r2, [r3, #4]
 8009a54:	e7d8      	b.n	8009a08 <_free_r+0x24>
 8009a56:	d902      	bls.n	8009a5e <_free_r+0x7a>
 8009a58:	230c      	movs	r3, #12
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	e7d4      	b.n	8009a08 <_free_r+0x24>
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	1821      	adds	r1, r4, r0
 8009a62:	428a      	cmp	r2, r1
 8009a64:	bf01      	itttt	eq
 8009a66:	6811      	ldreq	r1, [r2, #0]
 8009a68:	6852      	ldreq	r2, [r2, #4]
 8009a6a:	1809      	addeq	r1, r1, r0
 8009a6c:	6021      	streq	r1, [r4, #0]
 8009a6e:	6062      	str	r2, [r4, #4]
 8009a70:	605c      	str	r4, [r3, #4]
 8009a72:	e7c9      	b.n	8009a08 <_free_r+0x24>
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	200024e4 	.word	0x200024e4

08009a7c <_malloc_r>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	1ccd      	adds	r5, r1, #3
 8009a80:	f025 0503 	bic.w	r5, r5, #3
 8009a84:	3508      	adds	r5, #8
 8009a86:	2d0c      	cmp	r5, #12
 8009a88:	bf38      	it	cc
 8009a8a:	250c      	movcc	r5, #12
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	4606      	mov	r6, r0
 8009a90:	db01      	blt.n	8009a96 <_malloc_r+0x1a>
 8009a92:	42a9      	cmp	r1, r5
 8009a94:	d903      	bls.n	8009a9e <_malloc_r+0x22>
 8009a96:	230c      	movs	r3, #12
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	f000 f9d4 	bl	8009e4a <__malloc_lock>
 8009aa2:	4a21      	ldr	r2, [pc, #132]	; (8009b28 <_malloc_r+0xac>)
 8009aa4:	6814      	ldr	r4, [r2, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	b991      	cbnz	r1, 8009ad0 <_malloc_r+0x54>
 8009aaa:	4c20      	ldr	r4, [pc, #128]	; (8009b2c <_malloc_r+0xb0>)
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	b91b      	cbnz	r3, 8009ab8 <_malloc_r+0x3c>
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 f98f 	bl	8009dd4 <_sbrk_r>
 8009ab6:	6020      	str	r0, [r4, #0]
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 f98a 	bl	8009dd4 <_sbrk_r>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d124      	bne.n	8009b0e <_malloc_r+0x92>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	6033      	str	r3, [r6, #0]
 8009aca:	f000 f9bf 	bl	8009e4c <__malloc_unlock>
 8009ace:	e7e4      	b.n	8009a9a <_malloc_r+0x1e>
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	1b5b      	subs	r3, r3, r5
 8009ad4:	d418      	bmi.n	8009b08 <_malloc_r+0x8c>
 8009ad6:	2b0b      	cmp	r3, #11
 8009ad8:	d90f      	bls.n	8009afa <_malloc_r+0x7e>
 8009ada:	600b      	str	r3, [r1, #0]
 8009adc:	18cc      	adds	r4, r1, r3
 8009ade:	50cd      	str	r5, [r1, r3]
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 f9b3 	bl	8009e4c <__malloc_unlock>
 8009ae6:	f104 000b 	add.w	r0, r4, #11
 8009aea:	1d23      	adds	r3, r4, #4
 8009aec:	f020 0007 	bic.w	r0, r0, #7
 8009af0:	1ac3      	subs	r3, r0, r3
 8009af2:	d0d3      	beq.n	8009a9c <_malloc_r+0x20>
 8009af4:	425a      	negs	r2, r3
 8009af6:	50e2      	str	r2, [r4, r3]
 8009af8:	e7d0      	b.n	8009a9c <_malloc_r+0x20>
 8009afa:	684b      	ldr	r3, [r1, #4]
 8009afc:	428c      	cmp	r4, r1
 8009afe:	bf16      	itet	ne
 8009b00:	6063      	strne	r3, [r4, #4]
 8009b02:	6013      	streq	r3, [r2, #0]
 8009b04:	460c      	movne	r4, r1
 8009b06:	e7eb      	b.n	8009ae0 <_malloc_r+0x64>
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6849      	ldr	r1, [r1, #4]
 8009b0c:	e7cc      	b.n	8009aa8 <_malloc_r+0x2c>
 8009b0e:	1cc4      	adds	r4, r0, #3
 8009b10:	f024 0403 	bic.w	r4, r4, #3
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d005      	beq.n	8009b24 <_malloc_r+0xa8>
 8009b18:	1a21      	subs	r1, r4, r0
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f95a 	bl	8009dd4 <_sbrk_r>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d0cf      	beq.n	8009ac4 <_malloc_r+0x48>
 8009b24:	6025      	str	r5, [r4, #0]
 8009b26:	e7db      	b.n	8009ae0 <_malloc_r+0x64>
 8009b28:	200024e4 	.word	0x200024e4
 8009b2c:	200024e8 	.word	0x200024e8

08009b30 <__ssputs_r>:
 8009b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	688e      	ldr	r6, [r1, #8]
 8009b36:	4682      	mov	sl, r0
 8009b38:	429e      	cmp	r6, r3
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4690      	mov	r8, r2
 8009b3e:	4699      	mov	r9, r3
 8009b40:	d837      	bhi.n	8009bb2 <__ssputs_r+0x82>
 8009b42:	898a      	ldrh	r2, [r1, #12]
 8009b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b48:	d031      	beq.n	8009bae <__ssputs_r+0x7e>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	6825      	ldr	r5, [r4, #0]
 8009b4e:	6909      	ldr	r1, [r1, #16]
 8009b50:	1a6f      	subs	r7, r5, r1
 8009b52:	6965      	ldr	r5, [r4, #20]
 8009b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b58:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b5c:	f109 0301 	add.w	r3, r9, #1
 8009b60:	443b      	add	r3, r7
 8009b62:	429d      	cmp	r5, r3
 8009b64:	bf38      	it	cc
 8009b66:	461d      	movcc	r5, r3
 8009b68:	0553      	lsls	r3, r2, #21
 8009b6a:	d530      	bpl.n	8009bce <__ssputs_r+0x9e>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7ff ff85 	bl	8009a7c <_malloc_r>
 8009b72:	4606      	mov	r6, r0
 8009b74:	b950      	cbnz	r0, 8009b8c <__ssputs_r+0x5c>
 8009b76:	230c      	movs	r3, #12
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	f8ca 3000 	str.w	r3, [sl]
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	463a      	mov	r2, r7
 8009b8e:	6921      	ldr	r1, [r4, #16]
 8009b90:	f7fe f956 	bl	8007e40 <memcpy>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	6126      	str	r6, [r4, #16]
 8009ba2:	443e      	add	r6, r7
 8009ba4:	6026      	str	r6, [r4, #0]
 8009ba6:	464e      	mov	r6, r9
 8009ba8:	6165      	str	r5, [r4, #20]
 8009baa:	1bed      	subs	r5, r5, r7
 8009bac:	60a5      	str	r5, [r4, #8]
 8009bae:	454e      	cmp	r6, r9
 8009bb0:	d900      	bls.n	8009bb4 <__ssputs_r+0x84>
 8009bb2:	464e      	mov	r6, r9
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	4641      	mov	r1, r8
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	f000 f92d 	bl	8009e18 <memmove>
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	1b9b      	subs	r3, r3, r6
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	441e      	add	r6, r3
 8009bca:	6026      	str	r6, [r4, #0]
 8009bcc:	e7dc      	b.n	8009b88 <__ssputs_r+0x58>
 8009bce:	462a      	mov	r2, r5
 8009bd0:	f000 f93d 	bl	8009e4e <_realloc_r>
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d1e2      	bne.n	8009ba0 <__ssputs_r+0x70>
 8009bda:	6921      	ldr	r1, [r4, #16]
 8009bdc:	4650      	mov	r0, sl
 8009bde:	f7ff ff01 	bl	80099e4 <_free_r>
 8009be2:	e7c8      	b.n	8009b76 <__ssputs_r+0x46>

08009be4 <_svfiprintf_r>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	461d      	mov	r5, r3
 8009bea:	898b      	ldrh	r3, [r1, #12]
 8009bec:	b09d      	sub	sp, #116	; 0x74
 8009bee:	061f      	lsls	r7, r3, #24
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	d50f      	bpl.n	8009c18 <_svfiprintf_r+0x34>
 8009bf8:	690b      	ldr	r3, [r1, #16]
 8009bfa:	b96b      	cbnz	r3, 8009c18 <_svfiprintf_r+0x34>
 8009bfc:	2140      	movs	r1, #64	; 0x40
 8009bfe:	f7ff ff3d 	bl	8009a7c <_malloc_r>
 8009c02:	6020      	str	r0, [r4, #0]
 8009c04:	6120      	str	r0, [r4, #16]
 8009c06:	b928      	cbnz	r0, 8009c14 <_svfiprintf_r+0x30>
 8009c08:	230c      	movs	r3, #12
 8009c0a:	f8c8 3000 	str.w	r3, [r8]
 8009c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c12:	e0c8      	b.n	8009da6 <_svfiprintf_r+0x1c2>
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	6163      	str	r3, [r4, #20]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1c:	2320      	movs	r3, #32
 8009c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c22:	2330      	movs	r3, #48	; 0x30
 8009c24:	f04f 0b01 	mov.w	fp, #1
 8009c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c2c:	9503      	str	r5, [sp, #12]
 8009c2e:	4637      	mov	r7, r6
 8009c30:	463d      	mov	r5, r7
 8009c32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c36:	b10b      	cbz	r3, 8009c3c <_svfiprintf_r+0x58>
 8009c38:	2b25      	cmp	r3, #37	; 0x25
 8009c3a:	d13e      	bne.n	8009cba <_svfiprintf_r+0xd6>
 8009c3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009c40:	d00b      	beq.n	8009c5a <_svfiprintf_r+0x76>
 8009c42:	4653      	mov	r3, sl
 8009c44:	4632      	mov	r2, r6
 8009c46:	4621      	mov	r1, r4
 8009c48:	4640      	mov	r0, r8
 8009c4a:	f7ff ff71 	bl	8009b30 <__ssputs_r>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f000 80a4 	beq.w	8009d9c <_svfiprintf_r+0x1b8>
 8009c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c56:	4453      	add	r3, sl
 8009c58:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5a:	783b      	ldrb	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 809d 	beq.w	8009d9c <_svfiprintf_r+0x1b8>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295
 8009c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c74:	931a      	str	r3, [sp, #104]	; 0x68
 8009c76:	462f      	mov	r7, r5
 8009c78:	2205      	movs	r2, #5
 8009c7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c7e:	4850      	ldr	r0, [pc, #320]	; (8009dc0 <_svfiprintf_r+0x1dc>)
 8009c80:	f7ff fbb8 	bl	80093f4 <memchr>
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	b9d0      	cbnz	r0, 8009cbe <_svfiprintf_r+0xda>
 8009c88:	06d9      	lsls	r1, r3, #27
 8009c8a:	bf44      	itt	mi
 8009c8c:	2220      	movmi	r2, #32
 8009c8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c92:	071a      	lsls	r2, r3, #28
 8009c94:	bf44      	itt	mi
 8009c96:	222b      	movmi	r2, #43	; 0x2b
 8009c98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c9c:	782a      	ldrb	r2, [r5, #0]
 8009c9e:	2a2a      	cmp	r2, #42	; 0x2a
 8009ca0:	d015      	beq.n	8009cce <_svfiprintf_r+0xea>
 8009ca2:	462f      	mov	r7, r5
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	250a      	movs	r5, #10
 8009ca8:	9a07      	ldr	r2, [sp, #28]
 8009caa:	4639      	mov	r1, r7
 8009cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb0:	3b30      	subs	r3, #48	; 0x30
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d94d      	bls.n	8009d52 <_svfiprintf_r+0x16e>
 8009cb6:	b1b8      	cbz	r0, 8009ce8 <_svfiprintf_r+0x104>
 8009cb8:	e00f      	b.n	8009cda <_svfiprintf_r+0xf6>
 8009cba:	462f      	mov	r7, r5
 8009cbc:	e7b8      	b.n	8009c30 <_svfiprintf_r+0x4c>
 8009cbe:	4a40      	ldr	r2, [pc, #256]	; (8009dc0 <_svfiprintf_r+0x1dc>)
 8009cc0:	463d      	mov	r5, r7
 8009cc2:	1a80      	subs	r0, r0, r2
 8009cc4:	fa0b f000 	lsl.w	r0, fp, r0
 8009cc8:	4318      	orrs	r0, r3
 8009cca:	9004      	str	r0, [sp, #16]
 8009ccc:	e7d3      	b.n	8009c76 <_svfiprintf_r+0x92>
 8009cce:	9a03      	ldr	r2, [sp, #12]
 8009cd0:	1d11      	adds	r1, r2, #4
 8009cd2:	6812      	ldr	r2, [r2, #0]
 8009cd4:	9103      	str	r1, [sp, #12]
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	db01      	blt.n	8009cde <_svfiprintf_r+0xfa>
 8009cda:	9207      	str	r2, [sp, #28]
 8009cdc:	e004      	b.n	8009ce8 <_svfiprintf_r+0x104>
 8009cde:	4252      	negs	r2, r2
 8009ce0:	f043 0302 	orr.w	r3, r3, #2
 8009ce4:	9207      	str	r2, [sp, #28]
 8009ce6:	9304      	str	r3, [sp, #16]
 8009ce8:	783b      	ldrb	r3, [r7, #0]
 8009cea:	2b2e      	cmp	r3, #46	; 0x2e
 8009cec:	d10c      	bne.n	8009d08 <_svfiprintf_r+0x124>
 8009cee:	787b      	ldrb	r3, [r7, #1]
 8009cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf2:	d133      	bne.n	8009d5c <_svfiprintf_r+0x178>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	3702      	adds	r7, #2
 8009cf8:	1d1a      	adds	r2, r3, #4
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	9203      	str	r2, [sp, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bfb8      	it	lt
 8009d02:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d06:	9305      	str	r3, [sp, #20]
 8009d08:	4d2e      	ldr	r5, [pc, #184]	; (8009dc4 <_svfiprintf_r+0x1e0>)
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	7839      	ldrb	r1, [r7, #0]
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f7ff fb70 	bl	80093f4 <memchr>
 8009d14:	b138      	cbz	r0, 8009d26 <_svfiprintf_r+0x142>
 8009d16:	2340      	movs	r3, #64	; 0x40
 8009d18:	1b40      	subs	r0, r0, r5
 8009d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	3701      	adds	r7, #1
 8009d22:	4303      	orrs	r3, r0
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	7839      	ldrb	r1, [r7, #0]
 8009d28:	2206      	movs	r2, #6
 8009d2a:	4827      	ldr	r0, [pc, #156]	; (8009dc8 <_svfiprintf_r+0x1e4>)
 8009d2c:	1c7e      	adds	r6, r7, #1
 8009d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d32:	f7ff fb5f 	bl	80093f4 <memchr>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d038      	beq.n	8009dac <_svfiprintf_r+0x1c8>
 8009d3a:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <_svfiprintf_r+0x1e8>)
 8009d3c:	bb13      	cbnz	r3, 8009d84 <_svfiprintf_r+0x1a0>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	3307      	adds	r3, #7
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	3308      	adds	r3, #8
 8009d48:	9303      	str	r3, [sp, #12]
 8009d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4c:	444b      	add	r3, r9
 8009d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d50:	e76d      	b.n	8009c2e <_svfiprintf_r+0x4a>
 8009d52:	fb05 3202 	mla	r2, r5, r2, r3
 8009d56:	2001      	movs	r0, #1
 8009d58:	460f      	mov	r7, r1
 8009d5a:	e7a6      	b.n	8009caa <_svfiprintf_r+0xc6>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	250a      	movs	r5, #10
 8009d60:	4619      	mov	r1, r3
 8009d62:	3701      	adds	r7, #1
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	4638      	mov	r0, r7
 8009d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6c:	3a30      	subs	r2, #48	; 0x30
 8009d6e:	2a09      	cmp	r2, #9
 8009d70:	d903      	bls.n	8009d7a <_svfiprintf_r+0x196>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0c8      	beq.n	8009d08 <_svfiprintf_r+0x124>
 8009d76:	9105      	str	r1, [sp, #20]
 8009d78:	e7c6      	b.n	8009d08 <_svfiprintf_r+0x124>
 8009d7a:	fb05 2101 	mla	r1, r5, r1, r2
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4607      	mov	r7, r0
 8009d82:	e7f0      	b.n	8009d66 <_svfiprintf_r+0x182>
 8009d84:	ab03      	add	r3, sp, #12
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <_svfiprintf_r+0x1ec>)
 8009d8c:	a904      	add	r1, sp, #16
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7fe f8fa 	bl	8007f88 <_printf_float>
 8009d94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d98:	4681      	mov	r9, r0
 8009d9a:	d1d6      	bne.n	8009d4a <_svfiprintf_r+0x166>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	065b      	lsls	r3, r3, #25
 8009da0:	f53f af35 	bmi.w	8009c0e <_svfiprintf_r+0x2a>
 8009da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da6:	b01d      	add	sp, #116	; 0x74
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	ab03      	add	r3, sp, #12
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	4622      	mov	r2, r4
 8009db2:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <_svfiprintf_r+0x1ec>)
 8009db4:	a904      	add	r1, sp, #16
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7fe fb92 	bl	80084e0 <_printf_i>
 8009dbc:	e7ea      	b.n	8009d94 <_svfiprintf_r+0x1b0>
 8009dbe:	bf00      	nop
 8009dc0:	0800a264 	.word	0x0800a264
 8009dc4:	0800a26a 	.word	0x0800a26a
 8009dc8:	0800a26e 	.word	0x0800a26e
 8009dcc:	08007f89 	.word	0x08007f89
 8009dd0:	08009b31 	.word	0x08009b31

08009dd4 <_sbrk_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4c05      	ldr	r4, [pc, #20]	; (8009df0 <_sbrk_r+0x1c>)
 8009dda:	4605      	mov	r5, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	f7f8 fec0 	bl	8002b64 <_sbrk>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_sbrk_r+0x1a>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_sbrk_r+0x1a>
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	20002814 	.word	0x20002814

08009df4 <__ascii_mbtowc>:
 8009df4:	b082      	sub	sp, #8
 8009df6:	b901      	cbnz	r1, 8009dfa <__ascii_mbtowc+0x6>
 8009df8:	a901      	add	r1, sp, #4
 8009dfa:	b142      	cbz	r2, 8009e0e <__ascii_mbtowc+0x1a>
 8009dfc:	b14b      	cbz	r3, 8009e12 <__ascii_mbtowc+0x1e>
 8009dfe:	7813      	ldrb	r3, [r2, #0]
 8009e00:	600b      	str	r3, [r1, #0]
 8009e02:	7812      	ldrb	r2, [r2, #0]
 8009e04:	1c10      	adds	r0, r2, #0
 8009e06:	bf18      	it	ne
 8009e08:	2001      	movne	r0, #1
 8009e0a:	b002      	add	sp, #8
 8009e0c:	4770      	bx	lr
 8009e0e:	4610      	mov	r0, r2
 8009e10:	e7fb      	b.n	8009e0a <__ascii_mbtowc+0x16>
 8009e12:	f06f 0001 	mvn.w	r0, #1
 8009e16:	e7f8      	b.n	8009e0a <__ascii_mbtowc+0x16>

08009e18 <memmove>:
 8009e18:	4288      	cmp	r0, r1
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	eb01 0302 	add.w	r3, r1, r2
 8009e20:	d807      	bhi.n	8009e32 <memmove+0x1a>
 8009e22:	1e42      	subs	r2, r0, #1
 8009e24:	4299      	cmp	r1, r3
 8009e26:	d00a      	beq.n	8009e3e <memmove+0x26>
 8009e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e30:	e7f8      	b.n	8009e24 <memmove+0xc>
 8009e32:	4283      	cmp	r3, r0
 8009e34:	d9f5      	bls.n	8009e22 <memmove+0xa>
 8009e36:	1881      	adds	r1, r0, r2
 8009e38:	1ad2      	subs	r2, r2, r3
 8009e3a:	42d3      	cmn	r3, r2
 8009e3c:	d100      	bne.n	8009e40 <memmove+0x28>
 8009e3e:	bd10      	pop	{r4, pc}
 8009e40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e48:	e7f7      	b.n	8009e3a <memmove+0x22>

08009e4a <__malloc_lock>:
 8009e4a:	4770      	bx	lr

08009e4c <__malloc_unlock>:
 8009e4c:	4770      	bx	lr

08009e4e <_realloc_r>:
 8009e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e50:	4607      	mov	r7, r0
 8009e52:	4614      	mov	r4, r2
 8009e54:	460e      	mov	r6, r1
 8009e56:	b921      	cbnz	r1, 8009e62 <_realloc_r+0x14>
 8009e58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	f7ff be0d 	b.w	8009a7c <_malloc_r>
 8009e62:	b922      	cbnz	r2, 8009e6e <_realloc_r+0x20>
 8009e64:	f7ff fdbe 	bl	80099e4 <_free_r>
 8009e68:	4625      	mov	r5, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	f000 f821 	bl	8009eb4 <_malloc_usable_size_r>
 8009e72:	42a0      	cmp	r0, r4
 8009e74:	d20f      	bcs.n	8009e96 <_realloc_r+0x48>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff fdff 	bl	8009a7c <_malloc_r>
 8009e7e:	4605      	mov	r5, r0
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d0f2      	beq.n	8009e6a <_realloc_r+0x1c>
 8009e84:	4631      	mov	r1, r6
 8009e86:	4622      	mov	r2, r4
 8009e88:	f7fd ffda 	bl	8007e40 <memcpy>
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff fda8 	bl	80099e4 <_free_r>
 8009e94:	e7e9      	b.n	8009e6a <_realloc_r+0x1c>
 8009e96:	4635      	mov	r5, r6
 8009e98:	e7e7      	b.n	8009e6a <_realloc_r+0x1c>

08009e9a <__ascii_wctomb>:
 8009e9a:	b149      	cbz	r1, 8009eb0 <__ascii_wctomb+0x16>
 8009e9c:	2aff      	cmp	r2, #255	; 0xff
 8009e9e:	bf8b      	itete	hi
 8009ea0:	238a      	movhi	r3, #138	; 0x8a
 8009ea2:	700a      	strbls	r2, [r1, #0]
 8009ea4:	6003      	strhi	r3, [r0, #0]
 8009ea6:	2001      	movls	r0, #1
 8009ea8:	bf88      	it	hi
 8009eaa:	f04f 30ff 	movhi.w	r0, #4294967295
 8009eae:	4770      	bx	lr
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4770      	bx	lr

08009eb4 <_malloc_usable_size_r>:
 8009eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb8:	1f18      	subs	r0, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bfbc      	itt	lt
 8009ebe:	580b      	ldrlt	r3, [r1, r0]
 8009ec0:	18c0      	addlt	r0, r0, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
