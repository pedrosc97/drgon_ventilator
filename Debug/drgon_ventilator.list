
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005974  08005974  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005974  08005974  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005974  08005974  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800597c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c88  20000078  080059f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  080059f4  00021d00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141d4  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d5d  00000000  00000000  00034275  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e0  00000000  00000000  00036fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  000381b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017136  00000000  00000000  00039250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da74  00000000  00000000  00050386  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b81d  00000000  00000000  0005ddfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005270  00000000  00000000  000d9694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080057b8 	.word	0x080057b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080057b8 	.word	0x080057b8

08000150 <__aeabi_f2iz>:
 8000150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000154:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000158:	d30f      	bcc.n	800017a <__aeabi_f2iz+0x2a>
 800015a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800015e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000162:	d90d      	bls.n	8000180 <__aeabi_f2iz+0x30>
 8000164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000170:	fa23 f002 	lsr.w	r0, r3, r2
 8000174:	bf18      	it	ne
 8000176:	4240      	negne	r0, r0
 8000178:	4770      	bx	lr
 800017a:	f04f 0000 	mov.w	r0, #0
 800017e:	4770      	bx	lr
 8000180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000184:	d101      	bne.n	800018a <__aeabi_f2iz+0x3a>
 8000186:	0242      	lsls	r2, r0, #9
 8000188:	d105      	bne.n	8000196 <__aeabi_f2iz+0x46>
 800018a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800018e:	bf08      	it	eq
 8000190:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000194:	4770      	bx	lr
 8000196:	f04f 0000 	mov.w	r0, #0
 800019a:	4770      	bx	lr

0800019c <DCMotorRPMSet>:
{
	dc_motor_->motor_pwm_ctrl = timer_handler_;
}

void DCMotorRPMSet(DCMotor_S *dc_motor_, uint16_t rpm_, DCMotorDirection_E direction_)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b08a      	sub	sp, #40	; 0x28
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	460b      	mov	r3, r1
 80001a6:	807b      	strh	r3, [r7, #2]
 80001a8:	4613      	mov	r3, r2
 80001aa:	707b      	strb	r3, [r7, #1]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80001ac:	2360      	movs	r3, #96	; 0x60
 80001ae:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = rpm_ - 1;
 80001b0:	887b      	ldrh	r3, [r7, #2]
 80001b2:	3b01      	subs	r3, #1
 80001b4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80001b6:	2300      	movs	r3, #0
 80001b8:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80001be:	2300      	movs	r3, #0
 80001c0:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80001c2:	2300      	movs	r3, #0
 80001c4:	623b      	str	r3, [r7, #32]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80001c6:	2300      	movs	r3, #0
 80001c8:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2100      	movs	r1, #0
 80001d0:	4618      	mov	r0, r3
 80001d2:	f002 f9bf 	bl	8002554 <HAL_TIM_PWM_Stop>

    if (direction_ == MOTOR_SPIN_CW)
 80001d6:	787b      	ldrb	r3, [r7, #1]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d10a      	bne.n	80001f2 <DCMotorRPMSet+0x56>
    {
		HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4819      	ldr	r0, [pc, #100]	; (8000248 <DCMotorRPMSet+0xac>)
 80001e2:	f001 f891 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2120      	movs	r1, #32
 80001ea:	4817      	ldr	r0, [pc, #92]	; (8000248 <DCMotorRPMSet+0xac>)
 80001ec:	f001 f88c 	bl	8001308 <HAL_GPIO_WritePin>
 80001f0:	e017      	b.n	8000222 <DCMotorRPMSet+0x86>
    }
	else if (direction_ == MOTOR_SPIN_CCW)
 80001f2:	787b      	ldrb	r3, [r7, #1]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d10a      	bne.n	800020e <DCMotorRPMSet+0x72>
	{
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4812      	ldr	r0, [pc, #72]	; (8000248 <DCMotorRPMSet+0xac>)
 80001fe:	f001 f883 	bl	8001308 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2120      	movs	r1, #32
 8000206:	4810      	ldr	r0, [pc, #64]	; (8000248 <DCMotorRPMSet+0xac>)
 8000208:	f001 f87e 	bl	8001308 <HAL_GPIO_WritePin>
 800020c:	e009      	b.n	8000222 <DCMotorRPMSet+0x86>
    }
	else
	{
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2110      	movs	r1, #16
 8000212:	480d      	ldr	r0, [pc, #52]	; (8000248 <DCMotorRPMSet+0xac>)
 8000214:	f001 f878 	bl	8001308 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2120      	movs	r1, #32
 800021c:	480a      	ldr	r0, [pc, #40]	; (8000248 <DCMotorRPMSet+0xac>)
 800021e:	f001 f873 	bl	8001308 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f107 010c 	add.w	r1, r7, #12
 800022a:	2200      	movs	r2, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f002 fb73 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f002 f959 	bl	80024f0 <HAL_TIM_PWM_Start>
}
 800023e:	bf00      	nop
 8000240:	3728      	adds	r7, #40	; 0x28
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010c00 	.word	0x40010c00

0800024c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <vApplicationGetIdleTaskMemory+0x28>)
 800025c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <vApplicationGetIdleTaskMemory+0x2c>)
 8000262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	20000094 	.word	0x20000094
 8000278:	200000e8 	.word	0x200000e8

0800027c <LCDSendCmd>:

#include "stm32f1xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b087      	sub	sp, #28
 8000280:	af02      	add	r7, sp, #8
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	f023 030f 	bic.w	r3, r3, #15
 800028e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	f043 030c 	orr.w	r3, r3, #12
 800029c:	b2db      	uxtb	r3, r3
 800029e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002aa:	7bbb      	ldrb	r3, [r7, #14]
 80002ac:	f043 030c 	orr.w	r3, r3, #12
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	b299      	uxth	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7a1b      	ldrb	r3, [r3, #8]
 80002cc:	b29c      	uxth	r4, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	88db      	ldrh	r3, [r3, #6]
 80002d2:	f107 0208 	add.w	r2, r7, #8
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	4623      	mov	r3, r4
 80002da:	f001 f955 	bl	8001588 <HAL_I2C_Master_Transmit>
}
 80002de:	bf00      	nop
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd90      	pop	{r4, r7, pc}

080002e6 <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 80002e6:	b590      	push	{r4, r7, lr}
 80002e8:	b087      	sub	sp, #28
 80002ea:	af02      	add	r7, sp, #8
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	460b      	mov	r3, r1
 80002f0:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002f2:	78fb      	ldrb	r3, [r7, #3]
 80002f4:	f023 030f 	bic.w	r3, r3, #15
 80002f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	011b      	lsls	r3, r3, #4
 80002fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000300:	7bfb      	ldrb	r3, [r7, #15]
 8000302:	f043 030d 	orr.w	r3, r3, #13
 8000306:	b2db      	uxtb	r3, r3
 8000308:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800030a:	7bfb      	ldrb	r3, [r7, #15]
 800030c:	f043 0309 	orr.w	r3, r3, #9
 8000310:	b2db      	uxtb	r3, r3
 8000312:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000314:	7bbb      	ldrb	r3, [r7, #14]
 8000316:	f043 030d 	orr.w	r3, r3, #13
 800031a:	b2db      	uxtb	r3, r3
 800031c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800031e:	7bbb      	ldrb	r3, [r7, #14]
 8000320:	f043 0309 	orr.w	r3, r3, #9
 8000324:	b2db      	uxtb	r3, r3
 8000326:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	b299      	uxth	r1, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	7a1b      	ldrb	r3, [r3, #8]
 8000336:	b29c      	uxth	r4, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	88db      	ldrh	r3, [r3, #6]
 800033c:	f107 0208 	add.w	r2, r7, #8
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	4623      	mov	r3, r4
 8000344:	f001 f920 	bl	8001588 <HAL_I2C_Master_Transmit>
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <LCDSetCursorPos>:
		LCDSendData(lcd_disp_, ' ');
	}
}

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
 800035c:	4613      	mov	r3, r2
 800035e:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000360:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <LCDSetCursorPos+0x50>)
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	e892 0003 	ldmia.w	r2, {r0, r1}
 800036a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	f107 0210 	add.w	r2, r7, #16
 8000376:	4413      	add	r3, r2
 8000378:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800037c:	b2da      	uxtb	r2, r3
 800037e:	78bb      	ldrb	r3, [r7, #2]
 8000380:	4413      	add	r3, r2
 8000382:	b2db      	uxtb	r3, r3
 8000384:	b25b      	sxtb	r3, r3
 8000386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800038a:	b25b      	sxtb	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4619      	mov	r1, r3
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ff73 	bl	800027c <LCDSendCmd>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	080057d0 	.word	0x080057d0

080003a4 <LCDSendString>:
	HAL_Delay(100);
	LCDClear(&lcd_disp_);
}

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	while (*str)
 80003ae:	e007      	b.n	80003c0 <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	603a      	str	r2, [r7, #0]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ff93 	bl	80002e6 <LCDSendData>
	while (*str)
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1f3      	bne.n	80003b0 <LCDSendString+0xc>
	}
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b5b0      	push	{r4, r5, r7, lr}
 80003d2:	b09c      	sub	sp, #112	; 0x70
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fd2b 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f865 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 f9ad 	bl	800073c <MX_GPIO_Init>
  MX_I2C2_Init();
 80003e2:	f000 f8a7 	bl	8000534 <MX_I2C2_Init>
  MX_TIM1_Init();
 80003e6:	f000 f8d3 	bl	8000590 <MX_TIM1_Init>
  MX_TIM3_Init();
 80003ea:	f000 f953 	bl	8000694 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of masterTask */
  osThreadDef(masterTask, startMasterTask, osPriorityAboveNormal, 0, 128);
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <main+0xb8>)
 80003f0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80003f4:	461d      	mov	r5, r3
 80003f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  masterTaskHandle = osThreadCreate(osThread(masterTask), NULL);
 8000402:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f002 fe63 	bl	80030d4 <osThreadCreate>
 800040e:	4602      	mov	r2, r0
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <main+0xbc>)
 8000412:	601a      	str	r2, [r3, #0]

  /* definition and creation of motorRoutine */
  osThreadDef(motorRoutine, startMotorRoutine, osPriorityAboveNormal, 0, 128);
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <main+0xc0>)
 8000416:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800041a:	461d      	mov	r5, r3
 800041c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800041e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorRoutineHandle = osThreadCreate(osThread(motorRoutine), NULL);
 8000428:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fe50 	bl	80030d4 <osThreadCreate>
 8000434:	4602      	mov	r2, r0
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <main+0xc4>)
 8000438:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUpdate */
  osThreadDef(displayUpdate, startDisplayUpdate, osPriorityAboveNormal, 0, 128);
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <main+0xc8>)
 800043c:	f107 041c 	add.w	r4, r7, #28
 8000440:	461d      	mov	r5, r3
 8000442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000446:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800044a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUpdateHandle = osThreadCreate(osThread(displayUpdate), NULL);
 800044e:	f107 031c 	add.w	r3, r7, #28
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f002 fe3d 	bl	80030d4 <osThreadCreate>
 800045a:	4602      	mov	r2, r0
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <main+0xcc>)
 800045e:	601a      	str	r2, [r3, #0]

  /* definition and creation of encoderRPM */
  osThreadDef(encoderRPM, startEncoderRPM, osPriorityAboveNormal, 0, 128);
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <main+0xd0>)
 8000462:	463c      	mov	r4, r7
 8000464:	461d      	mov	r5, r3
 8000466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800046a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800046e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderRPMHandle = osThreadCreate(osThread(encoderRPM), NULL);
 8000472:	463b      	mov	r3, r7
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f002 fe2c 	bl	80030d4 <osThreadCreate>
 800047c:	4602      	mov	r2, r0
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <main+0xd4>)
 8000480:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000482:	f002 fe10 	bl	80030a6 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000486:	e7fe      	b.n	8000486 <main+0xb6>
 8000488:	080057e4 	.word	0x080057e4
 800048c:	20001cb0 	.word	0x20001cb0
 8000490:	08005810 	.word	0x08005810
 8000494:	20001cb4 	.word	0x20001cb4
 8000498:	0800583c 	.word	0x0800583c
 800049c:	20001c08 	.word	0x20001c08
 80004a0:	08005864 	.word	0x08005864
 80004a4:	20001c64 	.word	0x20001c64

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b090      	sub	sp, #64	; 0x40
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0318 	add.w	r3, r7, #24
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f004 f8cd 	bl	8004656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	2301      	movs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004dc:	2302      	movs	r3, #2
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ec:	f107 0318 	add.w	r3, r7, #24
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fb43 	bl	8001b7c <HAL_RCC_OscConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004fc:	f000 fa1f 	bl	800093e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000500:	230f      	movs	r3, #15
 8000502:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000504:	2302      	movs	r3, #2
 8000506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800050c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2101      	movs	r1, #1
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fdae 	bl	800207c <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000526:	f000 fa0a 	bl	800093e <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3740      	adds	r7, #64	; 0x40
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_I2C2_Init+0x50>)
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <MX_I2C2_Init+0x54>)
 800053c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_I2C2_Init+0x50>)
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <MX_I2C2_Init+0x58>)
 8000542:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_I2C2_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_I2C2_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_I2C2_Init+0x50>)
 8000552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000556:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MX_I2C2_Init+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_I2C2_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <MX_I2C2_Init+0x50>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_I2C2_Init+0x50>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_I2C2_Init+0x50>)
 8000572:	f000 fee1 	bl	8001338 <HAL_I2C_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800057c:	f000 f9df 	bl	800093e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20001bb4 	.word	0x20001bb4
 8000588:	40005800 	.word	0x40005800
 800058c:	000186a0 	.word	0x000186a0

08000590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b092      	sub	sp, #72	; 0x48
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2220      	movs	r2, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 f84b 	bl	8004656 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005c0:	4b32      	ldr	r3, [pc, #200]	; (800068c <MX_TIM1_Init+0xfc>)
 80005c2:	4a33      	ldr	r2, [pc, #204]	; (8000690 <MX_TIM1_Init+0x100>)
 80005c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_TIM1_Init+0xfc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_TIM1_Init+0xfc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_TIM1_Init+0xfc>)
 80005d4:	224f      	movs	r2, #79	; 0x4f
 80005d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_TIM1_Init+0xfc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_TIM1_Init+0xfc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <MX_TIM1_Init+0xfc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ea:	4828      	ldr	r0, [pc, #160]	; (800068c <MX_TIM1_Init+0xfc>)
 80005ec:	f001 ff55 	bl	800249a <HAL_TIM_PWM_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80005f6:	f000 f9a2 	bl	800093e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000602:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000606:	4619      	mov	r1, r3
 8000608:	4820      	ldr	r0, [pc, #128]	; (800068c <MX_TIM1_Init+0xfc>)
 800060a:	f002 fc7d 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000614:	f000 f993 	bl	800093e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000620:	2300      	movs	r3, #0
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000624:	2300      	movs	r3, #0
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_TIM1_Init+0xfc>)
 800063e:	f002 f96b 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000648:	f000 f979 	bl	800093e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000664:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <MX_TIM1_Init+0xfc>)
 8000670:	f002 fc8e 	bl	8002f90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800067a:	f000 f960 	bl	800093e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <MX_TIM1_Init+0xfc>)
 8000680:	f000 fa38 	bl	8000af4 <HAL_TIM_MspPostInit>

}
 8000684:	bf00      	nop
 8000686:	3748      	adds	r7, #72	; 0x48
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20001c70 	.word	0x20001c70
 8000690:	40012c00 	.word	0x40012c00

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2224      	movs	r2, #36	; 0x24
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ffd7 	bl	8004656 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006b2:	4a21      	ldr	r2, [pc, #132]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006c4:	224f      	movs	r2, #79	; 0x4f
 80006c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006d4:	2303      	movs	r3, #3
 80006d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80006e4:	230f      	movs	r3, #15
 80006e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ec:	2301      	movs	r3, #1
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80006f4:	230f      	movs	r3, #15
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_TIM3_Init+0xa0>)
 8000700:	f001 ff74 	bl	80025ec <HAL_TIM_Encoder_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800070a:	f000 f918 	bl	800093e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_TIM3_Init+0xa0>)
 800071c:	f002 fbf4 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000726:	f000 f90a 	bl	800093e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	; 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20001c18 	.word	0x20001c18
 8000738:	40000400 	.word	0x40000400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_GPIO_Init+0x8c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_GPIO_Init+0x8c>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_GPIO_Init+0x8c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0320 	and.w	r3, r3, #32
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_GPIO_Init+0x8c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_GPIO_Init+0x8c>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_GPIO_Init+0x8c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_GPIO_Init+0x8c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x8c>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_GPIO_Init+0x8c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorCW_Pin|MotorCCW_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2130      	movs	r1, #48	; 0x30
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <MX_GPIO_Init+0x90>)
 800079e:	f000 fdb3 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorCW_Pin MotorCCW_Pin */
  GPIO_InitStruct.Pin = MotorCW_Pin|MotorCCW_Pin;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_GPIO_Init+0x90>)
 80007ba:	f000 fc4b 	bl	8001054 <HAL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <startMasterTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_startMasterTask */
void startMasterTask(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask");
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <startMasterTask+0x18>)
 80007da:	f003 ff45 	bl	8004668 <iprintf>
	  osDelay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f002 fcc3 	bl	800316c <osDelay>
	  printf("DefaultTask");
 80007e6:	e7f7      	b.n	80007d8 <startMasterTask+0x8>
 80007e8:	08005880 	.word	0x08005880

080007ec <startMotorRoutine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorRoutine */
void startMotorRoutine(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMotorRoutine */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80007f4:	f002 fc5e 	bl	80030b4 <osKernelSysTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if (pwm_value == MOTOR_MIN_PWM_PULSE)
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <startMotorRoutine+0x8c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d103      	bne.n	800080c <startMotorRoutine+0x20>
		{
			pwm_step = MOTOR_POSITIVE_PWM_STEP;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <startMotorRoutine+0x90>)
 8000806:	2264      	movs	r2, #100	; 0x64
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e007      	b.n	800081c <startMotorRoutine+0x30>
		}
		else if (pwm_value == MOTOR_MAX_PWM_PULSE)
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <startMotorRoutine+0x8c>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000814:	d102      	bne.n	800081c <startMotorRoutine+0x30>
		{
			pwm_step = MOTOR_NEGATIVE_PWM_STEP;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <startMotorRoutine+0x90>)
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	701a      	strb	r2, [r3, #0]
		}

		pwm_value += pwm_step;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <startMotorRoutine+0x90>)
 800081e:	f993 3000 	ldrsb.w	r3, [r3]
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <startMotorRoutine+0x8c>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	4413      	add	r3, r2
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <startMotorRoutine+0x8c>)
 800082e:	801a      	strh	r2, [r3, #0]

		if (direction_flag == MOTOR_SPIN_CW)
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <startMotorRoutine+0x94>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10b      	bne.n	8000850 <startMotorRoutine+0x64>
		{
			DCMotorRPMSet(&dc_motor, pwm_value, direction_flag);
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <startMotorRoutine+0x8c>)
 800083a:	8819      	ldrh	r1, [r3, #0]
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <startMotorRoutine+0x94>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <startMotorRoutine+0x98>)
 8000844:	f7ff fcaa 	bl	800019c <DCMotorRPMSet>
			direction_flag = MOTOR_SPIN_CW;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <startMotorRoutine+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e00a      	b.n	8000866 <startMotorRoutine+0x7a>
		}
		else
		{
			DCMotorRPMSet(&dc_motor, pwm_value, direction_flag);
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <startMotorRoutine+0x8c>)
 8000852:	8819      	ldrh	r1, [r3, #0]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <startMotorRoutine+0x94>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	480a      	ldr	r0, [pc, #40]	; (8000884 <startMotorRoutine+0x98>)
 800085c:	f7ff fc9e 	bl	800019c <DCMotorRPMSet>
			direction_flag = MOTOR_SPIN_CW;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <startMotorRoutine+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		}
		osDelayUntil(&PreviousWakeTime, MOTOR_UPDATE_TIMESTEP_MS);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fc90 	bl	8003194 <osDelayUntil>
		if (pwm_value == MOTOR_MIN_PWM_PULSE)
 8000874:	e7c2      	b.n	80007fc <startMotorRoutine+0x10>
 8000876:	bf00      	nop
 8000878:	200002e8 	.word	0x200002e8
 800087c:	20000000 	.word	0x20000000
 8000880:	200002ea 	.word	0x200002ea
 8000884:	20001c68 	.word	0x20001c68

08000888 <startDisplayUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplayUpdate */
void startDisplayUpdate(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplayUpdate */
	char buffer[16];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8000890:	f002 fc10 	bl	80030b4 <osKernelSysTick>
 8000894:	4603      	mov	r3, r0
 8000896:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{

		LCDSetCursorPos(&lcd_display, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	4817      	ldr	r0, [pc, #92]	; (80008fc <startDisplayUpdate+0x74>)
 800089e:	f7ff fd57 	bl	8000350 <LCDSetCursorPos>
		sprintf(buffer, "PWM: %u    ", pwm_value);
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <startDisplayUpdate+0x78>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4915      	ldr	r1, [pc, #84]	; (8000904 <startDisplayUpdate+0x7c>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 fef2 	bl	8004698 <siprintf>
		LCDSendString(&lcd_display, buffer);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <startDisplayUpdate+0x74>)
 80008bc:	f7ff fd72 	bl	80003a4 <LCDSendString>

		LCDSetCursorPos(&lcd_display, 1, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <startDisplayUpdate+0x74>)
 80008c6:	f7ff fd43 	bl	8000350 <LCDSetCursorPos>
		sprintf(buffer, "RPM: %lu    ", (int32_t) motor_encoder.rpm);
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <startDisplayUpdate+0x80>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fc3e 	bl	8000150 <__aeabi_f2iz>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	490c      	ldr	r1, [pc, #48]	; (800090c <startDisplayUpdate+0x84>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fedb 	bl	8004698 <siprintf>
		LCDSendString(&lcd_display, buffer);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <startDisplayUpdate+0x74>)
 80008ea:	f7ff fd5b 	bl	80003a4 <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_UPDATE_TIMESTEP_MS);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	210a      	movs	r1, #10
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fc4d 	bl	8003194 <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 0, 0);
 80008fa:	e7cd      	b.n	8000898 <startDisplayUpdate+0x10>
 80008fc:	20001c0c 	.word	0x20001c0c
 8000900:	200002e8 	.word	0x200002e8
 8000904:	0800588c 	.word	0x0800588c
 8000908:	20001c58 	.word	0x20001c58
 800090c:	08005898 	.word	0x08005898

08000910 <startEncoderRPM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEncoderRPM */
void startEncoderRPM(void const * argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEncoderRPM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f002 fc27 	bl	800316c <osDelay>
 800091e:	e7fb      	b.n	8000918 <startEncoderRPM+0x8>

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fa93 	bl	8000e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
	...

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_MspInit+0x68>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_MspInit+0x68>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_MspInit+0x68>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x68>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_MspInit+0x68>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x68>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fb38 	bl	8000ffe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x6c>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_MspInit+0x6c>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d124      	bne.n	8000a26 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80009f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	2312      	movs	r3, #18
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_I2C_MspInit+0x7c>)
 8000a0a:	f000 fb23 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005800 	.word	0x40005800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_TIM_PWM_MspInit+0x34>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10b      	bne.n	8000a66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_TIM_PWM_MspInit+0x38>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_TIM_PWM_MspInit+0x38>)
 8000a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_TIM_PWM_MspInit+0x38>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40012c00 	.word	0x40012c00
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d123      	bne.n	8000ae0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_TIM_Encoder_MspInit+0x74>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_TIM_Encoder_MspInit+0x74>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	61d3      	str	r3, [r2, #28]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_TIM_Encoder_MspInit+0x74>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_TIM_Encoder_MspInit+0x74>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_TIM_Encoder_MspInit+0x74>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_TIM_Encoder_MspInit+0x74>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 8000ac8:	23c0      	movs	r3, #192	; 0xc0
 8000aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x78>)
 8000adc:	f000 faba 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010800 	.word	0x40010800

08000af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_TIM_MspPostInit+0x5c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d118      	bne.n	8000b46 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_TIM_MspPostInit+0x60>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_TIM_MspPostInit+0x60>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_TIM_MspPostInit+0x60>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 8000b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_TIM_MspPostInit+0x64>)
 8000b42:	f000 fa87 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	201c      	movs	r0, #28
 8000b72:	f000 fa44 	bl	8000ffe <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000b76:	201c      	movs	r0, #28
 8000b78:	f000 fa5d 	bl	8001036 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_InitTick+0xa4>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <HAL_InitTick+0xa4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	61d3      	str	r3, [r2, #28]
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_InitTick+0xa4>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fbd6 	bl	8002350 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ba4:	f001 fbc0 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <HAL_InitTick+0xa8>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0xac>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_InitTick+0xac>)
 8000bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_InitTick+0xac>)
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_InitTick+0xac>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_InitTick+0xac>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <HAL_InitTick+0xac>)
 8000be0:	f001 fc04 	bl	80023ec <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d104      	bne.n	8000bf4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <HAL_InitTick+0xac>)
 8000bec:	f001 fc32 	bl	8002454 <HAL_TIM_Base_Start_IT>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	e000      	b.n	8000bf6 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3730      	adds	r7, #48	; 0x30
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	20001cb8 	.word	0x20001cb8

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <HardFault_Handler+0x4>

08000c1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <UsageFault_Handler+0x4>

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM2_IRQHandler+0x10>)
 8000c42:	f001 fd61 	bl	8002708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20001cb8 	.word	0x20001cb8

08000c50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
	}

return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
	}
	return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce8:	605a      	str	r2, [r3, #4]
	return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x50>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x16>
		heap_end = &end;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <_sbrk+0x50>)
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <_sbrk+0x54>)
 8000d38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <_sbrk+0x50>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <_sbrk+0x50>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	466a      	mov	r2, sp
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d907      	bls.n	8000d5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d4e:	f003 fc4d 	bl	80045ec <__errno>
 8000d52:	4602      	mov	r2, r0
 8000d54:	230c      	movs	r3, #12
 8000d56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	e006      	b.n	8000d6c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <_sbrk+0x50>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <_sbrk+0x50>)
 8000d68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200002ec 	.word	0x200002ec
 8000d78:	20001d00 	.word	0x20001d00

08000d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <SystemInit+0x5c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <SystemInit+0x5c>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <SystemInit+0x5c>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <SystemInit+0x5c>)
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <SystemInit+0x60>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <SystemInit+0x5c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <SystemInit+0x5c>)
 8000d9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <SystemInit+0x5c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SystemInit+0x5c>)
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <SystemInit+0x5c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <SystemInit+0x5c>)
 8000dba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000dbe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SystemInit+0x5c>)
 8000dc2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dc6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SystemInit+0x64>)
 8000dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dce:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	f8ff0000 	.word	0xf8ff0000
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000de4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000de6:	e003      	b.n	8000df0 <LoopCopyDataInit>

08000de8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dee:	3104      	adds	r1, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000df4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000df8:	d3f6      	bcc.n	8000de8 <CopyDataInit>
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000dfc:	e002      	b.n	8000e04 <LoopFillZerobss>

08000dfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e00:	f842 3b04 	str.w	r3, [r2], #4

08000e04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e08:	d3f9      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e0a:	f7ff ffb7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 fbf3 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e12:	f7ff fadd 	bl	80003d0 <main>
  bx lr
 8000e16:	4770      	bx	lr
  ldr r3, =_sidata
 8000e18:	0800597c 	.word	0x0800597c
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e20:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000e24:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000e28:	20001d00 	.word	0x20001d00

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x28>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x28>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f8d1 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fe88 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fd7e 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40022000 	.word	0x40022000

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	20001cf8 	.word	0x20001cf8

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20001cf8 	.word	0x20001cf8

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4906      	ldr	r1, [pc, #24]	; (8000f2c <__NVIC_EnableIRQ+0x34>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff4f 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff64 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ffb2 	bl	8000f84 <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff81 	bl	8000f30 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff57 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e127      	b.n	80012b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001068:	2201      	movs	r2, #1
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8116 	bne.w	80012b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d034      	beq.n	80010f8 <HAL_GPIO_Init+0xa4>
 800108e:	2b12      	cmp	r3, #18
 8001090:	d80d      	bhi.n	80010ae <HAL_GPIO_Init+0x5a>
 8001092:	2b02      	cmp	r3, #2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x9a>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d804      	bhi.n	80010a4 <HAL_GPIO_Init+0x50>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d031      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d01c      	beq.n	80010dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a2:	e048      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d043      	beq.n	8001130 <HAL_GPIO_Init+0xdc>
 80010a8:	2b11      	cmp	r3, #17
 80010aa:	d01b      	beq.n	80010e4 <HAL_GPIO_Init+0x90>
          break;
 80010ac:	e043      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010ae:	4a89      	ldr	r2, [pc, #548]	; (80012d4 <HAL_GPIO_Init+0x280>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d026      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010b4:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_GPIO_Init+0x280>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d806      	bhi.n	80010c8 <HAL_GPIO_Init+0x74>
 80010ba:	4a87      	ldr	r2, [pc, #540]	; (80012d8 <HAL_GPIO_Init+0x284>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d020      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010c0:	4a86      	ldr	r2, [pc, #536]	; (80012dc <HAL_GPIO_Init+0x288>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01d      	beq.n	8001102 <HAL_GPIO_Init+0xae>
          break;
 80010c6:	e036      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c8:	4a85      	ldr	r2, [pc, #532]	; (80012e0 <HAL_GPIO_Init+0x28c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010ce:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <HAL_GPIO_Init+0x290>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d016      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010d4:	4a84      	ldr	r2, [pc, #528]	; (80012e8 <HAL_GPIO_Init+0x294>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xae>
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e028      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e023      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01e      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e019      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e012      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e008      	b.n	8001136 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d801      	bhi.n	8001140 <HAL_GPIO_Init+0xec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	e001      	b.n	8001144 <HAL_GPIO_Init+0xf0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3304      	adds	r3, #4
 8001144:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2bff      	cmp	r3, #255	; 0xff
 800114a:	d802      	bhi.n	8001152 <HAL_GPIO_Init+0xfe>
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x104>
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3b08      	subs	r3, #8
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	210f      	movs	r1, #15
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8096 	beq.w	80012b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_GPIO_Init+0x298>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_GPIO_Init+0x298>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x298>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119e:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x29c>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x2a0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x19e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x2a4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x19a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x2a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x196>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2ac>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x192>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011f2:	2300      	movs	r3, #0
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001204:	493a      	ldr	r1, [pc, #232]	; (80012f0 <HAL_GPIO_Init+0x29c>)
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4938      	ldr	r1, [pc, #224]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	43db      	mvns	r3, r3
 8001234:	4933      	ldr	r1, [pc, #204]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001236:	4013      	ands	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	492e      	ldr	r1, [pc, #184]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800125e:	4013      	ands	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4924      	ldr	r1, [pc, #144]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	43db      	mvns	r3, r3
 8001284:	491f      	ldr	r1, [pc, #124]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001286:	4013      	ands	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4915      	ldr	r1, [pc, #84]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f47f aed0 	bne.w	8001068 <HAL_GPIO_Init+0x14>
  }
}
 80012c8:	bf00      	nop
 80012ca:	372c      	adds	r7, #44	; 0x2c
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10310000 	.word	0x10310000
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10220000 	.word	0x10220000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e10f      	b.n	800156a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fb2c 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800137c:	f000 ffd4 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8001380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4a7b      	ldr	r2, [pc, #492]	; (8001574 <HAL_I2C_Init+0x23c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d807      	bhi.n	800139c <HAL_I2C_Init+0x64>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_I2C_Init+0x240>)
 8001390:	4293      	cmp	r3, r2
 8001392:	bf94      	ite	ls
 8001394:	2301      	movls	r3, #1
 8001396:	2300      	movhi	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	e006      	b.n	80013aa <HAL_I2C_Init+0x72>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_I2C_Init+0x244>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	bf94      	ite	ls
 80013a4:	2301      	movls	r3, #1
 80013a6:	2300      	movhi	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0db      	b.n	800156a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4a72      	ldr	r2, [pc, #456]	; (8001580 <HAL_I2C_Init+0x248>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a64      	ldr	r2, [pc, #400]	; (8001574 <HAL_I2C_Init+0x23c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d802      	bhi.n	80013ec <HAL_I2C_Init+0xb4>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	e009      	b.n	8001400 <HAL_I2C_Init+0xc8>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	4a63      	ldr	r2, [pc, #396]	; (8001584 <HAL_I2C_Init+0x24c>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	3301      	adds	r3, #1
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	430b      	orrs	r3, r1
 8001406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001412:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4956      	ldr	r1, [pc, #344]	; (8001574 <HAL_I2C_Init+0x23c>)
 800141c:	428b      	cmp	r3, r1
 800141e:	d80d      	bhi.n	800143c <HAL_I2C_Init+0x104>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1e59      	subs	r1, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fbb1 f3f3 	udiv	r3, r1, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001434:	2b04      	cmp	r3, #4
 8001436:	bf38      	it	cc
 8001438:	2304      	movcc	r3, #4
 800143a:	e04f      	b.n	80014dc <HAL_I2C_Init+0x1a4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d111      	bne.n	8001468 <HAL_I2C_Init+0x130>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1e58      	subs	r0, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	440b      	add	r3, r1
 8001452:	fbb0 f3f3 	udiv	r3, r0, r3
 8001456:	3301      	adds	r3, #1
 8001458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	e012      	b.n	800148e <HAL_I2C_Init+0x156>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e58      	subs	r0, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	0099      	lsls	r1, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	fbb0 f3f3 	udiv	r3, r0, r3
 800147e:	3301      	adds	r3, #1
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Init+0x15e>
 8001492:	2301      	movs	r3, #1
 8001494:	e022      	b.n	80014dc <HAL_I2C_Init+0x1a4>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10e      	bne.n	80014bc <HAL_I2C_Init+0x184>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1e58      	subs	r0, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	440b      	add	r3, r1
 80014ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ba:	e00f      	b.n	80014dc <HAL_I2C_Init+0x1a4>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e58      	subs	r0, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	0099      	lsls	r1, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	6809      	ldr	r1, [r1, #0]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800150a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6911      	ldr	r1, [r2, #16]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68d2      	ldr	r2, [r2, #12]
 8001516:	4311      	orrs	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	430b      	orrs	r3, r1
 800151e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	000186a0 	.word	0x000186a0
 8001578:	001e847f 	.word	0x001e847f
 800157c:	003d08ff 	.word	0x003d08ff
 8001580:	431bde83 	.word	0x431bde83
 8001584:	10624dd3 	.word	0x10624dd3

08001588 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	461a      	mov	r2, r3
 8001594:	460b      	mov	r3, r1
 8001596:	817b      	strh	r3, [r7, #10]
 8001598:	4613      	mov	r3, r2
 800159a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fc70 	bl	8000e80 <HAL_GetTick>
 80015a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	f040 80e0 	bne.w	8001770 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2319      	movs	r3, #25
 80015b6:	2201      	movs	r2, #1
 80015b8:	4970      	ldr	r1, [pc, #448]	; (800177c <HAL_I2C_Master_Transmit+0x1f4>)
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f958 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015c6:	2302      	movs	r3, #2
 80015c8:	e0d3      	b.n	8001772 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_I2C_Master_Transmit+0x50>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e0cc      	b.n	8001772 <HAL_I2C_Master_Transmit+0x1ea>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d007      	beq.n	80015fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800160c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2221      	movs	r2, #33	; 0x21
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2210      	movs	r2, #16
 800161a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	893a      	ldrh	r2, [r7, #8]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4a50      	ldr	r2, [pc, #320]	; (8001780 <HAL_I2C_Master_Transmit+0x1f8>)
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001640:	8979      	ldrh	r1, [r7, #10]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	6a3a      	ldr	r2, [r7, #32]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f89c 	bl	8001784 <I2C_MasterRequestWrite>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e08d      	b.n	8001772 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800166c:	e066      	b.n	800173c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	6a39      	ldr	r1, [r7, #32]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f9d2 	bl	8001a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00d      	beq.n	800169a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b04      	cmp	r3, #4
 8001684:	d107      	bne.n	8001696 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001694:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e06b      	b.n	8001772 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d11b      	bne.n	8001710 <HAL_I2C_Master_Transmit+0x188>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d017      	beq.n	8001710 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6a39      	ldr	r1, [r7, #32]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f9c2 	bl	8001a9e <I2C_WaitOnBTFFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2b04      	cmp	r3, #4
 8001726:	d107      	bne.n	8001738 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001736:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e01a      	b.n	8001772 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d194      	bne.n	800166e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	e000      	b.n	8001772 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001770:	2302      	movs	r3, #2
  }
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	00100002 	.word	0x00100002
 8001780:	ffff0000 	.word	0xffff0000

08001784 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af02      	add	r7, sp, #8
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	460b      	mov	r3, r1
 8001792:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b08      	cmp	r3, #8
 800179e:	d006      	beq.n	80017ae <I2C_MasterRequestWrite+0x2a>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <I2C_MasterRequestWrite+0x2a>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017ac:	d108      	bne.n	80017c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e00b      	b.n	80017d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d107      	bne.n	80017d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f843 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e035      	b.n	8001860 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017fc:	d108      	bne.n	8001810 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017fe:	897b      	ldrh	r3, [r7, #10]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	e01b      	b.n	8001848 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001810:	897b      	ldrh	r3, [r7, #10]
 8001812:	11db      	asrs	r3, r3, #7
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0306 	and.w	r3, r3, #6
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f063 030f 	orn	r3, r3, #15
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <I2C_MasterRequestWrite+0xe4>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f875 	bl	800191e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e010      	b.n	8001860 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <I2C_MasterRequestWrite+0xe8>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f865 	bl	800191e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	00010008 	.word	0x00010008
 800186c:	00010002 	.word	0x00010002

08001870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001880:	e025      	b.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d021      	beq.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7ff faf9 	bl	8000e80 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d116      	bne.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f043 0220 	orr.w	r2, r3, #32
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e023      	b.n	8001916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10d      	bne.n	80018f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4013      	ands	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	e00c      	b.n	800190e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4013      	ands	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	429a      	cmp	r2, r3
 8001912:	d0b6      	beq.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800192c:	e051      	b.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	d123      	bne.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f043 0204 	orr.w	r2, r3, #4
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e046      	b.n	8001a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d021      	beq.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff fa77 	bl	8000e80 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d116      	bne.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f043 0220 	orr.w	r2, r3, #32
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e020      	b.n	8001a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10c      	bne.n	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	e00b      	b.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	43da      	mvns	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	4013      	ands	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d18d      	bne.n	800192e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a28:	e02d      	b.n	8001a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f878 	bl	8001b20 <I2C_IsAcknowledgeFailed>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e02d      	b.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d021      	beq.n	8001a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a42:	f7ff fa1d 	bl	8000e80 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d116      	bne.n	8001a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e007      	b.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a90:	2b80      	cmp	r3, #128	; 0x80
 8001a92:	d1ca      	bne.n	8001a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aaa:	e02d      	b.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f837 	bl	8001b20 <I2C_IsAcknowledgeFailed>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e02d      	b.n	8001b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac2:	d021      	beq.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac4:	f7ff f9dc 	bl	8000e80 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d302      	bcc.n	8001ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e007      	b.n	8001b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d1ca      	bne.n	8001aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d11b      	bne.n	8001b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f043 0204 	orr.w	r2, r3, #4
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e26c      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
 8001bb4:	4b8c      	ldr	r3, [pc, #560]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d06c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d168      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e246      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x76>
 8001be4:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a7f      	ldr	r2, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7a      	ldr	r2, [pc, #488]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xbc>
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a67      	ldr	r2, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f912 	bl	8000e80 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f90e 	bl	8000e80 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1fa      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe4>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff f8fe 	bl	8000e80 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff f8fa 	bl	8000e80 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1e6      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x10c>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1ba      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4939      	ldr	r1, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f8b3 	bl	8000e80 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f8af 	bl	8000e80 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e19b      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4927      	ldr	r1, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f892 	bl	8000e80 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff f88e 	bl	8000e80 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e17a      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03a      	beq.n	8001e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d019      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff f872 	bl	8000e80 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff f86e 	bl	8000e80 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e15a      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 faf6 	bl	80023b0 <RCC_Delay>
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f858 	bl	8000e80 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f854 	bl	8000e80 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d908      	bls.n	8001df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e140      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	42420000 	.word	0x42420000
 8001df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e9      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a6 	beq.w	8001f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a93      	ldr	r2, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f815 	bl	8000e80 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7ff f811 	bl	8000e80 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0fd      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x312>
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a7a      	ldr	r2, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e02d      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	e01c      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x356>
 8001eb8:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a63      	ldr	r2, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe ffc5 	bl	8000e80 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe ffc1 	bl	8000e80 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0ab      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ee      	beq.n	8001efa <HAL_RCC_OscConfig+0x37e>
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffaf 	bl	8000e80 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe ffab 	bl	8000e80 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e095      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8081 	beq.w	8002066 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d061      	beq.n	8002034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d146      	bne.n	8002006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe ff7f 	bl	8000e80 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7fe ff7b 	bl	8000e80 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e067      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d108      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	492d      	ldr	r1, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a19      	ldr	r1, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff4f 	bl	8000e80 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe ff4b 	bl	8000e80 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e037      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x46a>
 8002004:	e02f      	b.n	8002066 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff38 	bl	8000e80 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff34 	bl	8000e80 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e020      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x498>
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e013      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	429a      	cmp	r2, r3
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
 8002078:	42420060 	.word	0x42420060

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d0      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4965      	ldr	r1, [pc, #404]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b8      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d040      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e073      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06b      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7fe fe88 	bl	8000e80 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe fe84 	bl	8000e80 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e053      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d210      	bcs.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e032      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220a:	f000 f821 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800220e:	4601      	mov	r1, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	fa21 f303 	lsr.w	r3, r1, r3
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fc96 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	080058c4 	.word	0x080058c4
 8002248:	20000004 	.word	0x20000004
 800224c:	20000008 	.word	0x20000008

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b490      	push	{r4, r7}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002258:	1d3c      	adds	r4, r7, #4
 800225a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x40>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x46>
 800228e:	e02d      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0c9b      	lsrs	r3, r3, #18
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022a2:	4413      	add	r3, r2
 80022a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c5b      	lsrs	r3, r3, #17
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022c2:	4413      	add	r3, r2
 80022c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ce:	fb02 f203 	mul.w	r2, r2, r3
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e004      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	623b      	str	r3, [r7, #32]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ee:	623b      	str	r3, [r7, #32]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc90      	pop	{r4, r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	080058a8 	.word	0x080058a8
 8002304:	080058b8 	.word	0x080058b8
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	003d0900 	.word	0x003d0900

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <HAL_RCC_GetHCLKFreq+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff2 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002330:	4601      	mov	r1, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	080058d4 	.word	0x080058d4

08002350 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	220f      	movs	r2, #15
 800235e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCC_GetClockConfig+0x58>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0203 	and.w	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_RCC_GetClockConfig+0x58>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_GetClockConfig+0x58>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_GetClockConfig+0x58>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetClockConfig+0x5c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0207 	and.w	r2, r3, #7
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40022000 	.word	0x40022000

080023b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <RCC_Delay+0x34>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <RCC_Delay+0x38>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0a5b      	lsrs	r3, r3, #9
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023cc:	bf00      	nop
  }
  while (Delay --);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	60fa      	str	r2, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <RCC_Delay+0x1c>
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000004 	.word	0x20000004
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e01d      	b.n	800243a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f815 	bl	8002442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f000 fb5e 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d007      	beq.n	800248e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e01d      	b.n	80024e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7fe fabb 	bl	8000a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 fb07 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2201      	movs	r2, #1
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fcdc 	bl	8002ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_TIM_PWM_Start+0x60>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d107      	bne.n	8002522 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d007      	beq.n	8002544 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00

08002554 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fcaa 	bl	8002ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <HAL_TIM_PWM_Stop+0x94>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d117      	bne.n	80025a6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1a      	ldr	r2, [r3, #32]
 800257c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_TIM_PWM_Stop+0x52>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	f240 4344 	movw	r3, #1092	; 0x444
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <HAL_TIM_PWM_Stop+0x52>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_TIM_PWM_Stop+0x82>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	f240 4344 	movw	r3, #1092	; 0x444
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d107      	bne.n	80025d6 <HAL_TIM_PWM_Stop+0x82>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40012c00 	.word	0x40012c00

080025ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e07f      	b.n	8002700 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe fa2f 	bl	8000a78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002630:	f023 0307 	bic.w	r3, r3, #7
 8002634:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f000 fa53 	bl	8002aec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	4313      	orrs	r3, r2
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800268c:	f023 030c 	bic.w	r3, r3, #12
 8002690:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800269c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4313      	orrs	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	011a      	lsls	r2, r3, #4
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	031b      	lsls	r3, r3, #12
 80026bc:	4313      	orrs	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4313      	orrs	r3, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b02      	cmp	r3, #2
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0202 	mvn.w	r2, #2
 8002734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9b3 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f9a6 	bl	8002aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9b5 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0204 	mvn.w	r2, #4
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f989 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f97c 	bl	8002aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f98b 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0208 	mvn.w	r2, #8
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f95f 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f952 	bl	8002aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f961 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b10      	cmp	r3, #16
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0210 	mvn.w	r2, #16
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2208      	movs	r2, #8
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f935 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f928 	bl	8002aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f937 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0201 	mvn.w	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe f84a 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fbc6 	bl	8003044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8fb 	bl	8002ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0220 	mvn.w	r2, #32
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fb91 	bl	8003032 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800292e:	2302      	movs	r3, #2
 8002930:	e0b4      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	f200 809f 	bhi.w	8002a88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002985 	.word	0x08002985
 8002954:	08002a89 	.word	0x08002a89
 8002958:	08002a89 	.word	0x08002a89
 800295c:	08002a89 	.word	0x08002a89
 8002960:	080029c5 	.word	0x080029c5
 8002964:	08002a89 	.word	0x08002a89
 8002968:	08002a89 	.word	0x08002a89
 800296c:	08002a89 	.word	0x08002a89
 8002970:	08002a07 	.word	0x08002a07
 8002974:	08002a89 	.word	0x08002a89
 8002978:	08002a89 	.word	0x08002a89
 800297c:	08002a89 	.word	0x08002a89
 8002980:	08002a47 	.word	0x08002a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f910 	bl	8002bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0208 	orr.w	r2, r2, #8
 800299e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0204 	bic.w	r2, r2, #4
 80029ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6999      	ldr	r1, [r3, #24]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	619a      	str	r2, [r3, #24]
      break;
 80029c2:	e062      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f956 	bl	8002c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6999      	ldr	r1, [r3, #24]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	021a      	lsls	r2, r3, #8
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	619a      	str	r2, [r3, #24]
      break;
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f99f 	bl	8002d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0208 	orr.w	r2, r2, #8
 8002a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0204 	bic.w	r2, r2, #4
 8002a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
      break;
 8002a44:	e021      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f9e9 	bl	8002e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69d9      	ldr	r1, [r3, #28]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	021a      	lsls	r2, r3, #8
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	61da      	str	r2, [r3, #28]
      break;
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <TIM_Base_SetConfig+0xb8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <TIM_Base_SetConfig+0x30>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x30>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <TIM_Base_SetConfig+0xbc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x30>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a25      	ldr	r2, [pc, #148]	; (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <TIM_Base_SetConfig+0xb8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <TIM_Base_SetConfig+0xbc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <TIM_Base_SetConfig+0xb8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d103      	bne.n	8002b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	615a      	str	r2, [r3, #20]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800

08002bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 0302 	bic.w	r3, r3, #2
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <TIM_OC1_SetConfig+0xc8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10c      	bne.n	8002c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0308 	bic.w	r3, r3, #8
 8002c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <TIM_OC1_SetConfig+0xc8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d111      	bne.n	8002c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0210 	bic.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0320 	bic.w	r3, r3, #32
 8002cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <TIM_OC2_SetConfig+0xd0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10d      	bne.n	8002cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <TIM_OC2_SetConfig+0xd0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d113      	bne.n	8002d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40012c00 	.word	0x40012c00

08002d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <TIM_OC3_SetConfig+0xd0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10d      	bne.n	8002dca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <TIM_OC3_SetConfig+0xd0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d113      	bne.n	8002dfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	621a      	str	r2, [r3, #32]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40012c00 	.word	0x40012c00

08002e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	031b      	lsls	r3, r3, #12
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <TIM_OC4_SetConfig+0x98>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d109      	bne.n	8002e98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	019b      	lsls	r3, r3, #6
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e032      	b.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e03d      	b.n	8003028 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003068:	2b84      	cmp	r3, #132	; 0x84
 800306a:	d005      	beq.n	8003078 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800306c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	3303      	adds	r3, #3
 8003076:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003078:	68fb      	ldr	r3, [r7, #12]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800308a:	f3ef 8305 	mrs	r3, IPSR
 800308e:	607b      	str	r3, [r7, #4]
  return(result);
 8003090:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030aa:	f000 fb6d 	bl	8003788 <vTaskStartScheduler>
  
  return osOK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80030b8:	f7ff ffe4 	bl	8003084 <inHandlerMode>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80030c2:	f000 fc77 	bl	80039b4 <xTaskGetTickCountFromISR>
 80030c6:	4603      	mov	r3, r0
 80030c8:	e002      	b.n	80030d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80030ca:	f000 fc65 	bl	8003998 <xTaskGetTickCount>
 80030ce:	4603      	mov	r3, r0
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af04      	add	r7, sp, #16
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <osThreadCreate+0x54>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01c      	beq.n	8003128 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685c      	ldr	r4, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681d      	ldr	r5, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691e      	ldr	r6, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ffa8 	bl	8003056 <makeFreeRtosPriority>
 8003106:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003110:	9202      	str	r2, [sp, #8]
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	9100      	str	r1, [sp, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	4632      	mov	r2, r6
 800311a:	4629      	mov	r1, r5
 800311c:	4620      	mov	r0, r4
 800311e:	f000 f8fe 	bl	800331e <xTaskCreateStatic>
 8003122:	4603      	mov	r3, r0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e01c      	b.n	8003162 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685c      	ldr	r4, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003134:	b29e      	uxth	r6, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff8a 	bl	8003056 <makeFreeRtosPriority>
 8003142:	4602      	mov	r2, r0
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	9200      	str	r2, [sp, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4632      	mov	r2, r6
 8003150:	4629      	mov	r1, r5
 8003152:	4620      	mov	r0, r4
 8003154:	f000 f93c 	bl	80033d0 <xTaskCreate>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003162:	68fb      	ldr	r3, [r7, #12]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800316c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <osDelay+0x16>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	e000      	b.n	8003184 <osDelay+0x18>
 8003182:	2301      	movs	r3, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f000 facb 	bl	8003720 <vTaskDelay>
  
  return osOK;
 800318a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <osDelayUntil+0x18>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	e000      	b.n	80031ae <osDelayUntil+0x1a>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fa3b 	bl	800362c <vTaskDelayUntil>
  
  return osOK;
 80031b6:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0208 	add.w	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0208 	add.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d103      	bne.n	800327c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e00c      	b.n	8003296 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3308      	adds	r3, #8
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e002      	b.n	800328a <vListInsert+0x2e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	d2f6      	bcs.n	8003284 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6852      	ldr	r2, [r2, #4]
 80032ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d103      	bne.n	8003300 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08e      	sub	sp, #56	; 0x38
 8003322:	af04      	add	r7, sp, #16
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	e7fe      	b.n	8003344 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <xTaskCreateStatic+0x42>
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e7fe      	b.n	800335e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003360:	2354      	movs	r3, #84	; 0x54
 8003362:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b54      	cmp	r3, #84	; 0x54
 8003368:	d009      	beq.n	800337e <xTaskCreateStatic+0x60>
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	e7fe      	b.n	800337c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01e      	beq.n	80033c2 <xTaskCreateStatic+0xa4>
 8003384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01b      	beq.n	80033c2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003392:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800339c:	2300      	movs	r3, #0
 800339e:	9303      	str	r3, [sp, #12]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f850 	bl	800345a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033bc:	f000 f8cc 	bl	8003558 <prvAddNewTaskToReadyList>
 80033c0:	e001      	b.n	80033c6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033c6:	697b      	ldr	r3, [r7, #20]
	}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3728      	adds	r7, #40	; 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 ff2d 	bl	8004244 <pvPortMalloc>
 80033ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80033f2:	2054      	movs	r0, #84	; 0x54
 80033f4:	f000 ff26 	bl	8004244 <pvPortMalloc>
 80033f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
 8003406:	e005      	b.n	8003414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003408:	6978      	ldr	r0, [r7, #20]
 800340a:	f000 ffdd 	bl	80043c8 <vPortFree>
 800340e:	e001      	b.n	8003414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d017      	beq.n	800344a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	2300      	movs	r3, #0
 8003426:	9303      	str	r3, [sp, #12]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f80e 	bl	800345a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800343e:	69f8      	ldr	r0, [r7, #28]
 8003440:	f000 f88a 	bl	8003558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003444:	2301      	movs	r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e002      	b.n	8003450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003450:	69bb      	ldr	r3, [r7, #24]
	}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b088      	sub	sp, #32
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003472:	3b01      	subs	r3, #1
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f023 0307 	bic.w	r3, r3, #7
 8003480:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <prvInitialiseNewTask+0x46>
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e7fe      	b.n	800349e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	e012      	b.n	80034cc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	7819      	ldrb	r1, [r3, #0]
 80034ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	3334      	adds	r3, #52	; 0x34
 80034b6:	460a      	mov	r2, r1
 80034b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3301      	adds	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	d9e9      	bls.n	80034a6 <prvInitialiseNewTask+0x4c>
 80034d2:	e000      	b.n	80034d6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80034d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d901      	bls.n	80034e8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034e4:	2306      	movs	r3, #6
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	2200      	movs	r2, #0
 80034f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	3304      	adds	r3, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fe7d 	bl	80031fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	3318      	adds	r3, #24
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fe78 	bl	80031fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003512:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	f1c3 0207 	rsb	r2, r3, #7
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	69b8      	ldr	r0, [r7, #24]
 8003538:	f000 fca0 	bl	8003e7c <pxPortInitialiseStack>
 800353c:	4602      	mov	r2, r0
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800354e:	bf00      	nop
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003560:	f000 fd7a 	bl	8004058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <prvAddNewTaskToReadyList+0xb8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <prvAddNewTaskToReadyList+0xb8>)
 800356c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003576:	4a27      	ldr	r2, [pc, #156]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800357c:	4b24      	ldr	r3, [pc, #144]	; (8003610 <prvAddNewTaskToReadyList+0xb8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d110      	bne.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003584:	f000 fb56 	bl	8003c34 <prvInitialiseTaskLists>
 8003588:	e00d      	b.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <prvAddNewTaskToReadyList+0xc0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	429a      	cmp	r2, r3
 800359e:	d802      	bhi.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035a0:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <prvAddNewTaskToReadyList+0xc4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <prvAddNewTaskToReadyList+0xc4>)
 80035ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2201      	movs	r2, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <prvAddNewTaskToReadyList+0xc8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <prvAddNewTaskToReadyList+0xc8>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <prvAddNewTaskToReadyList+0xcc>)
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7ff fe1c 	bl	8003216 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035de:	f000 fd69 	bl	80040b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <prvAddNewTaskToReadyList+0xc0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <prvAddNewTaskToReadyList+0xd0>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200003f0 	.word	0x200003f0
 8003614:	200002f0 	.word	0x200002f0
 8003618:	200003fc 	.word	0x200003fc
 800361c:	2000040c 	.word	0x2000040c
 8003620:	200003f8 	.word	0x200003f8
 8003624:	200002f4 	.word	0x200002f4
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <vTaskDelayUntil+0x28>
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e7fe      	b.n	8003652 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <vTaskDelayUntil+0x42>
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e7fe      	b.n	800366c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800366e:	4b29      	ldr	r3, [pc, #164]	; (8003714 <vTaskDelayUntil+0xe8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <vTaskDelayUntil+0x5e>
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e7fe      	b.n	8003688 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800368a:	f000 f8db 	bl	8003844 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <vTaskDelayUntil+0xec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	4413      	add	r3, r2
 800369c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a3a      	ldr	r2, [r7, #32]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d20b      	bcs.n	80036c0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d211      	bcs.n	80036d6 <vTaskDelayUntil+0xaa>
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90d      	bls.n	80036d6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e00a      	b.n	80036d6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d303      	bcc.n	80036d2 <vTaskDelayUntil+0xa6>
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d901      	bls.n	80036d6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fb60 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80036f0:	f000 f8b6 	bl	8003860 <xTaskResumeAll>
 80036f4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <vTaskDelayUntil+0xf0>)
 80036fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800370c:	bf00      	nop
 800370e:	3728      	adds	r7, #40	; 0x28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000418 	.word	0x20000418
 8003718:	200003f4 	.word	0x200003f4
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <vTaskDelay+0x60>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <vTaskDelay+0x2e>
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	e7fe      	b.n	800374c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800374e:	f000 f879 	bl	8003844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003752:	2100      	movs	r1, #0
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb2b 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800375a:	f000 f881 	bl	8003860 <xTaskResumeAll>
 800375e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <vTaskDelay+0x64>)
 8003768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000418 	.word	0x20000418
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003796:	463a      	mov	r2, r7
 8003798:	1d39      	adds	r1, r7, #4
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fd54 	bl	800024c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037a4:	6839      	ldr	r1, [r7, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	9202      	str	r2, [sp, #8]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	460a      	mov	r2, r1
 80037b6:	491d      	ldr	r1, [pc, #116]	; (800382c <vTaskStartScheduler+0xa4>)
 80037b8:	481d      	ldr	r0, [pc, #116]	; (8003830 <vTaskStartScheduler+0xa8>)
 80037ba:	f7ff fdb0 	bl	800331e <xTaskCreateStatic>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <vTaskStartScheduler+0xac>)
 80037c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <vTaskStartScheduler+0xac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037cc:	2301      	movs	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e001      	b.n	80037d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d115      	bne.n	8003808 <vTaskStartScheduler+0x80>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <vTaskStartScheduler+0xb0>)
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <vTaskStartScheduler+0xb4>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <vTaskStartScheduler+0xb8>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003802:	f000 fbb9 	bl	8003f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003806:	e00d      	b.n	8003824 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d109      	bne.n	8003824 <vTaskStartScheduler+0x9c>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e7fe      	b.n	8003822 <vTaskStartScheduler+0x9a>
}
 8003824:	bf00      	nop
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	080058bc 	.word	0x080058bc
 8003830:	08003c05 	.word	0x08003c05
 8003834:	20000414 	.word	0x20000414
 8003838:	20000410 	.word	0x20000410
 800383c:	200003fc 	.word	0x200003fc
 8003840:	200003f4 	.word	0x200003f4

08003844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <vTaskSuspendAll+0x18>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	4a03      	ldr	r2, [pc, #12]	; (800385c <vTaskSuspendAll+0x18>)
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000418 	.word	0x20000418

08003860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <xTaskResumeAll+0x114>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <xTaskResumeAll+0x2a>
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	e7fe      	b.n	8003888 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800388a:	f000 fbe5 	bl	8004058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <xTaskResumeAll+0x114>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3b01      	subs	r3, #1
 8003894:	4a37      	ldr	r2, [pc, #220]	; (8003974 <xTaskResumeAll+0x114>)
 8003896:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <xTaskResumeAll+0x114>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d161      	bne.n	8003964 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <xTaskResumeAll+0x118>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d05d      	beq.n	8003964 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038a8:	e02e      	b.n	8003908 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <xTaskResumeAll+0x11c>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3318      	adds	r3, #24
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fd08 	bl	80032cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fd03 	bl	80032cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <xTaskResumeAll+0x120>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <xTaskResumeAll+0x120>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <xTaskResumeAll+0x124>)
 80038e6:	441a      	add	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7ff fc91 	bl	8003216 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4b23      	ldr	r3, [pc, #140]	; (8003988 <xTaskResumeAll+0x128>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <xTaskResumeAll+0x12c>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <xTaskResumeAll+0x11c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1cc      	bne.n	80038aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003916:	f000 fa27 	bl	8003d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <xTaskResumeAll+0x130>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d010      	beq.n	8003948 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003926:	f000 f857 	bl	80039d8 <xTaskIncrementTick>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <xTaskResumeAll+0x12c>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3b01      	subs	r3, #1
 800393a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f1      	bne.n	8003926 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <xTaskResumeAll+0x130>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <xTaskResumeAll+0x12c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <xTaskResumeAll+0x134>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003964:	f000 fba6 	bl	80040b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003968:	68bb      	ldr	r3, [r7, #8]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000418 	.word	0x20000418
 8003978:	200003f0 	.word	0x200003f0
 800397c:	200003b0 	.word	0x200003b0
 8003980:	200003f8 	.word	0x200003f8
 8003984:	200002f4 	.word	0x200002f4
 8003988:	200002f0 	.word	0x200002f0
 800398c:	20000404 	.word	0x20000404
 8003990:	20000400 	.word	0x20000400
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <xTaskGetTickCount+0x18>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039a4:	687b      	ldr	r3, [r7, #4]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	200003f4 	.word	0x200003f4

080039b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039ba:	f000 fc07 	bl	80041cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <xTaskGetTickCountFromISR+0x20>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039c8:	683b      	ldr	r3, [r7, #0]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200003f4 	.word	0x200003f4

080039d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e2:	4b50      	ldr	r3, [pc, #320]	; (8003b24 <xTaskIncrementTick+0x14c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 808c 	bne.w	8003b04 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039ec:	4b4e      	ldr	r3, [pc, #312]	; (8003b28 <xTaskIncrementTick+0x150>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039f4:	4a4c      	ldr	r2, [pc, #304]	; (8003b28 <xTaskIncrementTick+0x150>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d11f      	bne.n	8003a40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a00:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <xTaskIncrementTick+0x154>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <xTaskIncrementTick+0x46>
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	e7fe      	b.n	8003a1c <xTaskIncrementTick+0x44>
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <xTaskIncrementTick+0x154>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <xTaskIncrementTick+0x158>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a40      	ldr	r2, [pc, #256]	; (8003b2c <xTaskIncrementTick+0x154>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <xTaskIncrementTick+0x158>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <xTaskIncrementTick+0x15c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	4a3e      	ldr	r2, [pc, #248]	; (8003b34 <xTaskIncrementTick+0x15c>)
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	f000 f994 	bl	8003d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a40:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <xTaskIncrementTick+0x160>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d34d      	bcc.n	8003ae6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <xTaskIncrementTick+0x154>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <xTaskIncrementTick+0x80>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <xTaskIncrementTick+0x82>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <xTaskIncrementTick+0x160>)
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	601a      	str	r2, [r3, #0]
					break;
 8003a66:	e03e      	b.n	8003ae6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a68:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <xTaskIncrementTick+0x154>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d203      	bcs.n	8003a88 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a80:	4a2d      	ldr	r2, [pc, #180]	; (8003b38 <xTaskIncrementTick+0x160>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
						break;
 8003a86:	e02e      	b.n	8003ae6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fc1d 	bl	80032cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fc14 	bl	80032cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <xTaskIncrementTick+0x164>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <xTaskIncrementTick+0x164>)
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <xTaskIncrementTick+0x168>)
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7ff fba2 	bl	8003216 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <xTaskIncrementTick+0x16c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3b4      	bcc.n	8003a4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae4:	e7b1      	b.n	8003a4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <xTaskIncrementTick+0x16c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	4914      	ldr	r1, [pc, #80]	; (8003b40 <xTaskIncrementTick+0x168>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d907      	bls.n	8003b0e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e004      	b.n	8003b0e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <xTaskIncrementTick+0x170>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <xTaskIncrementTick+0x170>)
 8003b0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <xTaskIncrementTick+0x174>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b1a:	697b      	ldr	r3, [r7, #20]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000418 	.word	0x20000418
 8003b28:	200003f4 	.word	0x200003f4
 8003b2c:	200003a8 	.word	0x200003a8
 8003b30:	200003ac 	.word	0x200003ac
 8003b34:	20000408 	.word	0x20000408
 8003b38:	20000410 	.word	0x20000410
 8003b3c:	200003f8 	.word	0x200003f8
 8003b40:	200002f4 	.word	0x200002f4
 8003b44:	200002f0 	.word	0x200002f0
 8003b48:	20000400 	.word	0x20000400
 8003b4c:	20000404 	.word	0x20000404

08003b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <vTaskSwitchContext+0xa0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b5e:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <vTaskSwitchContext+0xa4>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b64:	e03e      	b.n	8003be4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003b66:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <vTaskSwitchContext+0xa4>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <vTaskSwitchContext+0xa8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b7a:	7afb      	ldrb	r3, [r7, #11]
 8003b7c:	f1c3 031f 	rsb	r3, r3, #31
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	491e      	ldr	r1, [pc, #120]	; (8003bfc <vTaskSwitchContext+0xac>)
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <vTaskSwitchContext+0x5a>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e7fe      	b.n	8003ba8 <vTaskSwitchContext+0x58>
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <vTaskSwitchContext+0xac>)
 8003bb6:	4413      	add	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d104      	bne.n	8003bda <vTaskSwitchContext+0x8a>
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <vTaskSwitchContext+0xb0>)
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000418 	.word	0x20000418
 8003bf4:	20000404 	.word	0x20000404
 8003bf8:	200003f8 	.word	0x200003f8
 8003bfc:	200002f4 	.word	0x200002f4
 8003c00:	200002f0 	.word	0x200002f0

08003c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c0c:	f000 f852 	bl	8003cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <prvIdleTask+0x28>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d9f9      	bls.n	8003c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <prvIdleTask+0x2c>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c28:	e7f0      	b.n	8003c0c <prvIdleTask+0x8>
 8003c2a:	bf00      	nop
 8003c2c:	200002f4 	.word	0x200002f4
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e00c      	b.n	8003c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <prvInitialiseTaskLists+0x60>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fab6 	bl	80031c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d9ef      	bls.n	8003c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <prvInitialiseTaskLists+0x64>)
 8003c62:	f7ff faad 	bl	80031c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <prvInitialiseTaskLists+0x68>)
 8003c68:	f7ff faaa 	bl	80031c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c6c:	480c      	ldr	r0, [pc, #48]	; (8003ca0 <prvInitialiseTaskLists+0x6c>)
 8003c6e:	f7ff faa7 	bl	80031c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c72:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <prvInitialiseTaskLists+0x70>)
 8003c74:	f7ff faa4 	bl	80031c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <prvInitialiseTaskLists+0x74>)
 8003c7a:	f7ff faa1 	bl	80031c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <prvInitialiseTaskLists+0x78>)
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <prvInitialiseTaskLists+0x64>)
 8003c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <prvInitialiseTaskLists+0x7c>)
 8003c86:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <prvInitialiseTaskLists+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200002f4 	.word	0x200002f4
 8003c98:	20000380 	.word	0x20000380
 8003c9c:	20000394 	.word	0x20000394
 8003ca0:	200003b0 	.word	0x200003b0
 8003ca4:	200003c4 	.word	0x200003c4
 8003ca8:	200003dc 	.word	0x200003dc
 8003cac:	200003a8 	.word	0x200003a8
 8003cb0:	200003ac 	.word	0x200003ac

08003cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cba:	e019      	b.n	8003cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cbc:	f000 f9cc 	bl	8004058 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <prvCheckTasksWaitingTermination+0x4c>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fafd 	bl	80032cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvCheckTasksWaitingTermination+0x50>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <prvCheckTasksWaitingTermination+0x50>)
 8003cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ce6:	f000 f9e5 	bl	80040b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f80e 	bl	8003d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e1      	bne.n	8003cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200003c4 	.word	0x200003c4
 8003d04:	200003f0 	.word	0x200003f0
 8003d08:	200003d8 	.word	0x200003d8

08003d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb50 	bl	80043c8 <vPortFree>
				vPortFree( pxTCB );
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb4d 	bl	80043c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d2e:	e017      	b.n	8003d60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d103      	bne.n	8003d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fb44 	bl	80043c8 <vPortFree>
	}
 8003d40:	e00e      	b.n	8003d60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d009      	beq.n	8003d60 <prvDeleteTCB+0x54>
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e7fe      	b.n	8003d5e <prvDeleteTCB+0x52>
	}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <prvResetNextTaskUnblockTime+0x40>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <prvResetNextTaskUnblockTime+0x14>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <prvResetNextTaskUnblockTime+0x16>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <prvResetNextTaskUnblockTime+0x44>)
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d8a:	e008      	b.n	8003d9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <prvResetNextTaskUnblockTime+0x40>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <prvResetNextTaskUnblockTime+0x44>)
 8003d9c:	6013      	str	r3, [r2, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	200003a8 	.word	0x200003a8
 8003dac:	20000410 	.word	0x20000410

08003db0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dba:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fa80 	bl	80032cc <uxListRemove>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4013      	ands	r3, r2
 8003de6:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003de8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d10a      	bne.n	8003e08 <prvAddCurrentTaskToDelayedList+0x58>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	481a      	ldr	r0, [pc, #104]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e02:	f7ff fa08 	bl	8003216 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e06:	e026      	b.n	8003e56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d209      	bcs.n	8003e34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7ff fa15 	bl	800325c <vListInsert>
}
 8003e32:	e010      	b.n	8003e56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7ff fa0b 	bl	800325c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d202      	bcs.n	8003e56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200003f4 	.word	0x200003f4
 8003e64:	200002f0 	.word	0x200002f0
 8003e68:	200003f8 	.word	0x200003f8
 8003e6c:	200003dc 	.word	0x200003dc
 8003e70:	200003ac 	.word	0x200003ac
 8003e74:	200003a8 	.word	0x200003a8
 8003e78:	20000410 	.word	0x20000410

08003e7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b04      	subs	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <pxPortInitialiseStack+0x54>)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3b14      	subs	r3, #20
 8003eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b20      	subs	r3, #32
 8003ec2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	08003ed5 	.word	0x08003ed5

08003ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <prvTaskExitError+0x4c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d009      	beq.n	8003efc <prvTaskExitError+0x28>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e7fe      	b.n	8003efa <prvTaskExitError+0x26>
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f0e:	bf00      	nop
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0fc      	beq.n	8003f10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	20000010 	.word	0x20000010
	...

08003f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <pxCurrentTCBConst2>)
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	6808      	ldr	r0, [r1, #0]
 8003f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f3a:	f380 8809 	msr	PSP, r0
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8811 	msr	BASEPRI, r0
 8003f4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f4e:	4770      	bx	lr

08003f50 <pxCurrentTCBConst2>:
 8003f50:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop

08003f58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f58:	4806      	ldr	r0, [pc, #24]	; (8003f74 <prvPortStartFirstTask+0x1c>)
 8003f5a:	6800      	ldr	r0, [r0, #0]
 8003f5c:	6800      	ldr	r0, [r0, #0]
 8003f5e:	f380 8808 	msr	MSP, r0
 8003f62:	b662      	cpsie	i
 8003f64:	b661      	cpsie	f
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	df00      	svc	0
 8003f70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f72:	bf00      	nop
 8003f74:	e000ed08 	.word	0xe000ed08

08003f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <xPortStartScheduler+0xcc>)
 8003f80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	22ff      	movs	r2, #255	; 0xff
 8003f8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <xPortStartScheduler+0xd0>)
 8003fa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <xPortStartScheduler+0xd4>)
 8003fa8:	2207      	movs	r2, #7
 8003faa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fac:	e009      	b.n	8003fc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <xPortStartScheduler+0xd4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <xPortStartScheduler+0xd4>)
 8003fb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d0ef      	beq.n	8003fae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <xPortStartScheduler+0xd4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1c3 0307 	rsb	r3, r3, #7
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d009      	beq.n	8003fee <xPortStartScheduler+0x76>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	e7fe      	b.n	8003fec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <xPortStartScheduler+0xd4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <xPortStartScheduler+0xd4>)
 8003ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <xPortStartScheduler+0xd4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <xPortStartScheduler+0xd4>)
 8004002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <xPortStartScheduler+0xd8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <xPortStartScheduler+0xd8>)
 8004012:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <xPortStartScheduler+0xd8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <xPortStartScheduler+0xd8>)
 800401e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004024:	f000 f8b0 	bl	8004188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <xPortStartScheduler+0xdc>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800402e:	f7ff ff93 	bl	8003f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004032:	f7ff fd8d 	bl	8003b50 <vTaskSwitchContext>
	prvTaskExitError();
 8004036:	f7ff ff4d 	bl	8003ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	e000e400 	.word	0xe000e400
 8004048:	2000041c 	.word	0x2000041c
 800404c:	20000420 	.word	0x20000420
 8004050:	e000ed20 	.word	0xe000ed20
 8004054:	20000010 	.word	0x20000010

08004058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <vPortEnterCritical+0x54>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <vPortEnterCritical+0x54>)
 8004078:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <vPortEnterCritical+0x54>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10e      	bne.n	80040a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortEnterCritical+0x58>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <vPortEnterCritical+0x48>
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	e7fe      	b.n	800409e <vPortEnterCritical+0x46>
	}
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000010 	.word	0x20000010
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <vPortExitCritical+0x48>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <vPortExitCritical+0x22>
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e7fe      	b.n	80040d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <vPortExitCritical+0x48>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a07      	ldr	r2, [pc, #28]	; (80040fc <vPortExitCritical+0x48>)
 80040de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <vPortExitCritical+0x48>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <vPortExitCritical+0x3e>
 80040e8:	2300      	movs	r3, #0
 80040ea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	20000010 	.word	0x20000010

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004110:	6010      	str	r0, [r2, #0]
 8004112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004116:	f04f 0050 	mov.w	r0, #80	; 0x50
 800411a:	f380 8811 	msr	BASEPRI, r0
 800411e:	f7ff fd17 	bl	8003b50 <vTaskSwitchContext>
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004136:	f380 8809 	msr	PSP, r0
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	4770      	bx	lr

08004140 <pxCurrentTCBConst>:
 8004140:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004160:	f7ff fc3a 	bl	80039d8 <xTaskIncrementTick>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <SysTick_Handler+0x3c>)
 800416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <vPortSetupTimerInterrupt+0x30>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <vPortSetupTimerInterrupt+0x34>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <vPortSetupTimerInterrupt+0x38>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <vPortSetupTimerInterrupt+0x3c>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <vPortSetupTimerInterrupt+0x40>)
 80041a6:	3b01      	subs	r3, #1
 80041a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041aa:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <vPortSetupTimerInterrupt+0x30>)
 80041ac:	2207      	movs	r2, #7
 80041ae:	601a      	str	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	e000e010 	.word	0xe000e010
 80041bc:	e000e018 	.word	0xe000e018
 80041c0:	20000004 	.word	0x20000004
 80041c4:	10624dd3 	.word	0x10624dd3
 80041c8:	e000e014 	.word	0xe000e014

080041cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041d2:	f3ef 8305 	mrs	r3, IPSR
 80041d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b0f      	cmp	r3, #15
 80041dc:	d913      	bls.n	8004206 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <vPortValidateInterruptPriority+0x68>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <vPortValidateInterruptPriority+0x6c>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	7afa      	ldrb	r2, [r7, #11]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d209      	bcs.n	8004206 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e7fe      	b.n	8004204 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <vPortValidateInterruptPriority+0x70>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <vPortValidateInterruptPriority+0x74>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d909      	bls.n	800422a <vPortValidateInterruptPriority+0x5e>
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	e7fe      	b.n	8004228 <vPortValidateInterruptPriority+0x5c>
	}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	e000e3f0 	.word	0xe000e3f0
 8004238:	2000041c 	.word	0x2000041c
 800423c:	e000ed0c 	.word	0xe000ed0c
 8004240:	20000420 	.word	0x20000420

08004244 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004250:	f7ff faf8 	bl	8003844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004254:	4b57      	ldr	r3, [pc, #348]	; (80043b4 <pvPortMalloc+0x170>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800425c:	f000 f90c 	bl	8004478 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004260:	4b55      	ldr	r3, [pc, #340]	; (80043b8 <pvPortMalloc+0x174>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 808c 	bne.w	8004386 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01c      	beq.n	80042ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004274:	2208      	movs	r2, #8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	2b00      	cmp	r3, #0
 8004284:	d013      	beq.n	80042ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	3308      	adds	r3, #8
 800428e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <pvPortMalloc+0x6a>
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e7fe      	b.n	80042ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d068      	beq.n	8004386 <pvPortMalloc+0x142>
 80042b4:	4b41      	ldr	r3, [pc, #260]	; (80043bc <pvPortMalloc+0x178>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d863      	bhi.n	8004386 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042be:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <pvPortMalloc+0x17c>)
 80042c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <pvPortMalloc+0x17c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042c8:	e004      	b.n	80042d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d903      	bls.n	80042e6 <pvPortMalloc+0xa2>
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f1      	bne.n	80042ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042e6:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <pvPortMalloc+0x170>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d04a      	beq.n	8004386 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2208      	movs	r2, #8
 80042f6:	4413      	add	r3, r2
 80042f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad2      	subs	r2, r2, r3
 800430a:	2308      	movs	r3, #8
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	429a      	cmp	r2, r3
 8004310:	d91e      	bls.n	8004350 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <pvPortMalloc+0xf4>
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e7fe      	b.n	8004336 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800434a:	69b8      	ldr	r0, [r7, #24]
 800434c:	f000 f8f6 	bl	800453c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <pvPortMalloc+0x178>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <pvPortMalloc+0x178>)
 800435c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <pvPortMalloc+0x178>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <pvPortMalloc+0x180>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d203      	bcs.n	8004372 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <pvPortMalloc+0x178>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <pvPortMalloc+0x180>)
 8004370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <pvPortMalloc+0x174>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	431a      	orrs	r2, r3
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004386:	f7ff fa6b 	bl	8003860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <pvPortMalloc+0x164>
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	e7fe      	b.n	80043a6 <pvPortMalloc+0x162>
	return pvReturn;
 80043a8:	69fb      	ldr	r3, [r7, #28]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3728      	adds	r7, #40	; 0x28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20001b9c 	.word	0x20001b9c
 80043b8:	20001ba8 	.word	0x20001ba8
 80043bc:	20001ba0 	.word	0x20001ba0
 80043c0:	20001b94 	.word	0x20001b94
 80043c4:	20001ba4 	.word	0x20001ba4

080043c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d046      	beq.n	8004468 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043da:	2308      	movs	r3, #8
 80043dc:	425b      	negs	r3, r3
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4413      	add	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4b20      	ldr	r3, [pc, #128]	; (8004470 <vPortFree+0xa8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <vPortFree+0x42>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e7fe      	b.n	8004408 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <vPortFree+0x5e>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	e7fe      	b.n	8004424 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <vPortFree+0xa8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d019      	beq.n	8004468 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d115      	bne.n	8004468 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortFree+0xa8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800444c:	f7ff f9fa 	bl	8003844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <vPortFree+0xac>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4413      	add	r3, r2
 800445a:	4a06      	ldr	r2, [pc, #24]	; (8004474 <vPortFree+0xac>)
 800445c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800445e:	6938      	ldr	r0, [r7, #16]
 8004460:	f000 f86c 	bl	800453c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004464:	f7ff f9fc 	bl	8003860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20001ba8 	.word	0x20001ba8
 8004474:	20001ba0 	.word	0x20001ba0

08004478 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800447e:	f241 7370 	movw	r3, #6000	; 0x1770
 8004482:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <prvHeapInit+0xac>)
 8004486:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3307      	adds	r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0307 	bic.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <prvHeapInit+0xac>)
 80044a8:	4413      	add	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <prvHeapInit+0xb0>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <prvHeapInit+0xb0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044c4:	2208      	movs	r2, #8
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0307 	bic.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <prvHeapInit+0xb4>)
 80044d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <prvHeapInit+0xb4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <prvHeapInit+0xb4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	1ad2      	subs	r2, r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <prvHeapInit+0xb4>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <prvHeapInit+0xb8>)
 8004506:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a09      	ldr	r2, [pc, #36]	; (8004534 <prvHeapInit+0xbc>)
 800450e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <prvHeapInit+0xc0>)
 8004512:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004516:	601a      	str	r2, [r3, #0]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000424 	.word	0x20000424
 8004528:	20001b94 	.word	0x20001b94
 800452c:	20001b9c 	.word	0x20001b9c
 8004530:	20001ba4 	.word	0x20001ba4
 8004534:	20001ba0 	.word	0x20001ba0
 8004538:	20001ba8 	.word	0x20001ba8

0800453c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <prvInsertBlockIntoFreeList+0xa8>)
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e002      	b.n	8004550 <prvInsertBlockIntoFreeList+0x14>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d8f7      	bhi.n	800454a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4413      	add	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	429a      	cmp	r2, r3
 800456a:	d108      	bne.n	800457e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	441a      	add	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	441a      	add	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d118      	bne.n	80045c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <prvInsertBlockIntoFreeList+0xac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d00d      	beq.n	80045ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e008      	b.n	80045cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <prvInsertBlockIntoFreeList+0xac>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e003      	b.n	80045cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d002      	beq.n	80045da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	20001b94 	.word	0x20001b94
 80045e8:	20001b9c 	.word	0x20001b9c

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000014 	.word	0x20000014

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	2500      	movs	r5, #0
 80045fc:	4e0c      	ldr	r6, [pc, #48]	; (8004630 <__libc_init_array+0x38>)
 80045fe:	4c0d      	ldr	r4, [pc, #52]	; (8004634 <__libc_init_array+0x3c>)
 8004600:	1ba4      	subs	r4, r4, r6
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	42a5      	cmp	r5, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	f001 f8d6 	bl	80057b8 <_init>
 800460c:	2500      	movs	r5, #0
 800460e:	4e0a      	ldr	r6, [pc, #40]	; (8004638 <__libc_init_array+0x40>)
 8004610:	4c0a      	ldr	r4, [pc, #40]	; (800463c <__libc_init_array+0x44>)
 8004612:	1ba4      	subs	r4, r4, r6
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	42a5      	cmp	r5, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004620:	4798      	blx	r3
 8004622:	3501      	adds	r5, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800462a:	4798      	blx	r3
 800462c:	3501      	adds	r5, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08005974 	.word	0x08005974
 8004634:	08005974 	.word	0x08005974
 8004638:	08005974 	.word	0x08005974
 800463c:	08005978 	.word	0x08005978

08004640 <memcpy>:
 8004640:	b510      	push	{r4, lr}
 8004642:	1e43      	subs	r3, r0, #1
 8004644:	440a      	add	r2, r1
 8004646:	4291      	cmp	r1, r2
 8004648:	d100      	bne.n	800464c <memcpy+0xc>
 800464a:	bd10      	pop	{r4, pc}
 800464c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004654:	e7f7      	b.n	8004646 <memcpy+0x6>

08004656 <memset>:
 8004656:	4603      	mov	r3, r0
 8004658:	4402      	add	r2, r0
 800465a:	4293      	cmp	r3, r2
 800465c:	d100      	bne.n	8004660 <memset+0xa>
 800465e:	4770      	bx	lr
 8004660:	f803 1b01 	strb.w	r1, [r3], #1
 8004664:	e7f9      	b.n	800465a <memset+0x4>
	...

08004668 <iprintf>:
 8004668:	b40f      	push	{r0, r1, r2, r3}
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <iprintf+0x2c>)
 800466c:	b513      	push	{r0, r1, r4, lr}
 800466e:	681c      	ldr	r4, [r3, #0]
 8004670:	b124      	cbz	r4, 800467c <iprintf+0x14>
 8004672:	69a3      	ldr	r3, [r4, #24]
 8004674:	b913      	cbnz	r3, 800467c <iprintf+0x14>
 8004676:	4620      	mov	r0, r4
 8004678:	f000 f86e 	bl	8004758 <__sinit>
 800467c:	ab05      	add	r3, sp, #20
 800467e:	9a04      	ldr	r2, [sp, #16]
 8004680:	68a1      	ldr	r1, [r4, #8]
 8004682:	4620      	mov	r0, r4
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	f000 fac5 	bl	8004c14 <_vfiprintf_r>
 800468a:	b002      	add	sp, #8
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004690:	b004      	add	sp, #16
 8004692:	4770      	bx	lr
 8004694:	20000014 	.word	0x20000014

08004698 <siprintf>:
 8004698:	b40e      	push	{r1, r2, r3}
 800469a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800469e:	b500      	push	{lr}
 80046a0:	b09c      	sub	sp, #112	; 0x70
 80046a2:	ab1d      	add	r3, sp, #116	; 0x74
 80046a4:	9002      	str	r0, [sp, #8]
 80046a6:	9006      	str	r0, [sp, #24]
 80046a8:	9107      	str	r1, [sp, #28]
 80046aa:	9104      	str	r1, [sp, #16]
 80046ac:	4808      	ldr	r0, [pc, #32]	; (80046d0 <siprintf+0x38>)
 80046ae:	4909      	ldr	r1, [pc, #36]	; (80046d4 <siprintf+0x3c>)
 80046b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b4:	9105      	str	r1, [sp, #20]
 80046b6:	6800      	ldr	r0, [r0, #0]
 80046b8:	a902      	add	r1, sp, #8
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	f000 f98a 	bl	80049d4 <_svfiprintf_r>
 80046c0:	2200      	movs	r2, #0
 80046c2:	9b02      	ldr	r3, [sp, #8]
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	b01c      	add	sp, #112	; 0x70
 80046c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046cc:	b003      	add	sp, #12
 80046ce:	4770      	bx	lr
 80046d0:	20000014 	.word	0x20000014
 80046d4:	ffff0208 	.word	0xffff0208

080046d8 <std>:
 80046d8:	2300      	movs	r3, #0
 80046da:	b510      	push	{r4, lr}
 80046dc:	4604      	mov	r4, r0
 80046de:	e9c0 3300 	strd	r3, r3, [r0]
 80046e2:	6083      	str	r3, [r0, #8]
 80046e4:	8181      	strh	r1, [r0, #12]
 80046e6:	6643      	str	r3, [r0, #100]	; 0x64
 80046e8:	81c2      	strh	r2, [r0, #14]
 80046ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ee:	6183      	str	r3, [r0, #24]
 80046f0:	4619      	mov	r1, r3
 80046f2:	2208      	movs	r2, #8
 80046f4:	305c      	adds	r0, #92	; 0x5c
 80046f6:	f7ff ffae 	bl	8004656 <memset>
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <std+0x38>)
 80046fc:	6224      	str	r4, [r4, #32]
 80046fe:	6263      	str	r3, [r4, #36]	; 0x24
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <std+0x3c>)
 8004702:	62a3      	str	r3, [r4, #40]	; 0x28
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <std+0x40>)
 8004706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <std+0x44>)
 800470a:	6323      	str	r3, [r4, #48]	; 0x30
 800470c:	bd10      	pop	{r4, pc}
 800470e:	bf00      	nop
 8004710:	08005171 	.word	0x08005171
 8004714:	08005193 	.word	0x08005193
 8004718:	080051cb 	.word	0x080051cb
 800471c:	080051ef 	.word	0x080051ef

08004720 <_cleanup_r>:
 8004720:	4901      	ldr	r1, [pc, #4]	; (8004728 <_cleanup_r+0x8>)
 8004722:	f000 b885 	b.w	8004830 <_fwalk_reent>
 8004726:	bf00      	nop
 8004728:	080054c9 	.word	0x080054c9

0800472c <__sfmoreglue>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	2568      	movs	r5, #104	; 0x68
 8004730:	1e4a      	subs	r2, r1, #1
 8004732:	4355      	muls	r5, r2
 8004734:	460e      	mov	r6, r1
 8004736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800473a:	f000 f897 	bl	800486c <_malloc_r>
 800473e:	4604      	mov	r4, r0
 8004740:	b140      	cbz	r0, 8004754 <__sfmoreglue+0x28>
 8004742:	2100      	movs	r1, #0
 8004744:	e9c0 1600 	strd	r1, r6, [r0]
 8004748:	300c      	adds	r0, #12
 800474a:	60a0      	str	r0, [r4, #8]
 800474c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004750:	f7ff ff81 	bl	8004656 <memset>
 8004754:	4620      	mov	r0, r4
 8004756:	bd70      	pop	{r4, r5, r6, pc}

08004758 <__sinit>:
 8004758:	6983      	ldr	r3, [r0, #24]
 800475a:	b510      	push	{r4, lr}
 800475c:	4604      	mov	r4, r0
 800475e:	bb33      	cbnz	r3, 80047ae <__sinit+0x56>
 8004760:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004764:	6503      	str	r3, [r0, #80]	; 0x50
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <__sinit+0x58>)
 8004768:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <__sinit+0x5c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6282      	str	r2, [r0, #40]	; 0x28
 800476e:	4298      	cmp	r0, r3
 8004770:	bf04      	itt	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	6183      	streq	r3, [r0, #24]
 8004776:	f000 f81f 	bl	80047b8 <__sfp>
 800477a:	6060      	str	r0, [r4, #4]
 800477c:	4620      	mov	r0, r4
 800477e:	f000 f81b 	bl	80047b8 <__sfp>
 8004782:	60a0      	str	r0, [r4, #8]
 8004784:	4620      	mov	r0, r4
 8004786:	f000 f817 	bl	80047b8 <__sfp>
 800478a:	2200      	movs	r2, #0
 800478c:	60e0      	str	r0, [r4, #12]
 800478e:	2104      	movs	r1, #4
 8004790:	6860      	ldr	r0, [r4, #4]
 8004792:	f7ff ffa1 	bl	80046d8 <std>
 8004796:	2201      	movs	r2, #1
 8004798:	2109      	movs	r1, #9
 800479a:	68a0      	ldr	r0, [r4, #8]
 800479c:	f7ff ff9c 	bl	80046d8 <std>
 80047a0:	2202      	movs	r2, #2
 80047a2:	2112      	movs	r1, #18
 80047a4:	68e0      	ldr	r0, [r4, #12]
 80047a6:	f7ff ff97 	bl	80046d8 <std>
 80047aa:	2301      	movs	r3, #1
 80047ac:	61a3      	str	r3, [r4, #24]
 80047ae:	bd10      	pop	{r4, pc}
 80047b0:	080058dc 	.word	0x080058dc
 80047b4:	08004721 	.word	0x08004721

080047b8 <__sfp>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <__sfp+0x70>)
 80047bc:	4607      	mov	r7, r0
 80047be:	681e      	ldr	r6, [r3, #0]
 80047c0:	69b3      	ldr	r3, [r6, #24]
 80047c2:	b913      	cbnz	r3, 80047ca <__sfp+0x12>
 80047c4:	4630      	mov	r0, r6
 80047c6:	f7ff ffc7 	bl	8004758 <__sinit>
 80047ca:	3648      	adds	r6, #72	; 0x48
 80047cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	d503      	bpl.n	80047dc <__sfp+0x24>
 80047d4:	6833      	ldr	r3, [r6, #0]
 80047d6:	b133      	cbz	r3, 80047e6 <__sfp+0x2e>
 80047d8:	6836      	ldr	r6, [r6, #0]
 80047da:	e7f7      	b.n	80047cc <__sfp+0x14>
 80047dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047e0:	b16d      	cbz	r5, 80047fe <__sfp+0x46>
 80047e2:	3468      	adds	r4, #104	; 0x68
 80047e4:	e7f4      	b.n	80047d0 <__sfp+0x18>
 80047e6:	2104      	movs	r1, #4
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff ff9f 	bl	800472c <__sfmoreglue>
 80047ee:	6030      	str	r0, [r6, #0]
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d1f1      	bne.n	80047d8 <__sfp+0x20>
 80047f4:	230c      	movs	r3, #12
 80047f6:	4604      	mov	r4, r0
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4620      	mov	r0, r4
 80047fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <__sfp+0x74>)
 8004800:	6665      	str	r5, [r4, #100]	; 0x64
 8004802:	e9c4 5500 	strd	r5, r5, [r4]
 8004806:	60a5      	str	r5, [r4, #8]
 8004808:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800480c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004810:	2208      	movs	r2, #8
 8004812:	4629      	mov	r1, r5
 8004814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004818:	f7ff ff1d 	bl	8004656 <memset>
 800481c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004824:	e7e9      	b.n	80047fa <__sfp+0x42>
 8004826:	bf00      	nop
 8004828:	080058dc 	.word	0x080058dc
 800482c:	ffff0001 	.word	0xffff0001

08004830 <_fwalk_reent>:
 8004830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004834:	4680      	mov	r8, r0
 8004836:	4689      	mov	r9, r1
 8004838:	2600      	movs	r6, #0
 800483a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800483e:	b914      	cbnz	r4, 8004846 <_fwalk_reent+0x16>
 8004840:	4630      	mov	r0, r6
 8004842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004846:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800484a:	3f01      	subs	r7, #1
 800484c:	d501      	bpl.n	8004852 <_fwalk_reent+0x22>
 800484e:	6824      	ldr	r4, [r4, #0]
 8004850:	e7f5      	b.n	800483e <_fwalk_reent+0xe>
 8004852:	89ab      	ldrh	r3, [r5, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d907      	bls.n	8004868 <_fwalk_reent+0x38>
 8004858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800485c:	3301      	adds	r3, #1
 800485e:	d003      	beq.n	8004868 <_fwalk_reent+0x38>
 8004860:	4629      	mov	r1, r5
 8004862:	4640      	mov	r0, r8
 8004864:	47c8      	blx	r9
 8004866:	4306      	orrs	r6, r0
 8004868:	3568      	adds	r5, #104	; 0x68
 800486a:	e7ee      	b.n	800484a <_fwalk_reent+0x1a>

0800486c <_malloc_r>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	1ccd      	adds	r5, r1, #3
 8004870:	f025 0503 	bic.w	r5, r5, #3
 8004874:	3508      	adds	r5, #8
 8004876:	2d0c      	cmp	r5, #12
 8004878:	bf38      	it	cc
 800487a:	250c      	movcc	r5, #12
 800487c:	2d00      	cmp	r5, #0
 800487e:	4606      	mov	r6, r0
 8004880:	db01      	blt.n	8004886 <_malloc_r+0x1a>
 8004882:	42a9      	cmp	r1, r5
 8004884:	d903      	bls.n	800488e <_malloc_r+0x22>
 8004886:	230c      	movs	r3, #12
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	2000      	movs	r0, #0
 800488c:	bd70      	pop	{r4, r5, r6, pc}
 800488e:	f000 fee2 	bl	8005656 <__malloc_lock>
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <_malloc_r+0xac>)
 8004894:	6814      	ldr	r4, [r2, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	b991      	cbnz	r1, 80048c0 <_malloc_r+0x54>
 800489a:	4c20      	ldr	r4, [pc, #128]	; (800491c <_malloc_r+0xb0>)
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	b91b      	cbnz	r3, 80048a8 <_malloc_r+0x3c>
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 fc55 	bl	8005150 <_sbrk_r>
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	4629      	mov	r1, r5
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 fc50 	bl	8005150 <_sbrk_r>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d124      	bne.n	80048fe <_malloc_r+0x92>
 80048b4:	230c      	movs	r3, #12
 80048b6:	4630      	mov	r0, r6
 80048b8:	6033      	str	r3, [r6, #0]
 80048ba:	f000 fecd 	bl	8005658 <__malloc_unlock>
 80048be:	e7e4      	b.n	800488a <_malloc_r+0x1e>
 80048c0:	680b      	ldr	r3, [r1, #0]
 80048c2:	1b5b      	subs	r3, r3, r5
 80048c4:	d418      	bmi.n	80048f8 <_malloc_r+0x8c>
 80048c6:	2b0b      	cmp	r3, #11
 80048c8:	d90f      	bls.n	80048ea <_malloc_r+0x7e>
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	18cc      	adds	r4, r1, r3
 80048ce:	50cd      	str	r5, [r1, r3]
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 fec1 	bl	8005658 <__malloc_unlock>
 80048d6:	f104 000b 	add.w	r0, r4, #11
 80048da:	1d23      	adds	r3, r4, #4
 80048dc:	f020 0007 	bic.w	r0, r0, #7
 80048e0:	1ac3      	subs	r3, r0, r3
 80048e2:	d0d3      	beq.n	800488c <_malloc_r+0x20>
 80048e4:	425a      	negs	r2, r3
 80048e6:	50e2      	str	r2, [r4, r3]
 80048e8:	e7d0      	b.n	800488c <_malloc_r+0x20>
 80048ea:	684b      	ldr	r3, [r1, #4]
 80048ec:	428c      	cmp	r4, r1
 80048ee:	bf16      	itet	ne
 80048f0:	6063      	strne	r3, [r4, #4]
 80048f2:	6013      	streq	r3, [r2, #0]
 80048f4:	460c      	movne	r4, r1
 80048f6:	e7eb      	b.n	80048d0 <_malloc_r+0x64>
 80048f8:	460c      	mov	r4, r1
 80048fa:	6849      	ldr	r1, [r1, #4]
 80048fc:	e7cc      	b.n	8004898 <_malloc_r+0x2c>
 80048fe:	1cc4      	adds	r4, r0, #3
 8004900:	f024 0403 	bic.w	r4, r4, #3
 8004904:	42a0      	cmp	r0, r4
 8004906:	d005      	beq.n	8004914 <_malloc_r+0xa8>
 8004908:	1a21      	subs	r1, r4, r0
 800490a:	4630      	mov	r0, r6
 800490c:	f000 fc20 	bl	8005150 <_sbrk_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d0cf      	beq.n	80048b4 <_malloc_r+0x48>
 8004914:	6025      	str	r5, [r4, #0]
 8004916:	e7db      	b.n	80048d0 <_malloc_r+0x64>
 8004918:	20001bac 	.word	0x20001bac
 800491c:	20001bb0 	.word	0x20001bb0

08004920 <__ssputs_r>:
 8004920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	688e      	ldr	r6, [r1, #8]
 8004926:	4682      	mov	sl, r0
 8004928:	429e      	cmp	r6, r3
 800492a:	460c      	mov	r4, r1
 800492c:	4690      	mov	r8, r2
 800492e:	4699      	mov	r9, r3
 8004930:	d837      	bhi.n	80049a2 <__ssputs_r+0x82>
 8004932:	898a      	ldrh	r2, [r1, #12]
 8004934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004938:	d031      	beq.n	800499e <__ssputs_r+0x7e>
 800493a:	2302      	movs	r3, #2
 800493c:	6825      	ldr	r5, [r4, #0]
 800493e:	6909      	ldr	r1, [r1, #16]
 8004940:	1a6f      	subs	r7, r5, r1
 8004942:	6965      	ldr	r5, [r4, #20]
 8004944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004948:	fb95 f5f3 	sdiv	r5, r5, r3
 800494c:	f109 0301 	add.w	r3, r9, #1
 8004950:	443b      	add	r3, r7
 8004952:	429d      	cmp	r5, r3
 8004954:	bf38      	it	cc
 8004956:	461d      	movcc	r5, r3
 8004958:	0553      	lsls	r3, r2, #21
 800495a:	d530      	bpl.n	80049be <__ssputs_r+0x9e>
 800495c:	4629      	mov	r1, r5
 800495e:	f7ff ff85 	bl	800486c <_malloc_r>
 8004962:	4606      	mov	r6, r0
 8004964:	b950      	cbnz	r0, 800497c <__ssputs_r+0x5c>
 8004966:	230c      	movs	r3, #12
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	f8ca 3000 	str.w	r3, [sl]
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497c:	463a      	mov	r2, r7
 800497e:	6921      	ldr	r1, [r4, #16]
 8004980:	f7ff fe5e 	bl	8004640 <memcpy>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	6126      	str	r6, [r4, #16]
 8004992:	443e      	add	r6, r7
 8004994:	6026      	str	r6, [r4, #0]
 8004996:	464e      	mov	r6, r9
 8004998:	6165      	str	r5, [r4, #20]
 800499a:	1bed      	subs	r5, r5, r7
 800499c:	60a5      	str	r5, [r4, #8]
 800499e:	454e      	cmp	r6, r9
 80049a0:	d900      	bls.n	80049a4 <__ssputs_r+0x84>
 80049a2:	464e      	mov	r6, r9
 80049a4:	4632      	mov	r2, r6
 80049a6:	4641      	mov	r1, r8
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	f000 fe3b 	bl	8005624 <memmove>
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	2000      	movs	r0, #0
 80049b2:	1b9b      	subs	r3, r3, r6
 80049b4:	60a3      	str	r3, [r4, #8]
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	441e      	add	r6, r3
 80049ba:	6026      	str	r6, [r4, #0]
 80049bc:	e7dc      	b.n	8004978 <__ssputs_r+0x58>
 80049be:	462a      	mov	r2, r5
 80049c0:	f000 fe98 	bl	80056f4 <_realloc_r>
 80049c4:	4606      	mov	r6, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d1e2      	bne.n	8004990 <__ssputs_r+0x70>
 80049ca:	6921      	ldr	r1, [r4, #16]
 80049cc:	4650      	mov	r0, sl
 80049ce:	f000 fe45 	bl	800565c <_free_r>
 80049d2:	e7c8      	b.n	8004966 <__ssputs_r+0x46>

080049d4 <_svfiprintf_r>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	461d      	mov	r5, r3
 80049da:	898b      	ldrh	r3, [r1, #12]
 80049dc:	b09d      	sub	sp, #116	; 0x74
 80049de:	061f      	lsls	r7, r3, #24
 80049e0:	4680      	mov	r8, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	4616      	mov	r6, r2
 80049e6:	d50f      	bpl.n	8004a08 <_svfiprintf_r+0x34>
 80049e8:	690b      	ldr	r3, [r1, #16]
 80049ea:	b96b      	cbnz	r3, 8004a08 <_svfiprintf_r+0x34>
 80049ec:	2140      	movs	r1, #64	; 0x40
 80049ee:	f7ff ff3d 	bl	800486c <_malloc_r>
 80049f2:	6020      	str	r0, [r4, #0]
 80049f4:	6120      	str	r0, [r4, #16]
 80049f6:	b928      	cbnz	r0, 8004a04 <_svfiprintf_r+0x30>
 80049f8:	230c      	movs	r3, #12
 80049fa:	f8c8 3000 	str.w	r3, [r8]
 80049fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004a02:	e0c8      	b.n	8004b96 <_svfiprintf_r+0x1c2>
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	6163      	str	r3, [r4, #20]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a12:	2330      	movs	r3, #48	; 0x30
 8004a14:	f04f 0b01 	mov.w	fp, #1
 8004a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1c:	9503      	str	r5, [sp, #12]
 8004a1e:	4637      	mov	r7, r6
 8004a20:	463d      	mov	r5, r7
 8004a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a26:	b10b      	cbz	r3, 8004a2c <_svfiprintf_r+0x58>
 8004a28:	2b25      	cmp	r3, #37	; 0x25
 8004a2a:	d13e      	bne.n	8004aaa <_svfiprintf_r+0xd6>
 8004a2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a30:	d00b      	beq.n	8004a4a <_svfiprintf_r+0x76>
 8004a32:	4653      	mov	r3, sl
 8004a34:	4632      	mov	r2, r6
 8004a36:	4621      	mov	r1, r4
 8004a38:	4640      	mov	r0, r8
 8004a3a:	f7ff ff71 	bl	8004920 <__ssputs_r>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f000 80a4 	beq.w	8004b8c <_svfiprintf_r+0x1b8>
 8004a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a46:	4453      	add	r3, sl
 8004a48:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4a:	783b      	ldrb	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 809d 	beq.w	8004b8c <_svfiprintf_r+0x1b8>
 8004a52:	2300      	movs	r3, #0
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	9307      	str	r3, [sp, #28]
 8004a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a64:	931a      	str	r3, [sp, #104]	; 0x68
 8004a66:	462f      	mov	r7, r5
 8004a68:	2205      	movs	r2, #5
 8004a6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a6e:	4850      	ldr	r0, [pc, #320]	; (8004bb0 <_svfiprintf_r+0x1dc>)
 8004a70:	f000 fdca 	bl	8005608 <memchr>
 8004a74:	9b04      	ldr	r3, [sp, #16]
 8004a76:	b9d0      	cbnz	r0, 8004aae <_svfiprintf_r+0xda>
 8004a78:	06d9      	lsls	r1, r3, #27
 8004a7a:	bf44      	itt	mi
 8004a7c:	2220      	movmi	r2, #32
 8004a7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a82:	071a      	lsls	r2, r3, #28
 8004a84:	bf44      	itt	mi
 8004a86:	222b      	movmi	r2, #43	; 0x2b
 8004a88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a8c:	782a      	ldrb	r2, [r5, #0]
 8004a8e:	2a2a      	cmp	r2, #42	; 0x2a
 8004a90:	d015      	beq.n	8004abe <_svfiprintf_r+0xea>
 8004a92:	462f      	mov	r7, r5
 8004a94:	2000      	movs	r0, #0
 8004a96:	250a      	movs	r5, #10
 8004a98:	9a07      	ldr	r2, [sp, #28]
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa0:	3b30      	subs	r3, #48	; 0x30
 8004aa2:	2b09      	cmp	r3, #9
 8004aa4:	d94d      	bls.n	8004b42 <_svfiprintf_r+0x16e>
 8004aa6:	b1b8      	cbz	r0, 8004ad8 <_svfiprintf_r+0x104>
 8004aa8:	e00f      	b.n	8004aca <_svfiprintf_r+0xf6>
 8004aaa:	462f      	mov	r7, r5
 8004aac:	e7b8      	b.n	8004a20 <_svfiprintf_r+0x4c>
 8004aae:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <_svfiprintf_r+0x1dc>)
 8004ab0:	463d      	mov	r5, r7
 8004ab2:	1a80      	subs	r0, r0, r2
 8004ab4:	fa0b f000 	lsl.w	r0, fp, r0
 8004ab8:	4318      	orrs	r0, r3
 8004aba:	9004      	str	r0, [sp, #16]
 8004abc:	e7d3      	b.n	8004a66 <_svfiprintf_r+0x92>
 8004abe:	9a03      	ldr	r2, [sp, #12]
 8004ac0:	1d11      	adds	r1, r2, #4
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	9103      	str	r1, [sp, #12]
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	db01      	blt.n	8004ace <_svfiprintf_r+0xfa>
 8004aca:	9207      	str	r2, [sp, #28]
 8004acc:	e004      	b.n	8004ad8 <_svfiprintf_r+0x104>
 8004ace:	4252      	negs	r2, r2
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	9207      	str	r2, [sp, #28]
 8004ad6:	9304      	str	r3, [sp, #16]
 8004ad8:	783b      	ldrb	r3, [r7, #0]
 8004ada:	2b2e      	cmp	r3, #46	; 0x2e
 8004adc:	d10c      	bne.n	8004af8 <_svfiprintf_r+0x124>
 8004ade:	787b      	ldrb	r3, [r7, #1]
 8004ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae2:	d133      	bne.n	8004b4c <_svfiprintf_r+0x178>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	3702      	adds	r7, #2
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	9203      	str	r2, [sp, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bfb8      	it	lt
 8004af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	4d2e      	ldr	r5, [pc, #184]	; (8004bb4 <_svfiprintf_r+0x1e0>)
 8004afa:	2203      	movs	r2, #3
 8004afc:	7839      	ldrb	r1, [r7, #0]
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 fd82 	bl	8005608 <memchr>
 8004b04:	b138      	cbz	r0, 8004b16 <_svfiprintf_r+0x142>
 8004b06:	2340      	movs	r3, #64	; 0x40
 8004b08:	1b40      	subs	r0, r0, r5
 8004b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b0e:	9b04      	ldr	r3, [sp, #16]
 8004b10:	3701      	adds	r7, #1
 8004b12:	4303      	orrs	r3, r0
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	7839      	ldrb	r1, [r7, #0]
 8004b18:	2206      	movs	r2, #6
 8004b1a:	4827      	ldr	r0, [pc, #156]	; (8004bb8 <_svfiprintf_r+0x1e4>)
 8004b1c:	1c7e      	adds	r6, r7, #1
 8004b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b22:	f000 fd71 	bl	8005608 <memchr>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d038      	beq.n	8004b9c <_svfiprintf_r+0x1c8>
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <_svfiprintf_r+0x1e8>)
 8004b2c:	bb13      	cbnz	r3, 8004b74 <_svfiprintf_r+0x1a0>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	3307      	adds	r3, #7
 8004b32:	f023 0307 	bic.w	r3, r3, #7
 8004b36:	3308      	adds	r3, #8
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	444b      	add	r3, r9
 8004b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b40:	e76d      	b.n	8004a1e <_svfiprintf_r+0x4a>
 8004b42:	fb05 3202 	mla	r2, r5, r2, r3
 8004b46:	2001      	movs	r0, #1
 8004b48:	460f      	mov	r7, r1
 8004b4a:	e7a6      	b.n	8004a9a <_svfiprintf_r+0xc6>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	250a      	movs	r5, #10
 8004b50:	4619      	mov	r1, r3
 8004b52:	3701      	adds	r7, #1
 8004b54:	9305      	str	r3, [sp, #20]
 8004b56:	4638      	mov	r0, r7
 8004b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5c:	3a30      	subs	r2, #48	; 0x30
 8004b5e:	2a09      	cmp	r2, #9
 8004b60:	d903      	bls.n	8004b6a <_svfiprintf_r+0x196>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0c8      	beq.n	8004af8 <_svfiprintf_r+0x124>
 8004b66:	9105      	str	r1, [sp, #20]
 8004b68:	e7c6      	b.n	8004af8 <_svfiprintf_r+0x124>
 8004b6a:	fb05 2101 	mla	r1, r5, r1, r2
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4607      	mov	r7, r0
 8004b72:	e7f0      	b.n	8004b56 <_svfiprintf_r+0x182>
 8004b74:	ab03      	add	r3, sp, #12
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <_svfiprintf_r+0x1ec>)
 8004b7c:	a904      	add	r1, sp, #16
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f3af 8000 	nop.w
 8004b84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b88:	4681      	mov	r9, r0
 8004b8a:	d1d6      	bne.n	8004b3a <_svfiprintf_r+0x166>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	065b      	lsls	r3, r3, #25
 8004b90:	f53f af35 	bmi.w	80049fe <_svfiprintf_r+0x2a>
 8004b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b96:	b01d      	add	sp, #116	; 0x74
 8004b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9c:	ab03      	add	r3, sp, #12
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <_svfiprintf_r+0x1ec>)
 8004ba4:	a904      	add	r1, sp, #16
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f000 f9c0 	bl	8004f2c <_printf_i>
 8004bac:	e7ea      	b.n	8004b84 <_svfiprintf_r+0x1b0>
 8004bae:	bf00      	nop
 8004bb0:	08005940 	.word	0x08005940
 8004bb4:	08005946 	.word	0x08005946
 8004bb8:	0800594a 	.word	0x0800594a
 8004bbc:	00000000 	.word	0x00000000
 8004bc0:	08004921 	.word	0x08004921

08004bc4 <__sfputc_r>:
 8004bc4:	6893      	ldr	r3, [r2, #8]
 8004bc6:	b410      	push	{r4}
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	6093      	str	r3, [r2, #8]
 8004bce:	da07      	bge.n	8004be0 <__sfputc_r+0x1c>
 8004bd0:	6994      	ldr	r4, [r2, #24]
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	db01      	blt.n	8004bda <__sfputc_r+0x16>
 8004bd6:	290a      	cmp	r1, #10
 8004bd8:	d102      	bne.n	8004be0 <__sfputc_r+0x1c>
 8004bda:	bc10      	pop	{r4}
 8004bdc:	f000 bb0c 	b.w	80051f8 <__swbuf_r>
 8004be0:	6813      	ldr	r3, [r2, #0]
 8004be2:	1c58      	adds	r0, r3, #1
 8004be4:	6010      	str	r0, [r2, #0]
 8004be6:	7019      	strb	r1, [r3, #0]
 8004be8:	4608      	mov	r0, r1
 8004bea:	bc10      	pop	{r4}
 8004bec:	4770      	bx	lr

08004bee <__sfputs_r>:
 8004bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	18d5      	adds	r5, r2, r3
 8004bf8:	42ac      	cmp	r4, r5
 8004bfa:	d101      	bne.n	8004c00 <__sfputs_r+0x12>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e007      	b.n	8004c10 <__sfputs_r+0x22>
 8004c00:	463a      	mov	r2, r7
 8004c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7ff ffdc 	bl	8004bc4 <__sfputc_r>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d1f3      	bne.n	8004bf8 <__sfputs_r+0xa>
 8004c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c14 <_vfiprintf_r>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	460c      	mov	r4, r1
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	4617      	mov	r7, r2
 8004c1e:	461d      	mov	r5, r3
 8004c20:	4606      	mov	r6, r0
 8004c22:	b118      	cbz	r0, 8004c2c <_vfiprintf_r+0x18>
 8004c24:	6983      	ldr	r3, [r0, #24]
 8004c26:	b90b      	cbnz	r3, 8004c2c <_vfiprintf_r+0x18>
 8004c28:	f7ff fd96 	bl	8004758 <__sinit>
 8004c2c:	4b7c      	ldr	r3, [pc, #496]	; (8004e20 <_vfiprintf_r+0x20c>)
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d158      	bne.n	8004ce4 <_vfiprintf_r+0xd0>
 8004c32:	6874      	ldr	r4, [r6, #4]
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	0718      	lsls	r0, r3, #28
 8004c38:	d55e      	bpl.n	8004cf8 <_vfiprintf_r+0xe4>
 8004c3a:	6923      	ldr	r3, [r4, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d05b      	beq.n	8004cf8 <_vfiprintf_r+0xe4>
 8004c40:	2300      	movs	r3, #0
 8004c42:	9309      	str	r3, [sp, #36]	; 0x24
 8004c44:	2320      	movs	r3, #32
 8004c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c4a:	2330      	movs	r3, #48	; 0x30
 8004c4c:	f04f 0b01 	mov.w	fp, #1
 8004c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c54:	9503      	str	r5, [sp, #12]
 8004c56:	46b8      	mov	r8, r7
 8004c58:	4645      	mov	r5, r8
 8004c5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c5e:	b10b      	cbz	r3, 8004c64 <_vfiprintf_r+0x50>
 8004c60:	2b25      	cmp	r3, #37	; 0x25
 8004c62:	d154      	bne.n	8004d0e <_vfiprintf_r+0xfa>
 8004c64:	ebb8 0a07 	subs.w	sl, r8, r7
 8004c68:	d00b      	beq.n	8004c82 <_vfiprintf_r+0x6e>
 8004c6a:	4653      	mov	r3, sl
 8004c6c:	463a      	mov	r2, r7
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4630      	mov	r0, r6
 8004c72:	f7ff ffbc 	bl	8004bee <__sfputs_r>
 8004c76:	3001      	adds	r0, #1
 8004c78:	f000 80c2 	beq.w	8004e00 <_vfiprintf_r+0x1ec>
 8004c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7e:	4453      	add	r3, sl
 8004c80:	9309      	str	r3, [sp, #36]	; 0x24
 8004c82:	f898 3000 	ldrb.w	r3, [r8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80ba 	beq.w	8004e00 <_vfiprintf_r+0x1ec>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	9307      	str	r3, [sp, #28]
 8004c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ca0:	46a8      	mov	r8, r5
 8004ca2:	2205      	movs	r2, #5
 8004ca4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004ca8:	485e      	ldr	r0, [pc, #376]	; (8004e24 <_vfiprintf_r+0x210>)
 8004caa:	f000 fcad 	bl	8005608 <memchr>
 8004cae:	9b04      	ldr	r3, [sp, #16]
 8004cb0:	bb78      	cbnz	r0, 8004d12 <_vfiprintf_r+0xfe>
 8004cb2:	06d9      	lsls	r1, r3, #27
 8004cb4:	bf44      	itt	mi
 8004cb6:	2220      	movmi	r2, #32
 8004cb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cbc:	071a      	lsls	r2, r3, #28
 8004cbe:	bf44      	itt	mi
 8004cc0:	222b      	movmi	r2, #43	; 0x2b
 8004cc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cc6:	782a      	ldrb	r2, [r5, #0]
 8004cc8:	2a2a      	cmp	r2, #42	; 0x2a
 8004cca:	d02a      	beq.n	8004d22 <_vfiprintf_r+0x10e>
 8004ccc:	46a8      	mov	r8, r5
 8004cce:	2000      	movs	r0, #0
 8004cd0:	250a      	movs	r5, #10
 8004cd2:	9a07      	ldr	r2, [sp, #28]
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cda:	3b30      	subs	r3, #48	; 0x30
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	d969      	bls.n	8004db4 <_vfiprintf_r+0x1a0>
 8004ce0:	b360      	cbz	r0, 8004d3c <_vfiprintf_r+0x128>
 8004ce2:	e024      	b.n	8004d2e <_vfiprintf_r+0x11a>
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <_vfiprintf_r+0x214>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d101      	bne.n	8004cee <_vfiprintf_r+0xda>
 8004cea:	68b4      	ldr	r4, [r6, #8]
 8004cec:	e7a2      	b.n	8004c34 <_vfiprintf_r+0x20>
 8004cee:	4b4f      	ldr	r3, [pc, #316]	; (8004e2c <_vfiprintf_r+0x218>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	bf08      	it	eq
 8004cf4:	68f4      	ldreq	r4, [r6, #12]
 8004cf6:	e79d      	b.n	8004c34 <_vfiprintf_r+0x20>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 fae0 	bl	80052c0 <__swsetup_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d09d      	beq.n	8004c40 <_vfiprintf_r+0x2c>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b01d      	add	sp, #116	; 0x74
 8004d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0e:	46a8      	mov	r8, r5
 8004d10:	e7a2      	b.n	8004c58 <_vfiprintf_r+0x44>
 8004d12:	4a44      	ldr	r2, [pc, #272]	; (8004e24 <_vfiprintf_r+0x210>)
 8004d14:	4645      	mov	r5, r8
 8004d16:	1a80      	subs	r0, r0, r2
 8004d18:	fa0b f000 	lsl.w	r0, fp, r0
 8004d1c:	4318      	orrs	r0, r3
 8004d1e:	9004      	str	r0, [sp, #16]
 8004d20:	e7be      	b.n	8004ca0 <_vfiprintf_r+0x8c>
 8004d22:	9a03      	ldr	r2, [sp, #12]
 8004d24:	1d11      	adds	r1, r2, #4
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	9103      	str	r1, [sp, #12]
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	db01      	blt.n	8004d32 <_vfiprintf_r+0x11e>
 8004d2e:	9207      	str	r2, [sp, #28]
 8004d30:	e004      	b.n	8004d3c <_vfiprintf_r+0x128>
 8004d32:	4252      	negs	r2, r2
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	9207      	str	r2, [sp, #28]
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	f898 3000 	ldrb.w	r3, [r8]
 8004d40:	2b2e      	cmp	r3, #46	; 0x2e
 8004d42:	d10e      	bne.n	8004d62 <_vfiprintf_r+0x14e>
 8004d44:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004d48:	2b2a      	cmp	r3, #42	; 0x2a
 8004d4a:	d138      	bne.n	8004dbe <_vfiprintf_r+0x1aa>
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	f108 0802 	add.w	r8, r8, #2
 8004d52:	1d1a      	adds	r2, r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	9203      	str	r2, [sp, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfb8      	it	lt
 8004d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	4d33      	ldr	r5, [pc, #204]	; (8004e30 <_vfiprintf_r+0x21c>)
 8004d64:	2203      	movs	r2, #3
 8004d66:	f898 1000 	ldrb.w	r1, [r8]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 fc4c 	bl	8005608 <memchr>
 8004d70:	b140      	cbz	r0, 8004d84 <_vfiprintf_r+0x170>
 8004d72:	2340      	movs	r3, #64	; 0x40
 8004d74:	1b40      	subs	r0, r0, r5
 8004d76:	fa03 f000 	lsl.w	r0, r3, r0
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	f108 0801 	add.w	r8, r8, #1
 8004d80:	4303      	orrs	r3, r0
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	f898 1000 	ldrb.w	r1, [r8]
 8004d88:	2206      	movs	r2, #6
 8004d8a:	482a      	ldr	r0, [pc, #168]	; (8004e34 <_vfiprintf_r+0x220>)
 8004d8c:	f108 0701 	add.w	r7, r8, #1
 8004d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d94:	f000 fc38 	bl	8005608 <memchr>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d037      	beq.n	8004e0c <_vfiprintf_r+0x1f8>
 8004d9c:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_vfiprintf_r+0x224>)
 8004d9e:	bb1b      	cbnz	r3, 8004de8 <_vfiprintf_r+0x1d4>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	3307      	adds	r3, #7
 8004da4:	f023 0307 	bic.w	r3, r3, #7
 8004da8:	3308      	adds	r3, #8
 8004daa:	9303      	str	r3, [sp, #12]
 8004dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dae:	444b      	add	r3, r9
 8004db0:	9309      	str	r3, [sp, #36]	; 0x24
 8004db2:	e750      	b.n	8004c56 <_vfiprintf_r+0x42>
 8004db4:	fb05 3202 	mla	r2, r5, r2, r3
 8004db8:	2001      	movs	r0, #1
 8004dba:	4688      	mov	r8, r1
 8004dbc:	e78a      	b.n	8004cd4 <_vfiprintf_r+0xc0>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	250a      	movs	r5, #10
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f108 0801 	add.w	r8, r8, #1
 8004dc8:	9305      	str	r3, [sp, #20]
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd0:	3a30      	subs	r2, #48	; 0x30
 8004dd2:	2a09      	cmp	r2, #9
 8004dd4:	d903      	bls.n	8004dde <_vfiprintf_r+0x1ca>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0c3      	beq.n	8004d62 <_vfiprintf_r+0x14e>
 8004dda:	9105      	str	r1, [sp, #20]
 8004ddc:	e7c1      	b.n	8004d62 <_vfiprintf_r+0x14e>
 8004dde:	fb05 2101 	mla	r1, r5, r1, r2
 8004de2:	2301      	movs	r3, #1
 8004de4:	4680      	mov	r8, r0
 8004de6:	e7f0      	b.n	8004dca <_vfiprintf_r+0x1b6>
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	4622      	mov	r2, r4
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <_vfiprintf_r+0x228>)
 8004df0:	a904      	add	r1, sp, #16
 8004df2:	4630      	mov	r0, r6
 8004df4:	f3af 8000 	nop.w
 8004df8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004dfc:	4681      	mov	r9, r0
 8004dfe:	d1d5      	bne.n	8004dac <_vfiprintf_r+0x198>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	065b      	lsls	r3, r3, #25
 8004e04:	f53f af7e 	bmi.w	8004d04 <_vfiprintf_r+0xf0>
 8004e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e0a:	e77d      	b.n	8004d08 <_vfiprintf_r+0xf4>
 8004e0c:	ab03      	add	r3, sp, #12
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4622      	mov	r2, r4
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <_vfiprintf_r+0x228>)
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	4630      	mov	r0, r6
 8004e18:	f000 f888 	bl	8004f2c <_printf_i>
 8004e1c:	e7ec      	b.n	8004df8 <_vfiprintf_r+0x1e4>
 8004e1e:	bf00      	nop
 8004e20:	08005900 	.word	0x08005900
 8004e24:	08005940 	.word	0x08005940
 8004e28:	08005920 	.word	0x08005920
 8004e2c:	080058e0 	.word	0x080058e0
 8004e30:	08005946 	.word	0x08005946
 8004e34:	0800594a 	.word	0x0800594a
 8004e38:	00000000 	.word	0x00000000
 8004e3c:	08004bef 	.word	0x08004bef

08004e40 <_printf_common>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	4691      	mov	r9, r2
 8004e46:	461f      	mov	r7, r3
 8004e48:	688a      	ldr	r2, [r1, #8]
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	bfb8      	it	lt
 8004e52:	4613      	movlt	r3, r2
 8004e54:	f8c9 3000 	str.w	r3, [r9]
 8004e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e62:	b112      	cbz	r2, 8004e6a <_printf_common+0x2a>
 8004e64:	3301      	adds	r3, #1
 8004e66:	f8c9 3000 	str.w	r3, [r9]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e74:	3302      	addmi	r3, #2
 8004e76:	f8c9 3000 	strmi.w	r3, [r9]
 8004e7a:	6825      	ldr	r5, [r4, #0]
 8004e7c:	f015 0506 	ands.w	r5, r5, #6
 8004e80:	d107      	bne.n	8004e92 <_printf_common+0x52>
 8004e82:	f104 0a19 	add.w	sl, r4, #25
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	f8d9 2000 	ldr.w	r2, [r9]
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	42ab      	cmp	r3, r5
 8004e90:	dc29      	bgt.n	8004ee6 <_printf_common+0xa6>
 8004e92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	3300      	adds	r3, #0
 8004e9a:	bf18      	it	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	0692      	lsls	r2, r2, #26
 8004ea0:	d42e      	bmi.n	8004f00 <_printf_common+0xc0>
 8004ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	47c0      	blx	r8
 8004eac:	3001      	adds	r0, #1
 8004eae:	d021      	beq.n	8004ef4 <_printf_common+0xb4>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	68e5      	ldr	r5, [r4, #12]
 8004eb4:	f003 0306 	and.w	r3, r3, #6
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	bf18      	it	ne
 8004ebc:	2500      	movne	r5, #0
 8004ebe:	f8d9 2000 	ldr.w	r2, [r9]
 8004ec2:	f04f 0900 	mov.w	r9, #0
 8004ec6:	bf08      	it	eq
 8004ec8:	1aad      	subeq	r5, r5, r2
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	bf08      	it	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	bfc4      	itt	gt
 8004ed8:	1a9b      	subgt	r3, r3, r2
 8004eda:	18ed      	addgt	r5, r5, r3
 8004edc:	341a      	adds	r4, #26
 8004ede:	454d      	cmp	r5, r9
 8004ee0:	d11a      	bne.n	8004f18 <_printf_common+0xd8>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	e008      	b.n	8004ef8 <_printf_common+0xb8>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4652      	mov	r2, sl
 8004eea:	4639      	mov	r1, r7
 8004eec:	4630      	mov	r0, r6
 8004eee:	47c0      	blx	r8
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d103      	bne.n	8004efc <_printf_common+0xbc>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efc:	3501      	adds	r5, #1
 8004efe:	e7c2      	b.n	8004e86 <_printf_common+0x46>
 8004f00:	2030      	movs	r0, #48	; 0x30
 8004f02:	18e1      	adds	r1, r4, r3
 8004f04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f0e:	4422      	add	r2, r4
 8004f10:	3302      	adds	r3, #2
 8004f12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f16:	e7c4      	b.n	8004ea2 <_printf_common+0x62>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	47c0      	blx	r8
 8004f22:	3001      	adds	r0, #1
 8004f24:	d0e6      	beq.n	8004ef4 <_printf_common+0xb4>
 8004f26:	f109 0901 	add.w	r9, r9, #1
 8004f2a:	e7d8      	b.n	8004ede <_printf_common+0x9e>

08004f2c <_printf_i>:
 8004f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f34:	460c      	mov	r4, r1
 8004f36:	7e09      	ldrb	r1, [r1, #24]
 8004f38:	b085      	sub	sp, #20
 8004f3a:	296e      	cmp	r1, #110	; 0x6e
 8004f3c:	4617      	mov	r7, r2
 8004f3e:	4606      	mov	r6, r0
 8004f40:	4698      	mov	r8, r3
 8004f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f44:	f000 80b3 	beq.w	80050ae <_printf_i+0x182>
 8004f48:	d822      	bhi.n	8004f90 <_printf_i+0x64>
 8004f4a:	2963      	cmp	r1, #99	; 0x63
 8004f4c:	d036      	beq.n	8004fbc <_printf_i+0x90>
 8004f4e:	d80a      	bhi.n	8004f66 <_printf_i+0x3a>
 8004f50:	2900      	cmp	r1, #0
 8004f52:	f000 80b9 	beq.w	80050c8 <_printf_i+0x19c>
 8004f56:	2958      	cmp	r1, #88	; 0x58
 8004f58:	f000 8083 	beq.w	8005062 <_printf_i+0x136>
 8004f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f64:	e032      	b.n	8004fcc <_printf_i+0xa0>
 8004f66:	2964      	cmp	r1, #100	; 0x64
 8004f68:	d001      	beq.n	8004f6e <_printf_i+0x42>
 8004f6a:	2969      	cmp	r1, #105	; 0x69
 8004f6c:	d1f6      	bne.n	8004f5c <_printf_i+0x30>
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	0605      	lsls	r5, r0, #24
 8004f74:	f103 0104 	add.w	r1, r3, #4
 8004f78:	d52a      	bpl.n	8004fd0 <_printf_i+0xa4>
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da03      	bge.n	8004f8a <_printf_i+0x5e>
 8004f82:	222d      	movs	r2, #45	; 0x2d
 8004f84:	425b      	negs	r3, r3
 8004f86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f8a:	486f      	ldr	r0, [pc, #444]	; (8005148 <_printf_i+0x21c>)
 8004f8c:	220a      	movs	r2, #10
 8004f8e:	e039      	b.n	8005004 <_printf_i+0xd8>
 8004f90:	2973      	cmp	r1, #115	; 0x73
 8004f92:	f000 809d 	beq.w	80050d0 <_printf_i+0x1a4>
 8004f96:	d808      	bhi.n	8004faa <_printf_i+0x7e>
 8004f98:	296f      	cmp	r1, #111	; 0x6f
 8004f9a:	d020      	beq.n	8004fde <_printf_i+0xb2>
 8004f9c:	2970      	cmp	r1, #112	; 0x70
 8004f9e:	d1dd      	bne.n	8004f5c <_printf_i+0x30>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	f043 0320 	orr.w	r3, r3, #32
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	e003      	b.n	8004fb2 <_printf_i+0x86>
 8004faa:	2975      	cmp	r1, #117	; 0x75
 8004fac:	d017      	beq.n	8004fde <_printf_i+0xb2>
 8004fae:	2978      	cmp	r1, #120	; 0x78
 8004fb0:	d1d4      	bne.n	8004f5c <_printf_i+0x30>
 8004fb2:	2378      	movs	r3, #120	; 0x78
 8004fb4:	4865      	ldr	r0, [pc, #404]	; (800514c <_printf_i+0x220>)
 8004fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fba:	e055      	b.n	8005068 <_printf_i+0x13c>
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc2:	1d19      	adds	r1, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6011      	str	r1, [r2, #0]
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e08c      	b.n	80050ea <_printf_i+0x1be>
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fd6:	6011      	str	r1, [r2, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	b21b      	sxthne	r3, r3
 8004fdc:	e7cf      	b.n	8004f7e <_printf_i+0x52>
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	6825      	ldr	r5, [r4, #0]
 8004fe2:	1d18      	adds	r0, r3, #4
 8004fe4:	6010      	str	r0, [r2, #0]
 8004fe6:	0628      	lsls	r0, r5, #24
 8004fe8:	d501      	bpl.n	8004fee <_printf_i+0xc2>
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	e002      	b.n	8004ff4 <_printf_i+0xc8>
 8004fee:	0668      	lsls	r0, r5, #25
 8004ff0:	d5fb      	bpl.n	8004fea <_printf_i+0xbe>
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	296f      	cmp	r1, #111	; 0x6f
 8004ff6:	bf14      	ite	ne
 8004ff8:	220a      	movne	r2, #10
 8004ffa:	2208      	moveq	r2, #8
 8004ffc:	4852      	ldr	r0, [pc, #328]	; (8005148 <_printf_i+0x21c>)
 8004ffe:	2100      	movs	r1, #0
 8005000:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005004:	6865      	ldr	r5, [r4, #4]
 8005006:	2d00      	cmp	r5, #0
 8005008:	60a5      	str	r5, [r4, #8]
 800500a:	f2c0 8095 	blt.w	8005138 <_printf_i+0x20c>
 800500e:	6821      	ldr	r1, [r4, #0]
 8005010:	f021 0104 	bic.w	r1, r1, #4
 8005014:	6021      	str	r1, [r4, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d13d      	bne.n	8005096 <_printf_i+0x16a>
 800501a:	2d00      	cmp	r5, #0
 800501c:	f040 808e 	bne.w	800513c <_printf_i+0x210>
 8005020:	4665      	mov	r5, ip
 8005022:	2a08      	cmp	r2, #8
 8005024:	d10b      	bne.n	800503e <_printf_i+0x112>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	07db      	lsls	r3, r3, #31
 800502a:	d508      	bpl.n	800503e <_printf_i+0x112>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	bfde      	ittt	le
 8005034:	2330      	movle	r3, #48	; 0x30
 8005036:	f805 3c01 	strble.w	r3, [r5, #-1]
 800503a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800503e:	ebac 0305 	sub.w	r3, ip, r5
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	f8cd 8000 	str.w	r8, [sp]
 8005048:	463b      	mov	r3, r7
 800504a:	aa03      	add	r2, sp, #12
 800504c:	4621      	mov	r1, r4
 800504e:	4630      	mov	r0, r6
 8005050:	f7ff fef6 	bl	8004e40 <_printf_common>
 8005054:	3001      	adds	r0, #1
 8005056:	d14d      	bne.n	80050f4 <_printf_i+0x1c8>
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	b005      	add	sp, #20
 800505e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005062:	4839      	ldr	r0, [pc, #228]	; (8005148 <_printf_i+0x21c>)
 8005064:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	6821      	ldr	r1, [r4, #0]
 800506c:	1d1d      	adds	r5, r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6015      	str	r5, [r2, #0]
 8005072:	060a      	lsls	r2, r1, #24
 8005074:	d50b      	bpl.n	800508e <_printf_i+0x162>
 8005076:	07ca      	lsls	r2, r1, #31
 8005078:	bf44      	itt	mi
 800507a:	f041 0120 	orrmi.w	r1, r1, #32
 800507e:	6021      	strmi	r1, [r4, #0]
 8005080:	b91b      	cbnz	r3, 800508a <_printf_i+0x15e>
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	f022 0220 	bic.w	r2, r2, #32
 8005088:	6022      	str	r2, [r4, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	e7b7      	b.n	8004ffe <_printf_i+0xd2>
 800508e:	064d      	lsls	r5, r1, #25
 8005090:	bf48      	it	mi
 8005092:	b29b      	uxthmi	r3, r3
 8005094:	e7ef      	b.n	8005076 <_printf_i+0x14a>
 8005096:	4665      	mov	r5, ip
 8005098:	fbb3 f1f2 	udiv	r1, r3, r2
 800509c:	fb02 3311 	mls	r3, r2, r1, r3
 80050a0:	5cc3      	ldrb	r3, [r0, r3]
 80050a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050a6:	460b      	mov	r3, r1
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d1f5      	bne.n	8005098 <_printf_i+0x16c>
 80050ac:	e7b9      	b.n	8005022 <_printf_i+0xf6>
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	1d18      	adds	r0, r3, #4
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	6010      	str	r0, [r2, #0]
 80050b8:	0628      	lsls	r0, r5, #24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	d501      	bpl.n	80050c2 <_printf_i+0x196>
 80050be:	6019      	str	r1, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <_printf_i+0x19c>
 80050c2:	066a      	lsls	r2, r5, #25
 80050c4:	d5fb      	bpl.n	80050be <_printf_i+0x192>
 80050c6:	8019      	strh	r1, [r3, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	4665      	mov	r5, ip
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	e7b9      	b.n	8005044 <_printf_i+0x118>
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	1d19      	adds	r1, r3, #4
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	681d      	ldr	r5, [r3, #0]
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	2100      	movs	r1, #0
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fa93 	bl	8005608 <memchr>
 80050e2:	b108      	cbz	r0, 80050e8 <_printf_i+0x1bc>
 80050e4:	1b40      	subs	r0, r0, r5
 80050e6:	6060      	str	r0, [r4, #4]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f2:	e7a7      	b.n	8005044 <_printf_i+0x118>
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	462a      	mov	r2, r5
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d0aa      	beq.n	8005058 <_printf_i+0x12c>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	079b      	lsls	r3, r3, #30
 8005106:	d413      	bmi.n	8005130 <_printf_i+0x204>
 8005108:	68e0      	ldr	r0, [r4, #12]
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	4298      	cmp	r0, r3
 800510e:	bfb8      	it	lt
 8005110:	4618      	movlt	r0, r3
 8005112:	e7a3      	b.n	800505c <_printf_i+0x130>
 8005114:	2301      	movs	r3, #1
 8005116:	464a      	mov	r2, r9
 8005118:	4639      	mov	r1, r7
 800511a:	4630      	mov	r0, r6
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d09a      	beq.n	8005058 <_printf_i+0x12c>
 8005122:	3501      	adds	r5, #1
 8005124:	68e3      	ldr	r3, [r4, #12]
 8005126:	9a03      	ldr	r2, [sp, #12]
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	42ab      	cmp	r3, r5
 800512c:	dcf2      	bgt.n	8005114 <_printf_i+0x1e8>
 800512e:	e7eb      	b.n	8005108 <_printf_i+0x1dc>
 8005130:	2500      	movs	r5, #0
 8005132:	f104 0919 	add.w	r9, r4, #25
 8005136:	e7f5      	b.n	8005124 <_printf_i+0x1f8>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ac      	bne.n	8005096 <_printf_i+0x16a>
 800513c:	7803      	ldrb	r3, [r0, #0]
 800513e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005142:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005146:	e76c      	b.n	8005022 <_printf_i+0xf6>
 8005148:	08005951 	.word	0x08005951
 800514c:	08005962 	.word	0x08005962

08005150 <_sbrk_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	2300      	movs	r3, #0
 8005154:	4c05      	ldr	r4, [pc, #20]	; (800516c <_sbrk_r+0x1c>)
 8005156:	4605      	mov	r5, r0
 8005158:	4608      	mov	r0, r1
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	f7fb fde2 	bl	8000d24 <_sbrk>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_sbrk_r+0x1a>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	b103      	cbz	r3, 800516a <_sbrk_r+0x1a>
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	20001cfc 	.word	0x20001cfc

08005170 <__sread>:
 8005170:	b510      	push	{r4, lr}
 8005172:	460c      	mov	r4, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	f000 fae2 	bl	8005740 <_read_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	bfab      	itete	ge
 8005180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005182:	89a3      	ldrhlt	r3, [r4, #12]
 8005184:	181b      	addge	r3, r3, r0
 8005186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800518a:	bfac      	ite	ge
 800518c:	6563      	strge	r3, [r4, #84]	; 0x54
 800518e:	81a3      	strhlt	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__swrite>:
 8005192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	461f      	mov	r7, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	4605      	mov	r5, r0
 800519c:	05db      	lsls	r3, r3, #23
 800519e:	460c      	mov	r4, r1
 80051a0:	4616      	mov	r6, r2
 80051a2:	d505      	bpl.n	80051b0 <__swrite+0x1e>
 80051a4:	2302      	movs	r3, #2
 80051a6:	2200      	movs	r2, #0
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	f000 f9b6 	bl	800551c <_lseek_r>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	4632      	mov	r2, r6
 80051b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051be:	463b      	mov	r3, r7
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	f000 b869 	b.w	800529c <_write_r>

080051ca <__sseek>:
 80051ca:	b510      	push	{r4, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 f9a3 	bl	800551c <_lseek_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	bf15      	itete	ne
 80051dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051e6:	81a3      	strheq	r3, [r4, #12]
 80051e8:	bf18      	it	ne
 80051ea:	81a3      	strhne	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__sclose>:
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 b8d3 	b.w	800539c <_close_r>
	...

080051f8 <__swbuf_r>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	460e      	mov	r6, r1
 80051fc:	4614      	mov	r4, r2
 80051fe:	4605      	mov	r5, r0
 8005200:	b118      	cbz	r0, 800520a <__swbuf_r+0x12>
 8005202:	6983      	ldr	r3, [r0, #24]
 8005204:	b90b      	cbnz	r3, 800520a <__swbuf_r+0x12>
 8005206:	f7ff faa7 	bl	8004758 <__sinit>
 800520a:	4b21      	ldr	r3, [pc, #132]	; (8005290 <__swbuf_r+0x98>)
 800520c:	429c      	cmp	r4, r3
 800520e:	d12a      	bne.n	8005266 <__swbuf_r+0x6e>
 8005210:	686c      	ldr	r4, [r5, #4]
 8005212:	69a3      	ldr	r3, [r4, #24]
 8005214:	60a3      	str	r3, [r4, #8]
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	071a      	lsls	r2, r3, #28
 800521a:	d52e      	bpl.n	800527a <__swbuf_r+0x82>
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	b363      	cbz	r3, 800527a <__swbuf_r+0x82>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	b2f6      	uxtb	r6, r6
 8005226:	1ac0      	subs	r0, r0, r3
 8005228:	6963      	ldr	r3, [r4, #20]
 800522a:	4637      	mov	r7, r6
 800522c:	4283      	cmp	r3, r0
 800522e:	dc04      	bgt.n	800523a <__swbuf_r+0x42>
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f948 	bl	80054c8 <_fflush_r>
 8005238:	bb28      	cbnz	r0, 8005286 <__swbuf_r+0x8e>
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	3001      	adds	r0, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	60a3      	str	r3, [r4, #8]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	701e      	strb	r6, [r3, #0]
 800524a:	6963      	ldr	r3, [r4, #20]
 800524c:	4283      	cmp	r3, r0
 800524e:	d004      	beq.n	800525a <__swbuf_r+0x62>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	07db      	lsls	r3, r3, #31
 8005254:	d519      	bpl.n	800528a <__swbuf_r+0x92>
 8005256:	2e0a      	cmp	r6, #10
 8005258:	d117      	bne.n	800528a <__swbuf_r+0x92>
 800525a:	4621      	mov	r1, r4
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f933 	bl	80054c8 <_fflush_r>
 8005262:	b190      	cbz	r0, 800528a <__swbuf_r+0x92>
 8005264:	e00f      	b.n	8005286 <__swbuf_r+0x8e>
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <__swbuf_r+0x9c>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d101      	bne.n	8005270 <__swbuf_r+0x78>
 800526c:	68ac      	ldr	r4, [r5, #8]
 800526e:	e7d0      	b.n	8005212 <__swbuf_r+0x1a>
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <__swbuf_r+0xa0>)
 8005272:	429c      	cmp	r4, r3
 8005274:	bf08      	it	eq
 8005276:	68ec      	ldreq	r4, [r5, #12]
 8005278:	e7cb      	b.n	8005212 <__swbuf_r+0x1a>
 800527a:	4621      	mov	r1, r4
 800527c:	4628      	mov	r0, r5
 800527e:	f000 f81f 	bl	80052c0 <__swsetup_r>
 8005282:	2800      	cmp	r0, #0
 8005284:	d0cc      	beq.n	8005220 <__swbuf_r+0x28>
 8005286:	f04f 37ff 	mov.w	r7, #4294967295
 800528a:	4638      	mov	r0, r7
 800528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800528e:	bf00      	nop
 8005290:	08005900 	.word	0x08005900
 8005294:	08005920 	.word	0x08005920
 8005298:	080058e0 	.word	0x080058e0

0800529c <_write_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4605      	mov	r5, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	2200      	movs	r2, #0
 80052a6:	4c05      	ldr	r4, [pc, #20]	; (80052bc <_write_r+0x20>)
 80052a8:	6022      	str	r2, [r4, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fb fced 	bl	8000c8a <_write>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_write_r+0x1e>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_write_r+0x1e>
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20001cfc 	.word	0x20001cfc

080052c0 <__swsetup_r>:
 80052c0:	4b32      	ldr	r3, [pc, #200]	; (800538c <__swsetup_r+0xcc>)
 80052c2:	b570      	push	{r4, r5, r6, lr}
 80052c4:	681d      	ldr	r5, [r3, #0]
 80052c6:	4606      	mov	r6, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	b125      	cbz	r5, 80052d6 <__swsetup_r+0x16>
 80052cc:	69ab      	ldr	r3, [r5, #24]
 80052ce:	b913      	cbnz	r3, 80052d6 <__swsetup_r+0x16>
 80052d0:	4628      	mov	r0, r5
 80052d2:	f7ff fa41 	bl	8004758 <__sinit>
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <__swsetup_r+0xd0>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	d10f      	bne.n	80052fc <__swsetup_r+0x3c>
 80052dc:	686c      	ldr	r4, [r5, #4]
 80052de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	0715      	lsls	r5, r2, #28
 80052e6:	d42c      	bmi.n	8005342 <__swsetup_r+0x82>
 80052e8:	06d0      	lsls	r0, r2, #27
 80052ea:	d411      	bmi.n	8005310 <__swsetup_r+0x50>
 80052ec:	2209      	movs	r2, #9
 80052ee:	6032      	str	r2, [r6, #0]
 80052f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	e03e      	b.n	800537a <__swsetup_r+0xba>
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <__swsetup_r+0xd4>)
 80052fe:	429c      	cmp	r4, r3
 8005300:	d101      	bne.n	8005306 <__swsetup_r+0x46>
 8005302:	68ac      	ldr	r4, [r5, #8]
 8005304:	e7eb      	b.n	80052de <__swsetup_r+0x1e>
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <__swsetup_r+0xd8>)
 8005308:	429c      	cmp	r4, r3
 800530a:	bf08      	it	eq
 800530c:	68ec      	ldreq	r4, [r5, #12]
 800530e:	e7e6      	b.n	80052de <__swsetup_r+0x1e>
 8005310:	0751      	lsls	r1, r2, #29
 8005312:	d512      	bpl.n	800533a <__swsetup_r+0x7a>
 8005314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005316:	b141      	cbz	r1, 800532a <__swsetup_r+0x6a>
 8005318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800531c:	4299      	cmp	r1, r3
 800531e:	d002      	beq.n	8005326 <__swsetup_r+0x66>
 8005320:	4630      	mov	r0, r6
 8005322:	f000 f99b 	bl	800565c <_free_r>
 8005326:	2300      	movs	r3, #0
 8005328:	6363      	str	r3, [r4, #52]	; 0x34
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	2300      	movs	r3, #0
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	b94b      	cbnz	r3, 800535a <__swsetup_r+0x9a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800534c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005350:	d003      	beq.n	800535a <__swsetup_r+0x9a>
 8005352:	4621      	mov	r1, r4
 8005354:	4630      	mov	r0, r6
 8005356:	f000 f917 	bl	8005588 <__smakebuf_r>
 800535a:	89a2      	ldrh	r2, [r4, #12]
 800535c:	f012 0301 	ands.w	r3, r2, #1
 8005360:	d00c      	beq.n	800537c <__swsetup_r+0xbc>
 8005362:	2300      	movs	r3, #0
 8005364:	60a3      	str	r3, [r4, #8]
 8005366:	6963      	ldr	r3, [r4, #20]
 8005368:	425b      	negs	r3, r3
 800536a:	61a3      	str	r3, [r4, #24]
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	b953      	cbnz	r3, 8005386 <__swsetup_r+0xc6>
 8005370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005374:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005378:	d1ba      	bne.n	80052f0 <__swsetup_r+0x30>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	0792      	lsls	r2, r2, #30
 800537e:	bf58      	it	pl
 8005380:	6963      	ldrpl	r3, [r4, #20]
 8005382:	60a3      	str	r3, [r4, #8]
 8005384:	e7f2      	b.n	800536c <__swsetup_r+0xac>
 8005386:	2000      	movs	r0, #0
 8005388:	e7f7      	b.n	800537a <__swsetup_r+0xba>
 800538a:	bf00      	nop
 800538c:	20000014 	.word	0x20000014
 8005390:	08005900 	.word	0x08005900
 8005394:	08005920 	.word	0x08005920
 8005398:	080058e0 	.word	0x080058e0

0800539c <_close_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	2300      	movs	r3, #0
 80053a0:	4c05      	ldr	r4, [pc, #20]	; (80053b8 <_close_r+0x1c>)
 80053a2:	4605      	mov	r5, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	f7fb fc8b 	bl	8000cc2 <_close>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_close_r+0x1a>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_close_r+0x1a>
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	20001cfc 	.word	0x20001cfc

080053bc <__sflush_r>:
 80053bc:	898a      	ldrh	r2, [r1, #12]
 80053be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	0710      	lsls	r0, r2, #28
 80053c6:	460c      	mov	r4, r1
 80053c8:	d458      	bmi.n	800547c <__sflush_r+0xc0>
 80053ca:	684b      	ldr	r3, [r1, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dc05      	bgt.n	80053dc <__sflush_r+0x20>
 80053d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dc02      	bgt.n	80053dc <__sflush_r+0x20>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053de:	2e00      	cmp	r6, #0
 80053e0:	d0f9      	beq.n	80053d6 <__sflush_r+0x1a>
 80053e2:	2300      	movs	r3, #0
 80053e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e8:	682f      	ldr	r7, [r5, #0]
 80053ea:	6a21      	ldr	r1, [r4, #32]
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	d032      	beq.n	8005456 <__sflush_r+0x9a>
 80053f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	075a      	lsls	r2, r3, #29
 80053f6:	d505      	bpl.n	8005404 <__sflush_r+0x48>
 80053f8:	6863      	ldr	r3, [r4, #4]
 80053fa:	1ac0      	subs	r0, r0, r3
 80053fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053fe:	b10b      	cbz	r3, 8005404 <__sflush_r+0x48>
 8005400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005402:	1ac0      	subs	r0, r0, r3
 8005404:	2300      	movs	r3, #0
 8005406:	4602      	mov	r2, r0
 8005408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800540a:	6a21      	ldr	r1, [r4, #32]
 800540c:	4628      	mov	r0, r5
 800540e:	47b0      	blx	r6
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	d106      	bne.n	8005424 <__sflush_r+0x68>
 8005416:	6829      	ldr	r1, [r5, #0]
 8005418:	291d      	cmp	r1, #29
 800541a:	d848      	bhi.n	80054ae <__sflush_r+0xf2>
 800541c:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <__sflush_r+0x108>)
 800541e:	40ca      	lsrs	r2, r1
 8005420:	07d6      	lsls	r6, r2, #31
 8005422:	d544      	bpl.n	80054ae <__sflush_r+0xf2>
 8005424:	2200      	movs	r2, #0
 8005426:	6062      	str	r2, [r4, #4]
 8005428:	6922      	ldr	r2, [r4, #16]
 800542a:	04d9      	lsls	r1, r3, #19
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	d504      	bpl.n	800543a <__sflush_r+0x7e>
 8005430:	1c42      	adds	r2, r0, #1
 8005432:	d101      	bne.n	8005438 <__sflush_r+0x7c>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	b903      	cbnz	r3, 800543a <__sflush_r+0x7e>
 8005438:	6560      	str	r0, [r4, #84]	; 0x54
 800543a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800543c:	602f      	str	r7, [r5, #0]
 800543e:	2900      	cmp	r1, #0
 8005440:	d0c9      	beq.n	80053d6 <__sflush_r+0x1a>
 8005442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005446:	4299      	cmp	r1, r3
 8005448:	d002      	beq.n	8005450 <__sflush_r+0x94>
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f906 	bl	800565c <_free_r>
 8005450:	2000      	movs	r0, #0
 8005452:	6360      	str	r0, [r4, #52]	; 0x34
 8005454:	e7c0      	b.n	80053d8 <__sflush_r+0x1c>
 8005456:	2301      	movs	r3, #1
 8005458:	4628      	mov	r0, r5
 800545a:	47b0      	blx	r6
 800545c:	1c41      	adds	r1, r0, #1
 800545e:	d1c8      	bne.n	80053f2 <__sflush_r+0x36>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0c5      	beq.n	80053f2 <__sflush_r+0x36>
 8005466:	2b1d      	cmp	r3, #29
 8005468:	d001      	beq.n	800546e <__sflush_r+0xb2>
 800546a:	2b16      	cmp	r3, #22
 800546c:	d101      	bne.n	8005472 <__sflush_r+0xb6>
 800546e:	602f      	str	r7, [r5, #0]
 8005470:	e7b1      	b.n	80053d6 <__sflush_r+0x1a>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	e7ad      	b.n	80053d8 <__sflush_r+0x1c>
 800547c:	690f      	ldr	r7, [r1, #16]
 800547e:	2f00      	cmp	r7, #0
 8005480:	d0a9      	beq.n	80053d6 <__sflush_r+0x1a>
 8005482:	0793      	lsls	r3, r2, #30
 8005484:	bf18      	it	ne
 8005486:	2300      	movne	r3, #0
 8005488:	680e      	ldr	r6, [r1, #0]
 800548a:	bf08      	it	eq
 800548c:	694b      	ldreq	r3, [r1, #20]
 800548e:	eba6 0807 	sub.w	r8, r6, r7
 8005492:	600f      	str	r7, [r1, #0]
 8005494:	608b      	str	r3, [r1, #8]
 8005496:	f1b8 0f00 	cmp.w	r8, #0
 800549a:	dd9c      	ble.n	80053d6 <__sflush_r+0x1a>
 800549c:	4643      	mov	r3, r8
 800549e:	463a      	mov	r2, r7
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	4628      	mov	r0, r5
 80054a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054a6:	47b0      	blx	r6
 80054a8:	2800      	cmp	r0, #0
 80054aa:	dc06      	bgt.n	80054ba <__sflush_r+0xfe>
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	e78e      	b.n	80053d8 <__sflush_r+0x1c>
 80054ba:	4407      	add	r7, r0
 80054bc:	eba8 0800 	sub.w	r8, r8, r0
 80054c0:	e7e9      	b.n	8005496 <__sflush_r+0xda>
 80054c2:	bf00      	nop
 80054c4:	20400001 	.word	0x20400001

080054c8 <_fflush_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	690b      	ldr	r3, [r1, #16]
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b1db      	cbz	r3, 800550a <_fflush_r+0x42>
 80054d2:	b118      	cbz	r0, 80054dc <_fflush_r+0x14>
 80054d4:	6983      	ldr	r3, [r0, #24]
 80054d6:	b90b      	cbnz	r3, 80054dc <_fflush_r+0x14>
 80054d8:	f7ff f93e 	bl	8004758 <__sinit>
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <_fflush_r+0x48>)
 80054de:	429c      	cmp	r4, r3
 80054e0:	d109      	bne.n	80054f6 <_fflush_r+0x2e>
 80054e2:	686c      	ldr	r4, [r5, #4]
 80054e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e8:	b17b      	cbz	r3, 800550a <_fflush_r+0x42>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f2:	f7ff bf63 	b.w	80053bc <__sflush_r>
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <_fflush_r+0x4c>)
 80054f8:	429c      	cmp	r4, r3
 80054fa:	d101      	bne.n	8005500 <_fflush_r+0x38>
 80054fc:	68ac      	ldr	r4, [r5, #8]
 80054fe:	e7f1      	b.n	80054e4 <_fflush_r+0x1c>
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <_fflush_r+0x50>)
 8005502:	429c      	cmp	r4, r3
 8005504:	bf08      	it	eq
 8005506:	68ec      	ldreq	r4, [r5, #12]
 8005508:	e7ec      	b.n	80054e4 <_fflush_r+0x1c>
 800550a:	2000      	movs	r0, #0
 800550c:	bd38      	pop	{r3, r4, r5, pc}
 800550e:	bf00      	nop
 8005510:	08005900 	.word	0x08005900
 8005514:	08005920 	.word	0x08005920
 8005518:	080058e0 	.word	0x080058e0

0800551c <_lseek_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4605      	mov	r5, r0
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	2200      	movs	r2, #0
 8005526:	4c05      	ldr	r4, [pc, #20]	; (800553c <_lseek_r+0x20>)
 8005528:	6022      	str	r2, [r4, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb fbed 	bl	8000d0a <_lseek>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_lseek_r+0x1e>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	b103      	cbz	r3, 800553a <_lseek_r+0x1e>
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20001cfc 	.word	0x20001cfc

08005540 <__swhatbuf_r>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	460e      	mov	r6, r1
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	b096      	sub	sp, #88	; 0x58
 800554a:	2900      	cmp	r1, #0
 800554c:	4614      	mov	r4, r2
 800554e:	461d      	mov	r5, r3
 8005550:	da07      	bge.n	8005562 <__swhatbuf_r+0x22>
 8005552:	2300      	movs	r3, #0
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	89b3      	ldrh	r3, [r6, #12]
 8005558:	061a      	lsls	r2, r3, #24
 800555a:	d410      	bmi.n	800557e <__swhatbuf_r+0x3e>
 800555c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005560:	e00e      	b.n	8005580 <__swhatbuf_r+0x40>
 8005562:	466a      	mov	r2, sp
 8005564:	f000 f8fe 	bl	8005764 <_fstat_r>
 8005568:	2800      	cmp	r0, #0
 800556a:	dbf2      	blt.n	8005552 <__swhatbuf_r+0x12>
 800556c:	9a01      	ldr	r2, [sp, #4]
 800556e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005576:	425a      	negs	r2, r3
 8005578:	415a      	adcs	r2, r3
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	e7ee      	b.n	800555c <__swhatbuf_r+0x1c>
 800557e:	2340      	movs	r3, #64	; 0x40
 8005580:	2000      	movs	r0, #0
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	b016      	add	sp, #88	; 0x58
 8005586:	bd70      	pop	{r4, r5, r6, pc}

08005588 <__smakebuf_r>:
 8005588:	898b      	ldrh	r3, [r1, #12]
 800558a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800558c:	079d      	lsls	r5, r3, #30
 800558e:	4606      	mov	r6, r0
 8005590:	460c      	mov	r4, r1
 8005592:	d507      	bpl.n	80055a4 <__smakebuf_r+0x1c>
 8005594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	6123      	str	r3, [r4, #16]
 800559c:	2301      	movs	r3, #1
 800559e:	6163      	str	r3, [r4, #20]
 80055a0:	b002      	add	sp, #8
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	ab01      	add	r3, sp, #4
 80055a6:	466a      	mov	r2, sp
 80055a8:	f7ff ffca 	bl	8005540 <__swhatbuf_r>
 80055ac:	9900      	ldr	r1, [sp, #0]
 80055ae:	4605      	mov	r5, r0
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7ff f95b 	bl	800486c <_malloc_r>
 80055b6:	b948      	cbnz	r0, 80055cc <__smakebuf_r+0x44>
 80055b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055bc:	059a      	lsls	r2, r3, #22
 80055be:	d4ef      	bmi.n	80055a0 <__smakebuf_r+0x18>
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	e7e3      	b.n	8005594 <__smakebuf_r+0xc>
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <__smakebuf_r+0x7c>)
 80055ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	6020      	str	r0, [r4, #0]
 80055d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	6120      	str	r0, [r4, #16]
 80055de:	6163      	str	r3, [r4, #20]
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	b15b      	cbz	r3, 80055fc <__smakebuf_r+0x74>
 80055e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f8cd 	bl	8005788 <_isatty_r>
 80055ee:	b128      	cbz	r0, 80055fc <__smakebuf_r+0x74>
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	81a3      	strh	r3, [r4, #12]
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	431d      	orrs	r5, r3
 8005600:	81a5      	strh	r5, [r4, #12]
 8005602:	e7cd      	b.n	80055a0 <__smakebuf_r+0x18>
 8005604:	08004721 	.word	0x08004721

08005608 <memchr>:
 8005608:	b510      	push	{r4, lr}
 800560a:	b2c9      	uxtb	r1, r1
 800560c:	4402      	add	r2, r0
 800560e:	4290      	cmp	r0, r2
 8005610:	4603      	mov	r3, r0
 8005612:	d101      	bne.n	8005618 <memchr+0x10>
 8005614:	2300      	movs	r3, #0
 8005616:	e003      	b.n	8005620 <memchr+0x18>
 8005618:	781c      	ldrb	r4, [r3, #0]
 800561a:	3001      	adds	r0, #1
 800561c:	428c      	cmp	r4, r1
 800561e:	d1f6      	bne.n	800560e <memchr+0x6>
 8005620:	4618      	mov	r0, r3
 8005622:	bd10      	pop	{r4, pc}

08005624 <memmove>:
 8005624:	4288      	cmp	r0, r1
 8005626:	b510      	push	{r4, lr}
 8005628:	eb01 0302 	add.w	r3, r1, r2
 800562c:	d807      	bhi.n	800563e <memmove+0x1a>
 800562e:	1e42      	subs	r2, r0, #1
 8005630:	4299      	cmp	r1, r3
 8005632:	d00a      	beq.n	800564a <memmove+0x26>
 8005634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005638:	f802 4f01 	strb.w	r4, [r2, #1]!
 800563c:	e7f8      	b.n	8005630 <memmove+0xc>
 800563e:	4283      	cmp	r3, r0
 8005640:	d9f5      	bls.n	800562e <memmove+0xa>
 8005642:	1881      	adds	r1, r0, r2
 8005644:	1ad2      	subs	r2, r2, r3
 8005646:	42d3      	cmn	r3, r2
 8005648:	d100      	bne.n	800564c <memmove+0x28>
 800564a:	bd10      	pop	{r4, pc}
 800564c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005650:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005654:	e7f7      	b.n	8005646 <memmove+0x22>

08005656 <__malloc_lock>:
 8005656:	4770      	bx	lr

08005658 <__malloc_unlock>:
 8005658:	4770      	bx	lr
	...

0800565c <_free_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4605      	mov	r5, r0
 8005660:	2900      	cmp	r1, #0
 8005662:	d043      	beq.n	80056ec <_free_r+0x90>
 8005664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005668:	1f0c      	subs	r4, r1, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	bfb8      	it	lt
 800566e:	18e4      	addlt	r4, r4, r3
 8005670:	f7ff fff1 	bl	8005656 <__malloc_lock>
 8005674:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <_free_r+0x94>)
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	4610      	mov	r0, r2
 800567a:	b933      	cbnz	r3, 800568a <_free_r+0x2e>
 800567c:	6063      	str	r3, [r4, #4]
 800567e:	6014      	str	r4, [r2, #0]
 8005680:	4628      	mov	r0, r5
 8005682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005686:	f7ff bfe7 	b.w	8005658 <__malloc_unlock>
 800568a:	42a3      	cmp	r3, r4
 800568c:	d90b      	bls.n	80056a6 <_free_r+0x4a>
 800568e:	6821      	ldr	r1, [r4, #0]
 8005690:	1862      	adds	r2, r4, r1
 8005692:	4293      	cmp	r3, r2
 8005694:	bf01      	itttt	eq
 8005696:	681a      	ldreq	r2, [r3, #0]
 8005698:	685b      	ldreq	r3, [r3, #4]
 800569a:	1852      	addeq	r2, r2, r1
 800569c:	6022      	streq	r2, [r4, #0]
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6004      	str	r4, [r0, #0]
 80056a2:	e7ed      	b.n	8005680 <_free_r+0x24>
 80056a4:	4613      	mov	r3, r2
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	b10a      	cbz	r2, 80056ae <_free_r+0x52>
 80056aa:	42a2      	cmp	r2, r4
 80056ac:	d9fa      	bls.n	80056a4 <_free_r+0x48>
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	1858      	adds	r0, r3, r1
 80056b2:	42a0      	cmp	r0, r4
 80056b4:	d10b      	bne.n	80056ce <_free_r+0x72>
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	4401      	add	r1, r0
 80056ba:	1858      	adds	r0, r3, r1
 80056bc:	4282      	cmp	r2, r0
 80056be:	6019      	str	r1, [r3, #0]
 80056c0:	d1de      	bne.n	8005680 <_free_r+0x24>
 80056c2:	6810      	ldr	r0, [r2, #0]
 80056c4:	6852      	ldr	r2, [r2, #4]
 80056c6:	4401      	add	r1, r0
 80056c8:	6019      	str	r1, [r3, #0]
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	e7d8      	b.n	8005680 <_free_r+0x24>
 80056ce:	d902      	bls.n	80056d6 <_free_r+0x7a>
 80056d0:	230c      	movs	r3, #12
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	e7d4      	b.n	8005680 <_free_r+0x24>
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	1821      	adds	r1, r4, r0
 80056da:	428a      	cmp	r2, r1
 80056dc:	bf01      	itttt	eq
 80056de:	6811      	ldreq	r1, [r2, #0]
 80056e0:	6852      	ldreq	r2, [r2, #4]
 80056e2:	1809      	addeq	r1, r1, r0
 80056e4:	6021      	streq	r1, [r4, #0]
 80056e6:	6062      	str	r2, [r4, #4]
 80056e8:	605c      	str	r4, [r3, #4]
 80056ea:	e7c9      	b.n	8005680 <_free_r+0x24>
 80056ec:	bd38      	pop	{r3, r4, r5, pc}
 80056ee:	bf00      	nop
 80056f0:	20001bac 	.word	0x20001bac

080056f4 <_realloc_r>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	4607      	mov	r7, r0
 80056f8:	4614      	mov	r4, r2
 80056fa:	460e      	mov	r6, r1
 80056fc:	b921      	cbnz	r1, 8005708 <_realloc_r+0x14>
 80056fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005702:	4611      	mov	r1, r2
 8005704:	f7ff b8b2 	b.w	800486c <_malloc_r>
 8005708:	b922      	cbnz	r2, 8005714 <_realloc_r+0x20>
 800570a:	f7ff ffa7 	bl	800565c <_free_r>
 800570e:	4625      	mov	r5, r4
 8005710:	4628      	mov	r0, r5
 8005712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005714:	f000 f848 	bl	80057a8 <_malloc_usable_size_r>
 8005718:	42a0      	cmp	r0, r4
 800571a:	d20f      	bcs.n	800573c <_realloc_r+0x48>
 800571c:	4621      	mov	r1, r4
 800571e:	4638      	mov	r0, r7
 8005720:	f7ff f8a4 	bl	800486c <_malloc_r>
 8005724:	4605      	mov	r5, r0
 8005726:	2800      	cmp	r0, #0
 8005728:	d0f2      	beq.n	8005710 <_realloc_r+0x1c>
 800572a:	4631      	mov	r1, r6
 800572c:	4622      	mov	r2, r4
 800572e:	f7fe ff87 	bl	8004640 <memcpy>
 8005732:	4631      	mov	r1, r6
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff ff91 	bl	800565c <_free_r>
 800573a:	e7e9      	b.n	8005710 <_realloc_r+0x1c>
 800573c:	4635      	mov	r5, r6
 800573e:	e7e7      	b.n	8005710 <_realloc_r+0x1c>

08005740 <_read_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4605      	mov	r5, r0
 8005744:	4608      	mov	r0, r1
 8005746:	4611      	mov	r1, r2
 8005748:	2200      	movs	r2, #0
 800574a:	4c05      	ldr	r4, [pc, #20]	; (8005760 <_read_r+0x20>)
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	f7fb fa7e 	bl	8000c50 <_read>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d102      	bne.n	800575e <_read_r+0x1e>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	b103      	cbz	r3, 800575e <_read_r+0x1e>
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bd38      	pop	{r3, r4, r5, pc}
 8005760:	20001cfc 	.word	0x20001cfc

08005764 <_fstat_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	2300      	movs	r3, #0
 8005768:	4c06      	ldr	r4, [pc, #24]	; (8005784 <_fstat_r+0x20>)
 800576a:	4605      	mov	r5, r0
 800576c:	4608      	mov	r0, r1
 800576e:	4611      	mov	r1, r2
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	f7fb fab1 	bl	8000cd8 <_fstat>
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	d102      	bne.n	8005780 <_fstat_r+0x1c>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	b103      	cbz	r3, 8005780 <_fstat_r+0x1c>
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	20001cfc 	.word	0x20001cfc

08005788 <_isatty_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	2300      	movs	r3, #0
 800578c:	4c05      	ldr	r4, [pc, #20]	; (80057a4 <_isatty_r+0x1c>)
 800578e:	4605      	mov	r5, r0
 8005790:	4608      	mov	r0, r1
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	f7fb faaf 	bl	8000cf6 <_isatty>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_isatty_r+0x1a>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_isatty_r+0x1a>
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20001cfc 	.word	0x20001cfc

080057a8 <_malloc_usable_size_r>:
 80057a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ac:	1f18      	subs	r0, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bfbc      	itt	lt
 80057b2:	580b      	ldrlt	r3, [r1, r0]
 80057b4:	18c0      	addlt	r0, r0, r3
 80057b6:	4770      	bx	lr

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
