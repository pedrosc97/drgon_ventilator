
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009160  08009160  00019160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009550  08009550  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009550  08009550  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009550  08009550  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d54  200001e0  08009738  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f34  08009738  00021f34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159f5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000327c  00000000  00000000  00035bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  00038e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174f7  00000000  00000000  0003b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010220  00000000  00000000  000528df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000804b6  00000000  00000000  00062aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2fb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b68  00000000  00000000  000e3030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009144 	.word	0x08009144

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009144 	.word	0x08009144

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2uiz>:
 800107c:	0042      	lsls	r2, r0, #1
 800107e:	d20e      	bcs.n	800109e <__aeabi_f2uiz+0x22>
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001084:	d30b      	bcc.n	800109e <__aeabi_f2uiz+0x22>
 8001086:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d409      	bmi.n	80010a4 <__aeabi_f2uiz+0x28>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr
 80010a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a8:	d101      	bne.n	80010ae <__aeabi_f2uiz+0x32>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	d102      	bne.n	80010b4 <__aeabi_f2uiz+0x38>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	4770      	bx	lr
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <DCMotorInit>:

#include "stm32f1xx_hal.h"
#include "dc_motor_api.h"

void DCMotorInit(DCMotor_S *dc_motor_, TIM_HandleTypeDef *timer_handler_)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	dc_motor_->motor_pwm_ctrl = timer_handler_;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	601a      	str	r2, [r3, #0]
	dc_motor_->pwm_value = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	811a      	strh	r2, [r3, #8]
	dc_motor_->direction_flag = MOTOR_SPIN_CW;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	729a      	strb	r2, [r3, #10]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <DCMotorRPMSet>:

void DCMotorRPMSet(DCMotor_S *dc_motor_)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ec:	2360      	movs	r3, #96	; 0x60
 80010ee:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = dc_motor_->pwm_value - 1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	891b      	ldrh	r3, [r3, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fcaa 	bl	8004a6c <HAL_TIM_PWM_Stop>

    if (dc_motor_->direction_flag == MOTOR_SPIN_CW)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7a9b      	ldrb	r3, [r3, #10]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10a      	bne.n	8001136 <DCMotorRPMSet+0x52>
    {
		HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <DCMotorRPMSet+0xa8>)
 8001126:	f002 faad 	bl	8003684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <DCMotorRPMSet+0xa8>)
 8001130:	f002 faa8 	bl	8003684 <HAL_GPIO_WritePin>
 8001134:	e018      	b.n	8001168 <DCMotorRPMSet+0x84>
    }
	else if (dc_motor_->direction_flag == MOTOR_SPIN_CCW)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7a9b      	ldrb	r3, [r3, #10]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10a      	bne.n	8001154 <DCMotorRPMSet+0x70>
	{
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	4812      	ldr	r0, [pc, #72]	; (800118c <DCMotorRPMSet+0xa8>)
 8001144:	f002 fa9e 	bl	8003684 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <DCMotorRPMSet+0xa8>)
 800114e:	f002 fa99 	bl	8003684 <HAL_GPIO_WritePin>
 8001152:	e009      	b.n	8001168 <DCMotorRPMSet+0x84>
    }
	else
	{
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <DCMotorRPMSet+0xa8>)
 800115a:	f002 fa93 	bl	8003684 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <DCMotorRPMSet+0xa8>)
 8001164:	f002 fa8e 	bl	8003684 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	2200      	movs	r2, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f003 feb4 	bl	8004ee0 <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fc42 	bl	8004a08 <HAL_TIM_PWM_Start>
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40010c00 	.word	0x40010c00

08001190 <EncoderInit>:
 */

#include "encoder_api.h"

void EncoderInit(Encoder_S *encoder_, EncoderModel_E model_)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
	encoder_->model = model_;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	711a      	strb	r2, [r3, #4]
	encoder_->rpm = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	encoder_->prev_pulse_count = 0;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	80da      	strh	r2, [r3, #6]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <UpdateEncoderParams>:

void UpdateEncoderParams(Encoder_S *encoder_, uint32_t encoder_timer_, uint16_t timestep_ms_)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80fb      	strh	r3, [r7, #6]
	int32_t delta_count;
	delta_count = encoder_timer_ - encoder_->prev_pulse_count;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	88db      	ldrh	r3, [r3, #6]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
	encoder_->prev_pulse_count = (uint16_t) encoder_timer_;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	80da      	strh	r2, [r3, #6]

	float pulses_per_second;
	pulses_per_second = ((float) delta_count / (float)timestep_ms_) * (float) MILISECONDS_PER_SECOND;
 80011de:	69f8      	ldr	r0, [r7, #28]
 80011e0:	f7ff fd0c 	bl	8000bfc <__aeabi_i2f>
 80011e4:	4604      	mov	r4, r0
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fd03 	bl	8000bf4 <__aeabi_ui2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff fe0a 	bl	8000e0c <__aeabi_fdiv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4917      	ldr	r1, [pc, #92]	; (8001258 <UpdateEncoderParams+0x9c>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd51 	bl	8000ca4 <__aeabi_fmul>
 8001202:	4603      	mov	r3, r0
 8001204:	61bb      	str	r3, [r7, #24]

	float revs_per_minute;
	revs_per_minute = (pulses_per_second / (float) encoder_->model) * (float) SECONDS_PER_MINUTE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fcf2 	bl	8000bf4 <__aeabi_ui2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4619      	mov	r1, r3
 8001214:	69b8      	ldr	r0, [r7, #24]
 8001216:	f7ff fdf9 	bl	8000e0c <__aeabi_fdiv>
 800121a:	4603      	mov	r3, r0
 800121c:	490f      	ldr	r1, [pc, #60]	; (800125c <UpdateEncoderParams+0xa0>)
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fd40 	bl	8000ca4 <__aeabi_fmul>
 8001224:	4603      	mov	r3, r0
 8001226:	617b      	str	r3, [r7, #20]

	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <UpdateEncoderParams+0xa4>)
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff fed8 	bl	8000fe0 <__aeabi_fcmplt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <UpdateEncoderParams+0x7c>
	{
		encoder_->rpm = revs_per_minute;
	}
}
 8001236:	e00a      	b.n	800124e <UpdateEncoderParams+0x92>
	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 8001238:	490a      	ldr	r1, [pc, #40]	; (8001264 <UpdateEncoderParams+0xa8>)
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff feee 	bl	800101c <__aeabi_fcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <UpdateEncoderParams+0x8c>
}
 8001246:	e002      	b.n	800124e <UpdateEncoderParams+0x92>
		encoder_->rpm = revs_per_minute;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	447a0000 	.word	0x447a0000
 800125c:	42700000 	.word	0x42700000
 8001260:	43160000 	.word	0x43160000
 8001264:	c3160000 	.word	0xc3160000

08001268 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <vApplicationGetIdleTaskMemory+0x28>)
 8001278:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <vApplicationGetIdleTaskMemory+0x2c>)
 800127e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200001fc 	.word	0x200001fc
 8001294:	20000250 	.word	0x20000250

08001298 <LCDSendCmd>:

#include "stm32f1xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b087      	sub	sp, #28
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	f023 030f 	bic.w	r3, r3, #15
 80012aa:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f043 030c 	orr.w	r3, r3, #12
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	f043 030c 	orr.w	r3, r3, #12
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80012d0:	7bbb      	ldrb	r3, [r7, #14]
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	b299      	uxth	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7a1b      	ldrb	r3, [r3, #8]
 80012e8:	b29c      	uxth	r4, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	88db      	ldrh	r3, [r3, #6]
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4623      	mov	r3, r4
 80012f6:	f002 fb1d 	bl	8003934 <HAL_I2C_Master_Transmit>
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}

08001302 <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b087      	sub	sp, #28
 8001306:	af02      	add	r7, sp, #8
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	f023 030f 	bic.w	r3, r3, #15
 8001314:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f043 030d 	orr.w	r3, r3, #13
 8001322:	b2db      	uxtb	r3, r3
 8001324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f043 0309 	orr.w	r3, r3, #9
 800132c:	b2db      	uxtb	r3, r3
 800132e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	f043 030d 	orr.w	r3, r3, #13
 8001336:	b2db      	uxtb	r3, r3
 8001338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	f043 0309 	orr.w	r3, r3, #9
 8001340:	b2db      	uxtb	r3, r3
 8001342:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	b299      	uxth	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a1b      	ldrb	r3, [r3, #8]
 8001352:	b29c      	uxth	r4, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	88db      	ldrh	r3, [r3, #6]
 8001358:	f107 0208 	add.w	r2, r7, #8
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4623      	mov	r3, r4
 8001360:	f002 fae8 	bl	8003934 <HAL_I2C_Master_Transmit>
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bd90      	pop	{r4, r7, pc}

0800136c <LCDClear>:

void LCDClear(LCDDisplay_S *lcd_disp_)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	LCDSendCmd(lcd_disp_, 0x80);
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff8e 	bl	8001298 <LCDSendCmd>
	for (int i = 0; i < 70; i++)
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e006      	b.n	8001390 <LCDClear+0x24>
	{
		LCDSendData(lcd_disp_, ' ');
 8001382:	2120      	movs	r1, #32
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ffbc 	bl	8001302 <LCDSendData>
	for (int i = 0; i < 70; i++)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b45      	cmp	r3, #69	; 0x45
 8001394:	ddf5      	ble.n	8001382 <LCDClear+0x16>
	}
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <LCDSetCursorPos>:

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <LCDSetCursorPos+0x50>)
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ba:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	f107 0210 	add.w	r2, r7, #16
 80013c6:	4413      	add	r3, r2
 80013c8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	78bb      	ldrb	r3, [r7, #2]
 80013d0:	4413      	add	r3, r2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff59 	bl	8001298 <LCDSendCmd>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08009160 	.word	0x08009160

080013f4 <LCDInit>:

void LCDInit(LCDDisplay_S *lcd_disp_, I2C_HandleTypeDef *i2c_handler_)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	lcd_disp_->i2c_handler = i2c_handler_;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	601a      	str	r2, [r3, #0]
	lcd_disp_->byte_mode = LCD_DISP_4_BYTE_MODE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2204      	movs	r2, #4
 8001408:	721a      	strb	r2, [r3, #8]
	lcd_disp_->i2c_address = LCD_I2C_ADDRESS;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	224e      	movs	r2, #78	; 0x4e
 800140e:	711a      	strb	r2, [r3, #4]
	lcd_disp_->i2c_timeout = LCD_DISP_I2C_TIMEOUT_MS;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2264      	movs	r2, #100	; 0x64
 8001414:	80da      	strh	r2, [r3, #6]

	HAL_Delay(50);
 8001416:	2032      	movs	r0, #50	; 0x32
 8001418:	f001 f92e 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2130      	movs	r1, #48	; 0x30
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff39 	bl	8001298 <LCDSendCmd>
	HAL_Delay(5);
 8001426:	2005      	movs	r0, #5
 8001428:	f001 f926 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2130      	movs	r1, #48	; 0x30
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff31 	bl	8001298 <LCDSendCmd>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f001 f91e 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2130      	movs	r1, #48	; 0x30
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff29 	bl	8001298 <LCDSendCmd>
	HAL_Delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f001 f916 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x20);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2120      	movs	r1, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff21 	bl	8001298 <LCDSendCmd>
	HAL_Delay(10);
 8001456:	200a      	movs	r0, #10
 8001458:	f001 f90e 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2128      	movs	r1, #40	; 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff19 	bl	8001298 <LCDSendCmd>
	HAL_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f001 f906 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2108      	movs	r1, #8
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff11 	bl	8001298 <LCDSendCmd>
	HAL_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f001 f8fe 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x01); // clear display
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff09 	bl	8001298 <LCDSendCmd>
	HAL_Delay(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f001 f8f6 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2106      	movs	r1, #6
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff01 	bl	8001298 <LCDSendCmd>
	HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f001 f8ee 	bl	8002678 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	210c      	movs	r1, #12
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fef9 	bl	8001298 <LCDSendCmd>
	HAL_Delay(100);
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f001 f8e6 	bl	8002678 <HAL_Delay>
	LCDClear(&lcd_disp_);
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff5c 	bl	800136c <LCDClear>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <LCDSendString>:

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	while (*str)
 80014c6:	e007      	b.n	80014d8 <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	603a      	str	r2, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff15 	bl	8001302 <LCDSendData>
	while (*str)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f3      	bne.n	80014c8 <LCDSendString+0xc>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EditBtnIn_Pin)
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f8:	d104      	bne.n	8001504 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osThreadResume(updatePotsHandle);
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_GPIO_EXTI_Callback+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 f944 	bl	800578c <osThreadResume>
	}

	if (GPIO_Pin == CalibrationBtnIn_Pin)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800150a:	d10b      	bne.n	8001524 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		/* TODO: Calibration Routine Callback Function Implementation */
		if (calibration_btn == 0)
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_GPIO_EXTI_Callback+0x80>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <HAL_GPIO_EXTI_Callback+0x36>
		{
			calibration_btn = 1;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_GPIO_EXTI_Callback+0x80>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e002      	b.n	8001524 <HAL_GPIO_EXTI_Callback+0x3c>
		}
		else
		{
			calibration_btn = 0;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_GPIO_EXTI_Callback+0x80>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == AlarmSilenceBtnIn_Pin)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800152a:	d102      	bne.n	8001532 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		silence_alarms = 1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_GPIO_EXTI_Callback+0x84>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == StartStopBtnIn_Pin)
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001538:	d110      	bne.n	800155c <HAL_GPIO_EXTI_Callback+0x74>
	{
		if (enable_routine == 0)
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_GPIO_EXTI_Callback+0x88>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <HAL_GPIO_EXTI_Callback+0x64>
		{
			enable_routine = 1;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_GPIO_EXTI_Callback+0x88>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
		else if (enable_routine == 1)
		{
			enable_routine = 0;
		}
	}
}
 800154a:	e007      	b.n	800155c <HAL_GPIO_EXTI_Callback+0x74>
		else if (enable_routine == 1)
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_GPIO_EXTI_Callback+0x88>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d102      	bne.n	800155c <HAL_GPIO_EXTI_Callback+0x74>
			enable_routine = 0;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_GPIO_EXTI_Callback+0x88>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20001ed0 	.word	0x20001ed0
 8001568:	20000450 	.word	0x20000450
 800156c:	20001e88 	.word	0x20001e88
 8001570:	20001ecc 	.word	0x20001ecc

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b0aa      	sub	sp, #168	; 0xa8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157a:	f001 f84b 	bl	8002614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157e:	f000 f8b5 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001582:	f000 fae1 	bl	8001b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001586:	f000 fac1 	bl	8001b0c <MX_DMA_Init>
  MX_I2C2_Init();
 800158a:	f000 f9b3 	bl	80018f4 <MX_I2C2_Init>
  MX_TIM1_Init();
 800158e:	f000 f9df 	bl	8001950 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001592:	f000 fa61 	bl	8001a58 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001596:	f000 f905 	bl	80017a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800159a:	f000 f96d 	bl	8001878 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  DCMotorInit(&dc_motor, &htim1);
 800159e:	4941      	ldr	r1, [pc, #260]	; (80016a4 <main+0x130>)
 80015a0:	4841      	ldr	r0, [pc, #260]	; (80016a8 <main+0x134>)
 80015a2:	f7ff fd8b 	bl	80010bc <DCMotorInit>
  EncoderInit(&motor_encoder, SD_MODEL);
 80015a6:	2150      	movs	r1, #80	; 0x50
 80015a8:	4840      	ldr	r0, [pc, #256]	; (80016ac <main+0x138>)
 80015aa:	f7ff fdf1 	bl	8001190 <EncoderInit>
  LCDInit(&lcd_display, &hi2c2);
 80015ae:	4940      	ldr	r1, [pc, #256]	; (80016b0 <main+0x13c>)
 80015b0:	4840      	ldr	r0, [pc, #256]	; (80016b4 <main+0x140>)
 80015b2:	f7ff ff1f 	bl	80013f4 <LCDInit>
  PotControlsInit(pot_controls_a);
 80015b6:	4840      	ldr	r0, [pc, #256]	; (80016b8 <main+0x144>)
 80015b8:	f000 fd0d 	bl	8001fd6 <PotControlsInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainRoutine */
  osThreadDef(mainRoutine, startMainRoutine, osPriorityAboveNormal, 0, 128);
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <main+0x148>)
 80015be:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80015c2:	461d      	mov	r5, r3
 80015c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainRoutineHandle = osThreadCreate(osThread(mainRoutine), NULL);
 80015d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f860 	bl	800569c <osThreadCreate>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <main+0x14c>)
 80015e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUpdate */
  osThreadDef(displayUpdate, startDisplayUpdate, osPriorityAboveNormal, 0, 128);
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <main+0x150>)
 80015e4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUpdateHandle = osThreadCreate(osThread(displayUpdate), NULL);
 80015f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 f84d 	bl	800569c <osThreadCreate>
 8001602:	4602      	mov	r2, r0
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <main+0x154>)
 8001606:	601a      	str	r2, [r3, #0]

  /* definition and creation of encoderRPM */
  osThreadDef(encoderRPM, startEncoderRPM, osPriorityAboveNormal, 0, 128);
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <main+0x158>)
 800160a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800160e:	461d      	mov	r5, r3
 8001610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderRPMHandle = osThreadCreate(osThread(encoderRPM), NULL);
 800161c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f004 f83a 	bl	800569c <osThreadCreate>
 8001628:	4602      	mov	r2, r0
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <main+0x15c>)
 800162c:	601a      	str	r2, [r3, #0]

  /* definition and creation of initTask */
  osThreadDef(initTask, startInitTask, osPriorityRealtime, 0, 128);
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <main+0x160>)
 8001630:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001634:	461d      	mov	r5, r3
 8001636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(initTask), NULL);
 8001642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f004 f827 	bl	800569c <osThreadCreate>
 800164e:	4602      	mov	r2, r0
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <main+0x164>)
 8001652:	601a      	str	r2, [r3, #0]

  /* definition and creation of alarmsTask */
  osThreadDef(alarmsTask, startAlarmsTask, osPriorityAboveNormal, 0, 128);
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <main+0x168>)
 8001656:	f107 041c 	add.w	r4, r7, #28
 800165a:	461d      	mov	r5, r3
 800165c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmsTaskHandle = osThreadCreate(osThread(alarmsTask), NULL);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f004 f814 	bl	800569c <osThreadCreate>
 8001674:	4602      	mov	r2, r0
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <main+0x16c>)
 8001678:	601a      	str	r2, [r3, #0]

  /* definition and creation of updatePots */
  osThreadDef(updatePots, startUpdatePots, osPriorityRealtime, 0, 128);
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <main+0x170>)
 800167c:	463c      	mov	r4, r7
 800167e:	461d      	mov	r5, r3
 8001680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updatePotsHandle = osThreadCreate(osThread(updatePots), NULL);
 800168c:	463b      	mov	r3, r7
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f004 f803 	bl	800569c <osThreadCreate>
 8001696:	4602      	mov	r2, r0
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <main+0x174>)
 800169a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800169c:	f003 ffe7 	bl	800566e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <main+0x12c>
 80016a2:	bf00      	nop
 80016a4:	20001e8c 	.word	0x20001e8c
 80016a8:	20001e34 	.word	0x20001e34
 80016ac:	20001e28 	.word	0x20001e28
 80016b0:	20001d50 	.word	0x20001d50
 80016b4:	20001da8 	.word	0x20001da8
 80016b8:	20001ed4 	.word	0x20001ed4
 80016bc:	08009174 	.word	0x08009174
 80016c0:	20001e84 	.word	0x20001e84
 80016c4:	080091a0 	.word	0x080091a0
 80016c8:	20001da4 	.word	0x20001da4
 80016cc:	080091c8 	.word	0x080091c8
 80016d0:	20001e30 	.word	0x20001e30
 80016d4:	080091f0 	.word	0x080091f0
 80016d8:	20001ee4 	.word	0x20001ee4
 80016dc:	08009218 	.word	0x08009218
 80016e0:	20001ee8 	.word	0x20001ee8
 80016e4:	08009240 	.word	0x08009240
 80016e8:	20001ed0 	.word	0x20001ed0

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	; 0x50
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f6:	2228      	movs	r2, #40	; 0x28
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 fceb 	bl	80070d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172a:	2301      	movs	r3, #1
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001738:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800173c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fbf0 	bl	8003f28 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800174e:	f000 fc3c 	bl	8001fca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001762:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2101      	movs	r1, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fe5a 	bl	8004428 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800177a:	f000 fc26 	bl	8001fca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800177e:	2302      	movs	r3, #2
 8001780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f804 	bl	8004798 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001796:	f000 fc18 	bl	8001fca <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3750      	adds	r7, #80	; 0x50
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017b6:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <MX_ADC1_Init+0xd0>)
 80017b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017d0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017de:	2204      	movs	r2, #4
 80017e0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e2:	4823      	ldr	r0, [pc, #140]	; (8001870 <MX_ADC1_Init+0xcc>)
 80017e4:	f000 ff6a 	bl	80026bc <HAL_ADC_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017ee:	f000 fbec 	bl	8001fca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	481b      	ldr	r0, [pc, #108]	; (8001870 <MX_ADC1_Init+0xcc>)
 8001804:	f001 f92c 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800180e:	f000 fbdc 	bl	8001fca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001812:	2301      	movs	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001816:	2302      	movs	r3, #2
 8001818:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <MX_ADC1_Init+0xcc>)
 8001820:	f001 f91e 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800182a:	f000 fbce 	bl	8001fca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800182e:	2302      	movs	r3, #2
 8001830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001832:	2303      	movs	r3, #3
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_ADC1_Init+0xcc>)
 800183c:	f001 f910 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001846:	f000 fbc0 	bl	8001fca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800184a:	2303      	movs	r3, #3
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800184e:	2304      	movs	r3, #4
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_ADC1_Init+0xcc>)
 8001858:	f001 f902 	bl	8002a60 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001862:	f000 fbb2 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20001df4 	.word	0x20001df4
 8001874:	40012400 	.word	0x40012400

08001878 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_ADC2_Init+0x74>)
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <MX_ADC2_Init+0x78>)
 800188c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_ADC2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_ADC2_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_ADC2_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_ADC2_Init+0x74>)
 80018a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_ADC2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_ADC2_Init+0x74>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_ADC2_Init+0x74>)
 80018b6:	f000 ff01 	bl	80026bc <HAL_ADC_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 fb83 	bl	8001fca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_ADC2_Init+0x74>)
 80018d6:	f001 f8c3 	bl	8002a60 <HAL_ADC_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80018e0:	f000 fb73 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20001d1c 	.word	0x20001d1c
 80018f0:	40012800 	.word	0x40012800

080018f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_I2C2_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <MX_I2C2_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_I2C2_Init+0x50>)
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_I2C2_Init+0x58>)
 8001902:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_I2C2_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_I2C2_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_I2C2_Init+0x50>)
 8001912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001916:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_I2C2_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_I2C2_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_I2C2_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_I2C2_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_I2C2_Init+0x50>)
 8001932:	f001 fed7 	bl	80036e4 <HAL_I2C_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800193c:	f000 fb45 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20001d50 	.word	0x20001d50
 8001948:	40005800 	.word	0x40005800
 800194c:	000186a0 	.word	0x000186a0

08001950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b092      	sub	sp, #72	; 0x48
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2220      	movs	r2, #32
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f005 fbab 	bl	80070d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001980:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <MX_TIM1_Init+0x100>)
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <MX_TIM1_Init+0x104>)
 8001984:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <MX_TIM1_Init+0x100>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <MX_TIM1_Init+0x100>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4800-1;
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <MX_TIM1_Init+0x100>)
 8001994:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001998:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <MX_TIM1_Init+0x100>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <MX_TIM1_Init+0x100>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <MX_TIM1_Init+0x100>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ac:	4828      	ldr	r0, [pc, #160]	; (8001a50 <MX_TIM1_Init+0x100>)
 80019ae:	f003 f800 	bl	80049b2 <HAL_TIM_PWM_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019b8:	f000 fb07 	bl	8001fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c8:	4619      	mov	r1, r3
 80019ca:	4821      	ldr	r0, [pc, #132]	; (8001a50 <MX_TIM1_Init+0x100>)
 80019cc:	f003 fd80 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80019d6:	f000 faf8 	bl	8001fca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019da:	2360      	movs	r3, #96	; 0x60
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4814      	ldr	r0, [pc, #80]	; (8001a50 <MX_TIM1_Init+0x100>)
 8001a00:	f003 fa6e 	bl	8004ee0 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a0a:	f000 fade 	bl	8001fca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM1_Init+0x100>)
 8001a32:	f003 fd91 	bl	8005558 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001a3c:	f000 fac5 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM1_Init+0x100>)
 8001a42:	f000 fc95 	bl	8002370 <HAL_TIM_MspPostInit>

}
 8001a46:	bf00      	nop
 8001a48:	3748      	adds	r7, #72	; 0x48
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20001e8c 	.word	0x20001e8c
 8001a54:	40012c00 	.word	0x40012c00

08001a58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fb35 	bl	80070d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001a76:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <MX_TIM3_Init+0xb0>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001a88:	224f      	movs	r2, #79	; 0x4f
 8001a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4810      	ldr	r0, [pc, #64]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001ac4:	f003 f81e 	bl	8004b04 <HAL_TIM_Encoder_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001ace:	f000 fa7c 	bl	8001fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001ae0:	f003 fcf6 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001aea:	f000 fa6e 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, htim3.Channel);
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001af0:	7f1b      	ldrb	r3, [r3, #28]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM3_Init+0xac>)
 8001af6:	f003 f893 	bl	8004c20 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20001db4 	.word	0x20001db4
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_DMA_Init+0x38>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <MX_DMA_Init+0x38>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_DMA_Init+0x38>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2106      	movs	r1, #6
 8001b2e:	200b      	movs	r0, #11
 8001b30:	f001 fa35 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b34:	200b      	movs	r0, #11
 8001b36:	f001 fa4e 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a37      	ldr	r2, [pc, #220]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ModeLEDOut_Pin|PowerOnLEDOut_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001baa:	4826      	ldr	r0, [pc, #152]	; (8001c44 <MX_GPIO_Init+0xfc>)
 8001bac:	f001 fd6a 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorCW_Pin|MotorCCW_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2130      	movs	r1, #48	; 0x30
 8001bb4:	4824      	ldr	r0, [pc, #144]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001bb6:	f001 fd65 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EditBtnIn_Pin CalibrationBtnIn_Pin AlarmSilenceBtnIn_Pin */
  GPIO_InitStruct.Pin = EditBtnIn_Pin|CalibrationBtnIn_Pin|AlarmSilenceBtnIn_Pin;
 8001bba:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <MX_GPIO_Init+0x104>)
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4619      	mov	r1, r3
 8001bce:	481e      	ldr	r0, [pc, #120]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001bd0:	f001 fbfe 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ModeLEDOut_Pin PowerOnLEDOut_Pin */
  GPIO_InitStruct.Pin = ModeLEDOut_Pin|PowerOnLEDOut_Pin;
 8001bd4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	4619      	mov	r1, r3
 8001bec:	4815      	ldr	r0, [pc, #84]	; (8001c44 <MX_GPIO_Init+0xfc>)
 8001bee:	f001 fbef 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartStopBtnIn_Pin */
  GPIO_InitStruct.Pin = StartStopBtnIn_Pin;
 8001bf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_GPIO_Init+0x104>)
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(StartStopBtnIn_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	480f      	ldr	r0, [pc, #60]	; (8001c44 <MX_GPIO_Init+0xfc>)
 8001c08:	f001 fbe2 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorCW_Pin MotorCCW_Pin */
  GPIO_InitStruct.Pin = MotorCW_Pin|MotorCCW_Pin;
 8001c0c:	2330      	movs	r3, #48	; 0x30
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001c24:	f001 fbd4 	bl	80033d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	2028      	movs	r0, #40	; 0x28
 8001c2e:	f001 f9b6 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c32:	2028      	movs	r0, #40	; 0x28
 8001c34:	f001 f9cf 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	10110000 	.word	0x10110000

08001c50 <startMainRoutine>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_startMainRoutine */
void startMainRoutine(void const * argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001c58:	f003 fd10 	bl	800567c <osKernelSysTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if (enable_routine == 1)
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <startMainRoutine+0x98>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d129      	bne.n	8001cbe <startMainRoutine+0x6e>
		{
			dc_motor.pwm_value = (uint16_t) (((float) pot_controls_a[TIDAL_VOLUME_CONTROL].value / (float) 4095) * (float) 4800);
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <startMainRoutine+0x9c>)
 8001c6c:	885b      	ldrh	r3, [r3, #2]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe ffbf 	bl	8000bf4 <__aeabi_ui2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	491d      	ldr	r1, [pc, #116]	; (8001cf0 <startMainRoutine+0xa0>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f8c6 	bl	8000e0c <__aeabi_fdiv>
 8001c80:	4603      	mov	r3, r0
 8001c82:	491c      	ldr	r1, [pc, #112]	; (8001cf4 <startMainRoutine+0xa4>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f80d 	bl	8000ca4 <__aeabi_fmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f9f5 	bl	800107c <__aeabi_f2uiz>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <startMainRoutine+0xa8>)
 8001c98:	811a      	strh	r2, [r3, #8]

			if (dc_motor.direction_flag == MOTOR_SPIN_CW)
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <startMainRoutine+0xa8>)
 8001c9c:	7a9b      	ldrb	r3, [r3, #10]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <startMainRoutine+0x60>
			{
				DCMotorRPMSet(&dc_motor);
 8001ca2:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <startMainRoutine+0xa8>)
 8001ca4:	f7ff fa1e 	bl	80010e4 <DCMotorRPMSet>
				dc_motor.direction_flag = MOTOR_SPIN_CCW;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <startMainRoutine+0xa8>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	729a      	strb	r2, [r3, #10]
 8001cae:	e00f      	b.n	8001cd0 <startMainRoutine+0x80>
			}
			else
			{
				DCMotorRPMSet(&dc_motor);
 8001cb0:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <startMainRoutine+0xa8>)
 8001cb2:	f7ff fa17 	bl	80010e4 <DCMotorRPMSet>
				dc_motor.direction_flag = MOTOR_SPIN_CW;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <startMainRoutine+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	729a      	strb	r2, [r3, #10]
 8001cbc:	e008      	b.n	8001cd0 <startMainRoutine+0x80>
			}
		}
		else
		{
			dc_motor.pwm_value = 0;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <startMainRoutine+0xa8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	811a      	strh	r2, [r3, #8]
			dc_motor.direction_flag = MOTOR_SPIN_STOP;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <startMainRoutine+0xa8>)
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	729a      	strb	r2, [r3, #10]
			DCMotorRPMSet(&dc_motor);
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <startMainRoutine+0xa8>)
 8001ccc:	f7ff fa0a 	bl	80010e4 <DCMotorRPMSet>
		}

		osDelayUntil(&PreviousWakeTime, main_routine_update_time_ms);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <startMainRoutine+0xac>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fd76 	bl	80057d0 <osDelayUntil>
		if (enable_routine == 1)
 8001ce4:	e7bc      	b.n	8001c60 <startMainRoutine+0x10>
 8001ce6:	bf00      	nop
 8001ce8:	20001ecc 	.word	0x20001ecc
 8001cec:	20001ed4 	.word	0x20001ed4
 8001cf0:	457ff000 	.word	0x457ff000
 8001cf4:	45960000 	.word	0x45960000
 8001cf8:	20001e34 	.word	0x20001e34
 8001cfc:	20001e24 	.word	0x20001e24

08001d00 <startDisplayUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplayUpdate */
void startDisplayUpdate(void const * argument)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08d      	sub	sp, #52	; 0x34
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplayUpdate */
	char buffer[32];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001d08:	f003 fcb8 	bl	800567c <osKernelSysTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4834      	ldr	r0, [pc, #208]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001d16:	f7ff fb43 	bl	80013a0 <LCDSetCursorPos>
		sprintf(buffer, "VOL %04u  PWM %04u", pot_controls_a[TIDAL_VOLUME_CONTROL].value, dc_motor.pwm_value);
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <startDisplayUpdate+0xec>)
 8001d1c:	885b      	ldrh	r3, [r3, #2]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <startDisplayUpdate+0xf0>)
 8001d24:	891b      	ldrh	r3, [r3, #8]
 8001d26:	f107 0010 	add.w	r0, r7, #16
 8001d2a:	4932      	ldr	r1, [pc, #200]	; (8001df4 <startDisplayUpdate+0xf4>)
 8001d2c:	f005 fe2a 	bl	8007984 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	482c      	ldr	r0, [pc, #176]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001d38:	f7ff fbc0 	bl	80014bc <LCDSendString>

		LCDSetCursorPos(&lcd_display, 1, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4829      	ldr	r0, [pc, #164]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001d42:	f7ff fb2d 	bl	80013a0 <LCDSetCursorPos>
		sprintf(buffer, "RFQ %04u  RPM %+04ld", pot_controls_a[RESPIRATORY_FREQUENCY_CONTROL].value, (int32_t) motor_encoder.rpm);
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <startDisplayUpdate+0xec>)
 8001d48:	895b      	ldrh	r3, [r3, #10]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <startDisplayUpdate+0xf8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f96c 	bl	8001030 <__aeabi_f2iz>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f107 0010 	add.w	r0, r7, #16
 8001d5e:	4622      	mov	r2, r4
 8001d60:	4926      	ldr	r1, [pc, #152]	; (8001dfc <startDisplayUpdate+0xfc>)
 8001d62:	f005 fe0f 	bl	8007984 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481e      	ldr	r0, [pc, #120]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001d6e:	f7ff fba5 	bl	80014bc <LCDSendString>

		LCDSetCursorPos(&lcd_display, 2, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2102      	movs	r1, #2
 8001d76:	481c      	ldr	r0, [pc, #112]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001d78:	f7ff fb12 	bl	80013a0 <LCDSetCursorPos>
		sprintf(buffer, "I:E %04u  STS %04u", pot_controls_a[I_E_RATIO_CONTROL].value, (enable_routine | calibration_btn));
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <startDisplayUpdate+0xec>)
 8001d7e:	88db      	ldrh	r3, [r3, #6]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <startDisplayUpdate+0x100>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <startDisplayUpdate+0x104>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f107 0010 	add.w	r0, r7, #16
 8001d98:	460a      	mov	r2, r1
 8001d9a:	491b      	ldr	r1, [pc, #108]	; (8001e08 <startDisplayUpdate+0x108>)
 8001d9c:	f005 fdf2 	bl	8007984 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4619      	mov	r1, r3
 8001da6:	4810      	ldr	r0, [pc, #64]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001da8:	f7ff fb88 	bl	80014bc <LCDSendString>

		LCDSetCursorPos(&lcd_display, 3, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2103      	movs	r1, #3
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001db2:	f7ff faf5 	bl	80013a0 <LCDSetCursorPos>
		sprintf(buffer, "PRS %04u  SIL %04u", pot_controls_a[PRESSURE_VALUE_CONTROL].value, silence_alarms);
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <startDisplayUpdate+0xec>)
 8001db8:	89db      	ldrh	r3, [r3, #14]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <startDisplayUpdate+0x10c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f107 0010 	add.w	r0, r7, #16
 8001dc8:	4911      	ldr	r1, [pc, #68]	; (8001e10 <startDisplayUpdate+0x110>)
 8001dca:	f005 fddb 	bl	8007984 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <startDisplayUpdate+0xe8>)
 8001dd6:	f7ff fb71 	bl	80014bc <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_UPDATE_TIMESTEP_MS);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	210a      	movs	r1, #10
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fcf5 	bl	80057d0 <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001de6:	e793      	b.n	8001d10 <startDisplayUpdate+0x10>
 8001de8:	20001da8 	.word	0x20001da8
 8001dec:	20001ed4 	.word	0x20001ed4
 8001df0:	20001e34 	.word	0x20001e34
 8001df4:	0800925c 	.word	0x0800925c
 8001df8:	20001e28 	.word	0x20001e28
 8001dfc:	08009270 	.word	0x08009270
 8001e00:	20001ecc 	.word	0x20001ecc
 8001e04:	20000450 	.word	0x20000450
 8001e08:	08009288 	.word	0x08009288
 8001e0c:	20001e88 	.word	0x20001e88
 8001e10:	0800929c 	.word	0x0800929c

08001e14 <startEncoderRPM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEncoderRPM */
void startEncoderRPM(void const * argument)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEncoderRPM */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001e1c:	f003 fc2e 	bl	800567c <osKernelSysTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, TIM3->CNT, RPM_CALCULATE_TIMESTEP_MS);
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <startEncoderRPM+0x2c>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2264      	movs	r2, #100	; 0x64
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <startEncoderRPM+0x30>)
 8001e2e:	f7ff f9c5 	bl	80011bc <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, RPM_CALCULATE_TIMESTEP_MS);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	2164      	movs	r1, #100	; 0x64
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 fcc9 	bl	80057d0 <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, TIM3->CNT, RPM_CALCULATE_TIMESTEP_MS);
 8001e3e:	e7f1      	b.n	8001e24 <startEncoderRPM+0x10>
 8001e40:	40000400 	.word	0x40000400
 8001e44:	20001e28 	.word	0x20001e28

08001e48 <startInitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startInitTask */
void startInitTask(void const * argument)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startInitTask */
	enable_routine = 0;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <startInitTask+0x60>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
	silence_alarms = 0;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <startInitTask+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
	main_routine_update_time_ms = 10;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <startInitTask+0x68>)
 8001e5e:	220a      	movs	r2, #10
 8001e60:	801a      	strh	r2, [r3, #0]
	i_e_ratio = 1;
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <startInitTask+0x6c>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
	char buffer[32];
	LCDSetCursorPos(&lcd_display, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <startInitTask+0x70>)
 8001e6e:	f7ff fa97 	bl	80013a0 <LCDSetCursorPos>
	sprintf(buffer, "Initializing...");
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <startInitTask+0x74>)
 8001e78:	461c      	mov	r4, r3
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCDSendString(&lcd_display, buffer);
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <startInitTask+0x70>)
 8001e8a:	f7ff fb17 	bl	80014bc <LCDSendString>
	osDelay(1000);
 8001e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e92:	f003 fc5b 	bl	800574c <osDelay>
	osThreadTerminate(initTaskHandle);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <startInitTask+0x78>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fc4a 	bl	8005734 <osThreadTerminate>
  /* USER CODE END startInitTask */
}
 8001ea0:	bf00      	nop
 8001ea2:	372c      	adds	r7, #44	; 0x2c
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	20001ecc 	.word	0x20001ecc
 8001eac:	20001e88 	.word	0x20001e88
 8001eb0:	20001e24 	.word	0x20001e24
 8001eb4:	20001d4c 	.word	0x20001d4c
 8001eb8:	20001da8 	.word	0x20001da8
 8001ebc:	080092b0 	.word	0x080092b0
 8001ec0:	20001ee4 	.word	0x20001ee4

08001ec4 <startAlarmsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarmsTask */
void startAlarmsTask(void const * argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAlarmsTask */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001ecc:	f003 fbd6 	bl	800567c <osKernelSysTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
	alarm_flag = 1;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <startAlarmsTask+0x50>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
	for(;;)
	{
		if (silence_alarms == 1)
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <startAlarmsTask+0x54>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10f      	bne.n	8001f04 <startAlarmsTask+0x40>
		{
			alarm_flag = 0;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <startAlarmsTask+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
			osDelayUntil(&PreviousWakeTime, ALARM_SILENCE_TIMEOUT_MS);
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fc6c 	bl	80057d0 <osDelayUntil>
			alarm_flag = 1;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <startAlarmsTask+0x50>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
			silence_alarms = 0;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <startAlarmsTask+0x54>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
		}
		osDelayUntil(&PreviousWakeTime, ALARM_UPDATE_TIMESTEP_MS);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	210a      	movs	r1, #10
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 fc60 	bl	80057d0 <osDelayUntil>
		if (silence_alarms == 1)
 8001f10:	e7e3      	b.n	8001eda <startAlarmsTask+0x16>
 8001f12:	bf00      	nop
 8001f14:	20001e26 	.word	0x20001e26
 8001f18:	20001e88 	.word	0x20001e88

08001f1c <startUpdatePots>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUpdatePots */
void startUpdatePots(void const * argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUpdatePots */
	//uint32_t PreviousWakeTime = osKernelSysTick();
  /* Infinite loop */
  for(;;)
  {
	  uint16_t adc_values[TOTAL_CONTROLS_COUNT] = {0,0,0,0};
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, TOTAL_CONTROLS_COUNT);
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	2204      	movs	r2, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4816      	ldr	r0, [pc, #88]	; (8001f90 <startUpdatePots+0x74>)
 8001f38:	f000 fc98 	bl	800286c <HAL_ADC_Start_DMA>
	  PotControlsValueUpdate(pot_controls_a, adc_values);
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	4619      	mov	r1, r3
 8001f42:	4814      	ldr	r0, [pc, #80]	; (8001f94 <startUpdatePots+0x78>)
 8001f44:	f000 f85f 	bl	8002006 <PotControlsValueUpdate>

	  main_routine_update_time_ms = (uint16_t) ((((float) pot_controls_a[RESPIRATORY_FREQUENCY_CONTROL].value / (float) 4095) * (float) 1000) + 10);
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <startUpdatePots+0x78>)
 8001f4a:	895b      	ldrh	r3, [r3, #10]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fe50 	bl	8000bf4 <__aeabi_ui2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4910      	ldr	r1, [pc, #64]	; (8001f98 <startUpdatePots+0x7c>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe ff57 	bl	8000e0c <__aeabi_fdiv>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <startUpdatePots+0x80>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fe9e 	bl	8000ca4 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <startUpdatePots+0x84>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fd91 	bl	8000a94 <__addsf3>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f881 	bl	800107c <__aeabi_f2uiz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <startUpdatePots+0x88>)
 8001f80:	801a      	strh	r2, [r3, #0]
	  //osDelayUntil(&PreviousWakeTime, 100);
	  osThreadSuspend(updatePotsHandle);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <startUpdatePots+0x8c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fbf4 	bl	8005774 <osThreadSuspend>
  {
 8001f8c:	e7ca      	b.n	8001f24 <startUpdatePots+0x8>
 8001f8e:	bf00      	nop
 8001f90:	20001df4 	.word	0x20001df4
 8001f94:	20001ed4 	.word	0x20001ed4
 8001f98:	457ff000 	.word	0x457ff000
 8001f9c:	447a0000 	.word	0x447a0000
 8001fa0:	41200000 	.word	0x41200000
 8001fa4:	20001e24 	.word	0x20001e24
 8001fa8:	20001ed0 	.word	0x20001ed0

08001fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fbe:	f000 fb3f 	bl	8002640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <PotControlsInit>:

#include "stm32f1xx_hal.h"
#include "potentiometer_api.h"

void PotControlsInit(volatile Potentiometer_S *pot_array_)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
	pot_array_[TIDAL_VOLUME_CONTROL].rank 				= PIN_A0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
	pot_array_[I_E_RATIO_CONTROL].rank 					= PIN_A1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	2203      	movs	r2, #3
 8001fea:	701a      	strb	r2, [r3, #0]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank 		= PIN_A2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
	pot_array_[PRESSURE_VALUE_CONTROL].rank 			= PIN_A3;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <PotControlsValueUpdate>:

void PotControlsValueUpdate(volatile Potentiometer_S *pot_array_, uint16_t *adc_values_)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
	pot_array_[TIDAL_VOLUME_CONTROL].value 				= adc_values_[pot_array_[TIDAL_VOLUME_CONTROL].rank];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4413      	add	r3, r2
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	805a      	strh	r2, [r3, #2]
	pot_array_[I_E_RATIO_CONTROL].value 				= adc_values_[pot_array_[I_E_RATIO_CONTROL].rank];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	441a      	add	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	805a      	strh	r2, [r3, #2]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].value 	= adc_values_[pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank];
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3308      	adds	r3, #8
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	441a      	add	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3308      	adds	r3, #8
 800204a:	8812      	ldrh	r2, [r2, #0]
 800204c:	805a      	strh	r2, [r3, #2]
	pot_array_[PRESSURE_VALUE_CONTROL].value 			= adc_values_[pot_array_[PRESSURE_VALUE_CONTROL].rank];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	330c      	adds	r3, #12
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	330c      	adds	r3, #12
 8002060:	8812      	ldrh	r2, [r2, #0]
 8002062:	805a      	strh	r2, [r3, #2]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_MspInit+0x68>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_MspInit+0x68>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6193      	str	r3, [r2, #24]
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_MspInit+0x68>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_MspInit+0x68>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_MspInit+0x68>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_MspInit+0x68>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	210f      	movs	r1, #15
 80020aa:	f06f 0001 	mvn.w	r0, #1
 80020ae:	f000 ff76 	bl	8002f9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_MspInit+0x6c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_MspInit+0x6c>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000

080020e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_ADC_MspInit+0x13c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d14b      	bne.n	8002198 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_ADC_MspInit+0x140>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a46      	ldr	r2, [pc, #280]	; (8002220 <HAL_ADC_MspInit+0x140>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_ADC_MspInit+0x140>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_ADC_MspInit+0x140>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a40      	ldr	r2, [pc, #256]	; (8002220 <HAL_ADC_MspInit+0x140>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_ADC_MspInit+0x140>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = VolumePotIn_Pin|IERatioPotIn_Pin|FrequencyPotIn_Pin|PressureLvlPotIn_Pin;
 8002130:	230f      	movs	r3, #15
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002134:	2303      	movs	r3, #3
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0320 	add.w	r3, r7, #32
 800213c:	4619      	mov	r1, r3
 800213e:	4839      	ldr	r0, [pc, #228]	; (8002224 <HAL_ADC_MspInit+0x144>)
 8002140:	f001 f946 	bl	80033d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002144:	4b38      	ldr	r3, [pc, #224]	; (8002228 <HAL_ADC_MspInit+0x148>)
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <HAL_ADC_MspInit+0x14c>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_ADC_MspInit+0x148>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_ADC_MspInit+0x148>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_ADC_MspInit+0x148>)
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_ADC_MspInit+0x148>)
 800215e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002162:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_ADC_MspInit+0x148>)
 8002166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_ADC_MspInit+0x148>)
 800216e:	2220      	movs	r2, #32
 8002170:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_ADC_MspInit+0x148>)
 8002174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002178:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800217a:	482b      	ldr	r0, [pc, #172]	; (8002228 <HAL_ADC_MspInit+0x148>)
 800217c:	f000 ff3a 	bl	8002ff4 <HAL_DMA_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002186:	f7ff ff20 	bl	8001fca <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_ADC_MspInit+0x148>)
 800218e:	621a      	str	r2, [r3, #32]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_ADC_MspInit+0x148>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002196:	e03c      	b.n	8002212 <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_ADC_MspInit+0x150>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d137      	bne.n	8002212 <HAL_ADC_MspInit+0x132>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6193      	str	r3, [r2, #24]
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_ADC_MspInit+0x140>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PressureSensorIn_Pin|Placeholder_Pin;
 80021ea:	2330      	movs	r3, #48	; 0x30
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	2303      	movs	r3, #3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 0320 	add.w	r3, r7, #32
 80021f6:	4619      	mov	r1, r3
 80021f8:	480a      	ldr	r0, [pc, #40]	; (8002224 <HAL_ADC_MspInit+0x144>)
 80021fa:	f001 f8e9 	bl	80033d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PlaceholderB0_Pin|PlaceholderB1_Pin;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002202:	2303      	movs	r3, #3
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	4619      	mov	r1, r3
 800220c:	4809      	ldr	r0, [pc, #36]	; (8002234 <HAL_ADC_MspInit+0x154>)
 800220e:	f001 f8df 	bl	80033d0 <HAL_GPIO_Init>
}
 8002212:	bf00      	nop
 8002214:	3730      	adds	r7, #48	; 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40012400 	.word	0x40012400
 8002220:	40021000 	.word	0x40021000
 8002224:	40010800 	.word	0x40010800
 8002228:	20001e40 	.word	0x20001e40
 800222c:	40020008 	.word	0x40020008
 8002230:	40012800 	.word	0x40012800
 8002234:	40010c00 	.word	0x40010c00

08002238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_I2C_MspInit+0x74>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d124      	bne.n	80022a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_I2C_MspInit+0x78>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_I2C_MspInit+0x78>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_I2C_MspInit+0x78>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002270:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002276:	2312      	movs	r3, #18
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4619      	mov	r1, r3
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <HAL_I2C_MspInit+0x7c>)
 8002286:	f001 f8a3 	bl	80033d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_I2C_MspInit+0x78>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_I2C_MspInit+0x78>)
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_I2C_MspInit+0x78>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40005800 	.word	0x40005800
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010c00 	.word	0x40010c00

080022b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_TIM_PWM_MspInit+0x34>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10b      	bne.n	80022e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_TIM_PWM_MspInit+0x38>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_TIM_PWM_MspInit+0x38>)
 80022d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d4:	6193      	str	r3, [r2, #24]
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_TIM_PWM_MspInit+0x38>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40021000 	.word	0x40021000

080022f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a15      	ldr	r2, [pc, #84]	; (8002364 <HAL_TIM_Encoder_MspInit+0x70>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d123      	bne.n	800235c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_TIM_Encoder_MspInit+0x74>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a13      	ldr	r2, [pc, #76]	; (8002368 <HAL_TIM_Encoder_MspInit+0x74>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	61d3      	str	r3, [r2, #28]
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_TIM_Encoder_MspInit+0x74>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_TIM_Encoder_MspInit+0x74>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_TIM_Encoder_MspInit+0x74>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_TIM_Encoder_MspInit+0x74>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 8002344:	23c0      	movs	r3, #192	; 0xc0
 8002346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4619      	mov	r1, r3
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_TIM_Encoder_MspInit+0x78>)
 8002358:	f001 f83a 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800235c:	bf00      	nop
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40000400 	.word	0x40000400
 8002368:	40021000 	.word	0x40021000
 800236c:	40010800 	.word	0x40010800

08002370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <HAL_TIM_MspPostInit+0x5c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d118      	bne.n	80023c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_TIM_MspPostInit+0x60>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_TIM_MspPostInit+0x60>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_TIM_MspPostInit+0x60>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 80023a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <HAL_TIM_MspPostInit+0x64>)
 80023be:	f001 f807 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023c2:	bf00      	nop
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010800 	.word	0x40010800

080023d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	201c      	movs	r0, #28
 80023ee:	f000 fdd6 	bl	8002f9e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80023f2:	201c      	movs	r0, #28
 80023f4:	f000 fdef 	bl	8002fd6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_InitTick+0xa4>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_InitTick+0xa4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	61d3      	str	r3, [r2, #28]
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_InitTick+0xa4>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002410:	f107 0210 	add.w	r2, r7, #16
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f002 f96e 	bl	80046fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002420:	f002 f958 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8002424:	4603      	mov	r3, r0
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_InitTick+0xa8>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0c9b      	lsrs	r3, r3, #18
 8002434:	3b01      	subs	r3, #1
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0xac>)
 800243a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800243e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_InitTick+0xac>)
 8002442:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002446:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_InitTick+0xac>)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_InitTick+0xac>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_InitTick+0xac>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800245a:	480a      	ldr	r0, [pc, #40]	; (8002484 <HAL_InitTick+0xac>)
 800245c:	f002 fa52 	bl	8004904 <HAL_TIM_Base_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002466:	4807      	ldr	r0, [pc, #28]	; (8002484 <HAL_InitTick+0xac>)
 8002468:	f002 fa80 	bl	800496c <HAL_TIM_Base_Start_IT>
 800246c:	4603      	mov	r3, r0
 800246e:	e000      	b.n	8002472 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	3730      	adds	r7, #48	; 0x30
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	431bde83 	.word	0x431bde83
 8002484:	20001eec 	.word	0x20001eec

08002488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <HardFault_Handler+0x4>

0800249a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <MemManage_Handler+0x4>

080024a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <BusFault_Handler+0x4>

080024a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <UsageFault_Handler+0x4>

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA1_Channel1_IRQHandler+0x10>)
 80024be:	f000 fe53 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20001e40 	.word	0x20001e40

080024cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM2_IRQHandler+0x10>)
 80024d2:	f002 fbfc 	bl	8004cce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20001eec 	.word	0x20001eec

080024e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024e8:	f001 f8e4 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80024ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024f0:	f001 f8e0 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024f8:	f001 f8dc 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80024fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002500:	f001 f8d8 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x50>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x16>
		heap_end = &end;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <_sbrk+0x50>)
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <_sbrk+0x54>)
 800251c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <_sbrk+0x50>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <_sbrk+0x50>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	466a      	mov	r2, sp
 800252e:	4293      	cmp	r3, r2
 8002530:	d907      	bls.n	8002542 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002532:	f004 fd9b 	bl	800706c <__errno>
 8002536:	4602      	mov	r2, r0
 8002538:	230c      	movs	r3, #12
 800253a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	e006      	b.n	8002550 <_sbrk+0x48>
	}

	heap_end += incr;
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_sbrk+0x50>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a03      	ldr	r2, [pc, #12]	; (8002558 <_sbrk+0x50>)
 800254c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000454 	.word	0x20000454
 800255c:	20001f38 	.word	0x20001f38

08002560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <SystemInit+0x5c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <SystemInit+0x5c>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <SystemInit+0x5c>)
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4911      	ldr	r1, [pc, #68]	; (80025bc <SystemInit+0x5c>)
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <SystemInit+0x60>)
 8002578:	4013      	ands	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <SystemInit+0x5c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <SystemInit+0x5c>)
 8002582:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <SystemInit+0x5c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <SystemInit+0x5c>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <SystemInit+0x5c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <SystemInit+0x5c>)
 800259e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SystemInit+0x5c>)
 80025a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SystemInit+0x64>)
 80025ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000
 80025c0:	f8ff0000 	.word	0xf8ff0000
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025ca:	e003      	b.n	80025d4 <LoopCopyDataInit>

080025cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025d2:	3104      	adds	r1, #4

080025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025d4:	480a      	ldr	r0, [pc, #40]	; (8002600 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025dc:	d3f6      	bcc.n	80025cc <CopyDataInit>
  ldr r2, =_sbss
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025e0:	e002      	b.n	80025e8 <LoopFillZerobss>

080025e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025e4:	f842 3b04 	str.w	r3, [r2], #4

080025e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025ec:	d3f9      	bcc.n	80025e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ee:	f7ff ffb7 	bl	8002560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f004 fd41 	bl	8007078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025f6:	f7fe ffbd 	bl	8001574 <main>
  bx lr
 80025fa:	4770      	bx	lr
  ldr r3, =_sidata
 80025fc:	08009558 	.word	0x08009558
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002604:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002608:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800260c:	20001f34 	.word	0x20001f34

08002610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC1_2_IRQHandler>
	...

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_Init+0x28>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_Init+0x28>)
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f000 fcaf 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fed4 	bl	80023d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7ff fd1e 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40022000 	.word	0x40022000

08002640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_IncTick+0x1c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_IncTick+0x20>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_IncTick+0x20>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	20000008 	.word	0x20000008
 8002660:	20001f2c 	.word	0x20001f2c

08002664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <HAL_GetTick+0x10>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20001f2c 	.word	0x20001f2c

08002678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fff0 	bl	8002664 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d005      	beq.n	800269e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_Delay+0x40>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269e:	bf00      	nop
 80026a0:	f7ff ffe0 	bl	8002664 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8f7      	bhi.n	80026a0 <HAL_Delay+0x28>
  {
  }
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000008 	.word	0x20000008

080026bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0be      	b.n	800285c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fcf0 	bl	80020e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 faf7 	bl	8002cf4 <ADC_ConversionStop_Disable>
 8002706:	4603      	mov	r3, r0
 8002708:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 8099 	bne.w	800284a <HAL_ADC_Init+0x18e>
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 8095 	bne.w	800284a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002728:	f023 0302 	bic.w	r3, r3, #2
 800272c:	f043 0202 	orr.w	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800273c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7b1b      	ldrb	r3, [r3, #12]
 8002742:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002744:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4313      	orrs	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002754:	d003      	beq.n	800275e <HAL_ADC_Init+0xa2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_ADC_Init+0xa8>
 800275e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002762:	e000      	b.n	8002766 <HAL_ADC_Init+0xaa>
 8002764:	2300      	movs	r3, #0
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7d1b      	ldrb	r3, [r3, #20]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d119      	bne.n	80027a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7b1b      	ldrb	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	3b01      	subs	r3, #1
 8002782:	035a      	lsls	r2, r3, #13
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	e00b      	b.n	80027a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_ADC_Init+0x1a8>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d8:	d003      	beq.n	80027e2 <HAL_ADC_Init+0x126>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d104      	bne.n	80027ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	051b      	lsls	r3, r3, #20
 80027ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_ADC_Init+0x1ac>)
 8002808:	4013      	ands	r3, r2
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d10b      	bne.n	8002828 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f023 0303 	bic.w	r3, r3, #3
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002826:	e018      	b.n	800285a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f023 0312 	bic.w	r3, r3, #18
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002848:	e007      	b.n	800285a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffe1f7fd 	.word	0xffe1f7fd
 8002868:	ff1f0efe 	.word	0xff1f0efe

0800286c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a64      	ldr	r2, [pc, #400]	; (8002a14 <HAL_ADC_Start_DMA+0x1a8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_ADC_Start_DMA+0x24>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a63      	ldr	r2, [pc, #396]	; (8002a18 <HAL_ADC_Start_DMA+0x1ac>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d106      	bne.n	800289e <HAL_ADC_Start_DMA+0x32>
 8002890:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <HAL_ADC_Start_DMA+0x1a8>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 80b3 	bne.w	8002a04 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_Start_DMA+0x40>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0ae      	b.n	8002a0a <HAL_ADC_Start_DMA+0x19e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f9cb 	bl	8002c50 <ADC_Enable>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 809a 	bne.w	80029fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4e      	ldr	r2, [pc, #312]	; (8002a18 <HAL_ADC_Start_DMA+0x1ac>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_Start_DMA+0x84>
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_ADC_Start_DMA+0x1a8>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d115      	bne.n	800291c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d026      	beq.n	8002958 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002912:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800291a:	e01d      	b.n	8002958 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <HAL_ADC_Start_DMA+0x1a8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_ADC_Start_DMA+0xd0>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <HAL_ADC_Start_DMA+0x1ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10d      	bne.n	8002958 <HAL_ADC_Start_DMA+0xec>
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_ADC_Start_DMA+0x1a8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002950:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f023 0206 	bic.w	r2, r3, #6
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002970:	e002      	b.n	8002978 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_ADC_Start_DMA+0x1b0>)
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <HAL_ADC_Start_DMA+0x1b4>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_ADC_Start_DMA+0x1b8>)
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0202 	mvn.w	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a18      	ldr	r0, [r3, #32]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	334c      	adds	r3, #76	; 0x4c
 80029bc:	4619      	mov	r1, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f000 fb71 	bl	80030a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029d4:	d108      	bne.n	80029e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029e6:	e00f      	b.n	8002a08 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029f8:	e006      	b.n	8002a08 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002a02:	e001      	b.n	8002a08 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40012400 	.word	0x40012400
 8002a18:	40012800 	.word	0x40012800
 8002a1c:	08002d69 	.word	0x08002d69
 8002a20:	08002de5 	.word	0x08002de5
 8002a24:	08002e01 	.word	0x08002e01

08002a28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x20>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0dc      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1da>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d81c      	bhi.n	8002aca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b05      	subs	r3, #5
 8002aa2:	221f      	movs	r2, #31
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4019      	ands	r1, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b05      	subs	r3, #5
 8002abc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac8:	e03c      	b.n	8002b44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d81c      	bhi.n	8002b0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b23      	subs	r3, #35	; 0x23
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4019      	ands	r1, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b23      	subs	r3, #35	; 0x23
 8002afe:	fa00 f203 	lsl.w	r2, r0, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0a:	e01b      	b.n	8002b44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b41      	subs	r3, #65	; 0x41
 8002b1e:	221f      	movs	r2, #31
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4019      	ands	r1, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3b41      	subs	r3, #65	; 0x41
 8002b38:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	d91c      	bls.n	8002b86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b1e      	subs	r3, #30
 8002b5e:	2207      	movs	r2, #7
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4019      	ands	r1, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6898      	ldr	r0, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	3b1e      	subs	r3, #30
 8002b78:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	e019      	b.n	8002bba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6919      	ldr	r1, [r3, #16]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	2207      	movs	r2, #7
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4019      	ands	r1, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6898      	ldr	r0, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d003      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bc6:	2b11      	cmp	r3, #17
 8002bc8:	d132      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d125      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d126      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bf0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d11a      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <HAL_ADC_ConfigChannel+0x1ec>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0c9a      	lsrs	r2, r3, #18
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c10:	e002      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f9      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x1b2>
 8002c1e:	e007      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012400 	.word	0x40012400
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	431bde83 	.word	0x431bde83

08002c50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d039      	beq.n	8002ce2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <ADC_Enable+0x9c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <ADC_Enable+0xa0>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	0c9b      	lsrs	r3, r3, #18
 8002c8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c8c:	e002      	b.n	8002c94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c9a:	f7ff fce3 	bl	8002664 <HAL_GetTick>
 8002c9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ca0:	e018      	b.n	8002cd4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca2:	f7ff fcdf 	bl	8002664 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d911      	bls.n	8002cd4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f043 0210 	orr.w	r2, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d1df      	bne.n	8002ca2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	431bde83 	.word	0x431bde83

08002cf4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d127      	bne.n	8002d5e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d1e:	f7ff fca1 	bl	8002664 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d24:	e014      	b.n	8002d50 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d26:	f7ff fc9d 	bl	8002664 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d90d      	bls.n	8002d50 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f043 0210 	orr.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d0e3      	beq.n	8002d26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d127      	bne.n	8002dd2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d9c:	d115      	bne.n	8002dca <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d111      	bne.n	8002dca <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff fe2c 	bl	8002a28 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002dd0:	e004      	b.n	8002ddc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff fe21 	bl	8002a3a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fe10 	bl	8002a4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4906      	ldr	r1, [pc, #24]	; (8002ecc <__NVIC_EnableIRQ+0x34>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	; (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff4f 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff64 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ffb2 	bl	8002f24 <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff81 	bl	8002ed0 <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff57 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e043      	b.n	8003092 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_DMA_Init+0xa8>)
 8003012:	4413      	add	r3, r2
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_DMA_Init+0xac>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	009a      	lsls	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <HAL_DMA_Init+0xb0>)
 8003026:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800303e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003042:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800304c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	bffdfff8 	.word	0xbffdfff8
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020000 	.word	0x40020000

080030a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_DMA_Start_IT+0x20>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e04a      	b.n	800315e <HAL_DMA_Start_IT+0xb6>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d13a      	bne.n	8003150 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f938 	bl	8003374 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 020e 	orr.w	r2, r2, #14
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e00f      	b.n	800313e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 020a 	orr.w	r2, r2, #10
 800313c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e005      	b.n	800315c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	2204      	movs	r2, #4
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04f      	beq.n	8003230 <HAL_DMA_IRQHandler+0xc8>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04a      	beq.n	8003230 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0204 	bic.w	r2, r2, #4
 80031b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a66      	ldr	r2, [pc, #408]	; (8003358 <HAL_DMA_IRQHandler+0x1f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d029      	beq.n	8003216 <HAL_DMA_IRQHandler+0xae>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a65      	ldr	r2, [pc, #404]	; (800335c <HAL_DMA_IRQHandler+0x1f4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0xaa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_DMA_IRQHandler+0x1f8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01a      	beq.n	800320c <HAL_DMA_IRQHandler+0xa4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a62      	ldr	r2, [pc, #392]	; (8003364 <HAL_DMA_IRQHandler+0x1fc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d012      	beq.n	8003206 <HAL_DMA_IRQHandler+0x9e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a60      	ldr	r2, [pc, #384]	; (8003368 <HAL_DMA_IRQHandler+0x200>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5f      	ldr	r2, [pc, #380]	; (800336c <HAL_DMA_IRQHandler+0x204>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d102      	bne.n	80031fa <HAL_DMA_IRQHandler+0x92>
 80031f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031f8:	e00e      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 80031fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031fe:	e00b      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003204:	e008      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003206:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800320a:	e005      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 800320c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003210:	e002      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003212:	2340      	movs	r3, #64	; 0x40
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003216:	2304      	movs	r3, #4
 8003218:	4a55      	ldr	r2, [pc, #340]	; (8003370 <HAL_DMA_IRQHandler+0x208>)
 800321a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8094 	beq.w	800334e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800322e:	e08e      	b.n	800334e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	2202      	movs	r2, #2
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d056      	beq.n	80032ee <HAL_DMA_IRQHandler+0x186>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d051      	beq.n	80032ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 020a 	bic.w	r2, r2, #10
 8003266:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a38      	ldr	r2, [pc, #224]	; (8003358 <HAL_DMA_IRQHandler+0x1f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d029      	beq.n	80032ce <HAL_DMA_IRQHandler+0x166>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a37      	ldr	r2, [pc, #220]	; (800335c <HAL_DMA_IRQHandler+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0x162>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a35      	ldr	r2, [pc, #212]	; (8003360 <HAL_DMA_IRQHandler+0x1f8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01a      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x15c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <HAL_DMA_IRQHandler+0x1fc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d012      	beq.n	80032be <HAL_DMA_IRQHandler+0x156>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a32      	ldr	r2, [pc, #200]	; (8003368 <HAL_DMA_IRQHandler+0x200>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x150>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <HAL_DMA_IRQHandler+0x204>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x14a>
 80032ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032b0:	e00e      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b6:	e00b      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032bc:	e008      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c2:	e005      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c8:	e002      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032ca:	2320      	movs	r3, #32
 80032cc:	e000      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032ce:	2302      	movs	r3, #2
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_DMA_IRQHandler+0x208>)
 80032d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d034      	beq.n	800334e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032ec:	e02f      	b.n	800334e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d028      	beq.n	8003350 <HAL_DMA_IRQHandler+0x1e8>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d023      	beq.n	8003350 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 020e 	bic.w	r2, r2, #14
 8003316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
    }
  }
  return;
 800334e:	bf00      	nop
 8003350:	bf00      	nop
}
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40020008 	.word	0x40020008
 800335c:	4002001c 	.word	0x4002001c
 8003360:	40020030 	.word	0x40020030
 8003364:	40020044 	.word	0x40020044
 8003368:	40020058 	.word	0x40020058
 800336c:	4002006c 	.word	0x4002006c
 8003370:	40020000 	.word	0x40020000

08003374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d108      	bne.n	80033b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033b2:	e007      	b.n	80033c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e2:	e127      	b.n	8003634 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033e4:	2201      	movs	r2, #1
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 8116 	bne.w	800362e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b12      	cmp	r3, #18
 8003408:	d034      	beq.n	8003474 <HAL_GPIO_Init+0xa4>
 800340a:	2b12      	cmp	r3, #18
 800340c:	d80d      	bhi.n	800342a <HAL_GPIO_Init+0x5a>
 800340e:	2b02      	cmp	r3, #2
 8003410:	d02b      	beq.n	800346a <HAL_GPIO_Init+0x9a>
 8003412:	2b02      	cmp	r3, #2
 8003414:	d804      	bhi.n	8003420 <HAL_GPIO_Init+0x50>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d031      	beq.n	800347e <HAL_GPIO_Init+0xae>
 800341a:	2b01      	cmp	r3, #1
 800341c:	d01c      	beq.n	8003458 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800341e:	e048      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003420:	2b03      	cmp	r3, #3
 8003422:	d043      	beq.n	80034ac <HAL_GPIO_Init+0xdc>
 8003424:	2b11      	cmp	r3, #17
 8003426:	d01b      	beq.n	8003460 <HAL_GPIO_Init+0x90>
          break;
 8003428:	e043      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800342a:	4a89      	ldr	r2, [pc, #548]	; (8003650 <HAL_GPIO_Init+0x280>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d026      	beq.n	800347e <HAL_GPIO_Init+0xae>
 8003430:	4a87      	ldr	r2, [pc, #540]	; (8003650 <HAL_GPIO_Init+0x280>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d806      	bhi.n	8003444 <HAL_GPIO_Init+0x74>
 8003436:	4a87      	ldr	r2, [pc, #540]	; (8003654 <HAL_GPIO_Init+0x284>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d020      	beq.n	800347e <HAL_GPIO_Init+0xae>
 800343c:	4a86      	ldr	r2, [pc, #536]	; (8003658 <HAL_GPIO_Init+0x288>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_GPIO_Init+0xae>
          break;
 8003442:	e036      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003444:	4a85      	ldr	r2, [pc, #532]	; (800365c <HAL_GPIO_Init+0x28c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d019      	beq.n	800347e <HAL_GPIO_Init+0xae>
 800344a:	4a85      	ldr	r2, [pc, #532]	; (8003660 <HAL_GPIO_Init+0x290>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d016      	beq.n	800347e <HAL_GPIO_Init+0xae>
 8003450:	4a84      	ldr	r2, [pc, #528]	; (8003664 <HAL_GPIO_Init+0x294>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0xae>
          break;
 8003456:	e02c      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	623b      	str	r3, [r7, #32]
          break;
 800345e:	e028      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	3304      	adds	r3, #4
 8003466:	623b      	str	r3, [r7, #32]
          break;
 8003468:	e023      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	3308      	adds	r3, #8
 8003470:	623b      	str	r3, [r7, #32]
          break;
 8003472:	e01e      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	330c      	adds	r3, #12
 800347a:	623b      	str	r3, [r7, #32]
          break;
 800347c:	e019      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003486:	2304      	movs	r3, #4
 8003488:	623b      	str	r3, [r7, #32]
          break;
 800348a:	e012      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003494:	2308      	movs	r3, #8
 8003496:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	611a      	str	r2, [r3, #16]
          break;
 800349e:	e008      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034a0:	2308      	movs	r3, #8
 80034a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	615a      	str	r2, [r3, #20]
          break;
 80034aa:	e002      	b.n	80034b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034ac:	2300      	movs	r3, #0
 80034ae:	623b      	str	r3, [r7, #32]
          break;
 80034b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2bff      	cmp	r3, #255	; 0xff
 80034b6:	d801      	bhi.n	80034bc <HAL_GPIO_Init+0xec>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	e001      	b.n	80034c0 <HAL_GPIO_Init+0xf0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2bff      	cmp	r3, #255	; 0xff
 80034c6:	d802      	bhi.n	80034ce <HAL_GPIO_Init+0xfe>
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_Init+0x104>
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	3b08      	subs	r3, #8
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	210f      	movs	r1, #15
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	401a      	ands	r2, r3
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	431a      	orrs	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8096 	beq.w	800362e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003502:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_GPIO_Init+0x298>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_GPIO_Init+0x298>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6193      	str	r3, [r2, #24]
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_GPIO_Init+0x298>)
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800351a:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_GPIO_Init+0x29c>)
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4b      	ldr	r2, [pc, #300]	; (8003670 <HAL_GPIO_Init+0x2a0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x19e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <HAL_GPIO_Init+0x2a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x19a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a49      	ldr	r2, [pc, #292]	; (8003678 <HAL_GPIO_Init+0x2a8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x196>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_GPIO_Init+0x2ac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x192>
 800355e:	2303      	movs	r3, #3
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x1a0>
 8003562:	2304      	movs	r3, #4
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x1a0>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x1a0>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x1a0>
 800356e:	2300      	movs	r3, #0
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003580:	493a      	ldr	r1, [pc, #232]	; (800366c <HAL_GPIO_Init+0x29c>)
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4938      	ldr	r1, [pc, #224]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
 80035a6:	e006      	b.n	80035b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	4933      	ldr	r1, [pc, #204]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035c2:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	492e      	ldr	r1, [pc, #184]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
 80035ce:	e006      	b.n	80035de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4929      	ldr	r1, [pc, #164]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035da:	4013      	ands	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	4924      	ldr	r1, [pc, #144]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
 80035f6:	e006      	b.n	8003606 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	43db      	mvns	r3, r3
 8003600:	491f      	ldr	r1, [pc, #124]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 8003602:	4013      	ands	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	491a      	ldr	r1, [pc, #104]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
 800361e:	e006      	b.n	800362e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	43db      	mvns	r3, r3
 8003628:	4915      	ldr	r1, [pc, #84]	; (8003680 <HAL_GPIO_Init+0x2b0>)
 800362a:	4013      	ands	r3, r2
 800362c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	3301      	adds	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	f47f aed0 	bne.w	80033e4 <HAL_GPIO_Init+0x14>
  }
}
 8003644:	bf00      	nop
 8003646:	372c      	adds	r7, #44	; 0x2c
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	10210000 	.word	0x10210000
 8003654:	10110000 	.word	0x10110000
 8003658:	10120000 	.word	0x10120000
 800365c:	10310000 	.word	0x10310000
 8003660:	10320000 	.word	0x10320000
 8003664:	10220000 	.word	0x10220000
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	40010800 	.word	0x40010800
 8003674:	40010c00 	.word	0x40010c00
 8003678:	40011000 	.word	0x40011000
 800367c:	40011400 	.word	0x40011400
 8003680:	40010400 	.word	0x40010400

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036a0:	e003      	b.n	80036aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	041a      	lsls	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd ff08 	bl	80014e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e10f      	b.n	8003916 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe fd94 	bl	8002238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003728:	f000 ffd4 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 800372c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a7b      	ldr	r2, [pc, #492]	; (8003920 <HAL_I2C_Init+0x23c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d807      	bhi.n	8003748 <HAL_I2C_Init+0x64>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a7a      	ldr	r2, [pc, #488]	; (8003924 <HAL_I2C_Init+0x240>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e006      	b.n	8003756 <HAL_I2C_Init+0x72>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a77      	ldr	r2, [pc, #476]	; (8003928 <HAL_I2C_Init+0x244>)
 800374c:	4293      	cmp	r3, r2
 800374e:	bf94      	ite	ls
 8003750:	2301      	movls	r3, #1
 8003752:	2300      	movhi	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0db      	b.n	8003916 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a72      	ldr	r2, [pc, #456]	; (800392c <HAL_I2C_Init+0x248>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a64      	ldr	r2, [pc, #400]	; (8003920 <HAL_I2C_Init+0x23c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <HAL_I2C_Init+0xb4>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	e009      	b.n	80037ac <HAL_I2C_Init+0xc8>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_I2C_Init+0x24c>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	3301      	adds	r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4956      	ldr	r1, [pc, #344]	; (8003920 <HAL_I2C_Init+0x23c>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d80d      	bhi.n	80037e8 <HAL_I2C_Init+0x104>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e59      	subs	r1, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	bf38      	it	cc
 80037e4:	2304      	movcc	r3, #4
 80037e6:	e04f      	b.n	8003888 <HAL_I2C_Init+0x1a4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d111      	bne.n	8003814 <HAL_I2C_Init+0x130>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e012      	b.n	800383a <HAL_I2C_Init+0x156>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e58      	subs	r0, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	0099      	lsls	r1, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	fbb0 f3f3 	udiv	r3, r0, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Init+0x15e>
 800383e:	2301      	movs	r3, #1
 8003840:	e022      	b.n	8003888 <HAL_I2C_Init+0x1a4>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10e      	bne.n	8003868 <HAL_I2C_Init+0x184>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1e58      	subs	r0, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	440b      	add	r3, r1
 8003858:	fbb0 f3f3 	udiv	r3, r0, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003866:	e00f      	b.n	8003888 <HAL_I2C_Init+0x1a4>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1e58      	subs	r0, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	0099      	lsls	r1, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	fbb0 f3f3 	udiv	r3, r0, r3
 800387e:	3301      	adds	r3, #1
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	6809      	ldr	r1, [r1, #0]
 800388c:	4313      	orrs	r3, r2
 800388e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6911      	ldr	r1, [r2, #16]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	000186a0 	.word	0x000186a0
 8003924:	001e847f 	.word	0x001e847f
 8003928:	003d08ff 	.word	0x003d08ff
 800392c:	431bde83 	.word	0x431bde83
 8003930:	10624dd3 	.word	0x10624dd3

08003934 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	461a      	mov	r2, r3
 8003940:	460b      	mov	r3, r1
 8003942:	817b      	strh	r3, [r7, #10]
 8003944:	4613      	mov	r3, r2
 8003946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7fe fe8c 	bl	8002664 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b20      	cmp	r3, #32
 8003958:	f040 80e0 	bne.w	8003b1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2319      	movs	r3, #25
 8003962:	2201      	movs	r2, #1
 8003964:	4970      	ldr	r1, [pc, #448]	; (8003b28 <HAL_I2C_Master_Transmit+0x1f4>)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f958 	bl	8003c1c <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	e0d3      	b.n	8003b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_I2C_Master_Transmit+0x50>
 8003980:	2302      	movs	r3, #2
 8003982:	e0cc      	b.n	8003b1e <HAL_I2C_Master_Transmit+0x1ea>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d007      	beq.n	80039aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2221      	movs	r2, #33	; 0x21
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2210      	movs	r2, #16
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	893a      	ldrh	r2, [r7, #8]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a50      	ldr	r2, [pc, #320]	; (8003b2c <HAL_I2C_Master_Transmit+0x1f8>)
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f89c 	bl	8003b30 <I2C_MasterRequestWrite>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e08d      	b.n	8003b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a18:	e066      	b.n	8003ae8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	6a39      	ldr	r1, [r7, #32]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f9d2 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d107      	bne.n	8003a42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06b      	b.n	8003b1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d11b      	bne.n	8003abc <HAL_I2C_Master_Transmit+0x188>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d017      	beq.n	8003abc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	6a39      	ldr	r1, [r7, #32]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f9c2 	bl	8003e4a <I2C_WaitOnBTFFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d107      	bne.n	8003ae4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e01a      	b.n	8003b1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d194      	bne.n	8003a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e000      	b.n	8003b1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	00100002 	.word	0x00100002
 8003b2c:	ffff0000 	.word	0xffff0000

08003b30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d006      	beq.n	8003b5a <I2C_MasterRequestWrite+0x2a>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d003      	beq.n	8003b5a <I2C_MasterRequestWrite+0x2a>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b58:	d108      	bne.n	8003b6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e00b      	b.n	8003b84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	2b12      	cmp	r3, #18
 8003b72:	d107      	bne.n	8003b84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f843 	bl	8003c1c <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e035      	b.n	8003c0c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba8:	d108      	bne.n	8003bbc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bb8:	611a      	str	r2, [r3, #16]
 8003bba:	e01b      	b.n	8003bf4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	11db      	asrs	r3, r3, #7
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f063 030f 	orn	r3, r3, #15
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	490e      	ldr	r1, [pc, #56]	; (8003c14 <I2C_MasterRequestWrite+0xe4>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f875 	bl	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e010      	b.n	8003c0c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4907      	ldr	r1, [pc, #28]	; (8003c18 <I2C_MasterRequestWrite+0xe8>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f865 	bl	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	00010008 	.word	0x00010008
 8003c18:	00010002 	.word	0x00010002

08003c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c2c:	e025      	b.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d021      	beq.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c36:	f7fe fd15 	bl	8002664 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d116      	bne.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e023      	b.n	8003cc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d10d      	bne.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	e00c      	b.n	8003cba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4013      	ands	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d0b6      	beq.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd8:	e051      	b.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce8:	d123      	bne.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e046      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d021      	beq.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fe fc93 	bl	8002664 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d116      	bne.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e020      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10c      	bne.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	2300      	moveq	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	e00b      	b.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d18d      	bne.n	8003cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd4:	e02d      	b.n	8003e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f878 	bl	8003ecc <I2C_IsAcknowledgeFailed>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e02d      	b.n	8003e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d021      	beq.n	8003e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fe fc39 	bl	8002664 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e007      	b.n	8003e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b80      	cmp	r3, #128	; 0x80
 8003e3e:	d1ca      	bne.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e56:	e02d      	b.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f837 	bl	8003ecc <I2C_IsAcknowledgeFailed>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e02d      	b.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d021      	beq.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e70:	f7fe fbf8 	bl	8002664 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d116      	bne.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e007      	b.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d1ca      	bne.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d11b      	bne.n	8003f1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e26c      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f48:	4b92      	ldr	r3, [pc, #584]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f54:	4b8f      	ldr	r3, [pc, #572]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d112      	bne.n	8003f86 <HAL_RCC_OscConfig+0x5e>
 8003f60:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6e:	4b89      	ldr	r3, [pc, #548]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d06c      	beq.n	8004054 <HAL_RCC_OscConfig+0x12c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d168      	bne.n	8004054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e246      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x76>
 8003f90:	4b80      	ldr	r3, [pc, #512]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7f      	ldr	r2, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0xd4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x98>
 8003fa6:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7a      	ldr	r2, [pc, #488]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b78      	ldr	r3, [pc, #480]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a77      	ldr	r2, [pc, #476]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xd4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xbc>
 8003fca:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xd4>
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6a      	ldr	r2, [pc, #424]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b68      	ldr	r3, [pc, #416]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a67      	ldr	r2, [pc, #412]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe fb2e 	bl	8002664 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe fb2a 	bl	8002664 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1fa      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b5d      	ldr	r3, [pc, #372]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xe4>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe fb1a 	bl	8002664 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe fb16 	bl	8002664 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1e6      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x10c>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004062:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800406e:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x18c>
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x176>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1ba      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4939      	ldr	r1, [pc, #228]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x270>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe facf 	bl	8002664 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fe facb 	bl	8002664 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e19b      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4927      	ldr	r1, [pc, #156]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_RCC_OscConfig+0x270>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe faae 	bl	8002664 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410c:	f7fe faaa 	bl	8002664 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e17a      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03a      	beq.n	80041ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d019      	beq.n	8004172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fe fa8e 	bl	8002664 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fe fa8a 	bl	8002664 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e15a      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800416a:	2001      	movs	r0, #1
 800416c:	f000 faf6 	bl	800475c <RCC_Delay>
 8004170:	e01c      	b.n	80041ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004178:	f7fe fa74 	bl	8002664 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417e:	e00f      	b.n	80041a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe fa70 	bl	8002664 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d908      	bls.n	80041a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e140      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	42420000 	.word	0x42420000
 800419c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b9e      	ldr	r3, [pc, #632]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e9      	bne.n	8004180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80a6 	beq.w	8004306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b97      	ldr	r3, [pc, #604]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10d      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	4b94      	ldr	r3, [pc, #592]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4a93      	ldr	r2, [pc, #588]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	61d3      	str	r3, [r2, #28]
 80041d6:	4b91      	ldr	r3, [pc, #580]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b8e      	ldr	r3, [pc, #568]	; (8004420 <HAL_RCC_OscConfig+0x4f8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b8b      	ldr	r3, [pc, #556]	; (8004420 <HAL_RCC_OscConfig+0x4f8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a8a      	ldr	r2, [pc, #552]	; (8004420 <HAL_RCC_OscConfig+0x4f8>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fe fa31 	bl	8002664 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fe fa2d 	bl	8002664 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e0fd      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b81      	ldr	r3, [pc, #516]	; (8004420 <HAL_RCC_OscConfig+0x4f8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x312>
 800422c:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4a7a      	ldr	r2, [pc, #488]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6213      	str	r3, [r2, #32]
 8004238:	e02d      	b.n	8004296 <HAL_RCC_OscConfig+0x36e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x334>
 8004242:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4a75      	ldr	r2, [pc, #468]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6213      	str	r3, [r2, #32]
 800424e:	4b73      	ldr	r3, [pc, #460]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a72      	ldr	r2, [pc, #456]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	6213      	str	r3, [r2, #32]
 800425a:	e01c      	b.n	8004296 <HAL_RCC_OscConfig+0x36e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x356>
 8004264:	4b6d      	ldr	r3, [pc, #436]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a6c      	ldr	r2, [pc, #432]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4a69      	ldr	r2, [pc, #420]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6213      	str	r3, [r2, #32]
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0x36e>
 800427e:	4b67      	ldr	r3, [pc, #412]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4a66      	ldr	r2, [pc, #408]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6213      	str	r3, [r2, #32]
 800428a:	4b64      	ldr	r3, [pc, #400]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	4a63      	ldr	r2, [pc, #396]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d015      	beq.n	80042ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429e:	f7fe f9e1 	bl	8002664 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	e00a      	b.n	80042bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fe f9dd 	bl	8002664 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0ab      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ee      	beq.n	80042a6 <HAL_RCC_OscConfig+0x37e>
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe f9cb 	bl	8002664 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe f9c7 	bl	8002664 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e095      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	4b4c      	ldr	r3, [pc, #304]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ee      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4a47      	ldr	r2, [pc, #284]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8081 	beq.w	8004412 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004310:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d061      	beq.n	80043e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d146      	bne.n	80043b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <HAL_RCC_OscConfig+0x4fc>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fe f99b 	bl	8002664 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fe f997 	bl	8002664 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e067      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004344:	4b35      	ldr	r3, [pc, #212]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d108      	bne.n	800436c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	492d      	ldr	r1, [pc, #180]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436c:	4b2b      	ldr	r3, [pc, #172]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a19      	ldr	r1, [r3, #32]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	430b      	orrs	r3, r1
 800437e:	4927      	ldr	r1, [pc, #156]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_OscConfig+0x4fc>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe f96b 	bl	8002664 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe f967 	bl	8002664 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e037      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x46a>
 80043b0:	e02f      	b.n	8004412 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <HAL_RCC_OscConfig+0x4fc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe f954 	bl	8002664 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe f950 	bl	8002664 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e020      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x498>
 80043de:	e018      	b.n	8004412 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e013      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_OscConfig+0x4f4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	42420060 	.word	0x42420060

08004428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0d0      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d910      	bls.n	800446c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b67      	ldr	r3, [pc, #412]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 0207 	bic.w	r2, r3, #7
 8004452:	4965      	ldr	r1, [pc, #404]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b8      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800448e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d040      	beq.n	8004548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d115      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07f      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e073      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06b      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004506:	4b39      	ldr	r3, [pc, #228]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4936      	ldr	r1, [pc, #216]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004518:	f7fe f8a4 	bl	8002664 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	e00a      	b.n	8004536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004520:	f7fe f8a0 	bl	8002664 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e053      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 020c 	and.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	429a      	cmp	r2, r3
 8004546:	d1eb      	bne.n	8004520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004548:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d210      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 0207 	bic.w	r2, r3, #7
 800455e:	4922      	ldr	r1, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e032      	b.n	80045de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490e      	ldr	r1, [pc, #56]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045b6:	f000 f821 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80045ba:	4601      	mov	r1, r0
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	5cd3      	ldrb	r3, [r2, r3]
 80045ca:	fa21 f303 	lsr.w	r3, r1, r3
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1cc>)
 80045d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1d0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd fefe 	bl	80023d8 <HAL_InitTick>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40022000 	.word	0x40022000
 80045ec:	40021000 	.word	0x40021000
 80045f0:	080092dc 	.word	0x080092dc
 80045f4:	20000000 	.word	0x20000000
 80045f8:	20000004 	.word	0x20000004

080045fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	b490      	push	{r4, r7}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004604:	1d3c      	adds	r4, r7, #4
 8004606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b04      	cmp	r3, #4
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x40>
 8004636:	2b08      	cmp	r3, #8
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x46>
 800463a:	e02d      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800463e:	623b      	str	r3, [r7, #32]
      break;
 8004640:	e02d      	b.n	800469e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	0c9b      	lsrs	r3, r3, #18
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800464e:	4413      	add	r3, r2
 8004650:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004654:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	0c5b      	lsrs	r3, r3, #17
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800466e:	4413      	add	r3, r2
 8004670:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004674:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800467a:	fb02 f203 	mul.w	r2, r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	e004      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	623b      	str	r3, [r7, #32]
      break;
 8004696:	e002      	b.n	800469e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800469a:	623b      	str	r3, [r7, #32]
      break;
 800469c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469e:	6a3b      	ldr	r3, [r7, #32]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3728      	adds	r7, #40	; 0x28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc90      	pop	{r4, r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	080092c0 	.word	0x080092c0
 80046b0:	080092d0 	.word	0x080092d0
 80046b4:	40021000 	.word	0x40021000
 80046b8:	007a1200 	.word	0x007a1200
 80046bc:	003d0900 	.word	0x003d0900

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b02      	ldr	r3, [pc, #8]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	20000000 	.word	0x20000000

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046d8:	f7ff fff2 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046dc:	4601      	mov	r1, r0
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4a03      	ldr	r2, [pc, #12]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ea:	5cd3      	ldrb	r3, [r2, r3]
 80046ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000
 80046f8:	080092ec 	.word	0x080092ec

080046fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	220f      	movs	r2, #15
 800470a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_RCC_GetClockConfig+0x58>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0203 	and.w	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCC_GetClockConfig+0x58>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_GetClockConfig+0x58>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCC_GetClockConfig+0x58>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_GetClockConfig+0x5c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0207 	and.w	r2, r3, #7
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	40021000 	.word	0x40021000
 8004758:	40022000 	.word	0x40022000

0800475c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <RCC_Delay+0x34>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <RCC_Delay+0x38>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0a5b      	lsrs	r3, r3, #9
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004778:	bf00      	nop
  }
  while (Delay --);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e5a      	subs	r2, r3, #1
 800477e:	60fa      	str	r2, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f9      	bne.n	8004778 <RCC_Delay+0x1c>
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000000 	.word	0x20000000
 8004794:	10624dd3 	.word	0x10624dd3

08004798 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d07d      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b8:	4b4f      	ldr	r3, [pc, #316]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	4b4c      	ldr	r3, [pc, #304]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4a4b      	ldr	r2, [pc, #300]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ce:	61d3      	str	r3, [r2, #28]
 80047d0:	4b49      	ldr	r3, [pc, #292]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b46      	ldr	r3, [pc, #280]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d118      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ec:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a42      	ldr	r2, [pc, #264]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f8:	f7fd ff34 	bl	8002664 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fe:	e008      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004800:	f7fd ff30 	bl	8002664 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e06d      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	4b3a      	ldr	r3, [pc, #232]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d02e      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d027      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800483c:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004846:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800484c:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004852:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fd feff 	bl	8002664 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd fefb 	bl	8002664 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e036      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ee      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4917      	ldr	r1, [pc, #92]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	4313      	orrs	r3, r2
 800489c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a4:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	490b      	ldr	r1, [pc, #44]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40007000 	.word	0x40007000
 8004900:	42420440 	.word	0x42420440

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e01d      	b.n	8004952 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f815 	bl	800495a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fbb6 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b06      	cmp	r3, #6
 8004994:	d007      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01d      	b.n	8004a00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd fc6d 	bl	80022b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 fb5f 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2201      	movs	r2, #1
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fd34 	bl	8005488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <HAL_TIM_PWM_Start+0x60>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40012c00 	.word	0x40012c00

08004a6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fd02 	bl	8005488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_TIM_PWM_Stop+0x94>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d117      	bne.n	8004abe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10f      	bne.n	8004abe <HAL_TIM_PWM_Stop+0x52>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_PWM_Stop+0x52>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <HAL_TIM_PWM_Stop+0x82>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_PWM_Stop+0x82>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40012c00 	.word	0x40012c00

08004b04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e07f      	b.n	8004c18 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fd fbe1 	bl	80022f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b48:	f023 0307 	bic.w	r3, r3, #7
 8004b4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 faab 	bl	80050b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	4313      	orrs	r3, r2
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ba4:	f023 030c 	bic.w	r3, r3, #12
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	011a      	lsls	r2, r3, #4
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	031b      	lsls	r3, r3, #12
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_TIM_Encoder_Start_IT+0x16>
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d010      	beq.n	8004c56 <HAL_TIM_Encoder_Start_IT+0x36>
 8004c34:	e01f      	b.n	8004c76 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fc22 	bl	8005488 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0202 	orr.w	r2, r2, #2
 8004c52:	60da      	str	r2, [r3, #12]
      break;
 8004c54:	e02e      	b.n	8004cb4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	2104      	movs	r1, #4
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fc12 	bl	8005488 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0204 	orr.w	r2, r2, #4
 8004c72:	60da      	str	r2, [r3, #12]
      break;
 8004c74:	e01e      	b.n	8004cb4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fc02 	bl	8005488 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fbfb 	bl	8005488 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0202 	orr.w	r2, r2, #2
 8004ca0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0204 	orr.w	r2, r2, #4
 8004cb0:	60da      	str	r2, [r3, #12]
      break;
 8004cb2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d122      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d11b      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f06f 0202 	mvn.w	r2, #2
 8004cfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f9b4 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004d16:	e005      	b.n	8004d24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f9a7 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9b6 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d122      	bne.n	8004d7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d11b      	bne.n	8004d7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0204 	mvn.w	r2, #4
 8004d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f98a 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004d6a:	e005      	b.n	8004d78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f97d 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f98c 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d122      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d11b      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0208 	mvn.w	r2, #8
 8004da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2204      	movs	r2, #4
 8004da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f960 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004dbe:	e005      	b.n	8004dcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f953 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f962 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d122      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d11b      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0210 	mvn.w	r2, #16
 8004df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f936 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004e12:	e005      	b.n	8004e20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f929 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f938 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10e      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0201 	mvn.w	r2, #1
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fd f8ad 	bl	8001fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d10e      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d107      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fbc7 	bl	800560c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d10e      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8fc 	bl	80050a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0220 	mvn.w	r2, #32
 8004ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fb92 	bl	80055fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0b4      	b.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	f200 809f 	bhi.w	8005050 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f4d 	.word	0x08004f4d
 8004f1c:	08005051 	.word	0x08005051
 8004f20:	08005051 	.word	0x08005051
 8004f24:	08005051 	.word	0x08005051
 8004f28:	08004f8d 	.word	0x08004f8d
 8004f2c:	08005051 	.word	0x08005051
 8004f30:	08005051 	.word	0x08005051
 8004f34:	08005051 	.word	0x08005051
 8004f38:	08004fcf 	.word	0x08004fcf
 8004f3c:	08005051 	.word	0x08005051
 8004f40:	08005051 	.word	0x08005051
 8004f44:	08005051 	.word	0x08005051
 8004f48:	0800500f 	.word	0x0800500f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f910 	bl	8005178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0208 	orr.w	r2, r2, #8
 8004f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0204 	bic.w	r2, r2, #4
 8004f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6999      	ldr	r1, [r3, #24]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	619a      	str	r2, [r3, #24]
      break;
 8004f8a:	e062      	b.n	8005052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f956 	bl	8005244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	021a      	lsls	r2, r3, #8
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	619a      	str	r2, [r3, #24]
      break;
 8004fcc:	e041      	b.n	8005052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f99f 	bl	8005318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0208 	orr.w	r2, r2, #8
 8004fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0204 	bic.w	r2, r2, #4
 8004ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69d9      	ldr	r1, [r3, #28]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	61da      	str	r2, [r3, #28]
      break;
 800500c:	e021      	b.n	8005052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f9e9 	bl	80053ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69d9      	ldr	r1, [r3, #28]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	021a      	lsls	r2, r3, #8
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	61da      	str	r2, [r3, #28]
      break;
 800504e:	e000      	b.n	8005052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005050:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a29      	ldr	r2, [pc, #164]	; (800516c <TIM_Base_SetConfig+0xb8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_Base_SetConfig+0x30>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d007      	beq.n	80050e4 <TIM_Base_SetConfig+0x30>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a26      	ldr	r2, [pc, #152]	; (8005170 <TIM_Base_SetConfig+0xbc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0x30>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a25      	ldr	r2, [pc, #148]	; (8005174 <TIM_Base_SetConfig+0xc0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d108      	bne.n	80050f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <TIM_Base_SetConfig+0xb8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x62>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x62>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <TIM_Base_SetConfig+0xbc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x62>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <TIM_Base_SetConfig+0xc0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <TIM_Base_SetConfig+0xb8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	615a      	str	r2, [r3, #20]
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800

08005178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 0302 	bic.w	r3, r3, #2
 80051c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <TIM_OC1_SetConfig+0xc8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10c      	bne.n	80051ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0308 	bic.w	r3, r3, #8
 80051da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 0304 	bic.w	r3, r3, #4
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <TIM_OC1_SetConfig+0xc8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d111      	bne.n	800521a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00

08005244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0210 	bic.w	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0320 	bic.w	r3, r3, #32
 800528e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_OC2_SetConfig+0xd0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a14      	ldr	r2, [pc, #80]	; (8005314 <TIM_OC2_SetConfig+0xd0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d113      	bne.n	80052f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	40012c00 	.word	0x40012c00

08005318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <TIM_OC3_SetConfig+0xd0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10d      	bne.n	8005392 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <TIM_OC3_SetConfig+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d113      	bne.n	80053c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00

080053ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0f      	ldr	r2, [pc, #60]	; (8005484 <TIM_OC4_SetConfig+0x98>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d109      	bne.n	8005460 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00

08005488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2201      	movs	r2, #1
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e032      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005520:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4313      	orrs	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005570:	2302      	movs	r3, #2
 8005572:	e03d      	b.n	80055f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	4603      	mov	r3, r0
 8005626:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800562c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005630:	2b84      	cmp	r3, #132	; 0x84
 8005632:	d005      	beq.n	8005640 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005634:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	3303      	adds	r3, #3
 800563e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005640:	68fb      	ldr	r3, [r7, #12]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005652:	f3ef 8305 	mrs	r3, IPSR
 8005656:	607b      	str	r3, [r7, #4]
  return(result);
 8005658:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005672:	f000 fdcd 	bl	8006210 <vTaskStartScheduler>
  
  return osOK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}

0800567c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005680:	f7ff ffe4 	bl	800564c <inHandlerMode>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800568a:	f000 fed7 	bl	800643c <xTaskGetTickCountFromISR>
 800568e:	4603      	mov	r3, r0
 8005690:	e002      	b.n	8005698 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005692:	f000 fec5 	bl	8006420 <xTaskGetTickCount>
 8005696:	4603      	mov	r3, r0
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}

0800569c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800569c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d020      	beq.n	80056f0 <osThreadCreate+0x54>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01c      	beq.n	80056f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685c      	ldr	r4, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691e      	ldr	r6, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ffa8 	bl	800561e <makeFreeRtosPriority>
 80056ce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056d8:	9202      	str	r2, [sp, #8]
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	9100      	str	r1, [sp, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	4632      	mov	r2, r6
 80056e2:	4629      	mov	r1, r5
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 f938 	bl	800595a <xTaskCreateStatic>
 80056ea:	4603      	mov	r3, r0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e01c      	b.n	800572a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685c      	ldr	r4, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056fc:	b29e      	uxth	r6, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff8a 	bl	800561e <makeFreeRtosPriority>
 800570a:	4602      	mov	r2, r0
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	4632      	mov	r2, r6
 8005718:	4629      	mov	r1, r5
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f976 	bl	8005a0c <xTaskCreate>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d001      	beq.n	800572a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800572a:	68fb      	ldr	r3, [r7, #12]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005734 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fa93 	bl	8005c68 <vTaskDelete>
  return osOK;
 8005742:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <osDelay+0x16>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	e000      	b.n	8005764 <osDelay+0x18>
 8005762:	2301      	movs	r3, #1
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fb87 	bl	8005e78 <vTaskDelay>
  
  return osOK;
 800576a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fbaf 	bl	8005ee0 <vTaskSuspend>
  
  return osOK;
 8005782:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8005794:	f7ff ff5a 	bl	800564c <inHandlerMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fcc6 	bl	8006130 <xTaskResumeFromISR>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10b      	bne.n	80057c2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80057aa:	4b08      	ldr	r3, [pc, #32]	; (80057cc <osThreadResume+0x40>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	e002      	b.n	80057c2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fc5b 	bl	8006078 <vTaskResume>
  }
  return osOK;
 80057c2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <osDelayUntil+0x18>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	e000      	b.n	80057ea <osDelayUntil+0x1a>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fac9 	bl	8005d84 <vTaskDelayUntil>
  
  return osOK;
 80057f2:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f103 0208 	add.w	r2, r3, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f103 0208 	add.w	r2, r3, #8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f103 0208 	add.w	r2, r3, #8
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d103      	bne.n	80058b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e00c      	b.n	80058d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3308      	adds	r3, #8
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e002      	b.n	80058c6 <vListInsert+0x2e>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d2f6      	bcs.n	80058c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6892      	ldr	r2, [r2, #8]
 800591e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6852      	ldr	r2, [r2, #4]
 8005928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d103      	bne.n	800593c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1e5a      	subs	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08e      	sub	sp, #56	; 0x38
 800595e:	af04      	add	r7, sp, #16
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	e7fe      	b.n	8005980 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <xTaskCreateStatic+0x42>
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	e7fe      	b.n	800599a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800599c:	2354      	movs	r3, #84	; 0x54
 800599e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b54      	cmp	r3, #84	; 0x54
 80059a4:	d009      	beq.n	80059ba <xTaskCreateStatic+0x60>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e7fe      	b.n	80059b8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <xTaskCreateStatic+0xa4>
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01b      	beq.n	80059fe <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059d8:	2300      	movs	r3, #0
 80059da:	9303      	str	r3, [sp, #12]
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	f107 0314 	add.w	r3, r7, #20
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f850 	bl	8005a96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059f8:	f000 f8cc 	bl	8005b94 <prvAddNewTaskToReadyList>
 80059fc:	e001      	b.n	8005a02 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a02:	697b      	ldr	r3, [r7, #20]
	}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3728      	adds	r7, #40	; 0x28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	; 0x30
 8005a10:	af04      	add	r7, sp, #16
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f94f 	bl	8006cc4 <pvPortMalloc>
 8005a26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00e      	beq.n	8005a4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a2e:	2054      	movs	r0, #84	; 0x54
 8005a30:	f001 f948 	bl	8006cc4 <pvPortMalloc>
 8005a34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
 8005a42:	e005      	b.n	8005a50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a44:	6978      	ldr	r0, [r7, #20]
 8005a46:	f001 f9ff 	bl	8006e48 <vPortFree>
 8005a4a:	e001      	b.n	8005a50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d017      	beq.n	8005a86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a5e:	88fa      	ldrh	r2, [r7, #6]
 8005a60:	2300      	movs	r3, #0
 8005a62:	9303      	str	r3, [sp, #12]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	9302      	str	r3, [sp, #8]
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f80e 	bl	8005a96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a7a:	69f8      	ldr	r0, [r7, #28]
 8005a7c:	f000 f88a 	bl	8005b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	e002      	b.n	8005a8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
	}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b088      	sub	sp, #32
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f023 0307 	bic.w	r3, r3, #7
 8005abc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <prvInitialiseNewTask+0x46>
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e7fe      	b.n	8005ada <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	e012      	b.n	8005b08 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	7819      	ldrb	r1, [r3, #0]
 8005aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	3334      	adds	r3, #52	; 0x34
 8005af2:	460a      	mov	r2, r1
 8005af4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	d9e9      	bls.n	8005ae2 <prvInitialiseNewTask+0x4c>
 8005b0e:	e000      	b.n	8005b12 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005b10:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d901      	bls.n	8005b24 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b20:	2306      	movs	r3, #6
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	2200      	movs	r2, #0
 8005b34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fe7d 	bl	800583a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	3318      	adds	r3, #24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fe78 	bl	800583a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	f1c3 0207 	rsb	r2, r3, #7
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	2200      	movs	r2, #0
 8005b64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	69b8      	ldr	r0, [r7, #24]
 8005b74:	f000 fec6 	bl	8006904 <pxPortInitialiseStack>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b9c:	f000 ff9c 	bl	8006ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ba0:	4b2a      	ldr	r3, [pc, #168]	; (8005c4c <prvAddNewTaskToReadyList+0xb8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <prvAddNewTaskToReadyList+0xb8>)
 8005ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005baa:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <prvAddNewTaskToReadyList+0xbc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bb2:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <prvAddNewTaskToReadyList+0xbc>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bb8:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <prvAddNewTaskToReadyList+0xb8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d110      	bne.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bc0:	f000 fd7c 	bl	80066bc <prvInitialiseTaskLists>
 8005bc4:	e00d      	b.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bc6:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <prvAddNewTaskToReadyList+0xc0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bce:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <prvAddNewTaskToReadyList+0xbc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d802      	bhi.n	8005be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <prvAddNewTaskToReadyList+0xbc>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005be2:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <prvAddNewTaskToReadyList+0xc4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <prvAddNewTaskToReadyList+0xc4>)
 8005bea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <prvAddNewTaskToReadyList+0xc8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <prvAddNewTaskToReadyList+0xc8>)
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <prvAddNewTaskToReadyList+0xcc>)
 8005c0c:	441a      	add	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7ff fe1c 	bl	8005852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c1a:	f000 ff8b 	bl	8006b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <prvAddNewTaskToReadyList+0xc0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <prvAddNewTaskToReadyList+0xbc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d207      	bcs.n	8005c44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <prvAddNewTaskToReadyList+0xd0>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000558 	.word	0x20000558
 8005c50:	20000458 	.word	0x20000458
 8005c54:	20000564 	.word	0x20000564
 8005c58:	20000574 	.word	0x20000574
 8005c5c:	20000560 	.word	0x20000560
 8005c60:	2000045c 	.word	0x2000045c
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005c70:	f000 ff32 	bl	8006ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <vTaskDelete+0x18>
 8005c7a:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <vTaskDelete+0xf4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	e000      	b.n	8005c82 <vTaskDelete+0x1a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fe3d 	bl	8005908 <uxListRemove>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d115      	bne.n	8005cc0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	4931      	ldr	r1, [pc, #196]	; (8005d60 <vTaskDelete+0xf8>)
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <vTaskDelete+0x58>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	2201      	movs	r2, #1
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43da      	mvns	r2, r3
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <vTaskDelete+0xfc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <vTaskDelete+0xfc>)
 8005cbe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fe1b 	bl	8005908 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005cd2:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <vTaskDelete+0x100>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	4a23      	ldr	r2, [pc, #140]	; (8005d68 <vTaskDelete+0x100>)
 8005cda:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <vTaskDelete+0xf4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d10b      	bne.n	8005cfe <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	481f      	ldr	r0, [pc, #124]	; (8005d6c <vTaskDelete+0x104>)
 8005cee:	f7ff fdb0 	bl	8005852 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005cf2:	4b1f      	ldr	r3, [pc, #124]	; (8005d70 <vTaskDelete+0x108>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <vTaskDelete+0x108>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e009      	b.n	8005d12 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <vTaskDelete+0x10c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <vTaskDelete+0x10c>)
 8005d06:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fd43 	bl	8006794 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005d0e:	f000 fd6f 	bl	80067f0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005d12:	f000 ff0f 	bl	8006b34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <vTaskDelete+0x110>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01a      	beq.n	8005d54 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <vTaskDelete+0xf4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d115      	bne.n	8005d54 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <vTaskDelete+0x114>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <vTaskDelete+0xdc>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	e7fe      	b.n	8005d42 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <vTaskDelete+0x118>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000458 	.word	0x20000458
 8005d60:	2000045c 	.word	0x2000045c
 8005d64:	20000560 	.word	0x20000560
 8005d68:	20000574 	.word	0x20000574
 8005d6c:	2000052c 	.word	0x2000052c
 8005d70:	20000540 	.word	0x20000540
 8005d74:	20000558 	.word	0x20000558
 8005d78:	20000564 	.word	0x20000564
 8005d7c:	20000580 	.word	0x20000580
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <vTaskDelayUntil+0x28>
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e7fe      	b.n	8005daa <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <vTaskDelayUntil+0x42>
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e7fe      	b.n	8005dc4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <vTaskDelayUntil+0xe8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <vTaskDelayUntil+0x5e>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e7fe      	b.n	8005de0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005de2:	f000 fa73 	bl	80062cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005de6:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <vTaskDelayUntil+0xec>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	4413      	add	r3, r2
 8005df4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d20b      	bcs.n	8005e18 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d211      	bcs.n	8005e2e <vTaskDelayUntil+0xaa>
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d90d      	bls.n	8005e2e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	e00a      	b.n	8005e2e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d303      	bcc.n	8005e2a <vTaskDelayUntil+0xa6>
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d901      	bls.n	8005e2e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d006      	beq.n	8005e48 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fcf8 	bl	8006838 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005e48:	f000 fa4e 	bl	80062e8 <xTaskResumeAll>
 8005e4c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d107      	bne.n	8005e64 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <vTaskDelayUntil+0xf0>)
 8005e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e64:	bf00      	nop
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000580 	.word	0x20000580
 8005e70:	2000055c 	.word	0x2000055c
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <vTaskDelay+0x60>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <vTaskDelay+0x2e>
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	e7fe      	b.n	8005ea4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ea6:	f000 fa11 	bl	80062cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fcc3 	bl	8006838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eb2:	f000 fa19 	bl	80062e8 <xTaskResumeAll>
 8005eb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d107      	bne.n	8005ece <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <vTaskDelay+0x64>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000580 	.word	0x20000580
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005ee8:	f000 fdf6 	bl	8006ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <vTaskSuspend+0x18>
 8005ef2:	4b3c      	ldr	r3, [pc, #240]	; (8005fe4 <vTaskSuspend+0x104>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	e000      	b.n	8005efa <vTaskSuspend+0x1a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fd01 	bl	8005908 <uxListRemove>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d115      	bne.n	8005f38 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	4935      	ldr	r1, [pc, #212]	; (8005fe8 <vTaskSuspend+0x108>)
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vTaskSuspend+0x58>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	2201      	movs	r2, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43da      	mvns	r2, r3
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <vTaskSuspend+0x10c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4013      	ands	r3, r2
 8005f34:	4a2d      	ldr	r2, [pc, #180]	; (8005fec <vTaskSuspend+0x10c>)
 8005f36:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3318      	adds	r3, #24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fcdf 	bl	8005908 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4827      	ldr	r0, [pc, #156]	; (8005ff0 <vTaskSuspend+0x110>)
 8005f52:	f7ff fc7e 	bl	8005852 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d103      	bne.n	8005f6a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005f6a:	f000 fde3 	bl	8006b34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005f6e:	4b21      	ldr	r3, [pc, #132]	; (8005ff4 <vTaskSuspend+0x114>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005f76:	f000 fdaf 	bl	8006ad8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005f7a:	f000 fc39 	bl	80067f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005f7e:	f000 fdd9 	bl	8006b34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005f82:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <vTaskSuspend+0x104>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d126      	bne.n	8005fda <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8005f8c:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <vTaskSuspend+0x114>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <vTaskSuspend+0x118>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <vTaskSuspend+0xd0>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	e7fe      	b.n	8005fae <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8005fb0:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <vTaskSuspend+0x11c>)
 8005fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fc0:	e00b      	b.n	8005fda <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <vTaskSuspend+0x110>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <vTaskSuspend+0x120>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d103      	bne.n	8005fd6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <vTaskSuspend+0x104>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
	}
 8005fd4:	e001      	b.n	8005fda <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8005fd6:	f000 faff 	bl	80065d8 <vTaskSwitchContext>
	}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000458 	.word	0x20000458
 8005fe8:	2000045c 	.word	0x2000045c
 8005fec:	20000560 	.word	0x20000560
 8005ff0:	20000544 	.word	0x20000544
 8005ff4:	20000564 	.word	0x20000564
 8005ff8:	20000580 	.word	0x20000580
 8005ffc:	e000ed04 	.word	0xe000ed04
 8006000:	20000558 	.word	0x20000558

08006004 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <prvTaskIsTaskSuspended+0x2a>
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e7fe      	b.n	800602c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	4a0f      	ldr	r2, [pc, #60]	; (8006070 <prvTaskIsTaskSuspended+0x6c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <prvTaskIsTaskSuspended+0x38>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <prvTaskIsTaskSuspended+0x3a>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <prvTaskIsTaskSuspended+0x70>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00a      	beq.n	8006062 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <prvTaskIsTaskSuspended+0x54>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <prvTaskIsTaskSuspended+0x56>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006062:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000544 	.word	0x20000544
 8006074:	20000518 	.word	0x20000518

08006078 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <vTaskResume+0x26>
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	e7fe      	b.n	800609c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d039      	beq.n	8006118 <vTaskResume+0xa0>
 80060a4:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <vTaskResume+0xa8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d034      	beq.n	8006118 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80060ae:	f000 fd13 	bl	8006ad8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ffa6 	bl	8006004 <prvTaskIsTaskSuspended>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d02a      	beq.n	8006114 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fc20 	bl	8005908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	2201      	movs	r2, #1
 80060ce:	409a      	lsls	r2, r3
 80060d0:	4b14      	ldr	r3, [pc, #80]	; (8006124 <vTaskResume+0xac>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <vTaskResume+0xac>)
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4a10      	ldr	r2, [pc, #64]	; (8006128 <vTaskResume+0xb0>)
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7ff fbae 	bl	8005852 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <vTaskResume+0xa8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d307      	bcc.n	8006114 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <vTaskResume+0xb4>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006114:	f000 fd0e 	bl	8006b34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000458 	.word	0x20000458
 8006124:	20000560 	.word	0x20000560
 8006128:	2000045c 	.word	0x2000045c
 800612c:	e000ed04 	.word	0xe000ed04

08006130 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006138:	2300      	movs	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <xTaskResumeFromISR+0x2a>
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	e7fe      	b.n	8006158 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800615a:	f000 fd77 	bl	8006c4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800615e:	f3ef 8211 	mrs	r2, BASEPRI
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	617a      	str	r2, [r7, #20]
 8006174:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006176:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006178:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800617a:	6a38      	ldr	r0, [r7, #32]
 800617c:	f7ff ff42 	bl	8006004 <prvTaskIsTaskSuspended>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d02f      	beq.n	80061e6 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <xTaskResumeFromISR+0xcc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d125      	bne.n	80061da <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <xTaskResumeFromISR+0xd0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	429a      	cmp	r2, r3
 800619a:	d301      	bcc.n	80061a0 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fbaf 	bl	8005908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	2201      	movs	r2, #1
 80061b0:	409a      	lsls	r2, r3
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <xTaskResumeFromISR+0xd4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	4a12      	ldr	r2, [pc, #72]	; (8006204 <xTaskResumeFromISR+0xd4>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4a0f      	ldr	r2, [pc, #60]	; (8006208 <xTaskResumeFromISR+0xd8>)
 80061ca:	441a      	add	r2, r3
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f7ff fb3d 	bl	8005852 <vListInsertEnd>
 80061d8:	e005      	b.n	80061e6 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	3318      	adds	r3, #24
 80061de:	4619      	mov	r1, r3
 80061e0:	480a      	ldr	r0, [pc, #40]	; (800620c <xTaskResumeFromISR+0xdc>)
 80061e2:	f7ff fb36 	bl	8005852 <vListInsertEnd>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000580 	.word	0x20000580
 8006200:	20000458 	.word	0x20000458
 8006204:	20000560 	.word	0x20000560
 8006208:	2000045c 	.word	0x2000045c
 800620c:	20000518 	.word	0x20000518

08006210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	; 0x28
 8006214:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800621e:	463a      	mov	r2, r7
 8006220:	1d39      	adds	r1, r7, #4
 8006222:	f107 0308 	add.w	r3, r7, #8
 8006226:	4618      	mov	r0, r3
 8006228:	f7fb f81e 	bl	8001268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	9202      	str	r2, [sp, #8]
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	2300      	movs	r3, #0
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	460a      	mov	r2, r1
 800623e:	491d      	ldr	r1, [pc, #116]	; (80062b4 <vTaskStartScheduler+0xa4>)
 8006240:	481d      	ldr	r0, [pc, #116]	; (80062b8 <vTaskStartScheduler+0xa8>)
 8006242:	f7ff fb8a 	bl	800595a <xTaskCreateStatic>
 8006246:	4602      	mov	r2, r0
 8006248:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <vTaskStartScheduler+0xac>)
 800624a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <vTaskStartScheduler+0xac>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e001      	b.n	800625e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d115      	bne.n	8006290 <vTaskStartScheduler+0x80>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006276:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <vTaskStartScheduler+0xb0>)
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <vTaskStartScheduler+0xb4>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006284:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <vTaskStartScheduler+0xb8>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800628a:	f000 fbb5 	bl	80069f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800628e:	e00d      	b.n	80062ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d109      	bne.n	80062ac <vTaskStartScheduler+0x9c>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	e7fe      	b.n	80062aa <vTaskStartScheduler+0x9a>
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	080092d4 	.word	0x080092d4
 80062b8:	0800668d 	.word	0x0800668d
 80062bc:	2000057c 	.word	0x2000057c
 80062c0:	20000578 	.word	0x20000578
 80062c4:	20000564 	.word	0x20000564
 80062c8:	2000055c 	.word	0x2000055c

080062cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <vTaskSuspendAll+0x18>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	4a03      	ldr	r2, [pc, #12]	; (80062e4 <vTaskSuspendAll+0x18>)
 80062d8:	6013      	str	r3, [r2, #0]
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000580 	.word	0x20000580

080062e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062f6:	4b41      	ldr	r3, [pc, #260]	; (80063fc <xTaskResumeAll+0x114>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <xTaskResumeAll+0x2a>
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	e7fe      	b.n	8006310 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006312:	f000 fbe1 	bl	8006ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006316:	4b39      	ldr	r3, [pc, #228]	; (80063fc <xTaskResumeAll+0x114>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3b01      	subs	r3, #1
 800631c:	4a37      	ldr	r2, [pc, #220]	; (80063fc <xTaskResumeAll+0x114>)
 800631e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006320:	4b36      	ldr	r3, [pc, #216]	; (80063fc <xTaskResumeAll+0x114>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d161      	bne.n	80063ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006328:	4b35      	ldr	r3, [pc, #212]	; (8006400 <xTaskResumeAll+0x118>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05d      	beq.n	80063ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006330:	e02e      	b.n	8006390 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006332:	4b34      	ldr	r3, [pc, #208]	; (8006404 <xTaskResumeAll+0x11c>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3318      	adds	r3, #24
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fae2 	bl	8005908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3304      	adds	r3, #4
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fadd 	bl	8005908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	2201      	movs	r2, #1
 8006354:	409a      	lsls	r2, r3
 8006356:	4b2c      	ldr	r3, [pc, #176]	; (8006408 <xTaskResumeAll+0x120>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4313      	orrs	r3, r2
 800635c:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <xTaskResumeAll+0x120>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a27      	ldr	r2, [pc, #156]	; (800640c <xTaskResumeAll+0x124>)
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7ff fa6b 	bl	8005852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <xTaskResumeAll+0x128>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <xTaskResumeAll+0x12c>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xTaskResumeAll+0x11c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1cc      	bne.n	8006332 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800639e:	f000 fa27 	bl	80067f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <xTaskResumeAll+0x130>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063ae:	f000 f857 	bl	8006460 <xTaskIncrementTick>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80063b8:	4b16      	ldr	r3, [pc, #88]	; (8006414 <xTaskResumeAll+0x12c>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f1      	bne.n	80063ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <xTaskResumeAll+0x130>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d0:	4b10      	ldr	r3, [pc, #64]	; (8006414 <xTaskResumeAll+0x12c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <xTaskResumeAll+0x134>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ec:	f000 fba2 	bl	8006b34 <vPortExitCritical>

	return xAlreadyYielded;
 80063f0:	68bb      	ldr	r3, [r7, #8]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000580 	.word	0x20000580
 8006400:	20000558 	.word	0x20000558
 8006404:	20000518 	.word	0x20000518
 8006408:	20000560 	.word	0x20000560
 800640c:	2000045c 	.word	0x2000045c
 8006410:	20000458 	.word	0x20000458
 8006414:	2000056c 	.word	0x2000056c
 8006418:	20000568 	.word	0x20000568
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006426:	4b04      	ldr	r3, [pc, #16]	; (8006438 <xTaskGetTickCount+0x18>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800642c:	687b      	ldr	r3, [r7, #4]
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	2000055c 	.word	0x2000055c

0800643c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006442:	f000 fc03 	bl	8006c4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800644a:	4b04      	ldr	r3, [pc, #16]	; (800645c <xTaskGetTickCountFromISR+0x20>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006450:	683b      	ldr	r3, [r7, #0]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	2000055c 	.word	0x2000055c

08006460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646a:	4b50      	ldr	r3, [pc, #320]	; (80065ac <xTaskIncrementTick+0x14c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 808c 	bne.w	800658c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006474:	4b4e      	ldr	r3, [pc, #312]	; (80065b0 <xTaskIncrementTick+0x150>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800647c:	4a4c      	ldr	r2, [pc, #304]	; (80065b0 <xTaskIncrementTick+0x150>)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11f      	bne.n	80064c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006488:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <xTaskIncrementTick+0x154>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <xTaskIncrementTick+0x46>
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	e7fe      	b.n	80064a4 <xTaskIncrementTick+0x44>
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <xTaskIncrementTick+0x154>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	4b42      	ldr	r3, [pc, #264]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a40      	ldr	r2, [pc, #256]	; (80065b4 <xTaskIncrementTick+0x154>)
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b40      	ldr	r3, [pc, #256]	; (80065bc <xTaskIncrementTick+0x15c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	4a3e      	ldr	r2, [pc, #248]	; (80065bc <xTaskIncrementTick+0x15c>)
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	f000 f994 	bl	80067f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064c8:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <xTaskIncrementTick+0x160>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d34d      	bcc.n	800656e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d2:	4b38      	ldr	r3, [pc, #224]	; (80065b4 <xTaskIncrementTick+0x154>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <xTaskIncrementTick+0x80>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <xTaskIncrementTick+0x82>
 80064e0:	2300      	movs	r3, #0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e6:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <xTaskIncrementTick+0x160>)
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ec:	601a      	str	r2, [r3, #0]
					break;
 80064ee:	e03e      	b.n	800656e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064f0:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <xTaskIncrementTick+0x154>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d203      	bcs.n	8006510 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006508:	4a2d      	ldr	r2, [pc, #180]	; (80065c0 <xTaskIncrementTick+0x160>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6013      	str	r3, [r2, #0]
						break;
 800650e:	e02e      	b.n	800656e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff f9f7 	bl	8005908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	3318      	adds	r3, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff f9ee 	bl	8005908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	2201      	movs	r2, #1
 8006532:	409a      	lsls	r2, r3
 8006534:	4b23      	ldr	r3, [pc, #140]	; (80065c4 <xTaskIncrementTick+0x164>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4313      	orrs	r3, r2
 800653a:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <xTaskIncrementTick+0x164>)
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <xTaskIncrementTick+0x168>)
 800654c:	441a      	add	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f7ff f97c 	bl	8005852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <xTaskIncrementTick+0x16c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	429a      	cmp	r2, r3
 8006566:	d3b4      	bcc.n	80064d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656c:	e7b1      	b.n	80064d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800656e:	4b17      	ldr	r3, [pc, #92]	; (80065cc <xTaskIncrementTick+0x16c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	4914      	ldr	r1, [pc, #80]	; (80065c8 <xTaskIncrementTick+0x168>)
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d907      	bls.n	8006596 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e004      	b.n	8006596 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <xTaskIncrementTick+0x170>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <xTaskIncrementTick+0x170>)
 8006594:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <xTaskIncrementTick+0x174>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000580 	.word	0x20000580
 80065b0:	2000055c 	.word	0x2000055c
 80065b4:	20000510 	.word	0x20000510
 80065b8:	20000514 	.word	0x20000514
 80065bc:	20000570 	.word	0x20000570
 80065c0:	20000578 	.word	0x20000578
 80065c4:	20000560 	.word	0x20000560
 80065c8:	2000045c 	.word	0x2000045c
 80065cc:	20000458 	.word	0x20000458
 80065d0:	20000568 	.word	0x20000568
 80065d4:	2000056c 	.word	0x2000056c

080065d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065de:	4b26      	ldr	r3, [pc, #152]	; (8006678 <vTaskSwitchContext+0xa0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065e6:	4b25      	ldr	r3, [pc, #148]	; (800667c <vTaskSwitchContext+0xa4>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065ec:	e03e      	b.n	800666c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80065ee:	4b23      	ldr	r3, [pc, #140]	; (800667c <vTaskSwitchContext+0xa4>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065f4:	4b22      	ldr	r3, [pc, #136]	; (8006680 <vTaskSwitchContext+0xa8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	fab3 f383 	clz	r3, r3
 8006600:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	f1c3 031f 	rsb	r3, r3, #31
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	491e      	ldr	r1, [pc, #120]	; (8006684 <vTaskSwitchContext+0xac>)
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <vTaskSwitchContext+0x5a>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	e7fe      	b.n	8006630 <vTaskSwitchContext+0x58>
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <vTaskSwitchContext+0xac>)
 800663e:	4413      	add	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	3308      	adds	r3, #8
 8006654:	429a      	cmp	r2, r3
 8006656:	d104      	bne.n	8006662 <vTaskSwitchContext+0x8a>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a07      	ldr	r2, [pc, #28]	; (8006688 <vTaskSwitchContext+0xb0>)
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000580 	.word	0x20000580
 800667c:	2000056c 	.word	0x2000056c
 8006680:	20000560 	.word	0x20000560
 8006684:	2000045c 	.word	0x2000045c
 8006688:	20000458 	.word	0x20000458

0800668c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006694:	f000 f852 	bl	800673c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <prvIdleTask+0x28>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d9f9      	bls.n	8006694 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <prvIdleTask+0x2c>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066b0:	e7f0      	b.n	8006694 <prvIdleTask+0x8>
 80066b2:	bf00      	nop
 80066b4:	2000045c 	.word	0x2000045c
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	e00c      	b.n	80066e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a12      	ldr	r2, [pc, #72]	; (800671c <prvInitialiseTaskLists+0x60>)
 80066d4:	4413      	add	r3, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff f890 	bl	80057fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3301      	adds	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b06      	cmp	r3, #6
 80066e6:	d9ef      	bls.n	80066c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066e8:	480d      	ldr	r0, [pc, #52]	; (8006720 <prvInitialiseTaskLists+0x64>)
 80066ea:	f7ff f887 	bl	80057fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ee:	480d      	ldr	r0, [pc, #52]	; (8006724 <prvInitialiseTaskLists+0x68>)
 80066f0:	f7ff f884 	bl	80057fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066f4:	480c      	ldr	r0, [pc, #48]	; (8006728 <prvInitialiseTaskLists+0x6c>)
 80066f6:	f7ff f881 	bl	80057fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066fa:	480c      	ldr	r0, [pc, #48]	; (800672c <prvInitialiseTaskLists+0x70>)
 80066fc:	f7ff f87e 	bl	80057fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006700:	480b      	ldr	r0, [pc, #44]	; (8006730 <prvInitialiseTaskLists+0x74>)
 8006702:	f7ff f87b 	bl	80057fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <prvInitialiseTaskLists+0x78>)
 8006708:	4a05      	ldr	r2, [pc, #20]	; (8006720 <prvInitialiseTaskLists+0x64>)
 800670a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <prvInitialiseTaskLists+0x7c>)
 800670e:	4a05      	ldr	r2, [pc, #20]	; (8006724 <prvInitialiseTaskLists+0x68>)
 8006710:	601a      	str	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2000045c 	.word	0x2000045c
 8006720:	200004e8 	.word	0x200004e8
 8006724:	200004fc 	.word	0x200004fc
 8006728:	20000518 	.word	0x20000518
 800672c:	2000052c 	.word	0x2000052c
 8006730:	20000544 	.word	0x20000544
 8006734:	20000510 	.word	0x20000510
 8006738:	20000514 	.word	0x20000514

0800673c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006742:	e019      	b.n	8006778 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006744:	f000 f9c8 	bl	8006ad8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <prvCheckTasksWaitingTermination+0x4c>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff f8d7 	bl	8005908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <prvCheckTasksWaitingTermination+0x50>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3b01      	subs	r3, #1
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <prvCheckTasksWaitingTermination+0x50>)
 8006762:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvCheckTasksWaitingTermination+0x54>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	4a09      	ldr	r2, [pc, #36]	; (8006790 <prvCheckTasksWaitingTermination+0x54>)
 800676c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800676e:	f000 f9e1 	bl	8006b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f80e 	bl	8006794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <prvCheckTasksWaitingTermination+0x54>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e1      	bne.n	8006744 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	2000052c 	.word	0x2000052c
 800678c:	20000558 	.word	0x20000558
 8006790:	20000540 	.word	0x20000540

08006794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fb4c 	bl	8006e48 <vPortFree>
				vPortFree( pxTCB );
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fb49 	bl	8006e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067b6:	e017      	b.n	80067e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d103      	bne.n	80067ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fb40 	bl	8006e48 <vPortFree>
	}
 80067c8:	e00e      	b.n	80067e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d009      	beq.n	80067e8 <prvDeleteTCB+0x54>
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e7fe      	b.n	80067e6 <prvDeleteTCB+0x52>
	}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <prvResetNextTaskUnblockTime+0x40>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <prvResetNextTaskUnblockTime+0x14>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <prvResetNextTaskUnblockTime+0x16>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <prvResetNextTaskUnblockTime+0x44>)
 800680c:	f04f 32ff 	mov.w	r2, #4294967295
 8006810:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006812:	e008      	b.n	8006826 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <prvResetNextTaskUnblockTime+0x40>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	4a04      	ldr	r2, [pc, #16]	; (8006834 <prvResetNextTaskUnblockTime+0x44>)
 8006824:	6013      	str	r3, [r2, #0]
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr
 8006830:	20000510 	.word	0x20000510
 8006834:	20000578 	.word	0x20000578

08006838 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006842:	4b29      	ldr	r3, [pc, #164]	; (80068e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006848:	4b28      	ldr	r3, [pc, #160]	; (80068ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3304      	adds	r3, #4
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff f85a 	bl	8005908 <uxListRemove>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800685a:	4b24      	ldr	r3, [pc, #144]	; (80068ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	2201      	movs	r2, #1
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	43da      	mvns	r2, r3
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4013      	ands	r3, r2
 800686e:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006870:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d10a      	bne.n	8006890 <prvAddCurrentTaskToDelayedList+0x58>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	481a      	ldr	r0, [pc, #104]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800688a:	f7fe ffe2 	bl	8005852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800688e:	e026      	b.n	80068de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d209      	bcs.n	80068bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fe ffef 	bl	8005898 <vListInsert>
}
 80068ba:	e010      	b.n	80068de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068bc:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe ffe5 	bl	8005898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d202      	bcs.n	80068de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068d8:	4a09      	ldr	r2, [pc, #36]	; (8006900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6013      	str	r3, [r2, #0]
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	2000055c 	.word	0x2000055c
 80068ec:	20000458 	.word	0x20000458
 80068f0:	20000560 	.word	0x20000560
 80068f4:	20000544 	.word	0x20000544
 80068f8:	20000514 	.word	0x20000514
 80068fc:	20000510 	.word	0x20000510
 8006900:	20000578 	.word	0x20000578

08006904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3b04      	subs	r3, #4
 8006914:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800691c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3b04      	subs	r3, #4
 8006922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b04      	subs	r3, #4
 8006932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006934:	4a08      	ldr	r2, [pc, #32]	; (8006958 <pxPortInitialiseStack+0x54>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b14      	subs	r3, #20
 800693e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b20      	subs	r3, #32
 800694a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr
 8006958:	0800695d 	.word	0x0800695d

0800695c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <prvTaskExitError+0x4c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d009      	beq.n	8006984 <prvTaskExitError+0x28>
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e7fe      	b.n	8006982 <prvTaskExitError+0x26>
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006996:	bf00      	nop
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0fc      	beq.n	8006998 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	2000000c 	.word	0x2000000c
 80069ac:	00000000 	.word	0x00000000

080069b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <pxCurrentTCBConst2>)
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069ba:	f380 8809 	msr	PSP, r0
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f380 8811 	msr	BASEPRI, r0
 80069ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80069ce:	4770      	bx	lr

080069d0 <pxCurrentTCBConst2>:
 80069d0:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80069d8:	4806      	ldr	r0, [pc, #24]	; (80069f4 <prvPortStartFirstTask+0x1c>)
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f380 8808 	msr	MSP, r0
 80069e2:	b662      	cpsie	i
 80069e4:	b661      	cpsie	f
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	df00      	svc	0
 80069f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069f2:	bf00      	nop
 80069f4:	e000ed08 	.word	0xe000ed08

080069f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <xPortStartScheduler+0xcc>)
 8006a00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <xPortStartScheduler+0xd0>)
 8006a24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a26:	4b29      	ldr	r3, [pc, #164]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a28:	2207      	movs	r2, #7
 8006a2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a2c:	e009      	b.n	8006a42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a2e:	4b27      	ldr	r3, [pc, #156]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a25      	ldr	r2, [pc, #148]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4a:	2b80      	cmp	r3, #128	; 0x80
 8006a4c:	d0ef      	beq.n	8006a2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f1c3 0307 	rsb	r3, r3, #7
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d009      	beq.n	8006a6e <xPortStartScheduler+0x76>
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	e7fe      	b.n	8006a6c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a6e:	4b17      	ldr	r3, [pc, #92]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	4a15      	ldr	r2, [pc, #84]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a78:	4b14      	ldr	r3, [pc, #80]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a80:	4a12      	ldr	r2, [pc, #72]	; (8006acc <xPortStartScheduler+0xd4>)
 8006a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a8c:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <xPortStartScheduler+0xd8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <xPortStartScheduler+0xd8>)
 8006a92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a98:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <xPortStartScheduler+0xd8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ad0 <xPortStartScheduler+0xd8>)
 8006a9e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aa4:	f000 f8b0 	bl	8006c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <xPortStartScheduler+0xdc>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006aae:	f7ff ff93 	bl	80069d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ab2:	f7ff fd91 	bl	80065d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006ab6:	f7ff ff51 	bl	800695c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000e400 	.word	0xe000e400
 8006ac8:	20000584 	.word	0x20000584
 8006acc:	20000588 	.word	0x20000588
 8006ad0:	e000ed20 	.word	0xe000ed20
 8006ad4:	2000000c 	.word	0x2000000c

08006ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006af0:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <vPortEnterCritical+0x54>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <vPortEnterCritical+0x54>)
 8006af8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006afa:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <vPortEnterCritical+0x54>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10e      	bne.n	8006b20 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortEnterCritical+0x58>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <vPortEnterCritical+0x48>
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	603b      	str	r3, [r7, #0]
 8006b1e:	e7fe      	b.n	8006b1e <vPortEnterCritical+0x46>
	}
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	2000000c 	.word	0x2000000c
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <vPortExitCritical+0x48>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <vPortExitCritical+0x22>
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	607b      	str	r3, [r7, #4]
 8006b54:	e7fe      	b.n	8006b54 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <vPortExitCritical+0x48>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	4a07      	ldr	r2, [pc, #28]	; (8006b7c <vPortExitCritical+0x48>)
 8006b5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <vPortExitCritical+0x48>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <vPortExitCritical+0x3e>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr
 8006b7c:	2000000c 	.word	0x2000000c

08006b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b80:	f3ef 8009 	mrs	r0, PSP
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <pxCurrentTCBConst>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b90:	6010      	str	r0, [r2, #0]
 8006b92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b9a:	f380 8811 	msr	BASEPRI, r0
 8006b9e:	f7ff fd1b 	bl	80065d8 <vTaskSwitchContext>
 8006ba2:	f04f 0000 	mov.w	r0, #0
 8006ba6:	f380 8811 	msr	BASEPRI, r0
 8006baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	6808      	ldr	r0, [r1, #0]
 8006bb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bb6:	f380 8809 	msr	PSP, r0
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	4770      	bx	lr

08006bc0 <pxCurrentTCBConst>:
 8006bc0:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006be0:	f7ff fc3e 	bl	8006460 <xTaskIncrementTick>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <SysTick_Handler+0x3c>)
 8006bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <vPortSetupTimerInterrupt+0x30>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <vPortSetupTimerInterrupt+0x34>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <vPortSetupTimerInterrupt+0x38>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <vPortSetupTimerInterrupt+0x3c>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <vPortSetupTimerInterrupt+0x40>)
 8006c26:	3b01      	subs	r3, #1
 8006c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <vPortSetupTimerInterrupt+0x30>)
 8006c2c:	2207      	movs	r2, #7
 8006c2e:	601a      	str	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	e000e010 	.word	0xe000e010
 8006c3c:	e000e018 	.word	0xe000e018
 8006c40:	20000000 	.word	0x20000000
 8006c44:	10624dd3 	.word	0x10624dd3
 8006c48:	e000e014 	.word	0xe000e014

08006c4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c52:	f3ef 8305 	mrs	r3, IPSR
 8006c56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	d913      	bls.n	8006c86 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c5e:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <vPortValidateInterruptPriority+0x68>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <vPortValidateInterruptPriority+0x6c>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	7afa      	ldrb	r2, [r7, #11]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d209      	bcs.n	8006c86 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	607b      	str	r3, [r7, #4]
 8006c84:	e7fe      	b.n	8006c84 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <vPortValidateInterruptPriority+0x70>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <vPortValidateInterruptPriority+0x74>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d909      	bls.n	8006caa <vPortValidateInterruptPriority+0x5e>
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	e7fe      	b.n	8006ca8 <vPortValidateInterruptPriority+0x5c>
	}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	e000e3f0 	.word	0xe000e3f0
 8006cb8:	20000584 	.word	0x20000584
 8006cbc:	e000ed0c 	.word	0xe000ed0c
 8006cc0:	20000588 	.word	0x20000588

08006cc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cd0:	f7ff fafc 	bl	80062cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cd4:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <pvPortMalloc+0x170>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cdc:	f000 f90c 	bl	8006ef8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ce0:	4b55      	ldr	r3, [pc, #340]	; (8006e38 <pvPortMalloc+0x174>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 808c 	bne.w	8006e06 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01c      	beq.n	8006d2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d013      	beq.n	8006d2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f023 0307 	bic.w	r3, r3, #7
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <pvPortMalloc+0x6a>
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e7fe      	b.n	8006d2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d068      	beq.n	8006e06 <pvPortMalloc+0x142>
 8006d34:	4b41      	ldr	r3, [pc, #260]	; (8006e3c <pvPortMalloc+0x178>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d863      	bhi.n	8006e06 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d3e:	4b40      	ldr	r3, [pc, #256]	; (8006e40 <pvPortMalloc+0x17c>)
 8006d40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d42:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <pvPortMalloc+0x17c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d48:	e004      	b.n	8006d54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d903      	bls.n	8006d66 <pvPortMalloc+0xa2>
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f1      	bne.n	8006d4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d66:	4b33      	ldr	r3, [pc, #204]	; (8006e34 <pvPortMalloc+0x170>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d04a      	beq.n	8006e06 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2208      	movs	r2, #8
 8006d76:	4413      	add	r3, r2
 8006d78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	1ad2      	subs	r2, r2, r3
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d91e      	bls.n	8006dd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <pvPortMalloc+0xf4>
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e7fe      	b.n	8006db6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dca:	69b8      	ldr	r0, [r7, #24]
 8006dcc:	f000 f8f6 	bl	8006fbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <pvPortMalloc+0x178>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	4a18      	ldr	r2, [pc, #96]	; (8006e3c <pvPortMalloc+0x178>)
 8006ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dde:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <pvPortMalloc+0x178>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b18      	ldr	r3, [pc, #96]	; (8006e44 <pvPortMalloc+0x180>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d203      	bcs.n	8006df2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <pvPortMalloc+0x178>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <pvPortMalloc+0x180>)
 8006df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <pvPortMalloc+0x174>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e06:	f7ff fa6f 	bl	80062e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <pvPortMalloc+0x164>
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	e7fe      	b.n	8006e26 <pvPortMalloc+0x162>
	return pvReturn;
 8006e28:	69fb      	ldr	r3, [r7, #28]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20001d04 	.word	0x20001d04
 8006e38:	20001d10 	.word	0x20001d10
 8006e3c:	20001d08 	.word	0x20001d08
 8006e40:	20001cfc 	.word	0x20001cfc
 8006e44:	20001d0c 	.word	0x20001d0c

08006e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d046      	beq.n	8006ee8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	425b      	negs	r3, r3
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <vPortFree+0xa8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <vPortFree+0x42>
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	e7fe      	b.n	8006e88 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <vPortFree+0x5e>
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
 8006ea4:	e7fe      	b.n	8006ea4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <vPortFree+0xa8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d019      	beq.n	8006ee8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d115      	bne.n	8006ee8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <vPortFree+0xa8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ecc:	f7ff f9fe 	bl	80062cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <vPortFree+0xac>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4413      	add	r3, r2
 8006eda:	4a06      	ldr	r2, [pc, #24]	; (8006ef4 <vPortFree+0xac>)
 8006edc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ede:	6938      	ldr	r0, [r7, #16]
 8006ee0:	f000 f86c 	bl	8006fbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ee4:	f7ff fa00 	bl	80062e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ee8:	bf00      	nop
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20001d10 	.word	0x20001d10
 8006ef4:	20001d08 	.word	0x20001d08

08006ef8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006efe:	f241 7370 	movw	r3, #6000	; 0x1770
 8006f02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f04:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <prvHeapInit+0xac>)
 8006f06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00c      	beq.n	8006f2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3307      	adds	r3, #7
 8006f16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	4a1f      	ldr	r2, [pc, #124]	; (8006fa4 <prvHeapInit+0xac>)
 8006f28:	4413      	add	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f30:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <prvHeapInit+0xb0>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f36:	4b1c      	ldr	r3, [pc, #112]	; (8006fa8 <prvHeapInit+0xb0>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4413      	add	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f44:	2208      	movs	r2, #8
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0307 	bic.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a15      	ldr	r2, [pc, #84]	; (8006fac <prvHeapInit+0xb4>)
 8006f58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <prvHeapInit+0xb4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <prvHeapInit+0xb4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <prvHeapInit+0xb4>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <prvHeapInit+0xb8>)
 8006f86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <prvHeapInit+0xbc>)
 8006f8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f90:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <prvHeapInit+0xc0>)
 8006f92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f96:	601a      	str	r2, [r3, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	2000058c 	.word	0x2000058c
 8006fa8:	20001cfc 	.word	0x20001cfc
 8006fac:	20001d04 	.word	0x20001d04
 8006fb0:	20001d0c 	.word	0x20001d0c
 8006fb4:	20001d08 	.word	0x20001d08
 8006fb8:	20001d10 	.word	0x20001d10

08006fbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <prvInsertBlockIntoFreeList+0xa8>)
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e002      	b.n	8006fd0 <prvInsertBlockIntoFreeList+0x14>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d8f7      	bhi.n	8006fca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d108      	bne.n	8006ffe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	441a      	add	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d118      	bne.n	8007044 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <prvInsertBlockIntoFreeList+0xac>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d00d      	beq.n	800703a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e008      	b.n	800704c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <prvInsertBlockIntoFreeList+0xac>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e003      	b.n	800704c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d002      	beq.n	800705a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr
 8007064:	20001cfc 	.word	0x20001cfc
 8007068:	20001d04 	.word	0x20001d04

0800706c <__errno>:
 800706c:	4b01      	ldr	r3, [pc, #4]	; (8007074 <__errno+0x8>)
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000010 	.word	0x20000010

08007078 <__libc_init_array>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	2500      	movs	r5, #0
 800707c:	4e0c      	ldr	r6, [pc, #48]	; (80070b0 <__libc_init_array+0x38>)
 800707e:	4c0d      	ldr	r4, [pc, #52]	; (80070b4 <__libc_init_array+0x3c>)
 8007080:	1ba4      	subs	r4, r4, r6
 8007082:	10a4      	asrs	r4, r4, #2
 8007084:	42a5      	cmp	r5, r4
 8007086:	d109      	bne.n	800709c <__libc_init_array+0x24>
 8007088:	f002 f85c 	bl	8009144 <_init>
 800708c:	2500      	movs	r5, #0
 800708e:	4e0a      	ldr	r6, [pc, #40]	; (80070b8 <__libc_init_array+0x40>)
 8007090:	4c0a      	ldr	r4, [pc, #40]	; (80070bc <__libc_init_array+0x44>)
 8007092:	1ba4      	subs	r4, r4, r6
 8007094:	10a4      	asrs	r4, r4, #2
 8007096:	42a5      	cmp	r5, r4
 8007098:	d105      	bne.n	80070a6 <__libc_init_array+0x2e>
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070a0:	4798      	blx	r3
 80070a2:	3501      	adds	r5, #1
 80070a4:	e7ee      	b.n	8007084 <__libc_init_array+0xc>
 80070a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070aa:	4798      	blx	r3
 80070ac:	3501      	adds	r5, #1
 80070ae:	e7f2      	b.n	8007096 <__libc_init_array+0x1e>
 80070b0:	08009550 	.word	0x08009550
 80070b4:	08009550 	.word	0x08009550
 80070b8:	08009550 	.word	0x08009550
 80070bc:	08009554 	.word	0x08009554

080070c0 <memcpy>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	1e43      	subs	r3, r0, #1
 80070c4:	440a      	add	r2, r1
 80070c6:	4291      	cmp	r1, r2
 80070c8:	d100      	bne.n	80070cc <memcpy+0xc>
 80070ca:	bd10      	pop	{r4, pc}
 80070cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d4:	e7f7      	b.n	80070c6 <memcpy+0x6>

080070d6 <memset>:
 80070d6:	4603      	mov	r3, r0
 80070d8:	4402      	add	r2, r0
 80070da:	4293      	cmp	r3, r2
 80070dc:	d100      	bne.n	80070e0 <memset+0xa>
 80070de:	4770      	bx	lr
 80070e0:	f803 1b01 	strb.w	r1, [r3], #1
 80070e4:	e7f9      	b.n	80070da <memset+0x4>

080070e6 <__cvt>:
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	461e      	mov	r6, r3
 80070ee:	bfbb      	ittet	lt
 80070f0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070f4:	461e      	movlt	r6, r3
 80070f6:	2300      	movge	r3, #0
 80070f8:	232d      	movlt	r3, #45	; 0x2d
 80070fa:	b088      	sub	sp, #32
 80070fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80070fe:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007102:	f027 0720 	bic.w	r7, r7, #32
 8007106:	2f46      	cmp	r7, #70	; 0x46
 8007108:	4614      	mov	r4, r2
 800710a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800710c:	700b      	strb	r3, [r1, #0]
 800710e:	d004      	beq.n	800711a <__cvt+0x34>
 8007110:	2f45      	cmp	r7, #69	; 0x45
 8007112:	d100      	bne.n	8007116 <__cvt+0x30>
 8007114:	3501      	adds	r5, #1
 8007116:	2302      	movs	r3, #2
 8007118:	e000      	b.n	800711c <__cvt+0x36>
 800711a:	2303      	movs	r3, #3
 800711c:	aa07      	add	r2, sp, #28
 800711e:	9204      	str	r2, [sp, #16]
 8007120:	aa06      	add	r2, sp, #24
 8007122:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007126:	e9cd 3500 	strd	r3, r5, [sp]
 800712a:	4622      	mov	r2, r4
 800712c:	4633      	mov	r3, r6
 800712e:	f000 fcd7 	bl	8007ae0 <_dtoa_r>
 8007132:	2f47      	cmp	r7, #71	; 0x47
 8007134:	4680      	mov	r8, r0
 8007136:	d102      	bne.n	800713e <__cvt+0x58>
 8007138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800713a:	07db      	lsls	r3, r3, #31
 800713c:	d526      	bpl.n	800718c <__cvt+0xa6>
 800713e:	2f46      	cmp	r7, #70	; 0x46
 8007140:	eb08 0905 	add.w	r9, r8, r5
 8007144:	d111      	bne.n	800716a <__cvt+0x84>
 8007146:	f898 3000 	ldrb.w	r3, [r8]
 800714a:	2b30      	cmp	r3, #48	; 0x30
 800714c:	d10a      	bne.n	8007164 <__cvt+0x7e>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	4620      	mov	r0, r4
 8007154:	4631      	mov	r1, r6
 8007156:	f7f9 fc27 	bl	80009a8 <__aeabi_dcmpeq>
 800715a:	b918      	cbnz	r0, 8007164 <__cvt+0x7e>
 800715c:	f1c5 0501 	rsb	r5, r5, #1
 8007160:	f8ca 5000 	str.w	r5, [sl]
 8007164:	f8da 3000 	ldr.w	r3, [sl]
 8007168:	4499      	add	r9, r3
 800716a:	2200      	movs	r2, #0
 800716c:	2300      	movs	r3, #0
 800716e:	4620      	mov	r0, r4
 8007170:	4631      	mov	r1, r6
 8007172:	f7f9 fc19 	bl	80009a8 <__aeabi_dcmpeq>
 8007176:	b938      	cbnz	r0, 8007188 <__cvt+0xa2>
 8007178:	2230      	movs	r2, #48	; 0x30
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	454b      	cmp	r3, r9
 800717e:	d205      	bcs.n	800718c <__cvt+0xa6>
 8007180:	1c59      	adds	r1, r3, #1
 8007182:	9107      	str	r1, [sp, #28]
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e7f8      	b.n	800717a <__cvt+0x94>
 8007188:	f8cd 901c 	str.w	r9, [sp, #28]
 800718c:	4640      	mov	r0, r8
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007192:	eba3 0308 	sub.w	r3, r3, r8
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	b008      	add	sp, #32
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800719e <__exponent>:
 800719e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a0:	2900      	cmp	r1, #0
 80071a2:	bfb4      	ite	lt
 80071a4:	232d      	movlt	r3, #45	; 0x2d
 80071a6:	232b      	movge	r3, #43	; 0x2b
 80071a8:	4604      	mov	r4, r0
 80071aa:	bfb8      	it	lt
 80071ac:	4249      	neglt	r1, r1
 80071ae:	2909      	cmp	r1, #9
 80071b0:	f804 2b02 	strb.w	r2, [r4], #2
 80071b4:	7043      	strb	r3, [r0, #1]
 80071b6:	dd21      	ble.n	80071fc <__exponent+0x5e>
 80071b8:	f10d 0307 	add.w	r3, sp, #7
 80071bc:	461f      	mov	r7, r3
 80071be:	260a      	movs	r6, #10
 80071c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80071c4:	fb06 1115 	mls	r1, r6, r5, r1
 80071c8:	2d09      	cmp	r5, #9
 80071ca:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80071ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071d2:	f103 32ff 	add.w	r2, r3, #4294967295
 80071d6:	4629      	mov	r1, r5
 80071d8:	dc09      	bgt.n	80071ee <__exponent+0x50>
 80071da:	3130      	adds	r1, #48	; 0x30
 80071dc:	3b02      	subs	r3, #2
 80071de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071e2:	42bb      	cmp	r3, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	d304      	bcc.n	80071f2 <__exponent+0x54>
 80071e8:	1a10      	subs	r0, r2, r0
 80071ea:	b003      	add	sp, #12
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ee:	4613      	mov	r3, r2
 80071f0:	e7e6      	b.n	80071c0 <__exponent+0x22>
 80071f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f6:	f804 2b01 	strb.w	r2, [r4], #1
 80071fa:	e7f2      	b.n	80071e2 <__exponent+0x44>
 80071fc:	2330      	movs	r3, #48	; 0x30
 80071fe:	4419      	add	r1, r3
 8007200:	7083      	strb	r3, [r0, #2]
 8007202:	1d02      	adds	r2, r0, #4
 8007204:	70c1      	strb	r1, [r0, #3]
 8007206:	e7ef      	b.n	80071e8 <__exponent+0x4a>

08007208 <_printf_float>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	b091      	sub	sp, #68	; 0x44
 800720e:	460c      	mov	r4, r1
 8007210:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007212:	4693      	mov	fp, r2
 8007214:	461e      	mov	r6, r3
 8007216:	4605      	mov	r5, r0
 8007218:	f001 fa16 	bl	8008648 <_localeconv_r>
 800721c:	6803      	ldr	r3, [r0, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	9309      	str	r3, [sp, #36]	; 0x24
 8007222:	f7f8 ff95 	bl	8000150 <strlen>
 8007226:	2300      	movs	r3, #0
 8007228:	930e      	str	r3, [sp, #56]	; 0x38
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	900a      	str	r0, [sp, #40]	; 0x28
 800722e:	3307      	adds	r3, #7
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	f103 0208 	add.w	r2, r3, #8
 8007238:	f894 8018 	ldrb.w	r8, [r4, #24]
 800723c:	f8d4 a000 	ldr.w	sl, [r4]
 8007240:	603a      	str	r2, [r7, #0]
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800724a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800724e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007252:	930b      	str	r3, [sp, #44]	; 0x2c
 8007254:	f04f 32ff 	mov.w	r2, #4294967295
 8007258:	4ba6      	ldr	r3, [pc, #664]	; (80074f4 <_printf_float+0x2ec>)
 800725a:	4638      	mov	r0, r7
 800725c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800725e:	f7f9 fbd5 	bl	8000a0c <__aeabi_dcmpun>
 8007262:	bb68      	cbnz	r0, 80072c0 <_printf_float+0xb8>
 8007264:	f04f 32ff 	mov.w	r2, #4294967295
 8007268:	4ba2      	ldr	r3, [pc, #648]	; (80074f4 <_printf_float+0x2ec>)
 800726a:	4638      	mov	r0, r7
 800726c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800726e:	f7f9 fbaf 	bl	80009d0 <__aeabi_dcmple>
 8007272:	bb28      	cbnz	r0, 80072c0 <_printf_float+0xb8>
 8007274:	2200      	movs	r2, #0
 8007276:	2300      	movs	r3, #0
 8007278:	4638      	mov	r0, r7
 800727a:	4649      	mov	r1, r9
 800727c:	f7f9 fb9e 	bl	80009bc <__aeabi_dcmplt>
 8007280:	b110      	cbz	r0, 8007288 <_printf_float+0x80>
 8007282:	232d      	movs	r3, #45	; 0x2d
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	4f9b      	ldr	r7, [pc, #620]	; (80074f8 <_printf_float+0x2f0>)
 800728a:	4b9c      	ldr	r3, [pc, #624]	; (80074fc <_printf_float+0x2f4>)
 800728c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007290:	bf98      	it	ls
 8007292:	461f      	movls	r7, r3
 8007294:	2303      	movs	r3, #3
 8007296:	f04f 0900 	mov.w	r9, #0
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	f02a 0304 	bic.w	r3, sl, #4
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	9600      	str	r6, [sp, #0]
 80072a4:	465b      	mov	r3, fp
 80072a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f9e2 	bl	8007674 <_printf_common>
 80072b0:	3001      	adds	r0, #1
 80072b2:	f040 8090 	bne.w	80073d6 <_printf_float+0x1ce>
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	b011      	add	sp, #68	; 0x44
 80072bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c0:	463a      	mov	r2, r7
 80072c2:	464b      	mov	r3, r9
 80072c4:	4638      	mov	r0, r7
 80072c6:	4649      	mov	r1, r9
 80072c8:	f7f9 fba0 	bl	8000a0c <__aeabi_dcmpun>
 80072cc:	b110      	cbz	r0, 80072d4 <_printf_float+0xcc>
 80072ce:	4f8c      	ldr	r7, [pc, #560]	; (8007500 <_printf_float+0x2f8>)
 80072d0:	4b8c      	ldr	r3, [pc, #560]	; (8007504 <_printf_float+0x2fc>)
 80072d2:	e7db      	b.n	800728c <_printf_float+0x84>
 80072d4:	6863      	ldr	r3, [r4, #4]
 80072d6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80072da:	1c59      	adds	r1, r3, #1
 80072dc:	a80d      	add	r0, sp, #52	; 0x34
 80072de:	a90e      	add	r1, sp, #56	; 0x38
 80072e0:	d140      	bne.n	8007364 <_printf_float+0x15c>
 80072e2:	2306      	movs	r3, #6
 80072e4:	6063      	str	r3, [r4, #4]
 80072e6:	f04f 0c00 	mov.w	ip, #0
 80072ea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80072ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	463a      	mov	r2, r7
 80072fe:	464b      	mov	r3, r9
 8007300:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007304:	4628      	mov	r0, r5
 8007306:	f7ff feee 	bl	80070e6 <__cvt>
 800730a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800730e:	2b47      	cmp	r3, #71	; 0x47
 8007310:	4607      	mov	r7, r0
 8007312:	d109      	bne.n	8007328 <_printf_float+0x120>
 8007314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007316:	1cd8      	adds	r0, r3, #3
 8007318:	db02      	blt.n	8007320 <_printf_float+0x118>
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	4293      	cmp	r3, r2
 800731e:	dd47      	ble.n	80073b0 <_printf_float+0x1a8>
 8007320:	f1a8 0802 	sub.w	r8, r8, #2
 8007324:	fa5f f888 	uxtb.w	r8, r8
 8007328:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800732c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800732e:	d824      	bhi.n	800737a <_printf_float+0x172>
 8007330:	3901      	subs	r1, #1
 8007332:	4642      	mov	r2, r8
 8007334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007338:	910d      	str	r1, [sp, #52]	; 0x34
 800733a:	f7ff ff30 	bl	800719e <__exponent>
 800733e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007340:	4681      	mov	r9, r0
 8007342:	1813      	adds	r3, r2, r0
 8007344:	2a01      	cmp	r2, #1
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	dc02      	bgt.n	8007350 <_printf_float+0x148>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	07d1      	lsls	r1, r2, #31
 800734e:	d501      	bpl.n	8007354 <_printf_float+0x14c>
 8007350:	3301      	adds	r3, #1
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0a2      	beq.n	80072a2 <_printf_float+0x9a>
 800735c:	232d      	movs	r3, #45	; 0x2d
 800735e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007362:	e79e      	b.n	80072a2 <_printf_float+0x9a>
 8007364:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007368:	f000 816e 	beq.w	8007648 <_printf_float+0x440>
 800736c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007370:	d1b9      	bne.n	80072e6 <_printf_float+0xde>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1b7      	bne.n	80072e6 <_printf_float+0xde>
 8007376:	2301      	movs	r3, #1
 8007378:	e7b4      	b.n	80072e4 <_printf_float+0xdc>
 800737a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800737e:	d119      	bne.n	80073b4 <_printf_float+0x1ac>
 8007380:	2900      	cmp	r1, #0
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	dd0c      	ble.n	80073a0 <_printf_float+0x198>
 8007386:	6121      	str	r1, [r4, #16]
 8007388:	b913      	cbnz	r3, 8007390 <_printf_float+0x188>
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	07d2      	lsls	r2, r2, #31
 800738e:	d502      	bpl.n	8007396 <_printf_float+0x18e>
 8007390:	3301      	adds	r3, #1
 8007392:	440b      	add	r3, r1
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007398:	f04f 0900 	mov.w	r9, #0
 800739c:	65a3      	str	r3, [r4, #88]	; 0x58
 800739e:	e7d9      	b.n	8007354 <_printf_float+0x14c>
 80073a0:	b913      	cbnz	r3, 80073a8 <_printf_float+0x1a0>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	07d0      	lsls	r0, r2, #31
 80073a6:	d501      	bpl.n	80073ac <_printf_float+0x1a4>
 80073a8:	3302      	adds	r3, #2
 80073aa:	e7f3      	b.n	8007394 <_printf_float+0x18c>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e7f1      	b.n	8007394 <_printf_float+0x18c>
 80073b0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80073b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80073b8:	4293      	cmp	r3, r2
 80073ba:	db05      	blt.n	80073c8 <_printf_float+0x1c0>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	07d1      	lsls	r1, r2, #31
 80073c2:	d5e8      	bpl.n	8007396 <_printf_float+0x18e>
 80073c4:	3301      	adds	r3, #1
 80073c6:	e7e5      	b.n	8007394 <_printf_float+0x18c>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bfcc      	ite	gt
 80073cc:	2301      	movgt	r3, #1
 80073ce:	f1c3 0302 	rsble	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	e7de      	b.n	8007394 <_printf_float+0x18c>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	055a      	lsls	r2, r3, #21
 80073da:	d407      	bmi.n	80073ec <_printf_float+0x1e4>
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	463a      	mov	r2, r7
 80073e0:	4659      	mov	r1, fp
 80073e2:	4628      	mov	r0, r5
 80073e4:	47b0      	blx	r6
 80073e6:	3001      	adds	r0, #1
 80073e8:	d129      	bne.n	800743e <_printf_float+0x236>
 80073ea:	e764      	b.n	80072b6 <_printf_float+0xae>
 80073ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80073f0:	f240 80d7 	bls.w	80075a2 <_printf_float+0x39a>
 80073f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	f7f9 fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8007400:	b388      	cbz	r0, 8007466 <_printf_float+0x25e>
 8007402:	2301      	movs	r3, #1
 8007404:	4a40      	ldr	r2, [pc, #256]	; (8007508 <_printf_float+0x300>)
 8007406:	4659      	mov	r1, fp
 8007408:	4628      	mov	r0, r5
 800740a:	47b0      	blx	r6
 800740c:	3001      	adds	r0, #1
 800740e:	f43f af52 	beq.w	80072b6 <_printf_float+0xae>
 8007412:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007416:	429a      	cmp	r2, r3
 8007418:	db02      	blt.n	8007420 <_printf_float+0x218>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	07d8      	lsls	r0, r3, #31
 800741e:	d50e      	bpl.n	800743e <_printf_float+0x236>
 8007420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007424:	4659      	mov	r1, fp
 8007426:	4628      	mov	r0, r5
 8007428:	47b0      	blx	r6
 800742a:	3001      	adds	r0, #1
 800742c:	f43f af43 	beq.w	80072b6 <_printf_float+0xae>
 8007430:	2700      	movs	r7, #0
 8007432:	f104 081a 	add.w	r8, r4, #26
 8007436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007438:	3b01      	subs	r3, #1
 800743a:	42bb      	cmp	r3, r7
 800743c:	dc09      	bgt.n	8007452 <_printf_float+0x24a>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	079f      	lsls	r7, r3, #30
 8007442:	f100 80fd 	bmi.w	8007640 <_printf_float+0x438>
 8007446:	68e0      	ldr	r0, [r4, #12]
 8007448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800744a:	4298      	cmp	r0, r3
 800744c:	bfb8      	it	lt
 800744e:	4618      	movlt	r0, r3
 8007450:	e733      	b.n	80072ba <_printf_float+0xb2>
 8007452:	2301      	movs	r3, #1
 8007454:	4642      	mov	r2, r8
 8007456:	4659      	mov	r1, fp
 8007458:	4628      	mov	r0, r5
 800745a:	47b0      	blx	r6
 800745c:	3001      	adds	r0, #1
 800745e:	f43f af2a 	beq.w	80072b6 <_printf_float+0xae>
 8007462:	3701      	adds	r7, #1
 8007464:	e7e7      	b.n	8007436 <_printf_float+0x22e>
 8007466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc2b      	bgt.n	80074c4 <_printf_float+0x2bc>
 800746c:	2301      	movs	r3, #1
 800746e:	4a26      	ldr	r2, [pc, #152]	; (8007508 <_printf_float+0x300>)
 8007470:	4659      	mov	r1, fp
 8007472:	4628      	mov	r0, r5
 8007474:	47b0      	blx	r6
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af1d 	beq.w	80072b6 <_printf_float+0xae>
 800747c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800747e:	b923      	cbnz	r3, 800748a <_printf_float+0x282>
 8007480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007482:	b913      	cbnz	r3, 800748a <_printf_float+0x282>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	d5d9      	bpl.n	800743e <_printf_float+0x236>
 800748a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748e:	4659      	mov	r1, fp
 8007490:	4628      	mov	r0, r5
 8007492:	47b0      	blx	r6
 8007494:	3001      	adds	r0, #1
 8007496:	f43f af0e 	beq.w	80072b6 <_printf_float+0xae>
 800749a:	f04f 0800 	mov.w	r8, #0
 800749e:	f104 091a 	add.w	r9, r4, #26
 80074a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a4:	425b      	negs	r3, r3
 80074a6:	4543      	cmp	r3, r8
 80074a8:	dc01      	bgt.n	80074ae <_printf_float+0x2a6>
 80074aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ac:	e797      	b.n	80073de <_printf_float+0x1d6>
 80074ae:	2301      	movs	r3, #1
 80074b0:	464a      	mov	r2, r9
 80074b2:	4659      	mov	r1, fp
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b0      	blx	r6
 80074b8:	3001      	adds	r0, #1
 80074ba:	f43f aefc 	beq.w	80072b6 <_printf_float+0xae>
 80074be:	f108 0801 	add.w	r8, r8, #1
 80074c2:	e7ee      	b.n	80074a2 <_printf_float+0x29a>
 80074c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074c8:	429a      	cmp	r2, r3
 80074ca:	bfa8      	it	ge
 80074cc:	461a      	movge	r2, r3
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	4690      	mov	r8, r2
 80074d2:	dd07      	ble.n	80074e4 <_printf_float+0x2dc>
 80074d4:	4613      	mov	r3, r2
 80074d6:	4659      	mov	r1, fp
 80074d8:	463a      	mov	r2, r7
 80074da:	4628      	mov	r0, r5
 80074dc:	47b0      	blx	r6
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f aee9 	beq.w	80072b6 <_printf_float+0xae>
 80074e4:	f104 031a 	add.w	r3, r4, #26
 80074e8:	f04f 0a00 	mov.w	sl, #0
 80074ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80074f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f2:	e015      	b.n	8007520 <_printf_float+0x318>
 80074f4:	7fefffff 	.word	0x7fefffff
 80074f8:	080092f8 	.word	0x080092f8
 80074fc:	080092f4 	.word	0x080092f4
 8007500:	08009300 	.word	0x08009300
 8007504:	080092fc 	.word	0x080092fc
 8007508:	08009304 	.word	0x08009304
 800750c:	2301      	movs	r3, #1
 800750e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007510:	4659      	mov	r1, fp
 8007512:	4628      	mov	r0, r5
 8007514:	47b0      	blx	r6
 8007516:	3001      	adds	r0, #1
 8007518:	f43f aecd 	beq.w	80072b6 <_printf_float+0xae>
 800751c:	f10a 0a01 	add.w	sl, sl, #1
 8007520:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007524:	eba9 0308 	sub.w	r3, r9, r8
 8007528:	4553      	cmp	r3, sl
 800752a:	dcef      	bgt.n	800750c <_printf_float+0x304>
 800752c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007530:	429a      	cmp	r2, r3
 8007532:	444f      	add	r7, r9
 8007534:	db14      	blt.n	8007560 <_printf_float+0x358>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	07da      	lsls	r2, r3, #31
 800753a:	d411      	bmi.n	8007560 <_printf_float+0x358>
 800753c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800753e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007540:	eba3 0209 	sub.w	r2, r3, r9
 8007544:	eba3 0901 	sub.w	r9, r3, r1
 8007548:	4591      	cmp	r9, r2
 800754a:	bfa8      	it	ge
 800754c:	4691      	movge	r9, r2
 800754e:	f1b9 0f00 	cmp.w	r9, #0
 8007552:	dc0d      	bgt.n	8007570 <_printf_float+0x368>
 8007554:	2700      	movs	r7, #0
 8007556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800755a:	f104 081a 	add.w	r8, r4, #26
 800755e:	e018      	b.n	8007592 <_printf_float+0x38a>
 8007560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007564:	4659      	mov	r1, fp
 8007566:	4628      	mov	r0, r5
 8007568:	47b0      	blx	r6
 800756a:	3001      	adds	r0, #1
 800756c:	d1e6      	bne.n	800753c <_printf_float+0x334>
 800756e:	e6a2      	b.n	80072b6 <_printf_float+0xae>
 8007570:	464b      	mov	r3, r9
 8007572:	463a      	mov	r2, r7
 8007574:	4659      	mov	r1, fp
 8007576:	4628      	mov	r0, r5
 8007578:	47b0      	blx	r6
 800757a:	3001      	adds	r0, #1
 800757c:	d1ea      	bne.n	8007554 <_printf_float+0x34c>
 800757e:	e69a      	b.n	80072b6 <_printf_float+0xae>
 8007580:	2301      	movs	r3, #1
 8007582:	4642      	mov	r2, r8
 8007584:	4659      	mov	r1, fp
 8007586:	4628      	mov	r0, r5
 8007588:	47b0      	blx	r6
 800758a:	3001      	adds	r0, #1
 800758c:	f43f ae93 	beq.w	80072b6 <_printf_float+0xae>
 8007590:	3701      	adds	r7, #1
 8007592:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	eba3 0309 	sub.w	r3, r3, r9
 800759c:	42bb      	cmp	r3, r7
 800759e:	dcef      	bgt.n	8007580 <_printf_float+0x378>
 80075a0:	e74d      	b.n	800743e <_printf_float+0x236>
 80075a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075a4:	2a01      	cmp	r2, #1
 80075a6:	dc01      	bgt.n	80075ac <_printf_float+0x3a4>
 80075a8:	07db      	lsls	r3, r3, #31
 80075aa:	d538      	bpl.n	800761e <_printf_float+0x416>
 80075ac:	2301      	movs	r3, #1
 80075ae:	463a      	mov	r2, r7
 80075b0:	4659      	mov	r1, fp
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b0      	blx	r6
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f ae7d 	beq.w	80072b6 <_printf_float+0xae>
 80075bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075c0:	4659      	mov	r1, fp
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b0      	blx	r6
 80075c6:	3001      	adds	r0, #1
 80075c8:	f107 0701 	add.w	r7, r7, #1
 80075cc:	f43f ae73 	beq.w	80072b6 <_printf_float+0xae>
 80075d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d6:	2200      	movs	r2, #0
 80075d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80075dc:	2300      	movs	r3, #0
 80075de:	f7f9 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80075e2:	b9c0      	cbnz	r0, 8007616 <_printf_float+0x40e>
 80075e4:	4643      	mov	r3, r8
 80075e6:	463a      	mov	r2, r7
 80075e8:	4659      	mov	r1, fp
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b0      	blx	r6
 80075ee:	3001      	adds	r0, #1
 80075f0:	d10d      	bne.n	800760e <_printf_float+0x406>
 80075f2:	e660      	b.n	80072b6 <_printf_float+0xae>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4642      	mov	r2, r8
 80075f8:	4659      	mov	r1, fp
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b0      	blx	r6
 80075fe:	3001      	adds	r0, #1
 8007600:	f43f ae59 	beq.w	80072b6 <_printf_float+0xae>
 8007604:	3701      	adds	r7, #1
 8007606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007608:	3b01      	subs	r3, #1
 800760a:	42bb      	cmp	r3, r7
 800760c:	dcf2      	bgt.n	80075f4 <_printf_float+0x3ec>
 800760e:	464b      	mov	r3, r9
 8007610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007614:	e6e4      	b.n	80073e0 <_printf_float+0x1d8>
 8007616:	2700      	movs	r7, #0
 8007618:	f104 081a 	add.w	r8, r4, #26
 800761c:	e7f3      	b.n	8007606 <_printf_float+0x3fe>
 800761e:	2301      	movs	r3, #1
 8007620:	e7e1      	b.n	80075e6 <_printf_float+0x3de>
 8007622:	2301      	movs	r3, #1
 8007624:	4642      	mov	r2, r8
 8007626:	4659      	mov	r1, fp
 8007628:	4628      	mov	r0, r5
 800762a:	47b0      	blx	r6
 800762c:	3001      	adds	r0, #1
 800762e:	f43f ae42 	beq.w	80072b6 <_printf_float+0xae>
 8007632:	3701      	adds	r7, #1
 8007634:	68e3      	ldr	r3, [r4, #12]
 8007636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	42bb      	cmp	r3, r7
 800763c:	dcf1      	bgt.n	8007622 <_printf_float+0x41a>
 800763e:	e702      	b.n	8007446 <_printf_float+0x23e>
 8007640:	2700      	movs	r7, #0
 8007642:	f104 0819 	add.w	r8, r4, #25
 8007646:	e7f5      	b.n	8007634 <_printf_float+0x42c>
 8007648:	2b00      	cmp	r3, #0
 800764a:	f43f ae94 	beq.w	8007376 <_printf_float+0x16e>
 800764e:	f04f 0c00 	mov.w	ip, #0
 8007652:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007656:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007660:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	463a      	mov	r2, r7
 8007668:	464b      	mov	r3, r9
 800766a:	4628      	mov	r0, r5
 800766c:	f7ff fd3b 	bl	80070e6 <__cvt>
 8007670:	4607      	mov	r7, r0
 8007672:	e64f      	b.n	8007314 <_printf_float+0x10c>

08007674 <_printf_common>:
 8007674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	4691      	mov	r9, r2
 800767a:	461f      	mov	r7, r3
 800767c:	688a      	ldr	r2, [r1, #8]
 800767e:	690b      	ldr	r3, [r1, #16]
 8007680:	4606      	mov	r6, r0
 8007682:	4293      	cmp	r3, r2
 8007684:	bfb8      	it	lt
 8007686:	4613      	movlt	r3, r2
 8007688:	f8c9 3000 	str.w	r3, [r9]
 800768c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007690:	460c      	mov	r4, r1
 8007692:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007696:	b112      	cbz	r2, 800769e <_printf_common+0x2a>
 8007698:	3301      	adds	r3, #1
 800769a:	f8c9 3000 	str.w	r3, [r9]
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	0699      	lsls	r1, r3, #26
 80076a2:	bf42      	ittt	mi
 80076a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80076a8:	3302      	addmi	r3, #2
 80076aa:	f8c9 3000 	strmi.w	r3, [r9]
 80076ae:	6825      	ldr	r5, [r4, #0]
 80076b0:	f015 0506 	ands.w	r5, r5, #6
 80076b4:	d107      	bne.n	80076c6 <_printf_common+0x52>
 80076b6:	f104 0a19 	add.w	sl, r4, #25
 80076ba:	68e3      	ldr	r3, [r4, #12]
 80076bc:	f8d9 2000 	ldr.w	r2, [r9]
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	42ab      	cmp	r3, r5
 80076c4:	dc29      	bgt.n	800771a <_printf_common+0xa6>
 80076c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	3300      	adds	r3, #0
 80076ce:	bf18      	it	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	0692      	lsls	r2, r2, #26
 80076d4:	d42e      	bmi.n	8007734 <_printf_common+0xc0>
 80076d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076da:	4639      	mov	r1, r7
 80076dc:	4630      	mov	r0, r6
 80076de:	47c0      	blx	r8
 80076e0:	3001      	adds	r0, #1
 80076e2:	d021      	beq.n	8007728 <_printf_common+0xb4>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	68e5      	ldr	r5, [r4, #12]
 80076e8:	f003 0306 	and.w	r3, r3, #6
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	bf18      	it	ne
 80076f0:	2500      	movne	r5, #0
 80076f2:	f8d9 2000 	ldr.w	r2, [r9]
 80076f6:	f04f 0900 	mov.w	r9, #0
 80076fa:	bf08      	it	eq
 80076fc:	1aad      	subeq	r5, r5, r2
 80076fe:	68a3      	ldr	r3, [r4, #8]
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	bf08      	it	eq
 8007704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007708:	4293      	cmp	r3, r2
 800770a:	bfc4      	itt	gt
 800770c:	1a9b      	subgt	r3, r3, r2
 800770e:	18ed      	addgt	r5, r5, r3
 8007710:	341a      	adds	r4, #26
 8007712:	454d      	cmp	r5, r9
 8007714:	d11a      	bne.n	800774c <_printf_common+0xd8>
 8007716:	2000      	movs	r0, #0
 8007718:	e008      	b.n	800772c <_printf_common+0xb8>
 800771a:	2301      	movs	r3, #1
 800771c:	4652      	mov	r2, sl
 800771e:	4639      	mov	r1, r7
 8007720:	4630      	mov	r0, r6
 8007722:	47c0      	blx	r8
 8007724:	3001      	adds	r0, #1
 8007726:	d103      	bne.n	8007730 <_printf_common+0xbc>
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007730:	3501      	adds	r5, #1
 8007732:	e7c2      	b.n	80076ba <_printf_common+0x46>
 8007734:	2030      	movs	r0, #48	; 0x30
 8007736:	18e1      	adds	r1, r4, r3
 8007738:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007742:	4422      	add	r2, r4
 8007744:	3302      	adds	r3, #2
 8007746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800774a:	e7c4      	b.n	80076d6 <_printf_common+0x62>
 800774c:	2301      	movs	r3, #1
 800774e:	4622      	mov	r2, r4
 8007750:	4639      	mov	r1, r7
 8007752:	4630      	mov	r0, r6
 8007754:	47c0      	blx	r8
 8007756:	3001      	adds	r0, #1
 8007758:	d0e6      	beq.n	8007728 <_printf_common+0xb4>
 800775a:	f109 0901 	add.w	r9, r9, #1
 800775e:	e7d8      	b.n	8007712 <_printf_common+0x9e>

08007760 <_printf_i>:
 8007760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007764:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007768:	460c      	mov	r4, r1
 800776a:	7e09      	ldrb	r1, [r1, #24]
 800776c:	b085      	sub	sp, #20
 800776e:	296e      	cmp	r1, #110	; 0x6e
 8007770:	4617      	mov	r7, r2
 8007772:	4606      	mov	r6, r0
 8007774:	4698      	mov	r8, r3
 8007776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007778:	f000 80b3 	beq.w	80078e2 <_printf_i+0x182>
 800777c:	d822      	bhi.n	80077c4 <_printf_i+0x64>
 800777e:	2963      	cmp	r1, #99	; 0x63
 8007780:	d036      	beq.n	80077f0 <_printf_i+0x90>
 8007782:	d80a      	bhi.n	800779a <_printf_i+0x3a>
 8007784:	2900      	cmp	r1, #0
 8007786:	f000 80b9 	beq.w	80078fc <_printf_i+0x19c>
 800778a:	2958      	cmp	r1, #88	; 0x58
 800778c:	f000 8083 	beq.w	8007896 <_printf_i+0x136>
 8007790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007794:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007798:	e032      	b.n	8007800 <_printf_i+0xa0>
 800779a:	2964      	cmp	r1, #100	; 0x64
 800779c:	d001      	beq.n	80077a2 <_printf_i+0x42>
 800779e:	2969      	cmp	r1, #105	; 0x69
 80077a0:	d1f6      	bne.n	8007790 <_printf_i+0x30>
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	6813      	ldr	r3, [r2, #0]
 80077a6:	0605      	lsls	r5, r0, #24
 80077a8:	f103 0104 	add.w	r1, r3, #4
 80077ac:	d52a      	bpl.n	8007804 <_printf_i+0xa4>
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6011      	str	r1, [r2, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	da03      	bge.n	80077be <_printf_i+0x5e>
 80077b6:	222d      	movs	r2, #45	; 0x2d
 80077b8:	425b      	negs	r3, r3
 80077ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80077be:	486f      	ldr	r0, [pc, #444]	; (800797c <_printf_i+0x21c>)
 80077c0:	220a      	movs	r2, #10
 80077c2:	e039      	b.n	8007838 <_printf_i+0xd8>
 80077c4:	2973      	cmp	r1, #115	; 0x73
 80077c6:	f000 809d 	beq.w	8007904 <_printf_i+0x1a4>
 80077ca:	d808      	bhi.n	80077de <_printf_i+0x7e>
 80077cc:	296f      	cmp	r1, #111	; 0x6f
 80077ce:	d020      	beq.n	8007812 <_printf_i+0xb2>
 80077d0:	2970      	cmp	r1, #112	; 0x70
 80077d2:	d1dd      	bne.n	8007790 <_printf_i+0x30>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	f043 0320 	orr.w	r3, r3, #32
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	e003      	b.n	80077e6 <_printf_i+0x86>
 80077de:	2975      	cmp	r1, #117	; 0x75
 80077e0:	d017      	beq.n	8007812 <_printf_i+0xb2>
 80077e2:	2978      	cmp	r1, #120	; 0x78
 80077e4:	d1d4      	bne.n	8007790 <_printf_i+0x30>
 80077e6:	2378      	movs	r3, #120	; 0x78
 80077e8:	4865      	ldr	r0, [pc, #404]	; (8007980 <_printf_i+0x220>)
 80077ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ee:	e055      	b.n	800789c <_printf_i+0x13c>
 80077f0:	6813      	ldr	r3, [r2, #0]
 80077f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f6:	1d19      	adds	r1, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6011      	str	r1, [r2, #0]
 80077fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007800:	2301      	movs	r3, #1
 8007802:	e08c      	b.n	800791e <_printf_i+0x1be>
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800780a:	6011      	str	r1, [r2, #0]
 800780c:	bf18      	it	ne
 800780e:	b21b      	sxthne	r3, r3
 8007810:	e7cf      	b.n	80077b2 <_printf_i+0x52>
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	6825      	ldr	r5, [r4, #0]
 8007816:	1d18      	adds	r0, r3, #4
 8007818:	6010      	str	r0, [r2, #0]
 800781a:	0628      	lsls	r0, r5, #24
 800781c:	d501      	bpl.n	8007822 <_printf_i+0xc2>
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	e002      	b.n	8007828 <_printf_i+0xc8>
 8007822:	0668      	lsls	r0, r5, #25
 8007824:	d5fb      	bpl.n	800781e <_printf_i+0xbe>
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	296f      	cmp	r1, #111	; 0x6f
 800782a:	bf14      	ite	ne
 800782c:	220a      	movne	r2, #10
 800782e:	2208      	moveq	r2, #8
 8007830:	4852      	ldr	r0, [pc, #328]	; (800797c <_printf_i+0x21c>)
 8007832:	2100      	movs	r1, #0
 8007834:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007838:	6865      	ldr	r5, [r4, #4]
 800783a:	2d00      	cmp	r5, #0
 800783c:	60a5      	str	r5, [r4, #8]
 800783e:	f2c0 8095 	blt.w	800796c <_printf_i+0x20c>
 8007842:	6821      	ldr	r1, [r4, #0]
 8007844:	f021 0104 	bic.w	r1, r1, #4
 8007848:	6021      	str	r1, [r4, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d13d      	bne.n	80078ca <_printf_i+0x16a>
 800784e:	2d00      	cmp	r5, #0
 8007850:	f040 808e 	bne.w	8007970 <_printf_i+0x210>
 8007854:	4665      	mov	r5, ip
 8007856:	2a08      	cmp	r2, #8
 8007858:	d10b      	bne.n	8007872 <_printf_i+0x112>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	07db      	lsls	r3, r3, #31
 800785e:	d508      	bpl.n	8007872 <_printf_i+0x112>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	6862      	ldr	r2, [r4, #4]
 8007864:	429a      	cmp	r2, r3
 8007866:	bfde      	ittt	le
 8007868:	2330      	movle	r3, #48	; 0x30
 800786a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800786e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007872:	ebac 0305 	sub.w	r3, ip, r5
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	f8cd 8000 	str.w	r8, [sp]
 800787c:	463b      	mov	r3, r7
 800787e:	aa03      	add	r2, sp, #12
 8007880:	4621      	mov	r1, r4
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff fef6 	bl	8007674 <_printf_common>
 8007888:	3001      	adds	r0, #1
 800788a:	d14d      	bne.n	8007928 <_printf_i+0x1c8>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b005      	add	sp, #20
 8007892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007896:	4839      	ldr	r0, [pc, #228]	; (800797c <_printf_i+0x21c>)
 8007898:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	6821      	ldr	r1, [r4, #0]
 80078a0:	1d1d      	adds	r5, r3, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6015      	str	r5, [r2, #0]
 80078a6:	060a      	lsls	r2, r1, #24
 80078a8:	d50b      	bpl.n	80078c2 <_printf_i+0x162>
 80078aa:	07ca      	lsls	r2, r1, #31
 80078ac:	bf44      	itt	mi
 80078ae:	f041 0120 	orrmi.w	r1, r1, #32
 80078b2:	6021      	strmi	r1, [r4, #0]
 80078b4:	b91b      	cbnz	r3, 80078be <_printf_i+0x15e>
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	f022 0220 	bic.w	r2, r2, #32
 80078bc:	6022      	str	r2, [r4, #0]
 80078be:	2210      	movs	r2, #16
 80078c0:	e7b7      	b.n	8007832 <_printf_i+0xd2>
 80078c2:	064d      	lsls	r5, r1, #25
 80078c4:	bf48      	it	mi
 80078c6:	b29b      	uxthmi	r3, r3
 80078c8:	e7ef      	b.n	80078aa <_printf_i+0x14a>
 80078ca:	4665      	mov	r5, ip
 80078cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80078d0:	fb02 3311 	mls	r3, r2, r1, r3
 80078d4:	5cc3      	ldrb	r3, [r0, r3]
 80078d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80078da:	460b      	mov	r3, r1
 80078dc:	2900      	cmp	r1, #0
 80078de:	d1f5      	bne.n	80078cc <_printf_i+0x16c>
 80078e0:	e7b9      	b.n	8007856 <_printf_i+0xf6>
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	6825      	ldr	r5, [r4, #0]
 80078e6:	1d18      	adds	r0, r3, #4
 80078e8:	6961      	ldr	r1, [r4, #20]
 80078ea:	6010      	str	r0, [r2, #0]
 80078ec:	0628      	lsls	r0, r5, #24
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	d501      	bpl.n	80078f6 <_printf_i+0x196>
 80078f2:	6019      	str	r1, [r3, #0]
 80078f4:	e002      	b.n	80078fc <_printf_i+0x19c>
 80078f6:	066a      	lsls	r2, r5, #25
 80078f8:	d5fb      	bpl.n	80078f2 <_printf_i+0x192>
 80078fa:	8019      	strh	r1, [r3, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	4665      	mov	r5, ip
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	e7b9      	b.n	8007878 <_printf_i+0x118>
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	1d19      	adds	r1, r3, #4
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	681d      	ldr	r5, [r3, #0]
 800790c:	6862      	ldr	r2, [r4, #4]
 800790e:	2100      	movs	r1, #0
 8007910:	4628      	mov	r0, r5
 8007912:	f000 feaf 	bl	8008674 <memchr>
 8007916:	b108      	cbz	r0, 800791c <_printf_i+0x1bc>
 8007918:	1b40      	subs	r0, r0, r5
 800791a:	6060      	str	r0, [r4, #4]
 800791c:	6863      	ldr	r3, [r4, #4]
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	2300      	movs	r3, #0
 8007922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007926:	e7a7      	b.n	8007878 <_printf_i+0x118>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	462a      	mov	r2, r5
 800792c:	4639      	mov	r1, r7
 800792e:	4630      	mov	r0, r6
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0aa      	beq.n	800788c <_printf_i+0x12c>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	079b      	lsls	r3, r3, #30
 800793a:	d413      	bmi.n	8007964 <_printf_i+0x204>
 800793c:	68e0      	ldr	r0, [r4, #12]
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	4298      	cmp	r0, r3
 8007942:	bfb8      	it	lt
 8007944:	4618      	movlt	r0, r3
 8007946:	e7a3      	b.n	8007890 <_printf_i+0x130>
 8007948:	2301      	movs	r3, #1
 800794a:	464a      	mov	r2, r9
 800794c:	4639      	mov	r1, r7
 800794e:	4630      	mov	r0, r6
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d09a      	beq.n	800788c <_printf_i+0x12c>
 8007956:	3501      	adds	r5, #1
 8007958:	68e3      	ldr	r3, [r4, #12]
 800795a:	9a03      	ldr	r2, [sp, #12]
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	42ab      	cmp	r3, r5
 8007960:	dcf2      	bgt.n	8007948 <_printf_i+0x1e8>
 8007962:	e7eb      	b.n	800793c <_printf_i+0x1dc>
 8007964:	2500      	movs	r5, #0
 8007966:	f104 0919 	add.w	r9, r4, #25
 800796a:	e7f5      	b.n	8007958 <_printf_i+0x1f8>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ac      	bne.n	80078ca <_printf_i+0x16a>
 8007970:	7803      	ldrb	r3, [r0, #0]
 8007972:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800797a:	e76c      	b.n	8007856 <_printf_i+0xf6>
 800797c:	08009306 	.word	0x08009306
 8007980:	08009317 	.word	0x08009317

08007984 <siprintf>:
 8007984:	b40e      	push	{r1, r2, r3}
 8007986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800798a:	b500      	push	{lr}
 800798c:	b09c      	sub	sp, #112	; 0x70
 800798e:	ab1d      	add	r3, sp, #116	; 0x74
 8007990:	9002      	str	r0, [sp, #8]
 8007992:	9006      	str	r0, [sp, #24]
 8007994:	9107      	str	r1, [sp, #28]
 8007996:	9104      	str	r1, [sp, #16]
 8007998:	4808      	ldr	r0, [pc, #32]	; (80079bc <siprintf+0x38>)
 800799a:	4909      	ldr	r1, [pc, #36]	; (80079c0 <siprintf+0x3c>)
 800799c:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a0:	9105      	str	r1, [sp, #20]
 80079a2:	6800      	ldr	r0, [r0, #0]
 80079a4:	a902      	add	r1, sp, #8
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	f001 fa5c 	bl	8008e64 <_svfiprintf_r>
 80079ac:	2200      	movs	r2, #0
 80079ae:	9b02      	ldr	r3, [sp, #8]
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	b01c      	add	sp, #112	; 0x70
 80079b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b8:	b003      	add	sp, #12
 80079ba:	4770      	bx	lr
 80079bc:	20000010 	.word	0x20000010
 80079c0:	ffff0208 	.word	0xffff0208

080079c4 <quorem>:
 80079c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	6903      	ldr	r3, [r0, #16]
 80079ca:	690c      	ldr	r4, [r1, #16]
 80079cc:	4680      	mov	r8, r0
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	f2c0 8084 	blt.w	8007adc <quorem+0x118>
 80079d4:	3c01      	subs	r4, #1
 80079d6:	f101 0714 	add.w	r7, r1, #20
 80079da:	f100 0614 	add.w	r6, r0, #20
 80079de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079e6:	3501      	adds	r5, #1
 80079e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80079ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80079f0:	eb06 030c 	add.w	r3, r6, ip
 80079f4:	eb07 090c 	add.w	r9, r7, ip
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	b39d      	cbz	r5, 8007a64 <quorem+0xa0>
 80079fc:	f04f 0a00 	mov.w	sl, #0
 8007a00:	4638      	mov	r0, r7
 8007a02:	46b6      	mov	lr, r6
 8007a04:	46d3      	mov	fp, sl
 8007a06:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a0a:	b293      	uxth	r3, r2
 8007a0c:	fb05 a303 	mla	r3, r5, r3, sl
 8007a10:	0c12      	lsrs	r2, r2, #16
 8007a12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a16:	fb05 a202 	mla	r2, r5, r2, sl
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ebab 0303 	sub.w	r3, fp, r3
 8007a20:	f8de b000 	ldr.w	fp, [lr]
 8007a24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007a28:	fa1f fb8b 	uxth.w	fp, fp
 8007a2c:	445b      	add	r3, fp
 8007a2e:	fa1f fb82 	uxth.w	fp, r2
 8007a32:	f8de 2000 	ldr.w	r2, [lr]
 8007a36:	4581      	cmp	r9, r0
 8007a38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a46:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a4a:	f84e 3b04 	str.w	r3, [lr], #4
 8007a4e:	d2da      	bcs.n	8007a06 <quorem+0x42>
 8007a50:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a54:	b933      	cbnz	r3, 8007a64 <quorem+0xa0>
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	3b04      	subs	r3, #4
 8007a5a:	429e      	cmp	r6, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	d331      	bcc.n	8007ac4 <quorem+0x100>
 8007a60:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a64:	4640      	mov	r0, r8
 8007a66:	f001 f827 	bl	8008ab8 <__mcmp>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	db26      	blt.n	8007abc <quorem+0xf8>
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f04f 0c00 	mov.w	ip, #0
 8007a74:	3501      	adds	r5, #1
 8007a76:	f857 1b04 	ldr.w	r1, [r7], #4
 8007a7a:	f8d0 e000 	ldr.w	lr, [r0]
 8007a7e:	b28b      	uxth	r3, r1
 8007a80:	ebac 0303 	sub.w	r3, ip, r3
 8007a84:	fa1f f28e 	uxth.w	r2, lr
 8007a88:	4413      	add	r3, r2
 8007a8a:	0c0a      	lsrs	r2, r1, #16
 8007a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a9a:	45b9      	cmp	r9, r7
 8007a9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007aa0:	f840 3b04 	str.w	r3, [r0], #4
 8007aa4:	d2e7      	bcs.n	8007a76 <quorem+0xb2>
 8007aa6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007aaa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007aae:	b92a      	cbnz	r2, 8007abc <quorem+0xf8>
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	429e      	cmp	r6, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	d30b      	bcc.n	8007ad0 <quorem+0x10c>
 8007ab8:	f8c8 4010 	str.w	r4, [r8, #16]
 8007abc:	4628      	mov	r0, r5
 8007abe:	b003      	add	sp, #12
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	3b04      	subs	r3, #4
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	d1c9      	bne.n	8007a60 <quorem+0x9c>
 8007acc:	3c01      	subs	r4, #1
 8007ace:	e7c4      	b.n	8007a5a <quorem+0x96>
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	d1ef      	bne.n	8007ab8 <quorem+0xf4>
 8007ad8:	3c01      	subs	r4, #1
 8007ada:	e7ea      	b.n	8007ab2 <quorem+0xee>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7ee      	b.n	8007abe <quorem+0xfa>

08007ae0 <_dtoa_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	4616      	mov	r6, r2
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007aea:	b095      	sub	sp, #84	; 0x54
 8007aec:	4604      	mov	r4, r0
 8007aee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007af2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007af6:	b93d      	cbnz	r5, 8007b08 <_dtoa_r+0x28>
 8007af8:	2010      	movs	r0, #16
 8007afa:	f000 fdb3 	bl	8008664 <malloc>
 8007afe:	6260      	str	r0, [r4, #36]	; 0x24
 8007b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b04:	6005      	str	r5, [r0, #0]
 8007b06:	60c5      	str	r5, [r0, #12]
 8007b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b0a:	6819      	ldr	r1, [r3, #0]
 8007b0c:	b151      	cbz	r1, 8007b24 <_dtoa_r+0x44>
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	2301      	movs	r3, #1
 8007b12:	4093      	lsls	r3, r2
 8007b14:	604a      	str	r2, [r1, #4]
 8007b16:	608b      	str	r3, [r1, #8]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fded 	bl	80086f8 <_Bfree>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	1e3b      	subs	r3, r7, #0
 8007b26:	bfaf      	iteee	ge
 8007b28:	2300      	movge	r3, #0
 8007b2a:	2201      	movlt	r2, #1
 8007b2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b30:	9303      	strlt	r3, [sp, #12]
 8007b32:	bfac      	ite	ge
 8007b34:	f8c8 3000 	strge.w	r3, [r8]
 8007b38:	f8c8 2000 	strlt.w	r2, [r8]
 8007b3c:	4bae      	ldr	r3, [pc, #696]	; (8007df8 <_dtoa_r+0x318>)
 8007b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b42:	ea33 0308 	bics.w	r3, r3, r8
 8007b46:	d11b      	bne.n	8007b80 <_dtoa_r+0xa0>
 8007b48:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	9b02      	ldr	r3, [sp, #8]
 8007b52:	b923      	cbnz	r3, 8007b5e <_dtoa_r+0x7e>
 8007b54:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f000 8545 	beq.w	80085e8 <_dtoa_r+0xb08>
 8007b5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b60:	b953      	cbnz	r3, 8007b78 <_dtoa_r+0x98>
 8007b62:	4ba6      	ldr	r3, [pc, #664]	; (8007dfc <_dtoa_r+0x31c>)
 8007b64:	e021      	b.n	8007baa <_dtoa_r+0xca>
 8007b66:	4ba6      	ldr	r3, [pc, #664]	; (8007e00 <_dtoa_r+0x320>)
 8007b68:	9306      	str	r3, [sp, #24]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	9806      	ldr	r0, [sp, #24]
 8007b72:	b015      	add	sp, #84	; 0x54
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b78:	4ba0      	ldr	r3, [pc, #640]	; (8007dfc <_dtoa_r+0x31c>)
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	3303      	adds	r3, #3
 8007b7e:	e7f5      	b.n	8007b6c <_dtoa_r+0x8c>
 8007b80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007b90:	4682      	mov	sl, r0
 8007b92:	b160      	cbz	r0, 8007bae <_dtoa_r+0xce>
 8007b94:	2301      	movs	r3, #1
 8007b96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8520 	beq.w	80085e2 <_dtoa_r+0xb02>
 8007ba2:	4b98      	ldr	r3, [pc, #608]	; (8007e04 <_dtoa_r+0x324>)
 8007ba4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	9306      	str	r3, [sp, #24]
 8007bac:	e7e0      	b.n	8007b70 <_dtoa_r+0x90>
 8007bae:	ab12      	add	r3, sp, #72	; 0x48
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	ab13      	add	r3, sp, #76	; 0x4c
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	463b      	mov	r3, r7
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fff4 	bl	8008ba8 <__d2b>
 8007bc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007bc4:	4683      	mov	fp, r0
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	d07d      	beq.n	8007cc6 <_dtoa_r+0x1e6>
 8007bca:	46b0      	mov	r8, r6
 8007bcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bd0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007bd4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007bd8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bdc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007be0:	2200      	movs	r2, #0
 8007be2:	4b89      	ldr	r3, [pc, #548]	; (8007e08 <_dtoa_r+0x328>)
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7f8 fabe 	bl	8000168 <__aeabi_dsub>
 8007bec:	a37c      	add	r3, pc, #496	; (adr r3, 8007de0 <_dtoa_r+0x300>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fc71 	bl	80004d8 <__aeabi_dmul>
 8007bf6:	a37c      	add	r3, pc, #496	; (adr r3, 8007de8 <_dtoa_r+0x308>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	f7f8 fab6 	bl	800016c <__adddf3>
 8007c00:	4606      	mov	r6, r0
 8007c02:	4628      	mov	r0, r5
 8007c04:	460f      	mov	r7, r1
 8007c06:	f7f8 fbfd 	bl	8000404 <__aeabi_i2d>
 8007c0a:	a379      	add	r3, pc, #484	; (adr r3, 8007df0 <_dtoa_r+0x310>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fc62 	bl	80004d8 <__aeabi_dmul>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7f8 faa6 	bl	800016c <__adddf3>
 8007c20:	4606      	mov	r6, r0
 8007c22:	460f      	mov	r7, r1
 8007c24:	f7f8 ff08 	bl	8000a38 <__aeabi_d2iz>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4630      	mov	r0, r6
 8007c30:	4639      	mov	r1, r7
 8007c32:	f7f8 fec3 	bl	80009bc <__aeabi_dcmplt>
 8007c36:	b148      	cbz	r0, 8007c4c <_dtoa_r+0x16c>
 8007c38:	4650      	mov	r0, sl
 8007c3a:	f7f8 fbe3 	bl	8000404 <__aeabi_i2d>
 8007c3e:	4632      	mov	r2, r6
 8007c40:	463b      	mov	r3, r7
 8007c42:	f7f8 feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8007c46:	b908      	cbnz	r0, 8007c4c <_dtoa_r+0x16c>
 8007c48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c4c:	f1ba 0f16 	cmp.w	sl, #22
 8007c50:	d85a      	bhi.n	8007d08 <_dtoa_r+0x228>
 8007c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c56:	496d      	ldr	r1, [pc, #436]	; (8007e0c <_dtoa_r+0x32c>)
 8007c58:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c60:	f7f8 feca 	bl	80009f8 <__aeabi_dcmpgt>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d051      	beq.n	8007d0c <_dtoa_r+0x22c>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c72:	1b5d      	subs	r5, r3, r5
 8007c74:	1e6b      	subs	r3, r5, #1
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	bf43      	ittte	mi
 8007c7a:	2300      	movmi	r3, #0
 8007c7c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007c80:	9307      	strmi	r3, [sp, #28]
 8007c82:	f04f 0900 	movpl.w	r9, #0
 8007c86:	f1ba 0f00 	cmp.w	sl, #0
 8007c8a:	db41      	blt.n	8007d10 <_dtoa_r+0x230>
 8007c8c:	9b07      	ldr	r3, [sp, #28]
 8007c8e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007c92:	4453      	add	r3, sl
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	f200 808f 	bhi.w	8007dc0 <_dtoa_r+0x2e0>
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	bfc4      	itt	gt
 8007ca6:	3b04      	subgt	r3, #4
 8007ca8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cac:	bfc8      	it	gt
 8007cae:	2500      	movgt	r5, #0
 8007cb0:	f1a3 0302 	sub.w	r3, r3, #2
 8007cb4:	bfd8      	it	le
 8007cb6:	2501      	movle	r5, #1
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	f200 808d 	bhi.w	8007dd8 <_dtoa_r+0x2f8>
 8007cbe:	e8df f003 	tbb	[pc, r3]
 8007cc2:	7d7b      	.short	0x7d7b
 8007cc4:	6f2f      	.short	0x6f2f
 8007cc6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007cca:	441d      	add	r5, r3
 8007ccc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007cd0:	2820      	cmp	r0, #32
 8007cd2:	dd13      	ble.n	8007cfc <_dtoa_r+0x21c>
 8007cd4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	fa08 f800 	lsl.w	r8, r8, r0
 8007cde:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007ce2:	fa23 f000 	lsr.w	r0, r3, r0
 8007ce6:	ea48 0000 	orr.w	r0, r8, r0
 8007cea:	f7f8 fb7b 	bl	80003e4 <__aeabi_ui2d>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007cf6:	3d01      	subs	r5, #1
 8007cf8:	9310      	str	r3, [sp, #64]	; 0x40
 8007cfa:	e771      	b.n	8007be0 <_dtoa_r+0x100>
 8007cfc:	9b02      	ldr	r3, [sp, #8]
 8007cfe:	f1c0 0020 	rsb	r0, r0, #32
 8007d02:	fa03 f000 	lsl.w	r0, r3, r0
 8007d06:	e7f0      	b.n	8007cea <_dtoa_r+0x20a>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7b0      	b.n	8007c6e <_dtoa_r+0x18e>
 8007d0c:	900d      	str	r0, [sp, #52]	; 0x34
 8007d0e:	e7af      	b.n	8007c70 <_dtoa_r+0x190>
 8007d10:	f1ca 0300 	rsb	r3, sl, #0
 8007d14:	9308      	str	r3, [sp, #32]
 8007d16:	2300      	movs	r3, #0
 8007d18:	eba9 090a 	sub.w	r9, r9, sl
 8007d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d1e:	e7bc      	b.n	8007c9a <_dtoa_r+0x1ba>
 8007d20:	2301      	movs	r3, #1
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dd74      	ble.n	8007e14 <_dtoa_r+0x334>
 8007d2a:	4698      	mov	r8, r3
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d32:	6072      	str	r2, [r6, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	f102 0014 	add.w	r0, r2, #20
 8007d3a:	4298      	cmp	r0, r3
 8007d3c:	6871      	ldr	r1, [r6, #4]
 8007d3e:	d96e      	bls.n	8007e1e <_dtoa_r+0x33e>
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fca5 	bl	8008690 <_Balloc>
 8007d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d48:	6030      	str	r0, [r6, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f1b8 0f0e 	cmp.w	r8, #14
 8007d50:	9306      	str	r3, [sp, #24]
 8007d52:	f200 80ed 	bhi.w	8007f30 <_dtoa_r+0x450>
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	f000 80ea 	beq.w	8007f30 <_dtoa_r+0x450>
 8007d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d60:	f1ba 0f00 	cmp.w	sl, #0
 8007d64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007d68:	dd77      	ble.n	8007e5a <_dtoa_r+0x37a>
 8007d6a:	4a28      	ldr	r2, [pc, #160]	; (8007e0c <_dtoa_r+0x32c>)
 8007d6c:	f00a 030f 	and.w	r3, sl, #15
 8007d70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d78:	06f0      	lsls	r0, r6, #27
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d82:	d568      	bpl.n	8007e56 <_dtoa_r+0x376>
 8007d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d88:	4b21      	ldr	r3, [pc, #132]	; (8007e10 <_dtoa_r+0x330>)
 8007d8a:	2503      	movs	r5, #3
 8007d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d90:	f7f8 fccc 	bl	800072c <__aeabi_ddiv>
 8007d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d98:	f006 060f 	and.w	r6, r6, #15
 8007d9c:	4f1c      	ldr	r7, [pc, #112]	; (8007e10 <_dtoa_r+0x330>)
 8007d9e:	e04f      	b.n	8007e40 <_dtoa_r+0x360>
 8007da0:	2301      	movs	r3, #1
 8007da2:	9309      	str	r3, [sp, #36]	; 0x24
 8007da4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007da6:	4453      	add	r3, sl
 8007da8:	f103 0801 	add.w	r8, r3, #1
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	4643      	mov	r3, r8
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	bfb8      	it	lt
 8007db4:	2301      	movlt	r3, #1
 8007db6:	e7ba      	b.n	8007d2e <_dtoa_r+0x24e>
 8007db8:	2300      	movs	r3, #0
 8007dba:	e7b2      	b.n	8007d22 <_dtoa_r+0x242>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e7f0      	b.n	8007da2 <_dtoa_r+0x2c2>
 8007dc0:	2501      	movs	r5, #1
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9509      	str	r5, [sp, #36]	; 0x24
 8007dc6:	931e      	str	r3, [sp, #120]	; 0x78
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dcc:	2200      	movs	r2, #0
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	4698      	mov	r8, r3
 8007dd2:	2312      	movs	r3, #18
 8007dd4:	921f      	str	r2, [sp, #124]	; 0x7c
 8007dd6:	e7aa      	b.n	8007d2e <_dtoa_r+0x24e>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	9309      	str	r3, [sp, #36]	; 0x24
 8007ddc:	e7f4      	b.n	8007dc8 <_dtoa_r+0x2e8>
 8007dde:	bf00      	nop
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	7ff00000 	.word	0x7ff00000
 8007dfc:	08009331 	.word	0x08009331
 8007e00:	08009328 	.word	0x08009328
 8007e04:	08009305 	.word	0x08009305
 8007e08:	3ff80000 	.word	0x3ff80000
 8007e0c:	08009360 	.word	0x08009360
 8007e10:	08009338 	.word	0x08009338
 8007e14:	2301      	movs	r3, #1
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	4698      	mov	r8, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	e7da      	b.n	8007dd4 <_dtoa_r+0x2f4>
 8007e1e:	3101      	adds	r1, #1
 8007e20:	6071      	str	r1, [r6, #4]
 8007e22:	0052      	lsls	r2, r2, #1
 8007e24:	e787      	b.n	8007d36 <_dtoa_r+0x256>
 8007e26:	07f1      	lsls	r1, r6, #31
 8007e28:	d508      	bpl.n	8007e3c <_dtoa_r+0x35c>
 8007e2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e32:	f7f8 fb51 	bl	80004d8 <__aeabi_dmul>
 8007e36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e3a:	3501      	adds	r5, #1
 8007e3c:	1076      	asrs	r6, r6, #1
 8007e3e:	3708      	adds	r7, #8
 8007e40:	2e00      	cmp	r6, #0
 8007e42:	d1f0      	bne.n	8007e26 <_dtoa_r+0x346>
 8007e44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e4c:	f7f8 fc6e 	bl	800072c <__aeabi_ddiv>
 8007e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e54:	e01b      	b.n	8007e8e <_dtoa_r+0x3ae>
 8007e56:	2502      	movs	r5, #2
 8007e58:	e7a0      	b.n	8007d9c <_dtoa_r+0x2bc>
 8007e5a:	f000 80a4 	beq.w	8007fa6 <_dtoa_r+0x4c6>
 8007e5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e62:	f1ca 0600 	rsb	r6, sl, #0
 8007e66:	4ba0      	ldr	r3, [pc, #640]	; (80080e8 <_dtoa_r+0x608>)
 8007e68:	f006 020f 	and.w	r2, r6, #15
 8007e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fb30 	bl	80004d8 <__aeabi_dmul>
 8007e78:	2502      	movs	r5, #2
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e80:	4f9a      	ldr	r7, [pc, #616]	; (80080ec <_dtoa_r+0x60c>)
 8007e82:	1136      	asrs	r6, r6, #4
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	f040 8083 	bne.w	8007f90 <_dtoa_r+0x4b0>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e0      	bne.n	8007e50 <_dtoa_r+0x370>
 8007e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 808a 	beq.w	8007faa <_dtoa_r+0x4ca>
 8007e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4b92      	ldr	r3, [pc, #584]	; (80080f0 <_dtoa_r+0x610>)
 8007ea6:	f7f8 fd89 	bl	80009bc <__aeabi_dcmplt>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d07d      	beq.n	8007faa <_dtoa_r+0x4ca>
 8007eae:	f1b8 0f00 	cmp.w	r8, #0
 8007eb2:	d07a      	beq.n	8007faa <_dtoa_r+0x4ca>
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd36      	ble.n	8007f28 <_dtoa_r+0x448>
 8007eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4b8c      	ldr	r3, [pc, #560]	; (80080f4 <_dtoa_r+0x614>)
 8007ec2:	f7f8 fb09 	bl	80004d8 <__aeabi_dmul>
 8007ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eca:	9e04      	ldr	r6, [sp, #16]
 8007ecc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7f8 fa96 	bl	8000404 <__aeabi_i2d>
 8007ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007edc:	f7f8 fafc 	bl	80004d8 <__aeabi_dmul>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4b85      	ldr	r3, [pc, #532]	; (80080f8 <_dtoa_r+0x618>)
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ef0:	950b      	str	r5, [sp, #44]	; 0x2c
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d15c      	bne.n	8007fb0 <_dtoa_r+0x4d0>
 8007ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	4b7f      	ldr	r3, [pc, #508]	; (80080fc <_dtoa_r+0x61c>)
 8007efe:	f7f8 f933 	bl	8000168 <__aeabi_dsub>
 8007f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f04:	462b      	mov	r3, r5
 8007f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f0a:	f7f8 fd75 	bl	80009f8 <__aeabi_dcmpgt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f040 8281 	bne.w	8008416 <_dtoa_r+0x936>
 8007f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f1e:	f7f8 fd4d 	bl	80009bc <__aeabi_dcmplt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 8275 	bne.w	8008412 <_dtoa_r+0x932>
 8007f28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f2c0 814b 	blt.w	80081ce <_dtoa_r+0x6ee>
 8007f38:	f1ba 0f0e 	cmp.w	sl, #14
 8007f3c:	f300 8147 	bgt.w	80081ce <_dtoa_r+0x6ee>
 8007f40:	4b69      	ldr	r3, [pc, #420]	; (80080e8 <_dtoa_r+0x608>)
 8007f42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f280 80d7 	bge.w	8008104 <_dtoa_r+0x624>
 8007f56:	f1b8 0f00 	cmp.w	r8, #0
 8007f5a:	f300 80d3 	bgt.w	8008104 <_dtoa_r+0x624>
 8007f5e:	f040 8257 	bne.w	8008410 <_dtoa_r+0x930>
 8007f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f66:	2200      	movs	r2, #0
 8007f68:	4b64      	ldr	r3, [pc, #400]	; (80080fc <_dtoa_r+0x61c>)
 8007f6a:	f7f8 fab5 	bl	80004d8 <__aeabi_dmul>
 8007f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f72:	f7f8 fd37 	bl	80009e4 <__aeabi_dcmpge>
 8007f76:	4646      	mov	r6, r8
 8007f78:	4647      	mov	r7, r8
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f040 822d 	bne.w	80083da <_dtoa_r+0x8fa>
 8007f80:	9b06      	ldr	r3, [sp, #24]
 8007f82:	9a06      	ldr	r2, [sp, #24]
 8007f84:	1c5d      	adds	r5, r3, #1
 8007f86:	2331      	movs	r3, #49	; 0x31
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	7013      	strb	r3, [r2, #0]
 8007f8e:	e228      	b.n	80083e2 <_dtoa_r+0x902>
 8007f90:	07f2      	lsls	r2, r6, #31
 8007f92:	d505      	bpl.n	8007fa0 <_dtoa_r+0x4c0>
 8007f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f98:	f7f8 fa9e 	bl	80004d8 <__aeabi_dmul>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	3501      	adds	r5, #1
 8007fa0:	1076      	asrs	r6, r6, #1
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	e76e      	b.n	8007e84 <_dtoa_r+0x3a4>
 8007fa6:	2502      	movs	r5, #2
 8007fa8:	e771      	b.n	8007e8e <_dtoa_r+0x3ae>
 8007faa:	4657      	mov	r7, sl
 8007fac:	4646      	mov	r6, r8
 8007fae:	e790      	b.n	8007ed2 <_dtoa_r+0x3f2>
 8007fb0:	4b4d      	ldr	r3, [pc, #308]	; (80080e8 <_dtoa_r+0x608>)
 8007fb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d048      	beq.n	8008052 <_dtoa_r+0x572>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	494e      	ldr	r1, [pc, #312]	; (8008100 <_dtoa_r+0x620>)
 8007fc8:	f7f8 fbb0 	bl	800072c <__aeabi_ddiv>
 8007fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fd0:	f7f8 f8ca 	bl	8000168 <__aeabi_dsub>
 8007fd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fd8:	9d06      	ldr	r5, [sp, #24]
 8007fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fde:	f7f8 fd2b 	bl	8000a38 <__aeabi_d2iz>
 8007fe2:	9011      	str	r0, [sp, #68]	; 0x44
 8007fe4:	f7f8 fa0e 	bl	8000404 <__aeabi_i2d>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff0:	f7f8 f8ba 	bl	8000168 <__aeabi_dsub>
 8007ff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffa:	3330      	adds	r3, #48	; 0x30
 8007ffc:	f805 3b01 	strb.w	r3, [r5], #1
 8008000:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008004:	f7f8 fcda 	bl	80009bc <__aeabi_dcmplt>
 8008008:	2800      	cmp	r0, #0
 800800a:	d163      	bne.n	80080d4 <_dtoa_r+0x5f4>
 800800c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008010:	2000      	movs	r0, #0
 8008012:	4937      	ldr	r1, [pc, #220]	; (80080f0 <_dtoa_r+0x610>)
 8008014:	f7f8 f8a8 	bl	8000168 <__aeabi_dsub>
 8008018:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800801c:	f7f8 fcce 	bl	80009bc <__aeabi_dcmplt>
 8008020:	2800      	cmp	r0, #0
 8008022:	f040 80b5 	bne.w	8008190 <_dtoa_r+0x6b0>
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	1aeb      	subs	r3, r5, r3
 800802a:	429e      	cmp	r6, r3
 800802c:	f77f af7c 	ble.w	8007f28 <_dtoa_r+0x448>
 8008030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008034:	2200      	movs	r2, #0
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <_dtoa_r+0x614>)
 8008038:	f7f8 fa4e 	bl	80004d8 <__aeabi_dmul>
 800803c:	2200      	movs	r2, #0
 800803e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008046:	4b2b      	ldr	r3, [pc, #172]	; (80080f4 <_dtoa_r+0x614>)
 8008048:	f7f8 fa46 	bl	80004d8 <__aeabi_dmul>
 800804c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008050:	e7c3      	b.n	8007fda <_dtoa_r+0x4fa>
 8008052:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008056:	f7f8 fa3f 	bl	80004d8 <__aeabi_dmul>
 800805a:	9b06      	ldr	r3, [sp, #24]
 800805c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008060:	199d      	adds	r5, r3, r6
 8008062:	461e      	mov	r6, r3
 8008064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008068:	f7f8 fce6 	bl	8000a38 <__aeabi_d2iz>
 800806c:	9011      	str	r0, [sp, #68]	; 0x44
 800806e:	f7f8 f9c9 	bl	8000404 <__aeabi_i2d>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807a:	f7f8 f875 	bl	8000168 <__aeabi_dsub>
 800807e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008084:	3330      	adds	r3, #48	; 0x30
 8008086:	f806 3b01 	strb.w	r3, [r6], #1
 800808a:	42ae      	cmp	r6, r5
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	d124      	bne.n	80080dc <_dtoa_r+0x5fc>
 8008092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <_dtoa_r+0x620>)
 8008098:	f7f8 f868 	bl	800016c <__adddf3>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a4:	f7f8 fca8 	bl	80009f8 <__aeabi_dcmpgt>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d171      	bne.n	8008190 <_dtoa_r+0x6b0>
 80080ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080b0:	2000      	movs	r0, #0
 80080b2:	4913      	ldr	r1, [pc, #76]	; (8008100 <_dtoa_r+0x620>)
 80080b4:	f7f8 f858 	bl	8000168 <__aeabi_dsub>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c0:	f7f8 fc7c 	bl	80009bc <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f43f af2f 	beq.w	8007f28 <_dtoa_r+0x448>
 80080ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080ce:	1e6a      	subs	r2, r5, #1
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d001      	beq.n	80080d8 <_dtoa_r+0x5f8>
 80080d4:	46ba      	mov	sl, r7
 80080d6:	e04a      	b.n	800816e <_dtoa_r+0x68e>
 80080d8:	4615      	mov	r5, r2
 80080da:	e7f6      	b.n	80080ca <_dtoa_r+0x5ea>
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <_dtoa_r+0x614>)
 80080de:	f7f8 f9fb 	bl	80004d8 <__aeabi_dmul>
 80080e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e6:	e7bd      	b.n	8008064 <_dtoa_r+0x584>
 80080e8:	08009360 	.word	0x08009360
 80080ec:	08009338 	.word	0x08009338
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	40240000 	.word	0x40240000
 80080f8:	401c0000 	.word	0x401c0000
 80080fc:	40140000 	.word	0x40140000
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	9d06      	ldr	r5, [sp, #24]
 8008106:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800810a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 fb0b 	bl	800072c <__aeabi_ddiv>
 8008116:	f7f8 fc8f 	bl	8000a38 <__aeabi_d2iz>
 800811a:	4681      	mov	r9, r0
 800811c:	f7f8 f972 	bl	8000404 <__aeabi_i2d>
 8008120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008124:	f7f8 f9d8 	bl	80004d8 <__aeabi_dmul>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 f81a 	bl	8000168 <__aeabi_dsub>
 8008134:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008138:	f805 6b01 	strb.w	r6, [r5], #1
 800813c:	9e06      	ldr	r6, [sp, #24]
 800813e:	4602      	mov	r2, r0
 8008140:	1bae      	subs	r6, r5, r6
 8008142:	45b0      	cmp	r8, r6
 8008144:	460b      	mov	r3, r1
 8008146:	d135      	bne.n	80081b4 <_dtoa_r+0x6d4>
 8008148:	f7f8 f810 	bl	800016c <__adddf3>
 800814c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008150:	4606      	mov	r6, r0
 8008152:	460f      	mov	r7, r1
 8008154:	f7f8 fc50 	bl	80009f8 <__aeabi_dcmpgt>
 8008158:	b9c8      	cbnz	r0, 800818e <_dtoa_r+0x6ae>
 800815a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8008166:	b110      	cbz	r0, 800816e <_dtoa_r+0x68e>
 8008168:	f019 0f01 	tst.w	r9, #1
 800816c:	d10f      	bne.n	800818e <_dtoa_r+0x6ae>
 800816e:	4659      	mov	r1, fp
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fac1 	bl	80086f8 <_Bfree>
 8008176:	2300      	movs	r3, #0
 8008178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800817a:	702b      	strb	r3, [r5, #0]
 800817c:	f10a 0301 	add.w	r3, sl, #1
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008184:	2b00      	cmp	r3, #0
 8008186:	f43f acf3 	beq.w	8007b70 <_dtoa_r+0x90>
 800818a:	601d      	str	r5, [r3, #0]
 800818c:	e4f0      	b.n	8007b70 <_dtoa_r+0x90>
 800818e:	4657      	mov	r7, sl
 8008190:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008194:	1e6b      	subs	r3, r5, #1
 8008196:	2a39      	cmp	r2, #57	; 0x39
 8008198:	d106      	bne.n	80081a8 <_dtoa_r+0x6c8>
 800819a:	9a06      	ldr	r2, [sp, #24]
 800819c:	429a      	cmp	r2, r3
 800819e:	d107      	bne.n	80081b0 <_dtoa_r+0x6d0>
 80081a0:	2330      	movs	r3, #48	; 0x30
 80081a2:	7013      	strb	r3, [r2, #0]
 80081a4:	4613      	mov	r3, r2
 80081a6:	3701      	adds	r7, #1
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	3201      	adds	r2, #1
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e791      	b.n	80080d4 <_dtoa_r+0x5f4>
 80081b0:	461d      	mov	r5, r3
 80081b2:	e7ed      	b.n	8008190 <_dtoa_r+0x6b0>
 80081b4:	2200      	movs	r2, #0
 80081b6:	4b99      	ldr	r3, [pc, #612]	; (800841c <_dtoa_r+0x93c>)
 80081b8:	f7f8 f98e 	bl	80004d8 <__aeabi_dmul>
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	4606      	mov	r6, r0
 80081c2:	460f      	mov	r7, r1
 80081c4:	f7f8 fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d09e      	beq.n	800810a <_dtoa_r+0x62a>
 80081cc:	e7cf      	b.n	800816e <_dtoa_r+0x68e>
 80081ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	f000 8088 	beq.w	80082e6 <_dtoa_r+0x806>
 80081d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081d8:	2a01      	cmp	r2, #1
 80081da:	dc6d      	bgt.n	80082b8 <_dtoa_r+0x7d8>
 80081dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081de:	2a00      	cmp	r2, #0
 80081e0:	d066      	beq.n	80082b0 <_dtoa_r+0x7d0>
 80081e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081e6:	464d      	mov	r5, r9
 80081e8:	9e08      	ldr	r6, [sp, #32]
 80081ea:	9a07      	ldr	r2, [sp, #28]
 80081ec:	2101      	movs	r1, #1
 80081ee:	441a      	add	r2, r3
 80081f0:	4620      	mov	r0, r4
 80081f2:	4499      	add	r9, r3
 80081f4:	9207      	str	r2, [sp, #28]
 80081f6:	f000 fb1f 	bl	8008838 <__i2b>
 80081fa:	4607      	mov	r7, r0
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	dd0b      	ble.n	8008218 <_dtoa_r+0x738>
 8008200:	9b07      	ldr	r3, [sp, #28]
 8008202:	2b00      	cmp	r3, #0
 8008204:	dd08      	ble.n	8008218 <_dtoa_r+0x738>
 8008206:	42ab      	cmp	r3, r5
 8008208:	bfa8      	it	ge
 800820a:	462b      	movge	r3, r5
 800820c:	9a07      	ldr	r2, [sp, #28]
 800820e:	eba9 0903 	sub.w	r9, r9, r3
 8008212:	1aed      	subs	r5, r5, r3
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	9b08      	ldr	r3, [sp, #32]
 800821a:	b1eb      	cbz	r3, 8008258 <_dtoa_r+0x778>
 800821c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d065      	beq.n	80082ee <_dtoa_r+0x80e>
 8008222:	b18e      	cbz	r6, 8008248 <_dtoa_r+0x768>
 8008224:	4639      	mov	r1, r7
 8008226:	4632      	mov	r2, r6
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fba3 	bl	8008974 <__pow5mult>
 800822e:	465a      	mov	r2, fp
 8008230:	4601      	mov	r1, r0
 8008232:	4607      	mov	r7, r0
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fb08 	bl	800884a <__multiply>
 800823a:	4659      	mov	r1, fp
 800823c:	900a      	str	r0, [sp, #40]	; 0x28
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fa5a 	bl	80086f8 <_Bfree>
 8008244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008246:	469b      	mov	fp, r3
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	1b9a      	subs	r2, r3, r6
 800824c:	d004      	beq.n	8008258 <_dtoa_r+0x778>
 800824e:	4659      	mov	r1, fp
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fb8f 	bl	8008974 <__pow5mult>
 8008256:	4683      	mov	fp, r0
 8008258:	2101      	movs	r1, #1
 800825a:	4620      	mov	r0, r4
 800825c:	f000 faec 	bl	8008838 <__i2b>
 8008260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008262:	4606      	mov	r6, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 81c6 	beq.w	80085f6 <_dtoa_r+0xb16>
 800826a:	461a      	mov	r2, r3
 800826c:	4601      	mov	r1, r0
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fb80 	bl	8008974 <__pow5mult>
 8008274:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008276:	4606      	mov	r6, r0
 8008278:	2b01      	cmp	r3, #1
 800827a:	dc3e      	bgt.n	80082fa <_dtoa_r+0x81a>
 800827c:	9b02      	ldr	r3, [sp, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d137      	bne.n	80082f2 <_dtoa_r+0x812>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	2b00      	cmp	r3, #0
 800828a:	d134      	bne.n	80082f6 <_dtoa_r+0x816>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008292:	0d1b      	lsrs	r3, r3, #20
 8008294:	051b      	lsls	r3, r3, #20
 8008296:	b12b      	cbz	r3, 80082a4 <_dtoa_r+0x7c4>
 8008298:	9b07      	ldr	r3, [sp, #28]
 800829a:	f109 0901 	add.w	r9, r9, #1
 800829e:	3301      	adds	r3, #1
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	2301      	movs	r3, #1
 80082a4:	9308      	str	r3, [sp, #32]
 80082a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d128      	bne.n	80082fe <_dtoa_r+0x81e>
 80082ac:	2001      	movs	r0, #1
 80082ae:	e02e      	b.n	800830e <_dtoa_r+0x82e>
 80082b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082b6:	e796      	b.n	80081e6 <_dtoa_r+0x706>
 80082b8:	9b08      	ldr	r3, [sp, #32]
 80082ba:	f108 36ff 	add.w	r6, r8, #4294967295
 80082be:	42b3      	cmp	r3, r6
 80082c0:	bfb7      	itett	lt
 80082c2:	9b08      	ldrlt	r3, [sp, #32]
 80082c4:	1b9e      	subge	r6, r3, r6
 80082c6:	1af2      	sublt	r2, r6, r3
 80082c8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80082ca:	bfbf      	itttt	lt
 80082cc:	9608      	strlt	r6, [sp, #32]
 80082ce:	189b      	addlt	r3, r3, r2
 80082d0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80082d2:	2600      	movlt	r6, #0
 80082d4:	f1b8 0f00 	cmp.w	r8, #0
 80082d8:	bfb9      	ittee	lt
 80082da:	eba9 0508 	sublt.w	r5, r9, r8
 80082de:	2300      	movlt	r3, #0
 80082e0:	464d      	movge	r5, r9
 80082e2:	4643      	movge	r3, r8
 80082e4:	e781      	b.n	80081ea <_dtoa_r+0x70a>
 80082e6:	9e08      	ldr	r6, [sp, #32]
 80082e8:	464d      	mov	r5, r9
 80082ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082ec:	e786      	b.n	80081fc <_dtoa_r+0x71c>
 80082ee:	9a08      	ldr	r2, [sp, #32]
 80082f0:	e7ad      	b.n	800824e <_dtoa_r+0x76e>
 80082f2:	2300      	movs	r3, #0
 80082f4:	e7d6      	b.n	80082a4 <_dtoa_r+0x7c4>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	e7d4      	b.n	80082a4 <_dtoa_r+0x7c4>
 80082fa:	2300      	movs	r3, #0
 80082fc:	9308      	str	r3, [sp, #32]
 80082fe:	6933      	ldr	r3, [r6, #16]
 8008300:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008304:	6918      	ldr	r0, [r3, #16]
 8008306:	f000 fa49 	bl	800879c <__hi0bits>
 800830a:	f1c0 0020 	rsb	r0, r0, #32
 800830e:	9b07      	ldr	r3, [sp, #28]
 8008310:	4418      	add	r0, r3
 8008312:	f010 001f 	ands.w	r0, r0, #31
 8008316:	d047      	beq.n	80083a8 <_dtoa_r+0x8c8>
 8008318:	f1c0 0320 	rsb	r3, r0, #32
 800831c:	2b04      	cmp	r3, #4
 800831e:	dd3b      	ble.n	8008398 <_dtoa_r+0x8b8>
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	f1c0 001c 	rsb	r0, r0, #28
 8008326:	4481      	add	r9, r0
 8008328:	4405      	add	r5, r0
 800832a:	4403      	add	r3, r0
 800832c:	9307      	str	r3, [sp, #28]
 800832e:	f1b9 0f00 	cmp.w	r9, #0
 8008332:	dd05      	ble.n	8008340 <_dtoa_r+0x860>
 8008334:	4659      	mov	r1, fp
 8008336:	464a      	mov	r2, r9
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fb69 	bl	8008a10 <__lshift>
 800833e:	4683      	mov	fp, r0
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	2b00      	cmp	r3, #0
 8008344:	dd05      	ble.n	8008352 <_dtoa_r+0x872>
 8008346:	4631      	mov	r1, r6
 8008348:	461a      	mov	r2, r3
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fb60 	bl	8008a10 <__lshift>
 8008350:	4606      	mov	r6, r0
 8008352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008354:	b353      	cbz	r3, 80083ac <_dtoa_r+0x8cc>
 8008356:	4631      	mov	r1, r6
 8008358:	4658      	mov	r0, fp
 800835a:	f000 fbad 	bl	8008ab8 <__mcmp>
 800835e:	2800      	cmp	r0, #0
 8008360:	da24      	bge.n	80083ac <_dtoa_r+0x8cc>
 8008362:	2300      	movs	r3, #0
 8008364:	4659      	mov	r1, fp
 8008366:	220a      	movs	r2, #10
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f9dc 	bl	8008726 <__multadd>
 800836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008370:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008374:	4683      	mov	fp, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8144 	beq.w	8008604 <_dtoa_r+0xb24>
 800837c:	2300      	movs	r3, #0
 800837e:	4639      	mov	r1, r7
 8008380:	220a      	movs	r2, #10
 8008382:	4620      	mov	r0, r4
 8008384:	f000 f9cf 	bl	8008726 <__multadd>
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	4607      	mov	r7, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc4d      	bgt.n	800842c <_dtoa_r+0x94c>
 8008390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008392:	2b02      	cmp	r3, #2
 8008394:	dd4a      	ble.n	800842c <_dtoa_r+0x94c>
 8008396:	e011      	b.n	80083bc <_dtoa_r+0x8dc>
 8008398:	d0c9      	beq.n	800832e <_dtoa_r+0x84e>
 800839a:	9a07      	ldr	r2, [sp, #28]
 800839c:	331c      	adds	r3, #28
 800839e:	441a      	add	r2, r3
 80083a0:	4499      	add	r9, r3
 80083a2:	441d      	add	r5, r3
 80083a4:	4613      	mov	r3, r2
 80083a6:	e7c1      	b.n	800832c <_dtoa_r+0x84c>
 80083a8:	4603      	mov	r3, r0
 80083aa:	e7f6      	b.n	800839a <_dtoa_r+0x8ba>
 80083ac:	f1b8 0f00 	cmp.w	r8, #0
 80083b0:	dc36      	bgt.n	8008420 <_dtoa_r+0x940>
 80083b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	dd33      	ble.n	8008420 <_dtoa_r+0x940>
 80083b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80083bc:	9b04      	ldr	r3, [sp, #16]
 80083be:	b963      	cbnz	r3, 80083da <_dtoa_r+0x8fa>
 80083c0:	4631      	mov	r1, r6
 80083c2:	2205      	movs	r2, #5
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f9ae 	bl	8008726 <__multadd>
 80083ca:	4601      	mov	r1, r0
 80083cc:	4606      	mov	r6, r0
 80083ce:	4658      	mov	r0, fp
 80083d0:	f000 fb72 	bl	8008ab8 <__mcmp>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f73f add3 	bgt.w	8007f80 <_dtoa_r+0x4a0>
 80083da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083dc:	9d06      	ldr	r5, [sp, #24]
 80083de:	ea6f 0a03 	mvn.w	sl, r3
 80083e2:	f04f 0900 	mov.w	r9, #0
 80083e6:	4631      	mov	r1, r6
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f985 	bl	80086f8 <_Bfree>
 80083ee:	2f00      	cmp	r7, #0
 80083f0:	f43f aebd 	beq.w	800816e <_dtoa_r+0x68e>
 80083f4:	f1b9 0f00 	cmp.w	r9, #0
 80083f8:	d005      	beq.n	8008406 <_dtoa_r+0x926>
 80083fa:	45b9      	cmp	r9, r7
 80083fc:	d003      	beq.n	8008406 <_dtoa_r+0x926>
 80083fe:	4649      	mov	r1, r9
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f979 	bl	80086f8 <_Bfree>
 8008406:	4639      	mov	r1, r7
 8008408:	4620      	mov	r0, r4
 800840a:	f000 f975 	bl	80086f8 <_Bfree>
 800840e:	e6ae      	b.n	800816e <_dtoa_r+0x68e>
 8008410:	2600      	movs	r6, #0
 8008412:	4637      	mov	r7, r6
 8008414:	e7e1      	b.n	80083da <_dtoa_r+0x8fa>
 8008416:	46ba      	mov	sl, r7
 8008418:	4637      	mov	r7, r6
 800841a:	e5b1      	b.n	8007f80 <_dtoa_r+0x4a0>
 800841c:	40240000 	.word	0x40240000
 8008420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008422:	f8cd 8010 	str.w	r8, [sp, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80f3 	beq.w	8008612 <_dtoa_r+0xb32>
 800842c:	2d00      	cmp	r5, #0
 800842e:	dd05      	ble.n	800843c <_dtoa_r+0x95c>
 8008430:	4639      	mov	r1, r7
 8008432:	462a      	mov	r2, r5
 8008434:	4620      	mov	r0, r4
 8008436:	f000 faeb 	bl	8008a10 <__lshift>
 800843a:	4607      	mov	r7, r0
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d04c      	beq.n	80084dc <_dtoa_r+0x9fc>
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4620      	mov	r0, r4
 8008446:	f000 f923 	bl	8008690 <_Balloc>
 800844a:	4605      	mov	r5, r0
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	f107 010c 	add.w	r1, r7, #12
 8008452:	3202      	adds	r2, #2
 8008454:	0092      	lsls	r2, r2, #2
 8008456:	300c      	adds	r0, #12
 8008458:	f7fe fe32 	bl	80070c0 <memcpy>
 800845c:	2201      	movs	r2, #1
 800845e:	4629      	mov	r1, r5
 8008460:	4620      	mov	r0, r4
 8008462:	f000 fad5 	bl	8008a10 <__lshift>
 8008466:	46b9      	mov	r9, r7
 8008468:	4607      	mov	r7, r0
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	9307      	str	r3, [sp, #28]
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	4631      	mov	r1, r6
 8008478:	4658      	mov	r0, fp
 800847a:	f7ff faa3 	bl	80079c4 <quorem>
 800847e:	4649      	mov	r1, r9
 8008480:	4605      	mov	r5, r0
 8008482:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008486:	4658      	mov	r0, fp
 8008488:	f000 fb16 	bl	8008ab8 <__mcmp>
 800848c:	463a      	mov	r2, r7
 800848e:	9002      	str	r0, [sp, #8]
 8008490:	4631      	mov	r1, r6
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fb2a 	bl	8008aec <__mdiff>
 8008498:	68c3      	ldr	r3, [r0, #12]
 800849a:	4602      	mov	r2, r0
 800849c:	bb03      	cbnz	r3, 80084e0 <_dtoa_r+0xa00>
 800849e:	4601      	mov	r1, r0
 80084a0:	9009      	str	r0, [sp, #36]	; 0x24
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 fb08 	bl	8008ab8 <__mcmp>
 80084a8:	4603      	mov	r3, r0
 80084aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ac:	4611      	mov	r1, r2
 80084ae:	4620      	mov	r0, r4
 80084b0:	9309      	str	r3, [sp, #36]	; 0x24
 80084b2:	f000 f921 	bl	80086f8 <_Bfree>
 80084b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b8:	b9a3      	cbnz	r3, 80084e4 <_dtoa_r+0xa04>
 80084ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084bc:	b992      	cbnz	r2, 80084e4 <_dtoa_r+0xa04>
 80084be:	9a08      	ldr	r2, [sp, #32]
 80084c0:	b982      	cbnz	r2, 80084e4 <_dtoa_r+0xa04>
 80084c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084c6:	d029      	beq.n	800851c <_dtoa_r+0xa3c>
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dd01      	ble.n	80084d2 <_dtoa_r+0x9f2>
 80084ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80084d2:	9b07      	ldr	r3, [sp, #28]
 80084d4:	1c5d      	adds	r5, r3, #1
 80084d6:	f883 8000 	strb.w	r8, [r3]
 80084da:	e784      	b.n	80083e6 <_dtoa_r+0x906>
 80084dc:	4638      	mov	r0, r7
 80084de:	e7c2      	b.n	8008466 <_dtoa_r+0x986>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e7e3      	b.n	80084ac <_dtoa_r+0x9cc>
 80084e4:	9a02      	ldr	r2, [sp, #8]
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	db04      	blt.n	80084f4 <_dtoa_r+0xa14>
 80084ea:	d123      	bne.n	8008534 <_dtoa_r+0xa54>
 80084ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084ee:	bb0a      	cbnz	r2, 8008534 <_dtoa_r+0xa54>
 80084f0:	9a08      	ldr	r2, [sp, #32]
 80084f2:	b9fa      	cbnz	r2, 8008534 <_dtoa_r+0xa54>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	ddec      	ble.n	80084d2 <_dtoa_r+0x9f2>
 80084f8:	4659      	mov	r1, fp
 80084fa:	2201      	movs	r2, #1
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fa87 	bl	8008a10 <__lshift>
 8008502:	4631      	mov	r1, r6
 8008504:	4683      	mov	fp, r0
 8008506:	f000 fad7 	bl	8008ab8 <__mcmp>
 800850a:	2800      	cmp	r0, #0
 800850c:	dc03      	bgt.n	8008516 <_dtoa_r+0xa36>
 800850e:	d1e0      	bne.n	80084d2 <_dtoa_r+0x9f2>
 8008510:	f018 0f01 	tst.w	r8, #1
 8008514:	d0dd      	beq.n	80084d2 <_dtoa_r+0x9f2>
 8008516:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800851a:	d1d8      	bne.n	80084ce <_dtoa_r+0x9ee>
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	9a07      	ldr	r2, [sp, #28]
 8008520:	1c5d      	adds	r5, r3, #1
 8008522:	2339      	movs	r3, #57	; 0x39
 8008524:	7013      	strb	r3, [r2, #0]
 8008526:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800852a:	1e6a      	subs	r2, r5, #1
 800852c:	2b39      	cmp	r3, #57	; 0x39
 800852e:	d04d      	beq.n	80085cc <_dtoa_r+0xaec>
 8008530:	3301      	adds	r3, #1
 8008532:	e052      	b.n	80085da <_dtoa_r+0xafa>
 8008534:	9a07      	ldr	r2, [sp, #28]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f102 0501 	add.w	r5, r2, #1
 800853c:	dd06      	ble.n	800854c <_dtoa_r+0xa6c>
 800853e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008542:	d0eb      	beq.n	800851c <_dtoa_r+0xa3c>
 8008544:	f108 0801 	add.w	r8, r8, #1
 8008548:	9b07      	ldr	r3, [sp, #28]
 800854a:	e7c4      	b.n	80084d6 <_dtoa_r+0x9f6>
 800854c:	9b06      	ldr	r3, [sp, #24]
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	1aeb      	subs	r3, r5, r3
 8008552:	4293      	cmp	r3, r2
 8008554:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008558:	d021      	beq.n	800859e <_dtoa_r+0xabe>
 800855a:	4659      	mov	r1, fp
 800855c:	2300      	movs	r3, #0
 800855e:	220a      	movs	r2, #10
 8008560:	4620      	mov	r0, r4
 8008562:	f000 f8e0 	bl	8008726 <__multadd>
 8008566:	45b9      	cmp	r9, r7
 8008568:	4683      	mov	fp, r0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	f04f 020a 	mov.w	r2, #10
 8008572:	4649      	mov	r1, r9
 8008574:	4620      	mov	r0, r4
 8008576:	d105      	bne.n	8008584 <_dtoa_r+0xaa4>
 8008578:	f000 f8d5 	bl	8008726 <__multadd>
 800857c:	4681      	mov	r9, r0
 800857e:	4607      	mov	r7, r0
 8008580:	9507      	str	r5, [sp, #28]
 8008582:	e778      	b.n	8008476 <_dtoa_r+0x996>
 8008584:	f000 f8cf 	bl	8008726 <__multadd>
 8008588:	4639      	mov	r1, r7
 800858a:	4681      	mov	r9, r0
 800858c:	2300      	movs	r3, #0
 800858e:	220a      	movs	r2, #10
 8008590:	4620      	mov	r0, r4
 8008592:	f000 f8c8 	bl	8008726 <__multadd>
 8008596:	4607      	mov	r7, r0
 8008598:	e7f2      	b.n	8008580 <_dtoa_r+0xaa0>
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	4659      	mov	r1, fp
 80085a0:	2201      	movs	r2, #1
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fa34 	bl	8008a10 <__lshift>
 80085a8:	4631      	mov	r1, r6
 80085aa:	4683      	mov	fp, r0
 80085ac:	f000 fa84 	bl	8008ab8 <__mcmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dcb8      	bgt.n	8008526 <_dtoa_r+0xa46>
 80085b4:	d102      	bne.n	80085bc <_dtoa_r+0xadc>
 80085b6:	f018 0f01 	tst.w	r8, #1
 80085ba:	d1b4      	bne.n	8008526 <_dtoa_r+0xa46>
 80085bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085c0:	1e6a      	subs	r2, r5, #1
 80085c2:	2b30      	cmp	r3, #48	; 0x30
 80085c4:	f47f af0f 	bne.w	80083e6 <_dtoa_r+0x906>
 80085c8:	4615      	mov	r5, r2
 80085ca:	e7f7      	b.n	80085bc <_dtoa_r+0xadc>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d105      	bne.n	80085de <_dtoa_r+0xafe>
 80085d2:	2331      	movs	r3, #49	; 0x31
 80085d4:	9a06      	ldr	r2, [sp, #24]
 80085d6:	f10a 0a01 	add.w	sl, sl, #1
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	e703      	b.n	80083e6 <_dtoa_r+0x906>
 80085de:	4615      	mov	r5, r2
 80085e0:	e7a1      	b.n	8008526 <_dtoa_r+0xa46>
 80085e2:	4b17      	ldr	r3, [pc, #92]	; (8008640 <_dtoa_r+0xb60>)
 80085e4:	f7ff bae1 	b.w	8007baa <_dtoa_r+0xca>
 80085e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f47f aabb 	bne.w	8007b66 <_dtoa_r+0x86>
 80085f0:	4b14      	ldr	r3, [pc, #80]	; (8008644 <_dtoa_r+0xb64>)
 80085f2:	f7ff bada 	b.w	8007baa <_dtoa_r+0xca>
 80085f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	f77f ae3f 	ble.w	800827c <_dtoa_r+0x79c>
 80085fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008600:	9308      	str	r3, [sp, #32]
 8008602:	e653      	b.n	80082ac <_dtoa_r+0x7cc>
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dc03      	bgt.n	8008612 <_dtoa_r+0xb32>
 800860a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800860c:	2b02      	cmp	r3, #2
 800860e:	f73f aed5 	bgt.w	80083bc <_dtoa_r+0x8dc>
 8008612:	9d06      	ldr	r5, [sp, #24]
 8008614:	4631      	mov	r1, r6
 8008616:	4658      	mov	r0, fp
 8008618:	f7ff f9d4 	bl	80079c4 <quorem>
 800861c:	9b06      	ldr	r3, [sp, #24]
 800861e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008622:	f805 8b01 	strb.w	r8, [r5], #1
 8008626:	9a04      	ldr	r2, [sp, #16]
 8008628:	1aeb      	subs	r3, r5, r3
 800862a:	429a      	cmp	r2, r3
 800862c:	ddb5      	ble.n	800859a <_dtoa_r+0xaba>
 800862e:	4659      	mov	r1, fp
 8008630:	2300      	movs	r3, #0
 8008632:	220a      	movs	r2, #10
 8008634:	4620      	mov	r0, r4
 8008636:	f000 f876 	bl	8008726 <__multadd>
 800863a:	4683      	mov	fp, r0
 800863c:	e7ea      	b.n	8008614 <_dtoa_r+0xb34>
 800863e:	bf00      	nop
 8008640:	08009304 	.word	0x08009304
 8008644:	08009328 	.word	0x08009328

08008648 <_localeconv_r>:
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <_localeconv_r+0x14>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6a18      	ldr	r0, [r3, #32]
 800864e:	4b04      	ldr	r3, [pc, #16]	; (8008660 <_localeconv_r+0x18>)
 8008650:	2800      	cmp	r0, #0
 8008652:	bf08      	it	eq
 8008654:	4618      	moveq	r0, r3
 8008656:	30f0      	adds	r0, #240	; 0xf0
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20000010 	.word	0x20000010
 8008660:	20000074 	.word	0x20000074

08008664 <malloc>:
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <malloc+0xc>)
 8008666:	4601      	mov	r1, r0
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f000 bb47 	b.w	8008cfc <_malloc_r>
 800866e:	bf00      	nop
 8008670:	20000010 	.word	0x20000010

08008674 <memchr>:
 8008674:	b510      	push	{r4, lr}
 8008676:	b2c9      	uxtb	r1, r1
 8008678:	4402      	add	r2, r0
 800867a:	4290      	cmp	r0, r2
 800867c:	4603      	mov	r3, r0
 800867e:	d101      	bne.n	8008684 <memchr+0x10>
 8008680:	2300      	movs	r3, #0
 8008682:	e003      	b.n	800868c <memchr+0x18>
 8008684:	781c      	ldrb	r4, [r3, #0]
 8008686:	3001      	adds	r0, #1
 8008688:	428c      	cmp	r4, r1
 800868a:	d1f6      	bne.n	800867a <memchr+0x6>
 800868c:	4618      	mov	r0, r3
 800868e:	bd10      	pop	{r4, pc}

08008690 <_Balloc>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008694:	4604      	mov	r4, r0
 8008696:	460e      	mov	r6, r1
 8008698:	b93d      	cbnz	r5, 80086aa <_Balloc+0x1a>
 800869a:	2010      	movs	r0, #16
 800869c:	f7ff ffe2 	bl	8008664 <malloc>
 80086a0:	6260      	str	r0, [r4, #36]	; 0x24
 80086a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086a6:	6005      	str	r5, [r0, #0]
 80086a8:	60c5      	str	r5, [r0, #12]
 80086aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80086ac:	68eb      	ldr	r3, [r5, #12]
 80086ae:	b183      	cbz	r3, 80086d2 <_Balloc+0x42>
 80086b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086b8:	b9b8      	cbnz	r0, 80086ea <_Balloc+0x5a>
 80086ba:	2101      	movs	r1, #1
 80086bc:	fa01 f506 	lsl.w	r5, r1, r6
 80086c0:	1d6a      	adds	r2, r5, #5
 80086c2:	0092      	lsls	r2, r2, #2
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fabe 	bl	8008c46 <_calloc_r>
 80086ca:	b160      	cbz	r0, 80086e6 <_Balloc+0x56>
 80086cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80086d0:	e00e      	b.n	80086f0 <_Balloc+0x60>
 80086d2:	2221      	movs	r2, #33	; 0x21
 80086d4:	2104      	movs	r1, #4
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 fab5 	bl	8008c46 <_calloc_r>
 80086dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086de:	60e8      	str	r0, [r5, #12]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e4      	bne.n	80086b0 <_Balloc+0x20>
 80086e6:	2000      	movs	r0, #0
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	6802      	ldr	r2, [r0, #0]
 80086ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80086f0:	2300      	movs	r3, #0
 80086f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086f6:	e7f7      	b.n	80086e8 <_Balloc+0x58>

080086f8 <_Bfree>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80086fc:	4606      	mov	r6, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	b93c      	cbnz	r4, 8008712 <_Bfree+0x1a>
 8008702:	2010      	movs	r0, #16
 8008704:	f7ff ffae 	bl	8008664 <malloc>
 8008708:	6270      	str	r0, [r6, #36]	; 0x24
 800870a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800870e:	6004      	str	r4, [r0, #0]
 8008710:	60c4      	str	r4, [r0, #12]
 8008712:	b13d      	cbz	r5, 8008724 <_Bfree+0x2c>
 8008714:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008716:	686a      	ldr	r2, [r5, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800871e:	6029      	str	r1, [r5, #0]
 8008720:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008724:	bd70      	pop	{r4, r5, r6, pc}

08008726 <__multadd>:
 8008726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872a:	461f      	mov	r7, r3
 800872c:	4606      	mov	r6, r0
 800872e:	460c      	mov	r4, r1
 8008730:	2300      	movs	r3, #0
 8008732:	690d      	ldr	r5, [r1, #16]
 8008734:	f101 0c14 	add.w	ip, r1, #20
 8008738:	f8dc 0000 	ldr.w	r0, [ip]
 800873c:	3301      	adds	r3, #1
 800873e:	b281      	uxth	r1, r0
 8008740:	fb02 7101 	mla	r1, r2, r1, r7
 8008744:	0c00      	lsrs	r0, r0, #16
 8008746:	0c0f      	lsrs	r7, r1, #16
 8008748:	fb02 7000 	mla	r0, r2, r0, r7
 800874c:	b289      	uxth	r1, r1
 800874e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008752:	429d      	cmp	r5, r3
 8008754:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008758:	f84c 1b04 	str.w	r1, [ip], #4
 800875c:	dcec      	bgt.n	8008738 <__multadd+0x12>
 800875e:	b1d7      	cbz	r7, 8008796 <__multadd+0x70>
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	42ab      	cmp	r3, r5
 8008764:	dc12      	bgt.n	800878c <__multadd+0x66>
 8008766:	6861      	ldr	r1, [r4, #4]
 8008768:	4630      	mov	r0, r6
 800876a:	3101      	adds	r1, #1
 800876c:	f7ff ff90 	bl	8008690 <_Balloc>
 8008770:	4680      	mov	r8, r0
 8008772:	6922      	ldr	r2, [r4, #16]
 8008774:	f104 010c 	add.w	r1, r4, #12
 8008778:	3202      	adds	r2, #2
 800877a:	0092      	lsls	r2, r2, #2
 800877c:	300c      	adds	r0, #12
 800877e:	f7fe fc9f 	bl	80070c0 <memcpy>
 8008782:	4621      	mov	r1, r4
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ffb7 	bl	80086f8 <_Bfree>
 800878a:	4644      	mov	r4, r8
 800878c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008790:	3501      	adds	r5, #1
 8008792:	615f      	str	r7, [r3, #20]
 8008794:	6125      	str	r5, [r4, #16]
 8008796:	4620      	mov	r0, r4
 8008798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800879c <__hi0bits>:
 800879c:	0c02      	lsrs	r2, r0, #16
 800879e:	0412      	lsls	r2, r2, #16
 80087a0:	4603      	mov	r3, r0
 80087a2:	b9b2      	cbnz	r2, 80087d2 <__hi0bits+0x36>
 80087a4:	0403      	lsls	r3, r0, #16
 80087a6:	2010      	movs	r0, #16
 80087a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087ac:	bf04      	itt	eq
 80087ae:	021b      	lsleq	r3, r3, #8
 80087b0:	3008      	addeq	r0, #8
 80087b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087b6:	bf04      	itt	eq
 80087b8:	011b      	lsleq	r3, r3, #4
 80087ba:	3004      	addeq	r0, #4
 80087bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087c0:	bf04      	itt	eq
 80087c2:	009b      	lsleq	r3, r3, #2
 80087c4:	3002      	addeq	r0, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	db06      	blt.n	80087d8 <__hi0bits+0x3c>
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	d503      	bpl.n	80087d6 <__hi0bits+0x3a>
 80087ce:	3001      	adds	r0, #1
 80087d0:	4770      	bx	lr
 80087d2:	2000      	movs	r0, #0
 80087d4:	e7e8      	b.n	80087a8 <__hi0bits+0xc>
 80087d6:	2020      	movs	r0, #32
 80087d8:	4770      	bx	lr

080087da <__lo0bits>:
 80087da:	6803      	ldr	r3, [r0, #0]
 80087dc:	4601      	mov	r1, r0
 80087de:	f013 0207 	ands.w	r2, r3, #7
 80087e2:	d00b      	beq.n	80087fc <__lo0bits+0x22>
 80087e4:	07da      	lsls	r2, r3, #31
 80087e6:	d423      	bmi.n	8008830 <__lo0bits+0x56>
 80087e8:	0798      	lsls	r0, r3, #30
 80087ea:	bf49      	itett	mi
 80087ec:	085b      	lsrmi	r3, r3, #1
 80087ee:	089b      	lsrpl	r3, r3, #2
 80087f0:	2001      	movmi	r0, #1
 80087f2:	600b      	strmi	r3, [r1, #0]
 80087f4:	bf5c      	itt	pl
 80087f6:	600b      	strpl	r3, [r1, #0]
 80087f8:	2002      	movpl	r0, #2
 80087fa:	4770      	bx	lr
 80087fc:	b298      	uxth	r0, r3
 80087fe:	b9a8      	cbnz	r0, 800882c <__lo0bits+0x52>
 8008800:	2010      	movs	r0, #16
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008808:	bf04      	itt	eq
 800880a:	0a1b      	lsreq	r3, r3, #8
 800880c:	3008      	addeq	r0, #8
 800880e:	071a      	lsls	r2, r3, #28
 8008810:	bf04      	itt	eq
 8008812:	091b      	lsreq	r3, r3, #4
 8008814:	3004      	addeq	r0, #4
 8008816:	079a      	lsls	r2, r3, #30
 8008818:	bf04      	itt	eq
 800881a:	089b      	lsreq	r3, r3, #2
 800881c:	3002      	addeq	r0, #2
 800881e:	07da      	lsls	r2, r3, #31
 8008820:	d402      	bmi.n	8008828 <__lo0bits+0x4e>
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	d006      	beq.n	8008834 <__lo0bits+0x5a>
 8008826:	3001      	adds	r0, #1
 8008828:	600b      	str	r3, [r1, #0]
 800882a:	4770      	bx	lr
 800882c:	4610      	mov	r0, r2
 800882e:	e7e9      	b.n	8008804 <__lo0bits+0x2a>
 8008830:	2000      	movs	r0, #0
 8008832:	4770      	bx	lr
 8008834:	2020      	movs	r0, #32
 8008836:	4770      	bx	lr

08008838 <__i2b>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	2101      	movs	r1, #1
 800883e:	f7ff ff27 	bl	8008690 <_Balloc>
 8008842:	2201      	movs	r2, #1
 8008844:	6144      	str	r4, [r0, #20]
 8008846:	6102      	str	r2, [r0, #16]
 8008848:	bd10      	pop	{r4, pc}

0800884a <__multiply>:
 800884a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884e:	4614      	mov	r4, r2
 8008850:	690a      	ldr	r2, [r1, #16]
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	4688      	mov	r8, r1
 8008856:	429a      	cmp	r2, r3
 8008858:	bfbe      	ittt	lt
 800885a:	460b      	movlt	r3, r1
 800885c:	46a0      	movlt	r8, r4
 800885e:	461c      	movlt	r4, r3
 8008860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008868:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800886c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008870:	eb07 0609 	add.w	r6, r7, r9
 8008874:	42b3      	cmp	r3, r6
 8008876:	bfb8      	it	lt
 8008878:	3101      	addlt	r1, #1
 800887a:	f7ff ff09 	bl	8008690 <_Balloc>
 800887e:	f100 0514 	add.w	r5, r0, #20
 8008882:	462b      	mov	r3, r5
 8008884:	2200      	movs	r2, #0
 8008886:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800888a:	4573      	cmp	r3, lr
 800888c:	d316      	bcc.n	80088bc <__multiply+0x72>
 800888e:	f104 0214 	add.w	r2, r4, #20
 8008892:	f108 0114 	add.w	r1, r8, #20
 8008896:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800889a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	9201      	str	r2, [sp, #4]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d80c      	bhi.n	80088c2 <__multiply+0x78>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	dd03      	ble.n	80088b4 <__multiply+0x6a>
 80088ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05d      	beq.n	8008970 <__multiply+0x126>
 80088b4:	6106      	str	r6, [r0, #16]
 80088b6:	b003      	add	sp, #12
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	f843 2b04 	str.w	r2, [r3], #4
 80088c0:	e7e3      	b.n	800888a <__multiply+0x40>
 80088c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80088c6:	f1bb 0f00 	cmp.w	fp, #0
 80088ca:	d023      	beq.n	8008914 <__multiply+0xca>
 80088cc:	4689      	mov	r9, r1
 80088ce:	46ac      	mov	ip, r5
 80088d0:	f04f 0800 	mov.w	r8, #0
 80088d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80088d8:	f8dc a000 	ldr.w	sl, [ip]
 80088dc:	b2a3      	uxth	r3, r4
 80088de:	fa1f fa8a 	uxth.w	sl, sl
 80088e2:	fb0b a303 	mla	r3, fp, r3, sl
 80088e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088ea:	f8dc 4000 	ldr.w	r4, [ip]
 80088ee:	4443      	add	r3, r8
 80088f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80088f8:	46e2      	mov	sl, ip
 80088fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80088fe:	b29b      	uxth	r3, r3
 8008900:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008904:	454f      	cmp	r7, r9
 8008906:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800890a:	f84a 3b04 	str.w	r3, [sl], #4
 800890e:	d82b      	bhi.n	8008968 <__multiply+0x11e>
 8008910:	f8cc 8004 	str.w	r8, [ip, #4]
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	3204      	adds	r2, #4
 8008918:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800891c:	f1ba 0f00 	cmp.w	sl, #0
 8008920:	d020      	beq.n	8008964 <__multiply+0x11a>
 8008922:	4689      	mov	r9, r1
 8008924:	46a8      	mov	r8, r5
 8008926:	f04f 0b00 	mov.w	fp, #0
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008930:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008934:	b29b      	uxth	r3, r3
 8008936:	fb0a 440c 	mla	r4, sl, ip, r4
 800893a:	46c4      	mov	ip, r8
 800893c:	445c      	add	r4, fp
 800893e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008942:	f84c 3b04 	str.w	r3, [ip], #4
 8008946:	f859 3b04 	ldr.w	r3, [r9], #4
 800894a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	fb0a b303 	mla	r3, sl, r3, fp
 8008954:	454f      	cmp	r7, r9
 8008956:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800895a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800895e:	d805      	bhi.n	800896c <__multiply+0x122>
 8008960:	f8c8 3004 	str.w	r3, [r8, #4]
 8008964:	3504      	adds	r5, #4
 8008966:	e79b      	b.n	80088a0 <__multiply+0x56>
 8008968:	46d4      	mov	ip, sl
 800896a:	e7b3      	b.n	80088d4 <__multiply+0x8a>
 800896c:	46e0      	mov	r8, ip
 800896e:	e7dd      	b.n	800892c <__multiply+0xe2>
 8008970:	3e01      	subs	r6, #1
 8008972:	e799      	b.n	80088a8 <__multiply+0x5e>

08008974 <__pow5mult>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	4615      	mov	r5, r2
 800897a:	f012 0203 	ands.w	r2, r2, #3
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	d007      	beq.n	8008994 <__pow5mult+0x20>
 8008984:	4c21      	ldr	r4, [pc, #132]	; (8008a0c <__pow5mult+0x98>)
 8008986:	3a01      	subs	r2, #1
 8008988:	2300      	movs	r3, #0
 800898a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800898e:	f7ff feca 	bl	8008726 <__multadd>
 8008992:	4607      	mov	r7, r0
 8008994:	10ad      	asrs	r5, r5, #2
 8008996:	d035      	beq.n	8008a04 <__pow5mult+0x90>
 8008998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800899a:	b93c      	cbnz	r4, 80089ac <__pow5mult+0x38>
 800899c:	2010      	movs	r0, #16
 800899e:	f7ff fe61 	bl	8008664 <malloc>
 80089a2:	6270      	str	r0, [r6, #36]	; 0x24
 80089a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a8:	6004      	str	r4, [r0, #0]
 80089aa:	60c4      	str	r4, [r0, #12]
 80089ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b4:	b94c      	cbnz	r4, 80089ca <__pow5mult+0x56>
 80089b6:	f240 2171 	movw	r1, #625	; 0x271
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff ff3c 	bl	8008838 <__i2b>
 80089c0:	2300      	movs	r3, #0
 80089c2:	4604      	mov	r4, r0
 80089c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80089c8:	6003      	str	r3, [r0, #0]
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	07eb      	lsls	r3, r5, #31
 80089d0:	d50a      	bpl.n	80089e8 <__pow5mult+0x74>
 80089d2:	4639      	mov	r1, r7
 80089d4:	4622      	mov	r2, r4
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ff37 	bl	800884a <__multiply>
 80089dc:	4681      	mov	r9, r0
 80089de:	4639      	mov	r1, r7
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff fe89 	bl	80086f8 <_Bfree>
 80089e6:	464f      	mov	r7, r9
 80089e8:	106d      	asrs	r5, r5, #1
 80089ea:	d00b      	beq.n	8008a04 <__pow5mult+0x90>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	b938      	cbnz	r0, 8008a00 <__pow5mult+0x8c>
 80089f0:	4622      	mov	r2, r4
 80089f2:	4621      	mov	r1, r4
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff ff28 	bl	800884a <__multiply>
 80089fa:	6020      	str	r0, [r4, #0]
 80089fc:	f8c0 8000 	str.w	r8, [r0]
 8008a00:	4604      	mov	r4, r0
 8008a02:	e7e4      	b.n	80089ce <__pow5mult+0x5a>
 8008a04:	4638      	mov	r0, r7
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08009428 	.word	0x08009428

08008a10 <__lshift>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	4607      	mov	r7, r0
 8008a18:	4616      	mov	r6, r2
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a20:	eb0a 0903 	add.w	r9, sl, r3
 8008a24:	6849      	ldr	r1, [r1, #4]
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	f109 0501 	add.w	r5, r9, #1
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	db32      	blt.n	8008a96 <__lshift+0x86>
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff fe2d 	bl	8008690 <_Balloc>
 8008a36:	2300      	movs	r3, #0
 8008a38:	4680      	mov	r8, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f100 0114 	add.w	r1, r0, #20
 8008a40:	4553      	cmp	r3, sl
 8008a42:	db2b      	blt.n	8008a9c <__lshift+0x8c>
 8008a44:	6920      	ldr	r0, [r4, #16]
 8008a46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a4a:	f104 0314 	add.w	r3, r4, #20
 8008a4e:	f016 021f 	ands.w	r2, r6, #31
 8008a52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a5a:	d025      	beq.n	8008aa8 <__lshift+0x98>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	f1c2 0e20 	rsb	lr, r2, #32
 8008a62:	468a      	mov	sl, r1
 8008a64:	681e      	ldr	r6, [r3, #0]
 8008a66:	4096      	lsls	r6, r2
 8008a68:	4330      	orrs	r0, r6
 8008a6a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a72:	459c      	cmp	ip, r3
 8008a74:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a78:	d814      	bhi.n	8008aa4 <__lshift+0x94>
 8008a7a:	6048      	str	r0, [r1, #4]
 8008a7c:	b108      	cbz	r0, 8008a82 <__lshift+0x72>
 8008a7e:	f109 0502 	add.w	r5, r9, #2
 8008a82:	3d01      	subs	r5, #1
 8008a84:	4638      	mov	r0, r7
 8008a86:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	f7ff fe34 	bl	80086f8 <_Bfree>
 8008a90:	4640      	mov	r0, r8
 8008a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a96:	3101      	adds	r1, #1
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	e7c7      	b.n	8008a2c <__lshift+0x1c>
 8008a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	e7cd      	b.n	8008a40 <__lshift+0x30>
 8008aa4:	4651      	mov	r1, sl
 8008aa6:	e7dc      	b.n	8008a62 <__lshift+0x52>
 8008aa8:	3904      	subs	r1, #4
 8008aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aae:	459c      	cmp	ip, r3
 8008ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ab4:	d8f9      	bhi.n	8008aaa <__lshift+0x9a>
 8008ab6:	e7e4      	b.n	8008a82 <__lshift+0x72>

08008ab8 <__mcmp>:
 8008ab8:	6903      	ldr	r3, [r0, #16]
 8008aba:	690a      	ldr	r2, [r1, #16]
 8008abc:	b530      	push	{r4, r5, lr}
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	d10c      	bne.n	8008adc <__mcmp+0x24>
 8008ac2:	0092      	lsls	r2, r2, #2
 8008ac4:	3014      	adds	r0, #20
 8008ac6:	3114      	adds	r1, #20
 8008ac8:	1884      	adds	r4, r0, r2
 8008aca:	4411      	add	r1, r2
 8008acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ad4:	4295      	cmp	r5, r2
 8008ad6:	d003      	beq.n	8008ae0 <__mcmp+0x28>
 8008ad8:	d305      	bcc.n	8008ae6 <__mcmp+0x2e>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4618      	mov	r0, r3
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d3f3      	bcc.n	8008acc <__mcmp+0x14>
 8008ae4:	e7fa      	b.n	8008adc <__mcmp+0x24>
 8008ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aea:	e7f7      	b.n	8008adc <__mcmp+0x24>

08008aec <__mdiff>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460d      	mov	r5, r1
 8008af2:	4607      	mov	r7, r0
 8008af4:	4611      	mov	r1, r2
 8008af6:	4628      	mov	r0, r5
 8008af8:	4614      	mov	r4, r2
 8008afa:	f7ff ffdd 	bl	8008ab8 <__mcmp>
 8008afe:	1e06      	subs	r6, r0, #0
 8008b00:	d108      	bne.n	8008b14 <__mdiff+0x28>
 8008b02:	4631      	mov	r1, r6
 8008b04:	4638      	mov	r0, r7
 8008b06:	f7ff fdc3 	bl	8008690 <_Balloc>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b14:	bfa4      	itt	ge
 8008b16:	4623      	movge	r3, r4
 8008b18:	462c      	movge	r4, r5
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	bfa6      	itte	ge
 8008b20:	461d      	movge	r5, r3
 8008b22:	2600      	movge	r6, #0
 8008b24:	2601      	movlt	r6, #1
 8008b26:	f7ff fdb3 	bl	8008690 <_Balloc>
 8008b2a:	f04f 0e00 	mov.w	lr, #0
 8008b2e:	60c6      	str	r6, [r0, #12]
 8008b30:	692b      	ldr	r3, [r5, #16]
 8008b32:	6926      	ldr	r6, [r4, #16]
 8008b34:	f104 0214 	add.w	r2, r4, #20
 8008b38:	f105 0914 	add.w	r9, r5, #20
 8008b3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b44:	f100 0114 	add.w	r1, r0, #20
 8008b48:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b4c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008b50:	fa1f f38a 	uxth.w	r3, sl
 8008b54:	4473      	add	r3, lr
 8008b56:	b2ac      	uxth	r4, r5
 8008b58:	1b1b      	subs	r3, r3, r4
 8008b5a:	0c2c      	lsrs	r4, r5, #16
 8008b5c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008b60:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008b6a:	45c8      	cmp	r8, r9
 8008b6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b70:	4694      	mov	ip, r2
 8008b72:	f841 4b04 	str.w	r4, [r1], #4
 8008b76:	d8e7      	bhi.n	8008b48 <__mdiff+0x5c>
 8008b78:	45bc      	cmp	ip, r7
 8008b7a:	d304      	bcc.n	8008b86 <__mdiff+0x9a>
 8008b7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b80:	b183      	cbz	r3, 8008ba4 <__mdiff+0xb8>
 8008b82:	6106      	str	r6, [r0, #16]
 8008b84:	e7c4      	b.n	8008b10 <__mdiff+0x24>
 8008b86:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008b8a:	b2a2      	uxth	r2, r4
 8008b8c:	4472      	add	r2, lr
 8008b8e:	1413      	asrs	r3, r2, #16
 8008b90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008b94:	b292      	uxth	r2, r2
 8008b96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b9a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b9e:	f841 2b04 	str.w	r2, [r1], #4
 8008ba2:	e7e9      	b.n	8008b78 <__mdiff+0x8c>
 8008ba4:	3e01      	subs	r6, #1
 8008ba6:	e7e9      	b.n	8008b7c <__mdiff+0x90>

08008ba8 <__d2b>:
 8008ba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008bac:	461c      	mov	r4, r3
 8008bae:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	f7ff fd6b 	bl	8008690 <_Balloc>
 8008bba:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008bbe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	bb34      	cbnz	r4, 8008c14 <__d2b+0x6c>
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	f1b8 0200 	subs.w	r2, r8, #0
 8008bcc:	d027      	beq.n	8008c1e <__d2b+0x76>
 8008bce:	a802      	add	r0, sp, #8
 8008bd0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008bd4:	f7ff fe01 	bl	80087da <__lo0bits>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	b1f0      	cbz	r0, 8008c1a <__d2b+0x72>
 8008bdc:	9a01      	ldr	r2, [sp, #4]
 8008bde:	f1c0 0320 	rsb	r3, r0, #32
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	430b      	orrs	r3, r1
 8008be8:	40c2      	lsrs	r2, r0
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bf14      	ite	ne
 8008bf4:	2102      	movne	r1, #2
 8008bf6:	2101      	moveq	r1, #1
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	6139      	str	r1, [r7, #16]
 8008bfc:	b1c4      	cbz	r4, 8008c30 <__d2b+0x88>
 8008bfe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c02:	4404      	add	r4, r0
 8008c04:	6034      	str	r4, [r6, #0]
 8008c06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c0a:	6028      	str	r0, [r5, #0]
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	b002      	add	sp, #8
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c18:	e7d5      	b.n	8008bc6 <__d2b+0x1e>
 8008c1a:	6179      	str	r1, [r7, #20]
 8008c1c:	e7e7      	b.n	8008bee <__d2b+0x46>
 8008c1e:	a801      	add	r0, sp, #4
 8008c20:	f7ff fddb 	bl	80087da <__lo0bits>
 8008c24:	2101      	movs	r1, #1
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	6139      	str	r1, [r7, #16]
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	3020      	adds	r0, #32
 8008c2e:	e7e5      	b.n	8008bfc <__d2b+0x54>
 8008c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c34:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c38:	6030      	str	r0, [r6, #0]
 8008c3a:	6918      	ldr	r0, [r3, #16]
 8008c3c:	f7ff fdae 	bl	800879c <__hi0bits>
 8008c40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c44:	e7e1      	b.n	8008c0a <__d2b+0x62>

08008c46 <_calloc_r>:
 8008c46:	b538      	push	{r3, r4, r5, lr}
 8008c48:	fb02 f401 	mul.w	r4, r2, r1
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f000 f855 	bl	8008cfc <_malloc_r>
 8008c52:	4605      	mov	r5, r0
 8008c54:	b118      	cbz	r0, 8008c5e <_calloc_r+0x18>
 8008c56:	4622      	mov	r2, r4
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f7fe fa3c 	bl	80070d6 <memset>
 8008c5e:	4628      	mov	r0, r5
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
	...

08008c64 <_free_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4605      	mov	r5, r0
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	d043      	beq.n	8008cf4 <_free_r+0x90>
 8008c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c70:	1f0c      	subs	r4, r1, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfb8      	it	lt
 8008c76:	18e4      	addlt	r4, r4, r3
 8008c78:	f000 fa27 	bl	80090ca <__malloc_lock>
 8008c7c:	4a1e      	ldr	r2, [pc, #120]	; (8008cf8 <_free_r+0x94>)
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	4610      	mov	r0, r2
 8008c82:	b933      	cbnz	r3, 8008c92 <_free_r+0x2e>
 8008c84:	6063      	str	r3, [r4, #4]
 8008c86:	6014      	str	r4, [r2, #0]
 8008c88:	4628      	mov	r0, r5
 8008c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8e:	f000 ba1d 	b.w	80090cc <__malloc_unlock>
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	d90b      	bls.n	8008cae <_free_r+0x4a>
 8008c96:	6821      	ldr	r1, [r4, #0]
 8008c98:	1862      	adds	r2, r4, r1
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	bf01      	itttt	eq
 8008c9e:	681a      	ldreq	r2, [r3, #0]
 8008ca0:	685b      	ldreq	r3, [r3, #4]
 8008ca2:	1852      	addeq	r2, r2, r1
 8008ca4:	6022      	streq	r2, [r4, #0]
 8008ca6:	6063      	str	r3, [r4, #4]
 8008ca8:	6004      	str	r4, [r0, #0]
 8008caa:	e7ed      	b.n	8008c88 <_free_r+0x24>
 8008cac:	4613      	mov	r3, r2
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	b10a      	cbz	r2, 8008cb6 <_free_r+0x52>
 8008cb2:	42a2      	cmp	r2, r4
 8008cb4:	d9fa      	bls.n	8008cac <_free_r+0x48>
 8008cb6:	6819      	ldr	r1, [r3, #0]
 8008cb8:	1858      	adds	r0, r3, r1
 8008cba:	42a0      	cmp	r0, r4
 8008cbc:	d10b      	bne.n	8008cd6 <_free_r+0x72>
 8008cbe:	6820      	ldr	r0, [r4, #0]
 8008cc0:	4401      	add	r1, r0
 8008cc2:	1858      	adds	r0, r3, r1
 8008cc4:	4282      	cmp	r2, r0
 8008cc6:	6019      	str	r1, [r3, #0]
 8008cc8:	d1de      	bne.n	8008c88 <_free_r+0x24>
 8008cca:	6810      	ldr	r0, [r2, #0]
 8008ccc:	6852      	ldr	r2, [r2, #4]
 8008cce:	4401      	add	r1, r0
 8008cd0:	6019      	str	r1, [r3, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	e7d8      	b.n	8008c88 <_free_r+0x24>
 8008cd6:	d902      	bls.n	8008cde <_free_r+0x7a>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	e7d4      	b.n	8008c88 <_free_r+0x24>
 8008cde:	6820      	ldr	r0, [r4, #0]
 8008ce0:	1821      	adds	r1, r4, r0
 8008ce2:	428a      	cmp	r2, r1
 8008ce4:	bf01      	itttt	eq
 8008ce6:	6811      	ldreq	r1, [r2, #0]
 8008ce8:	6852      	ldreq	r2, [r2, #4]
 8008cea:	1809      	addeq	r1, r1, r0
 8008cec:	6021      	streq	r1, [r4, #0]
 8008cee:	6062      	str	r2, [r4, #4]
 8008cf0:	605c      	str	r4, [r3, #4]
 8008cf2:	e7c9      	b.n	8008c88 <_free_r+0x24>
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20001d14 	.word	0x20001d14

08008cfc <_malloc_r>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	1ccd      	adds	r5, r1, #3
 8008d00:	f025 0503 	bic.w	r5, r5, #3
 8008d04:	3508      	adds	r5, #8
 8008d06:	2d0c      	cmp	r5, #12
 8008d08:	bf38      	it	cc
 8008d0a:	250c      	movcc	r5, #12
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	4606      	mov	r6, r0
 8008d10:	db01      	blt.n	8008d16 <_malloc_r+0x1a>
 8008d12:	42a9      	cmp	r1, r5
 8008d14:	d903      	bls.n	8008d1e <_malloc_r+0x22>
 8008d16:	230c      	movs	r3, #12
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
 8008d1e:	f000 f9d4 	bl	80090ca <__malloc_lock>
 8008d22:	4a21      	ldr	r2, [pc, #132]	; (8008da8 <_malloc_r+0xac>)
 8008d24:	6814      	ldr	r4, [r2, #0]
 8008d26:	4621      	mov	r1, r4
 8008d28:	b991      	cbnz	r1, 8008d50 <_malloc_r+0x54>
 8008d2a:	4c20      	ldr	r4, [pc, #128]	; (8008dac <_malloc_r+0xb0>)
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	b91b      	cbnz	r3, 8008d38 <_malloc_r+0x3c>
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f98f 	bl	8009054 <_sbrk_r>
 8008d36:	6020      	str	r0, [r4, #0]
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 f98a 	bl	8009054 <_sbrk_r>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d124      	bne.n	8008d8e <_malloc_r+0x92>
 8008d44:	230c      	movs	r3, #12
 8008d46:	4630      	mov	r0, r6
 8008d48:	6033      	str	r3, [r6, #0]
 8008d4a:	f000 f9bf 	bl	80090cc <__malloc_unlock>
 8008d4e:	e7e4      	b.n	8008d1a <_malloc_r+0x1e>
 8008d50:	680b      	ldr	r3, [r1, #0]
 8008d52:	1b5b      	subs	r3, r3, r5
 8008d54:	d418      	bmi.n	8008d88 <_malloc_r+0x8c>
 8008d56:	2b0b      	cmp	r3, #11
 8008d58:	d90f      	bls.n	8008d7a <_malloc_r+0x7e>
 8008d5a:	600b      	str	r3, [r1, #0]
 8008d5c:	18cc      	adds	r4, r1, r3
 8008d5e:	50cd      	str	r5, [r1, r3]
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f9b3 	bl	80090cc <__malloc_unlock>
 8008d66:	f104 000b 	add.w	r0, r4, #11
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	f020 0007 	bic.w	r0, r0, #7
 8008d70:	1ac3      	subs	r3, r0, r3
 8008d72:	d0d3      	beq.n	8008d1c <_malloc_r+0x20>
 8008d74:	425a      	negs	r2, r3
 8008d76:	50e2      	str	r2, [r4, r3]
 8008d78:	e7d0      	b.n	8008d1c <_malloc_r+0x20>
 8008d7a:	684b      	ldr	r3, [r1, #4]
 8008d7c:	428c      	cmp	r4, r1
 8008d7e:	bf16      	itet	ne
 8008d80:	6063      	strne	r3, [r4, #4]
 8008d82:	6013      	streq	r3, [r2, #0]
 8008d84:	460c      	movne	r4, r1
 8008d86:	e7eb      	b.n	8008d60 <_malloc_r+0x64>
 8008d88:	460c      	mov	r4, r1
 8008d8a:	6849      	ldr	r1, [r1, #4]
 8008d8c:	e7cc      	b.n	8008d28 <_malloc_r+0x2c>
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d005      	beq.n	8008da4 <_malloc_r+0xa8>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 f95a 	bl	8009054 <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d0cf      	beq.n	8008d44 <_malloc_r+0x48>
 8008da4:	6025      	str	r5, [r4, #0]
 8008da6:	e7db      	b.n	8008d60 <_malloc_r+0x64>
 8008da8:	20001d14 	.word	0x20001d14
 8008dac:	20001d18 	.word	0x20001d18

08008db0 <__ssputs_r>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	688e      	ldr	r6, [r1, #8]
 8008db6:	4682      	mov	sl, r0
 8008db8:	429e      	cmp	r6, r3
 8008dba:	460c      	mov	r4, r1
 8008dbc:	4690      	mov	r8, r2
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	d837      	bhi.n	8008e32 <__ssputs_r+0x82>
 8008dc2:	898a      	ldrh	r2, [r1, #12]
 8008dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc8:	d031      	beq.n	8008e2e <__ssputs_r+0x7e>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	6825      	ldr	r5, [r4, #0]
 8008dce:	6909      	ldr	r1, [r1, #16]
 8008dd0:	1a6f      	subs	r7, r5, r1
 8008dd2:	6965      	ldr	r5, [r4, #20]
 8008dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ddc:	f109 0301 	add.w	r3, r9, #1
 8008de0:	443b      	add	r3, r7
 8008de2:	429d      	cmp	r5, r3
 8008de4:	bf38      	it	cc
 8008de6:	461d      	movcc	r5, r3
 8008de8:	0553      	lsls	r3, r2, #21
 8008dea:	d530      	bpl.n	8008e4e <__ssputs_r+0x9e>
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7ff ff85 	bl	8008cfc <_malloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	b950      	cbnz	r0, 8008e0c <__ssputs_r+0x5c>
 8008df6:	230c      	movs	r3, #12
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	f8ca 3000 	str.w	r3, [sl]
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	463a      	mov	r2, r7
 8008e0e:	6921      	ldr	r1, [r4, #16]
 8008e10:	f7fe f956 	bl	80070c0 <memcpy>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	6126      	str	r6, [r4, #16]
 8008e22:	443e      	add	r6, r7
 8008e24:	6026      	str	r6, [r4, #0]
 8008e26:	464e      	mov	r6, r9
 8008e28:	6165      	str	r5, [r4, #20]
 8008e2a:	1bed      	subs	r5, r5, r7
 8008e2c:	60a5      	str	r5, [r4, #8]
 8008e2e:	454e      	cmp	r6, r9
 8008e30:	d900      	bls.n	8008e34 <__ssputs_r+0x84>
 8008e32:	464e      	mov	r6, r9
 8008e34:	4632      	mov	r2, r6
 8008e36:	4641      	mov	r1, r8
 8008e38:	6820      	ldr	r0, [r4, #0]
 8008e3a:	f000 f92d 	bl	8009098 <memmove>
 8008e3e:	68a3      	ldr	r3, [r4, #8]
 8008e40:	2000      	movs	r0, #0
 8008e42:	1b9b      	subs	r3, r3, r6
 8008e44:	60a3      	str	r3, [r4, #8]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	441e      	add	r6, r3
 8008e4a:	6026      	str	r6, [r4, #0]
 8008e4c:	e7dc      	b.n	8008e08 <__ssputs_r+0x58>
 8008e4e:	462a      	mov	r2, r5
 8008e50:	f000 f93d 	bl	80090ce <_realloc_r>
 8008e54:	4606      	mov	r6, r0
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d1e2      	bne.n	8008e20 <__ssputs_r+0x70>
 8008e5a:	6921      	ldr	r1, [r4, #16]
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	f7ff ff01 	bl	8008c64 <_free_r>
 8008e62:	e7c8      	b.n	8008df6 <__ssputs_r+0x46>

08008e64 <_svfiprintf_r>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	461d      	mov	r5, r3
 8008e6a:	898b      	ldrh	r3, [r1, #12]
 8008e6c:	b09d      	sub	sp, #116	; 0x74
 8008e6e:	061f      	lsls	r7, r3, #24
 8008e70:	4680      	mov	r8, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	4616      	mov	r6, r2
 8008e76:	d50f      	bpl.n	8008e98 <_svfiprintf_r+0x34>
 8008e78:	690b      	ldr	r3, [r1, #16]
 8008e7a:	b96b      	cbnz	r3, 8008e98 <_svfiprintf_r+0x34>
 8008e7c:	2140      	movs	r1, #64	; 0x40
 8008e7e:	f7ff ff3d 	bl	8008cfc <_malloc_r>
 8008e82:	6020      	str	r0, [r4, #0]
 8008e84:	6120      	str	r0, [r4, #16]
 8008e86:	b928      	cbnz	r0, 8008e94 <_svfiprintf_r+0x30>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	f8c8 3000 	str.w	r3, [r8]
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	e0c8      	b.n	8009026 <_svfiprintf_r+0x1c2>
 8008e94:	2340      	movs	r3, #64	; 0x40
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9c:	2320      	movs	r3, #32
 8008e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea2:	2330      	movs	r3, #48	; 0x30
 8008ea4:	f04f 0b01 	mov.w	fp, #1
 8008ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eac:	9503      	str	r5, [sp, #12]
 8008eae:	4637      	mov	r7, r6
 8008eb0:	463d      	mov	r5, r7
 8008eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eb6:	b10b      	cbz	r3, 8008ebc <_svfiprintf_r+0x58>
 8008eb8:	2b25      	cmp	r3, #37	; 0x25
 8008eba:	d13e      	bne.n	8008f3a <_svfiprintf_r+0xd6>
 8008ebc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ec0:	d00b      	beq.n	8008eda <_svfiprintf_r+0x76>
 8008ec2:	4653      	mov	r3, sl
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4640      	mov	r0, r8
 8008eca:	f7ff ff71 	bl	8008db0 <__ssputs_r>
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f000 80a4 	beq.w	800901c <_svfiprintf_r+0x1b8>
 8008ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed6:	4453      	add	r3, sl
 8008ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eda:	783b      	ldrb	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 809d 	beq.w	800901c <_svfiprintf_r+0x1b8>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	9307      	str	r3, [sp, #28]
 8008ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef6:	462f      	mov	r7, r5
 8008ef8:	2205      	movs	r2, #5
 8008efa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008efe:	4850      	ldr	r0, [pc, #320]	; (8009040 <_svfiprintf_r+0x1dc>)
 8008f00:	f7ff fbb8 	bl	8008674 <memchr>
 8008f04:	9b04      	ldr	r3, [sp, #16]
 8008f06:	b9d0      	cbnz	r0, 8008f3e <_svfiprintf_r+0xda>
 8008f08:	06d9      	lsls	r1, r3, #27
 8008f0a:	bf44      	itt	mi
 8008f0c:	2220      	movmi	r2, #32
 8008f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f12:	071a      	lsls	r2, r3, #28
 8008f14:	bf44      	itt	mi
 8008f16:	222b      	movmi	r2, #43	; 0x2b
 8008f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f1c:	782a      	ldrb	r2, [r5, #0]
 8008f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8008f20:	d015      	beq.n	8008f4e <_svfiprintf_r+0xea>
 8008f22:	462f      	mov	r7, r5
 8008f24:	2000      	movs	r0, #0
 8008f26:	250a      	movs	r5, #10
 8008f28:	9a07      	ldr	r2, [sp, #28]
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f30:	3b30      	subs	r3, #48	; 0x30
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d94d      	bls.n	8008fd2 <_svfiprintf_r+0x16e>
 8008f36:	b1b8      	cbz	r0, 8008f68 <_svfiprintf_r+0x104>
 8008f38:	e00f      	b.n	8008f5a <_svfiprintf_r+0xf6>
 8008f3a:	462f      	mov	r7, r5
 8008f3c:	e7b8      	b.n	8008eb0 <_svfiprintf_r+0x4c>
 8008f3e:	4a40      	ldr	r2, [pc, #256]	; (8009040 <_svfiprintf_r+0x1dc>)
 8008f40:	463d      	mov	r5, r7
 8008f42:	1a80      	subs	r0, r0, r2
 8008f44:	fa0b f000 	lsl.w	r0, fp, r0
 8008f48:	4318      	orrs	r0, r3
 8008f4a:	9004      	str	r0, [sp, #16]
 8008f4c:	e7d3      	b.n	8008ef6 <_svfiprintf_r+0x92>
 8008f4e:	9a03      	ldr	r2, [sp, #12]
 8008f50:	1d11      	adds	r1, r2, #4
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	9103      	str	r1, [sp, #12]
 8008f56:	2a00      	cmp	r2, #0
 8008f58:	db01      	blt.n	8008f5e <_svfiprintf_r+0xfa>
 8008f5a:	9207      	str	r2, [sp, #28]
 8008f5c:	e004      	b.n	8008f68 <_svfiprintf_r+0x104>
 8008f5e:	4252      	negs	r2, r2
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	9207      	str	r2, [sp, #28]
 8008f66:	9304      	str	r3, [sp, #16]
 8008f68:	783b      	ldrb	r3, [r7, #0]
 8008f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f6c:	d10c      	bne.n	8008f88 <_svfiprintf_r+0x124>
 8008f6e:	787b      	ldrb	r3, [r7, #1]
 8008f70:	2b2a      	cmp	r3, #42	; 0x2a
 8008f72:	d133      	bne.n	8008fdc <_svfiprintf_r+0x178>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	3702      	adds	r7, #2
 8008f78:	1d1a      	adds	r2, r3, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	9203      	str	r2, [sp, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfb8      	it	lt
 8008f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	4d2e      	ldr	r5, [pc, #184]	; (8009044 <_svfiprintf_r+0x1e0>)
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	7839      	ldrb	r1, [r7, #0]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f7ff fb70 	bl	8008674 <memchr>
 8008f94:	b138      	cbz	r0, 8008fa6 <_svfiprintf_r+0x142>
 8008f96:	2340      	movs	r3, #64	; 0x40
 8008f98:	1b40      	subs	r0, r0, r5
 8008f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	3701      	adds	r7, #1
 8008fa2:	4303      	orrs	r3, r0
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	7839      	ldrb	r1, [r7, #0]
 8008fa8:	2206      	movs	r2, #6
 8008faa:	4827      	ldr	r0, [pc, #156]	; (8009048 <_svfiprintf_r+0x1e4>)
 8008fac:	1c7e      	adds	r6, r7, #1
 8008fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb2:	f7ff fb5f 	bl	8008674 <memchr>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d038      	beq.n	800902c <_svfiprintf_r+0x1c8>
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <_svfiprintf_r+0x1e8>)
 8008fbc:	bb13      	cbnz	r3, 8009004 <_svfiprintf_r+0x1a0>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	3307      	adds	r3, #7
 8008fc2:	f023 0307 	bic.w	r3, r3, #7
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fcc:	444b      	add	r3, r9
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e76d      	b.n	8008eae <_svfiprintf_r+0x4a>
 8008fd2:	fb05 3202 	mla	r2, r5, r2, r3
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	460f      	mov	r7, r1
 8008fda:	e7a6      	b.n	8008f2a <_svfiprintf_r+0xc6>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	250a      	movs	r5, #10
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	3701      	adds	r7, #1
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fec:	3a30      	subs	r2, #48	; 0x30
 8008fee:	2a09      	cmp	r2, #9
 8008ff0:	d903      	bls.n	8008ffa <_svfiprintf_r+0x196>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0c8      	beq.n	8008f88 <_svfiprintf_r+0x124>
 8008ff6:	9105      	str	r1, [sp, #20]
 8008ff8:	e7c6      	b.n	8008f88 <_svfiprintf_r+0x124>
 8008ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8008ffe:	2301      	movs	r3, #1
 8009000:	4607      	mov	r7, r0
 8009002:	e7f0      	b.n	8008fe6 <_svfiprintf_r+0x182>
 8009004:	ab03      	add	r3, sp, #12
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4622      	mov	r2, r4
 800900a:	4b11      	ldr	r3, [pc, #68]	; (8009050 <_svfiprintf_r+0x1ec>)
 800900c:	a904      	add	r1, sp, #16
 800900e:	4640      	mov	r0, r8
 8009010:	f7fe f8fa 	bl	8007208 <_printf_float>
 8009014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009018:	4681      	mov	r9, r0
 800901a:	d1d6      	bne.n	8008fca <_svfiprintf_r+0x166>
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	065b      	lsls	r3, r3, #25
 8009020:	f53f af35 	bmi.w	8008e8e <_svfiprintf_r+0x2a>
 8009024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009026:	b01d      	add	sp, #116	; 0x74
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4622      	mov	r2, r4
 8009032:	4b07      	ldr	r3, [pc, #28]	; (8009050 <_svfiprintf_r+0x1ec>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	4640      	mov	r0, r8
 8009038:	f7fe fb92 	bl	8007760 <_printf_i>
 800903c:	e7ea      	b.n	8009014 <_svfiprintf_r+0x1b0>
 800903e:	bf00      	nop
 8009040:	08009434 	.word	0x08009434
 8009044:	0800943a 	.word	0x0800943a
 8009048:	0800943e 	.word	0x0800943e
 800904c:	08007209 	.word	0x08007209
 8009050:	08008db1 	.word	0x08008db1

08009054 <_sbrk_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	2300      	movs	r3, #0
 8009058:	4c05      	ldr	r4, [pc, #20]	; (8009070 <_sbrk_r+0x1c>)
 800905a:	4605      	mov	r5, r0
 800905c:	4608      	mov	r0, r1
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	f7f9 fa52 	bl	8002508 <_sbrk>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_sbrk_r+0x1a>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	b103      	cbz	r3, 800906e <_sbrk_r+0x1a>
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20001f30 	.word	0x20001f30

08009074 <__ascii_mbtowc>:
 8009074:	b082      	sub	sp, #8
 8009076:	b901      	cbnz	r1, 800907a <__ascii_mbtowc+0x6>
 8009078:	a901      	add	r1, sp, #4
 800907a:	b142      	cbz	r2, 800908e <__ascii_mbtowc+0x1a>
 800907c:	b14b      	cbz	r3, 8009092 <__ascii_mbtowc+0x1e>
 800907e:	7813      	ldrb	r3, [r2, #0]
 8009080:	600b      	str	r3, [r1, #0]
 8009082:	7812      	ldrb	r2, [r2, #0]
 8009084:	1c10      	adds	r0, r2, #0
 8009086:	bf18      	it	ne
 8009088:	2001      	movne	r0, #1
 800908a:	b002      	add	sp, #8
 800908c:	4770      	bx	lr
 800908e:	4610      	mov	r0, r2
 8009090:	e7fb      	b.n	800908a <__ascii_mbtowc+0x16>
 8009092:	f06f 0001 	mvn.w	r0, #1
 8009096:	e7f8      	b.n	800908a <__ascii_mbtowc+0x16>

08009098 <memmove>:
 8009098:	4288      	cmp	r0, r1
 800909a:	b510      	push	{r4, lr}
 800909c:	eb01 0302 	add.w	r3, r1, r2
 80090a0:	d807      	bhi.n	80090b2 <memmove+0x1a>
 80090a2:	1e42      	subs	r2, r0, #1
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d00a      	beq.n	80090be <memmove+0x26>
 80090a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80090b0:	e7f8      	b.n	80090a4 <memmove+0xc>
 80090b2:	4283      	cmp	r3, r0
 80090b4:	d9f5      	bls.n	80090a2 <memmove+0xa>
 80090b6:	1881      	adds	r1, r0, r2
 80090b8:	1ad2      	subs	r2, r2, r3
 80090ba:	42d3      	cmn	r3, r2
 80090bc:	d100      	bne.n	80090c0 <memmove+0x28>
 80090be:	bd10      	pop	{r4, pc}
 80090c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090c8:	e7f7      	b.n	80090ba <memmove+0x22>

080090ca <__malloc_lock>:
 80090ca:	4770      	bx	lr

080090cc <__malloc_unlock>:
 80090cc:	4770      	bx	lr

080090ce <_realloc_r>:
 80090ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d0:	4607      	mov	r7, r0
 80090d2:	4614      	mov	r4, r2
 80090d4:	460e      	mov	r6, r1
 80090d6:	b921      	cbnz	r1, 80090e2 <_realloc_r+0x14>
 80090d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090dc:	4611      	mov	r1, r2
 80090de:	f7ff be0d 	b.w	8008cfc <_malloc_r>
 80090e2:	b922      	cbnz	r2, 80090ee <_realloc_r+0x20>
 80090e4:	f7ff fdbe 	bl	8008c64 <_free_r>
 80090e8:	4625      	mov	r5, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ee:	f000 f821 	bl	8009134 <_malloc_usable_size_r>
 80090f2:	42a0      	cmp	r0, r4
 80090f4:	d20f      	bcs.n	8009116 <_realloc_r+0x48>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff fdff 	bl	8008cfc <_malloc_r>
 80090fe:	4605      	mov	r5, r0
 8009100:	2800      	cmp	r0, #0
 8009102:	d0f2      	beq.n	80090ea <_realloc_r+0x1c>
 8009104:	4631      	mov	r1, r6
 8009106:	4622      	mov	r2, r4
 8009108:	f7fd ffda 	bl	80070c0 <memcpy>
 800910c:	4631      	mov	r1, r6
 800910e:	4638      	mov	r0, r7
 8009110:	f7ff fda8 	bl	8008c64 <_free_r>
 8009114:	e7e9      	b.n	80090ea <_realloc_r+0x1c>
 8009116:	4635      	mov	r5, r6
 8009118:	e7e7      	b.n	80090ea <_realloc_r+0x1c>

0800911a <__ascii_wctomb>:
 800911a:	b149      	cbz	r1, 8009130 <__ascii_wctomb+0x16>
 800911c:	2aff      	cmp	r2, #255	; 0xff
 800911e:	bf8b      	itete	hi
 8009120:	238a      	movhi	r3, #138	; 0x8a
 8009122:	700a      	strbls	r2, [r1, #0]
 8009124:	6003      	strhi	r3, [r0, #0]
 8009126:	2001      	movls	r0, #1
 8009128:	bf88      	it	hi
 800912a:	f04f 30ff 	movhi.w	r0, #4294967295
 800912e:	4770      	bx	lr
 8009130:	4608      	mov	r0, r1
 8009132:	4770      	bx	lr

08009134 <_malloc_usable_size_r>:
 8009134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009138:	1f18      	subs	r0, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfbc      	itt	lt
 800913e:	580b      	ldrlt	r3, [r1, r0]
 8009140:	18c0      	addlt	r0, r0, r3
 8009142:	4770      	bx	lr

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
