
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008abc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08008bd0  08008bd0  00018bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f88  08008f88  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008f88  08008f88  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f88  08008f88  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d4c  200001e0  08009170  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f2c  08009170  00021f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159b3  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003285  00000000  00000000  00035bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  00038e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174f7  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101e5  00000000  00000000  00052897  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080484  00000000  00000000  00062a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  000e2f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bb4 	.word	0x08008bb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008bb4 	.word	0x08008bb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <DCMotorInit>:

#include "stm32f1xx_hal.h"
#include "dc_motor_api.h"

void DCMotorInit(DCMotor_S *dc_motor_, TIM_HandleTypeDef *timer_handler_)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	dc_motor_->motor_pwm_ctrl = timer_handler_;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	601a      	str	r2, [r3, #0]
	dc_motor_->pwm_value = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	811a      	strh	r2, [r3, #8]
	dc_motor_->direction_flag = MOTOR_SPIN_CW;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	729a      	strb	r2, [r3, #10]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <DCMotorRPMSet>:

void DCMotorRPMSet(DCMotor_S *dc_motor_)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = dc_motor_->pwm_value - 1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fc12 	bl	80048fc <HAL_TIM_PWM_Stop>

    if (dc_motor_->direction_flag == MOTOR_SPIN_CW)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7a9b      	ldrb	r3, [r3, #10]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10a      	bne.n	80010f6 <DCMotorRPMSet+0x52>
    {
		HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2110      	movs	r1, #16
 80010e4:	4819      	ldr	r0, [pc, #100]	; (800114c <DCMotorRPMSet+0xa8>)
 80010e6:	f002 fa15 	bl	8003514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2120      	movs	r1, #32
 80010ee:	4817      	ldr	r0, [pc, #92]	; (800114c <DCMotorRPMSet+0xa8>)
 80010f0:	f002 fa10 	bl	8003514 <HAL_GPIO_WritePin>
 80010f4:	e018      	b.n	8001128 <DCMotorRPMSet+0x84>
    }
	else if (dc_motor_->direction_flag == MOTOR_SPIN_CCW)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7a9b      	ldrb	r3, [r3, #10]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10a      	bne.n	8001114 <DCMotorRPMSet+0x70>
	{
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2110      	movs	r1, #16
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <DCMotorRPMSet+0xa8>)
 8001104:	f002 fa06 	bl	8003514 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2120      	movs	r1, #32
 800110c:	480f      	ldr	r0, [pc, #60]	; (800114c <DCMotorRPMSet+0xa8>)
 800110e:	f002 fa01 	bl	8003514 <HAL_GPIO_WritePin>
 8001112:	e009      	b.n	8001128 <DCMotorRPMSet+0x84>
    }
	else
	{
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CW_PIN, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <DCMotorRPMSet+0xa8>)
 800111a:	f002 f9fb 	bl	8003514 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DC_MOTOR_CCW_PIN, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <DCMotorRPMSet+0xa8>)
 8001124:	f002 f9f6 	bl	8003514 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f107 010c 	add.w	r1, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fe1c 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fbaa 	bl	8004898 <HAL_TIM_PWM_Start>
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40010c00 	.word	0x40010c00

08001150 <EncoderInit>:
 */

#include "encoder_api.h"

void EncoderInit(Encoder_S *encoder_, EncoderModel_E model_)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	encoder_->model = model_;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	711a      	strb	r2, [r3, #4]
	encoder_->rpm = 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
	encoder_->prev_pulse_count = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	80da      	strh	r2, [r3, #6]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
	...

0800117c <UpdateEncoderParams>:

void UpdateEncoderParams(Encoder_S *encoder_, uint32_t encoder_timer_, uint16_t timestep_ms_)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
	int32_t delta_count;
	delta_count = encoder_timer_ - encoder_->prev_pulse_count;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	88db      	ldrh	r3, [r3, #6]
 800118e:	461a      	mov	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	61fb      	str	r3, [r7, #28]
	encoder_->prev_pulse_count = (uint16_t) encoder_timer_;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	b29a      	uxth	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	80da      	strh	r2, [r3, #6]

	float pulses_per_second;
	pulses_per_second = ((float) delta_count / (float)timestep_ms_) * (float) MILISECONDS_PER_SECOND;
 800119e:	69f8      	ldr	r0, [r7, #28]
 80011a0:	f7ff fd2c 	bl	8000bfc <__aeabi_i2f>
 80011a4:	4604      	mov	r4, r0
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd23 	bl	8000bf4 <__aeabi_ui2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fe2a 	bl	8000e0c <__aeabi_fdiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4917      	ldr	r1, [pc, #92]	; (8001218 <UpdateEncoderParams+0x9c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd71 	bl	8000ca4 <__aeabi_fmul>
 80011c2:	4603      	mov	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]

	float revs_per_minute;
	revs_per_minute = (pulses_per_second / (float) encoder_->model) * (float) SECONDS_PER_MINUTE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fd12 	bl	8000bf4 <__aeabi_ui2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	69b8      	ldr	r0, [r7, #24]
 80011d6:	f7ff fe19 	bl	8000e0c <__aeabi_fdiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	490f      	ldr	r1, [pc, #60]	; (800121c <UpdateEncoderParams+0xa0>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fd60 	bl	8000ca4 <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]

	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 80011e8:	490d      	ldr	r1, [pc, #52]	; (8001220 <UpdateEncoderParams+0xa4>)
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff fef8 	bl	8000fe0 <__aeabi_fcmplt>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <UpdateEncoderParams+0x7c>
	{
		encoder_->rpm = revs_per_minute;
	}
}
 80011f6:	e00a      	b.n	800120e <UpdateEncoderParams+0x92>
	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 80011f8:	490a      	ldr	r1, [pc, #40]	; (8001224 <UpdateEncoderParams+0xa8>)
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff0e 	bl	800101c <__aeabi_fcmpgt>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <UpdateEncoderParams+0x8c>
}
 8001206:	e002      	b.n	800120e <UpdateEncoderParams+0x92>
		encoder_->rpm = revs_per_minute;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	bf00      	nop
 8001218:	447a0000 	.word	0x447a0000
 800121c:	42700000 	.word	0x42700000
 8001220:	43160000 	.word	0x43160000
 8001224:	c3160000 	.word	0xc3160000

08001228 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <vApplicationGetIdleTaskMemory+0x28>)
 8001238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <vApplicationGetIdleTaskMemory+0x2c>)
 800123e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	200001fc 	.word	0x200001fc
 8001254:	20000250 	.word	0x20000250

08001258 <LCDSendCmd>:

#include "stm32f1xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b087      	sub	sp, #28
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f023 030f 	bic.w	r3, r3, #15
 800126a:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f043 030c 	orr.w	r3, r3, #12
 8001278:	b2db      	uxtb	r3, r3
 800127a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	b2db      	uxtb	r3, r3
 8001284:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	f043 030c 	orr.w	r3, r3, #12
 800128c:	b2db      	uxtb	r3, r3
 800128e:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001290:	7bbb      	ldrb	r3, [r7, #14]
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	b2db      	uxtb	r3, r3
 8001298:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	b299      	uxth	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	b29c      	uxth	r4, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	88db      	ldrh	r3, [r3, #6]
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4623      	mov	r3, r4
 80012b6:	f002 fa85 	bl	80037c4 <HAL_I2C_Master_Transmit>
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}

080012c2 <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 80012c2:	b590      	push	{r4, r7, lr}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af02      	add	r7, sp, #8
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f023 030f 	bic.w	r3, r3, #15
 80012d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f043 030d 	orr.w	r3, r3, #13
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f043 0309 	orr.w	r3, r3, #9
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	f043 030d 	orr.w	r3, r3, #13
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f043 0309 	orr.w	r3, r3, #9
 8001300:	b2db      	uxtb	r3, r3
 8001302:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	b299      	uxth	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7a1b      	ldrb	r3, [r3, #8]
 8001312:	b29c      	uxth	r4, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	88db      	ldrh	r3, [r3, #6]
 8001318:	f107 0208 	add.w	r2, r7, #8
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4623      	mov	r3, r4
 8001320:	f002 fa50 	bl	80037c4 <HAL_I2C_Master_Transmit>
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <LCDClear>:

void LCDClear(LCDDisplay_S *lcd_disp_)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	LCDSendCmd(lcd_disp_, 0x80);
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff8e 	bl	8001258 <LCDSendCmd>
	for (int i = 0; i < 70; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	e006      	b.n	8001350 <LCDClear+0x24>
	{
		LCDSendData(lcd_disp_, ' ');
 8001342:	2120      	movs	r1, #32
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ffbc 	bl	80012c2 <LCDSendData>
	for (int i = 0; i < 70; i++)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b45      	cmp	r3, #69	; 0x45
 8001354:	ddf5      	ble.n	8001342 <LCDClear+0x16>
	}
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <LCDSetCursorPos>:

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
 800136c:	4613      	mov	r3, r2
 800136e:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <LCDSetCursorPos+0x50>)
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	f107 0210 	add.w	r2, r7, #16
 8001386:	4413      	add	r3, r2
 8001388:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	78bb      	ldrb	r3, [r7, #2]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139a:	b25b      	sxtb	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4619      	mov	r1, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff59 	bl	8001258 <LCDSendCmd>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08008bd0 	.word	0x08008bd0

080013b4 <LCDInit>:

void LCDInit(LCDDisplay_S *lcd_disp_, I2C_HandleTypeDef *i2c_handler_)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	lcd_disp_->i2c_handler = i2c_handler_;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	601a      	str	r2, [r3, #0]
	lcd_disp_->byte_mode = LCD_DISP_4_BYTE_MODE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2204      	movs	r2, #4
 80013c8:	721a      	strb	r2, [r3, #8]
	lcd_disp_->i2c_address = LCD_I2C_ADDRESS;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	224e      	movs	r2, #78	; 0x4e
 80013ce:	711a      	strb	r2, [r3, #4]
	lcd_disp_->i2c_timeout = LCD_DISP_I2C_TIMEOUT_MS;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2264      	movs	r2, #100	; 0x64
 80013d4:	80da      	strh	r2, [r3, #6]

	HAL_Delay(50);
 80013d6:	2032      	movs	r0, #50	; 0x32
 80013d8:	f001 f896 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2130      	movs	r1, #48	; 0x30
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff39 	bl	8001258 <LCDSendCmd>
	HAL_Delay(5);
 80013e6:	2005      	movs	r0, #5
 80013e8:	f001 f88e 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2130      	movs	r1, #48	; 0x30
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <LCDSendCmd>
	HAL_Delay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f001 f886 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2130      	movs	r1, #48	; 0x30
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff29 	bl	8001258 <LCDSendCmd>
	HAL_Delay(10);
 8001406:	200a      	movs	r0, #10
 8001408:	f001 f87e 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x20);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2120      	movs	r1, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff21 	bl	8001258 <LCDSendCmd>
	HAL_Delay(10);
 8001416:	200a      	movs	r0, #10
 8001418:	f001 f876 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2128      	movs	r1, #40	; 0x28
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff19 	bl	8001258 <LCDSendCmd>
	HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f001 f86e 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2108      	movs	r1, #8
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff11 	bl	8001258 <LCDSendCmd>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f001 f866 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x01); // clear display
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff09 	bl	8001258 <LCDSendCmd>
	HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f001 f85e 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2106      	movs	r1, #6
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff01 	bl	8001258 <LCDSendCmd>
	HAL_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f001 f856 	bl	8002508 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	210c      	movs	r1, #12
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fef9 	bl	8001258 <LCDSendCmd>
	HAL_Delay(100);
 8001466:	2064      	movs	r0, #100	; 0x64
 8001468:	f001 f84e 	bl	8002508 <HAL_Delay>
	LCDClear(&lcd_disp_);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff5c 	bl	800132c <LCDClear>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <LCDSendString>:

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	while (*str)
 8001486:	e007      	b.n	8001498 <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	603a      	str	r2, [r7, #0]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff15 	bl	80012c2 <LCDSendData>
	while (*str)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f3      	bne.n	8001488 <LCDSendString+0xc>
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EditBtnIn_Pin)
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b8:	d111      	bne.n	80014de <HAL_GPIO_EXTI_Callback+0x36>
	{
		uint16_t adc_values[TOTAL_CONTROLS_COUNT] = {0,0,0,0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, TOTAL_CONTROLS_COUNT);
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	2204      	movs	r2, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <HAL_GPIO_EXTI_Callback+0x8c>)
 80014ce:	f001 f915 	bl	80026fc <HAL_ADC_Start_DMA>
		PotControlsValueUpdate(pot_controls_a, adc_values);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <HAL_GPIO_EXTI_Callback+0x90>)
 80014da:	f000 fcdc 	bl	8001e96 <PotControlsValueUpdate>
	}

	if (GPIO_Pin == CalibrationBtnIn_Pin)
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e4:	d10b      	bne.n	80014fe <HAL_GPIO_EXTI_Callback+0x56>
	{
		/* TODO: Calibration Routine Callback Function Implementation */
		if (calibration_btn == 0)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_GPIO_EXTI_Callback+0x94>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <HAL_GPIO_EXTI_Callback+0x50>
		{
			calibration_btn = 1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_GPIO_EXTI_Callback+0x94>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_EXTI_Callback+0x56>
		}
		else
		{
			calibration_btn = 0;
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_GPIO_EXTI_Callback+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == AlarmSilenceBtnIn_Pin)
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001504:	d102      	bne.n	800150c <HAL_GPIO_EXTI_Callback+0x64>
	{
		silence_alarms = 1;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_GPIO_EXTI_Callback+0x98>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == StartStopBtnIn_Pin)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001512:	d10b      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x84>
	{
		if (enable_routine == 0)
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_GPIO_EXTI_Callback+0x7e>
		{
			enable_routine = 1;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
		else
		{
			enable_routine = 0;
		}
	}
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_EXTI_Callback+0x84>
			enable_routine = 0;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20001df0 	.word	0x20001df0
 8001538:	20001ecc 	.word	0x20001ecc
 800153c:	20000450 	.word	0x20000450
 8001540:	20001e84 	.word	0x20001e84
 8001544:	20001ec8 	.word	0x20001ec8

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b0a4      	sub	sp, #144	; 0x90
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 ffa9 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f89d 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 fac7 	bl	8001ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 800155a:	f000 faa7 	bl	8001aac <MX_DMA_Init>
  MX_I2C2_Init();
 800155e:	f000 f99b 	bl	8001898 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001562:	f000 f9c7 	bl	80018f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001566:	f000 fa47 	bl	80019f8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800156a:	f000 f8ed 	bl	8001748 <MX_ADC1_Init>
  MX_ADC2_Init();
 800156e:	f000 f955 	bl	800181c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  DCMotorInit(&dc_motor, &htim1);
 8001572:	4937      	ldr	r1, [pc, #220]	; (8001650 <main+0x108>)
 8001574:	4837      	ldr	r0, [pc, #220]	; (8001654 <main+0x10c>)
 8001576:	f7ff fd81 	bl	800107c <DCMotorInit>
  EncoderInit(&motor_encoder, SD_MODEL);
 800157a:	2150      	movs	r1, #80	; 0x50
 800157c:	4836      	ldr	r0, [pc, #216]	; (8001658 <main+0x110>)
 800157e:	f7ff fde7 	bl	8001150 <EncoderInit>
  LCDInit(&lcd_display, &hi2c2);
 8001582:	4936      	ldr	r1, [pc, #216]	; (800165c <main+0x114>)
 8001584:	4836      	ldr	r0, [pc, #216]	; (8001660 <main+0x118>)
 8001586:	f7ff ff15 	bl	80013b4 <LCDInit>
  PotControlsInit(pot_controls_a);
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <main+0x11c>)
 800158c:	f000 fc6b 	bl	8001e66 <PotControlsInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainRoutine */
  osThreadDef(mainRoutine, startMainRoutine, osPriorityAboveNormal, 0, 128);
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <main+0x120>)
 8001592:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001596:	461d      	mov	r5, r3
 8001598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainRoutineHandle = osThreadCreate(osThread(mainRoutine), NULL);
 80015a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 ffbe 	bl	800552c <osThreadCreate>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <main+0x124>)
 80015b4:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUpdate */
  osThreadDef(displayUpdate, startDisplayUpdate, osPriorityAboveNormal, 0, 128);
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <main+0x128>)
 80015b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80015bc:	461d      	mov	r5, r3
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUpdateHandle = osThreadCreate(osThread(displayUpdate), NULL);
 80015ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 ffab 	bl	800552c <osThreadCreate>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <main+0x12c>)
 80015da:	601a      	str	r2, [r3, #0]

  /* definition and creation of encoderRPM */
  osThreadDef(encoderRPM, startEncoderRPM, osPriorityAboveNormal, 0, 128);
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <main+0x130>)
 80015de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderRPMHandle = osThreadCreate(osThread(encoderRPM), NULL);
 80015f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 ff98 	bl	800552c <osThreadCreate>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <main+0x134>)
 8001600:	601a      	str	r2, [r3, #0]

  /* definition and creation of initTask */
  osThreadDef(initTask, startInitTask, osPriorityRealtime, 0, 128);
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <main+0x138>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(initTask), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f003 ff85 	bl	800552c <osThreadCreate>
 8001622:	4602      	mov	r2, r0
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <main+0x13c>)
 8001626:	601a      	str	r2, [r3, #0]

  /* definition and creation of alarmsTask */
  osThreadDef(alarmsTask, startAlarmsTask, osPriorityIdle, 0, 128);
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <main+0x140>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmsTaskHandle = osThreadCreate(osThread(alarmsTask), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f003 ff74 	bl	800552c <osThreadCreate>
 8001644:	4602      	mov	r2, r0
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <main+0x144>)
 8001648:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f003 ff58 	bl	80054fe <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800164e:	e7fe      	b.n	800164e <main+0x106>
 8001650:	20001e88 	.word	0x20001e88
 8001654:	20001e30 	.word	0x20001e30
 8001658:	20001e24 	.word	0x20001e24
 800165c:	20001d4c 	.word	0x20001d4c
 8001660:	20001da4 	.word	0x20001da4
 8001664:	20001ecc 	.word	0x20001ecc
 8001668:	08008be4 	.word	0x08008be4
 800166c:	20001e80 	.word	0x20001e80
 8001670:	08008c10 	.word	0x08008c10
 8001674:	20001da0 	.word	0x20001da0
 8001678:	08008c38 	.word	0x08008c38
 800167c:	20001e2c 	.word	0x20001e2c
 8001680:	08008c60 	.word	0x08008c60
 8001684:	20001edc 	.word	0x20001edc
 8001688:	08008c88 	.word	0x08008c88
 800168c:	20001ee0 	.word	0x20001ee0

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b094      	sub	sp, #80	; 0x50
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169a:	2228      	movs	r2, #40	; 0x28
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fa51 	bl	8006b46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fb66 	bl	8003db8 <HAL_RCC_OscConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016f2:	f000 fbb2 	bl	8001e5a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f6:	230f      	movs	r3, #15
 80016f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001706:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2101      	movs	r1, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fdd0 	bl	80042b8 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800171e:	f000 fb9c 	bl	8001e5a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001722:	2302      	movs	r3, #2
 8001724:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f002 ff7a 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800173a:	f000 fb8e 	bl	8001e5a <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	; 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <MX_ADC1_Init+0xcc>)
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <MX_ADC1_Init+0xd0>)
 800175c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <MX_ADC1_Init+0xcc>)
 8001760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <MX_ADC1_Init+0xcc>)
 8001768:	2200      	movs	r2, #0
 800176a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_ADC1_Init+0xcc>)
 800176e:	2200      	movs	r2, #0
 8001770:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_ADC1_Init+0xcc>)
 8001774:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_ADC1_Init+0xcc>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <MX_ADC1_Init+0xcc>)
 8001782:	2204      	movs	r2, #4
 8001784:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <MX_ADC1_Init+0xcc>)
 8001788:	f000 fee0 	bl	800254c <HAL_ADC_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001792:	f000 fb62 	bl	8001e5a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179a:	2301      	movs	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	481b      	ldr	r0, [pc, #108]	; (8001814 <MX_ADC1_Init+0xcc>)
 80017a8:	f001 f8a2 	bl	80028f0 <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017b2:	f000 fb52 	bl	8001e5a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4814      	ldr	r0, [pc, #80]	; (8001814 <MX_ADC1_Init+0xcc>)
 80017c4:	f001 f894 	bl	80028f0 <HAL_ADC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80017ce:	f000 fb44 	bl	8001e5a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_ADC1_Init+0xcc>)
 80017e0:	f001 f886 	bl	80028f0 <HAL_ADC_ConfigChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017ea:	f000 fb36 	bl	8001e5a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017ee:	2303      	movs	r3, #3
 80017f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017f2:	2304      	movs	r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_ADC1_Init+0xcc>)
 80017fc:	f001 f878 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001806:	f000 fb28 	bl	8001e5a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20001df0 	.word	0x20001df0
 8001818:	40012400 	.word	0x40012400

0800181c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <MX_ADC2_Init+0x74>)
 800182e:	4a19      	ldr	r2, [pc, #100]	; (8001894 <MX_ADC2_Init+0x78>)
 8001830:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_ADC2_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_ADC2_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_ADC2_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_ADC2_Init+0x74>)
 8001846:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800184a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_ADC2_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_ADC2_Init+0x74>)
 8001854:	2201      	movs	r2, #1
 8001856:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_ADC2_Init+0x74>)
 800185a:	f000 fe77 	bl	800254c <HAL_ADC_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 faf9 	bl	8001e5a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001868:	2304      	movs	r3, #4
 800186a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800186c:	2301      	movs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_ADC2_Init+0x74>)
 800187a:	f001 f839 	bl	80028f0 <HAL_ADC_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001884:	f000 fae9 	bl	8001e5a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20001d1c 	.word	0x20001d1c
 8001894:	40012800 	.word	0x40012800

08001898 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C2_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C2_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C2_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C2_Init+0x50>)
 80018d6:	f001 fe4d 	bl	8003574 <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 fabb 	bl	8001e5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20001d4c 	.word	0x20001d4c
 80018ec:	40005800 	.word	0x40005800
 80018f0:	000186a0 	.word	0x000186a0

080018f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b092      	sub	sp, #72	; 0x48
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2220      	movs	r2, #32
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f005 f911 	bl	8006b46 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <MX_TIM1_Init+0xfc>)
 8001926:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <MX_TIM1_Init+0x100>)
 8001928:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <MX_TIM1_Init+0xfc>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <MX_TIM1_Init+0xfc>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <MX_TIM1_Init+0xfc>)
 8001938:	224f      	movs	r2, #79	; 0x4f
 800193a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <MX_TIM1_Init+0xfc>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <MX_TIM1_Init+0xfc>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <MX_TIM1_Init+0xfc>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194e:	4828      	ldr	r0, [pc, #160]	; (80019f0 <MX_TIM1_Init+0xfc>)
 8001950:	f002 ff77 	bl	8004842 <HAL_TIM_PWM_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800195a:	f000 fa7e 	bl	8001e5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196a:	4619      	mov	r1, r3
 800196c:	4820      	ldr	r0, [pc, #128]	; (80019f0 <MX_TIM1_Init+0xfc>)
 800196e:	f003 fcf7 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001978:	f000 fa6f 	bl	8001e5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	; 0x60
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <MX_TIM1_Init+0xfc>)
 80019a2:	f003 f9e5 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80019ac:	f000 fa55 	bl	8001e5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_TIM1_Init+0xfc>)
 80019d4:	f003 fd08 	bl	80053e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80019de:	f000 fa3c 	bl	8001e5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <MX_TIM1_Init+0xfc>)
 80019e4:	f000 fc0c 	bl	8002200 <HAL_TIM_MspPostInit>

}
 80019e8:	bf00      	nop
 80019ea:	3748      	adds	r7, #72	; 0x48
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20001e88 	.word	0x20001e88
 80019f4:	40012c00 	.word	0x40012c00

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 f89d 	bl	8006b46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a16:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <MX_TIM3_Init+0xb0>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a28:	224f      	movs	r2, #79	; 0x4f
 8001a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a48:	230f      	movs	r3, #15
 8001a4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a50:	2301      	movs	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a64:	f002 ff96 	bl	8004994 <HAL_TIM_Encoder_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001a6e:	f000 f9f4 	bl	8001e5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a80:	f003 fc6e 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a8a:	f000 f9e6 	bl	8001e5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, htim3.Channel);
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <MX_TIM3_Init+0xac>)
 8001a96:	f003 f80b 	bl	8004ab0 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3730      	adds	r7, #48	; 0x30
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20001db0 	.word	0x20001db0
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_DMA_Init+0x38>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <MX_DMA_Init+0x38>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_DMA_Init+0x38>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	200b      	movs	r0, #11
 8001ad0:	f001 f9ad 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ad4:	200b      	movs	r0, #11
 8001ad6:	f001 f9c6 	bl	8002e66 <HAL_NVIC_EnableIRQ>

}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <MX_GPIO_Init+0xe0>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ModeLEDOut_Pin|PowerOnLEDOut_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b4a:	4820      	ldr	r0, [pc, #128]	; (8001bcc <MX_GPIO_Init+0xe4>)
 8001b4c:	f001 fce2 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorCW_Pin|MotorCCW_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2130      	movs	r1, #48	; 0x30
 8001b54:	481e      	ldr	r0, [pc, #120]	; (8001bd0 <MX_GPIO_Init+0xe8>)
 8001b56:	f001 fcdd 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EditBtnIn_Pin CalibrationBtnIn_Pin AlarmSilenceBtnIn_Pin StartStopBtnIn_Pin */
  GPIO_InitStruct.Pin = EditBtnIn_Pin|CalibrationBtnIn_Pin|AlarmSilenceBtnIn_Pin|StartStopBtnIn_Pin;
 8001b5a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_GPIO_Init+0xec>)
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <MX_GPIO_Init+0xe8>)
 8001b70:	f001 fb76 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ModeLEDOut_Pin PowerOnLEDOut_Pin */
  GPIO_InitStruct.Pin = ModeLEDOut_Pin|PowerOnLEDOut_Pin;
 8001b74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480f      	ldr	r0, [pc, #60]	; (8001bcc <MX_GPIO_Init+0xe4>)
 8001b8e:	f001 fb67 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorCW_Pin MotorCCW_Pin */
  GPIO_InitStruct.Pin = MotorCW_Pin|MotorCCW_Pin;
 8001b92:	2330      	movs	r3, #48	; 0x30
 8001b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <MX_GPIO_Init+0xe8>)
 8001baa:	f001 fb59 	bl	8003260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	2028      	movs	r0, #40	; 0x28
 8001bb4:	f001 f93b 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bb8:	2028      	movs	r0, #40	; 0x28
 8001bba:	f001 f954 	bl	8002e66 <HAL_NVIC_EnableIRQ>

}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	10110000 	.word	0x10110000

08001bd8 <startMainRoutine>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_startMainRoutine */
void startMainRoutine(void const * argument)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001be0:	f003 fc94 	bl	800550c <osKernelSysTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	60bb      	str	r3, [r7, #8]

	int8_t pwm_step = MOTOR_POSITIVE_PWM_STEP;
 8001be8:	2364      	movs	r3, #100	; 0x64
 8001bea:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for(;;)
	{
		if (enable_routine == 1)
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <startMainRoutine+0x84>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d127      	bne.n	8001c46 <startMainRoutine+0x6e>
		{
			if (dc_motor.pwm_value == MOTOR_MIN_PWM_PULSE)
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <startMainRoutine+0x88>)
 8001bf8:	891b      	ldrh	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <startMainRoutine+0x2c>
			{
				pwm_step = MOTOR_POSITIVE_PWM_STEP;
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e006      	b.n	8001c12 <startMainRoutine+0x3a>
			}
			else if (dc_motor.pwm_value == MOTOR_MAX_PWM_PULSE)
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <startMainRoutine+0x88>)
 8001c06:	891b      	ldrh	r3, [r3, #8]
 8001c08:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8001c0c:	d101      	bne.n	8001c12 <startMainRoutine+0x3a>
			{
				pwm_step = -MOTOR_NEGATIVE_PWM_STEP;
 8001c0e:	239c      	movs	r3, #156	; 0x9c
 8001c10:	73fb      	strb	r3, [r7, #15]
			}

			dc_motor.pwm_value += pwm_step;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <startMainRoutine+0x88>)
 8001c14:	891a      	ldrh	r2, [r3, #8]
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <startMainRoutine+0x88>)
 8001c22:	811a      	strh	r2, [r3, #8]

			if (dc_motor.direction_flag == MOTOR_SPIN_CW)
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <startMainRoutine+0x88>)
 8001c26:	7a9b      	ldrb	r3, [r3, #10]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <startMainRoutine+0x62>
			{
				DCMotorRPMSet(&dc_motor);
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <startMainRoutine+0x88>)
 8001c2e:	f7ff fa39 	bl	80010a4 <DCMotorRPMSet>
				dc_motor.direction_flag = MOTOR_SPIN_CW;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <startMainRoutine+0x88>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	729a      	strb	r2, [r3, #10]
 8001c38:	e005      	b.n	8001c46 <startMainRoutine+0x6e>
			}
			else
			{
				DCMotorRPMSet(&dc_motor);
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <startMainRoutine+0x88>)
 8001c3c:	f7ff fa32 	bl	80010a4 <DCMotorRPMSet>
				dc_motor.direction_flag = MOTOR_SPIN_CW;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <startMainRoutine+0x88>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	729a      	strb	r2, [r3, #10]
			}
		}

		osDelayUntil(&PreviousWakeTime, main_routine_update_time_ms);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <startMainRoutine+0x8c>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fcc1 	bl	80055dc <osDelayUntil>
		if (enable_routine == 1)
 8001c5a:	e7c7      	b.n	8001bec <startMainRoutine+0x14>
 8001c5c:	20001ec8 	.word	0x20001ec8
 8001c60:	20001e30 	.word	0x20001e30
 8001c64:	20001e20 	.word	0x20001e20

08001c68 <startDisplayUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplayUpdate */
void startDisplayUpdate(void const * argument)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b08d      	sub	sp, #52	; 0x34
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplayUpdate */
	char buffer[32];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001c70:	f003 fc4c 	bl	800550c <osKernelSysTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4834      	ldr	r0, [pc, #208]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001c7e:	f7ff fb6f 	bl	8001360 <LCDSetCursorPos>
		sprintf(buffer, "VOL %04u  PWM %04u", pot_controls_a[TIDAL_VOLUME_CONTROL].value, dc_motor.pwm_value);
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <startDisplayUpdate+0xec>)
 8001c84:	885b      	ldrh	r3, [r3, #2]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <startDisplayUpdate+0xf0>)
 8001c8c:	891b      	ldrh	r3, [r3, #8]
 8001c8e:	f107 0010 	add.w	r0, r7, #16
 8001c92:	4932      	ldr	r1, [pc, #200]	; (8001d5c <startDisplayUpdate+0xf4>)
 8001c94:	f005 fbae 	bl	80073f4 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	482c      	ldr	r0, [pc, #176]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001ca0:	f7ff fbec 	bl	800147c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 1, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4829      	ldr	r0, [pc, #164]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001caa:	f7ff fb59 	bl	8001360 <LCDSetCursorPos>
		sprintf(buffer, "RFQ %04u  RPM %+04ld", pot_controls_a[RESPIRATORY_FREQUENCY_CONTROL].value, (int32_t) motor_encoder.rpm);
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <startDisplayUpdate+0xec>)
 8001cb0:	895b      	ldrh	r3, [r3, #10]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461c      	mov	r4, r3
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <startDisplayUpdate+0xf8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f9b8 	bl	8001030 <__aeabi_f2iz>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f107 0010 	add.w	r0, r7, #16
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	4926      	ldr	r1, [pc, #152]	; (8001d64 <startDisplayUpdate+0xfc>)
 8001cca:	f005 fb93 	bl	80073f4 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481e      	ldr	r0, [pc, #120]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001cd6:	f7ff fbd1 	bl	800147c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 2, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2102      	movs	r1, #2
 8001cde:	481c      	ldr	r0, [pc, #112]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001ce0:	f7ff fb3e 	bl	8001360 <LCDSetCursorPos>
		sprintf(buffer, "I:E %04u  STS %04u", pot_controls_a[I_E_RATIO_CONTROL].value, enable_routine & calibration_btn);
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <startDisplayUpdate+0xec>)
 8001ce6:	88db      	ldrh	r3, [r3, #6]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <startDisplayUpdate+0x100>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <startDisplayUpdate+0x104>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f107 0010 	add.w	r0, r7, #16
 8001d00:	460a      	mov	r2, r1
 8001d02:	491b      	ldr	r1, [pc, #108]	; (8001d70 <startDisplayUpdate+0x108>)
 8001d04:	f005 fb76 	bl	80073f4 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4810      	ldr	r0, [pc, #64]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001d10:	f7ff fbb4 	bl	800147c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 3, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2103      	movs	r1, #3
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001d1a:	f7ff fb21 	bl	8001360 <LCDSetCursorPos>
		sprintf(buffer, "PRS %04u  SIL %04u", pot_controls_a[PRESSURE_VALUE_CONTROL].value, silence_alarms);
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <startDisplayUpdate+0xec>)
 8001d20:	89db      	ldrh	r3, [r3, #14]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <startDisplayUpdate+0x10c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f107 0010 	add.w	r0, r7, #16
 8001d30:	4911      	ldr	r1, [pc, #68]	; (8001d78 <startDisplayUpdate+0x110>)
 8001d32:	f005 fb5f 	bl	80073f4 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <startDisplayUpdate+0xe8>)
 8001d3e:	f7ff fb9d 	bl	800147c <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_UPDATE_TIMESTEP_MS);
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	210a      	movs	r1, #10
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fc47 	bl	80055dc <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001d4e:	e793      	b.n	8001c78 <startDisplayUpdate+0x10>
 8001d50:	20001da4 	.word	0x20001da4
 8001d54:	20001ecc 	.word	0x20001ecc
 8001d58:	20001e30 	.word	0x20001e30
 8001d5c:	08008ca4 	.word	0x08008ca4
 8001d60:	20001e24 	.word	0x20001e24
 8001d64:	08008cb8 	.word	0x08008cb8
 8001d68:	20001ec8 	.word	0x20001ec8
 8001d6c:	20000450 	.word	0x20000450
 8001d70:	08008cd0 	.word	0x08008cd0
 8001d74:	20001e84 	.word	0x20001e84
 8001d78:	08008ce4 	.word	0x08008ce4

08001d7c <startEncoderRPM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEncoderRPM */
void startEncoderRPM(void const * argument)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEncoderRPM */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001d84:	f003 fbc2 	bl	800550c <osKernelSysTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, TIM3->CNT, RPM_CALCULATE_TIMESTEP_MS);
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <startEncoderRPM+0x2c>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2264      	movs	r2, #100	; 0x64
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <startEncoderRPM+0x30>)
 8001d96:	f7ff f9f1 	bl	800117c <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, RPM_CALCULATE_TIMESTEP_MS);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2164      	movs	r1, #100	; 0x64
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fc1b 	bl	80055dc <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, TIM3->CNT, RPM_CALCULATE_TIMESTEP_MS);
 8001da6:	e7f1      	b.n	8001d8c <startEncoderRPM+0x10>
 8001da8:	40000400 	.word	0x40000400
 8001dac:	20001e24 	.word	0x20001e24

08001db0 <startInitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startInitTask */
void startInitTask(void const * argument)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startInitTask */
	enable_routine = 0;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <startInitTask+0x28>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
	silence_alarms = 0;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <startInitTask+0x2c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	osThreadTerminate(initTaskHandle);
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <startInitTask+0x30>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fbfb 	bl	80055c4 <osThreadTerminate>
  /* USER CODE END startInitTask */
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20001ec8 	.word	0x20001ec8
 8001ddc:	20001e84 	.word	0x20001e84
 8001de0:	20001edc 	.word	0x20001edc

08001de4 <startAlarmsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarmsTask */
void startAlarmsTask(void const * argument)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAlarmsTask */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001dec:	f003 fb8e 	bl	800550c <osKernelSysTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]
	alarm_flag = 1;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <startAlarmsTask+0x50>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
	for(;;)
	{
		if (silence_alarms == 1)
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <startAlarmsTask+0x54>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10f      	bne.n	8001e24 <startAlarmsTask+0x40>
		{
			alarm_flag = 0;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <startAlarmsTask+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
			osDelayUntil(&PreviousWakeTime, ALARM_SILENCE_TIMEOUT_MS);
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fbe2 	bl	80055dc <osDelayUntil>
			alarm_flag = 1;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <startAlarmsTask+0x50>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
			silence_alarms = 0;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <startAlarmsTask+0x54>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
		}
		osDelayUntil(&PreviousWakeTime, ALARM_UPDATE_TIMESTEP_MS);
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	210a      	movs	r1, #10
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fbd6 	bl	80055dc <osDelayUntil>
		if (silence_alarms == 1)
 8001e30:	e7e3      	b.n	8001dfa <startAlarmsTask+0x16>
 8001e32:	bf00      	nop
 8001e34:	20001e22 	.word	0x20001e22
 8001e38:	20001e84 	.word	0x20001e84

08001e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4e:	f000 fb3f 	bl	80024d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <PotControlsInit>:

#include "stm32f1xx_hal.h"
#include "potentiometer_api.h"

void PotControlsInit(volatile Potentiometer_S *pot_array_)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
	pot_array_[TIDAL_VOLUME_CONTROL].rank 				= PIN_A0;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	701a      	strb	r2, [r3, #0]
	pot_array_[I_E_RATIO_CONTROL].rank 					= PIN_A1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3304      	adds	r3, #4
 8001e78:	2203      	movs	r2, #3
 8001e7a:	701a      	strb	r2, [r3, #0]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank 		= PIN_A2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
	pot_array_[PRESSURE_VALUE_CONTROL].rank 			= PIN_A3;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	330c      	adds	r3, #12
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <PotControlsValueUpdate>:

void PotControlsValueUpdate(volatile Potentiometer_S *pot_array_, uint16_t *adc_values_)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
	pot_array_[TIDAL_VOLUME_CONTROL].value 				= adc_values_[pot_array_[TIDAL_VOLUME_CONTROL].rank];
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	805a      	strh	r2, [r3, #2]
	pot_array_[I_E_RATIO_CONTROL].value 				= adc_values_[pot_array_[I_E_RATIO_CONTROL].rank];
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	805a      	strh	r2, [r3, #2]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].value 	= adc_values_[pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank];
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3308      	adds	r3, #8
 8001eda:	8812      	ldrh	r2, [r2, #0]
 8001edc:	805a      	strh	r2, [r3, #2]
	pot_array_[PRESSURE_VALUE_CONTROL].value 			= adc_values_[pot_array_[PRESSURE_VALUE_CONTROL].rank];
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	441a      	add	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	330c      	adds	r3, #12
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	805a      	strh	r2, [r3, #2]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_MspInit+0x68>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_MspInit+0x68>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6193      	str	r3, [r2, #24]
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_MspInit+0x68>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_MspInit+0x68>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_MspInit+0x68>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_MspInit+0x68>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f000 ff76 	bl	8002e2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_MspInit+0x6c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_MspInit+0x6c>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000

08001f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_ADC_MspInit+0x13c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d14b      	bne.n	8002028 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f90:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8001f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = VolumePotIn_Pin|IERatioPotIn_Pin|FrequencyPotIn_Pin|PressureLvlPotIn_Pin;
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4839      	ldr	r0, [pc, #228]	; (80020b4 <HAL_ADC_MspInit+0x144>)
 8001fd0:	f001 f946 	bl	8003260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001fd6:	4a39      	ldr	r2, [pc, #228]	; (80020bc <HAL_ADC_MspInit+0x14c>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fda:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8002004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002008:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800200a:	482b      	ldr	r0, [pc, #172]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 800200c:	f000 ff3a 	bl	8002e84 <HAL_DMA_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002016:	f7ff ff20 	bl	8001e5a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 800201e:	621a      	str	r2, [r3, #32]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_ADC_MspInit+0x148>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002026:	e03c      	b.n	80020a2 <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_ADC_MspInit+0x150>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d137      	bne.n	80020a2 <HAL_ADC_MspInit+0x132>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203c:	6193      	str	r3, [r2, #24]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	6193      	str	r3, [r2, #24]
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_ADC_MspInit+0x140>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PressureSensorIn_Pin|Placeholder_Pin;
 800207a:	2330      	movs	r3, #48	; 0x30
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4619      	mov	r1, r3
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <HAL_ADC_MspInit+0x144>)
 800208a:	f001 f8e9 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PlaceholderB0_Pin|PlaceholderB1_Pin;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002092:	2303      	movs	r3, #3
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 0320 	add.w	r3, r7, #32
 800209a:	4619      	mov	r1, r3
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <HAL_ADC_MspInit+0x154>)
 800209e:	f001 f8df 	bl	8003260 <HAL_GPIO_Init>
}
 80020a2:	bf00      	nop
 80020a4:	3730      	adds	r7, #48	; 0x30
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012400 	.word	0x40012400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	20001e3c 	.word	0x20001e3c
 80020bc:	40020008 	.word	0x40020008
 80020c0:	40012800 	.word	0x40012800
 80020c4:	40010c00 	.word	0x40010c00

080020c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_I2C_MspInit+0x74>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d124      	bne.n	8002132 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_I2C_MspInit+0x78>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_I2C_MspInit+0x78>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_I2C_MspInit+0x78>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002100:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002106:	2312      	movs	r3, #18
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <HAL_I2C_MspInit+0x7c>)
 8002116:	f001 f8a3 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_I2C_MspInit+0x78>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_I2C_MspInit+0x78>)
 8002120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_I2C_MspInit+0x78>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40005800 	.word	0x40005800
 8002140:	40021000 	.word	0x40021000
 8002144:	40010c00 	.word	0x40010c00

08002148 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_TIM_PWM_MspInit+0x34>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10b      	bne.n	8002172 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_TIM_PWM_MspInit+0x38>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_TIM_PWM_MspInit+0x38>)
 8002160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_TIM_PWM_MspInit+0x38>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x70>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d123      	bne.n	80021ec <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x74>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x74>)
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	61d3      	str	r3, [r2, #28]
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x74>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x74>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x74>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x74>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 80021d4:	23c0      	movs	r3, #192	; 0xc0
 80021d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	4619      	mov	r1, r3
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_TIM_Encoder_MspInit+0x78>)
 80021e8:	f001 f83a 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010800 	.word	0x40010800

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_TIM_MspPostInit+0x5c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d118      	bne.n	8002252 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_TIM_MspPostInit+0x60>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_TIM_MspPostInit+0x60>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_TIM_MspPostInit+0x60>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 8002238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2302      	movs	r3, #2
 8002244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <HAL_TIM_MspPostInit+0x64>)
 800224e:	f001 f807 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002252:	bf00      	nop
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40010800 	.word	0x40010800

08002268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	201c      	movs	r0, #28
 800227e:	f000 fdd6 	bl	8002e2e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002282:	201c      	movs	r0, #28
 8002284:	f000 fdef 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_InitTick+0xa4>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_InitTick+0xa4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	61d3      	str	r3, [r2, #28]
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_InitTick+0xa4>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022a0:	f107 0210 	add.w	r2, r7, #16
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 f96e 	bl	800458c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022b0:	f002 f958 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 80022b4:	4603      	mov	r3, r0
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_InitTick+0xa8>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9b      	lsrs	r3, r3, #18
 80022c4:	3b01      	subs	r3, #1
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0xac>)
 80022ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_InitTick+0xac>)
 80022d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_InitTick+0xac>)
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_InitTick+0xac>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_InitTick+0xac>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80022ea:	480a      	ldr	r0, [pc, #40]	; (8002314 <HAL_InitTick+0xac>)
 80022ec:	f002 fa52 	bl	8004794 <HAL_TIM_Base_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d104      	bne.n	8002300 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <HAL_InitTick+0xac>)
 80022f8:	f002 fa80 	bl	80047fc <HAL_TIM_Base_Start_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	e000      	b.n	8002302 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	3730      	adds	r7, #48	; 0x30
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	431bde83 	.word	0x431bde83
 8002314:	20001ee4 	.word	0x20001ee4

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <HardFault_Handler+0x4>

0800232a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <MemManage_Handler+0x4>

08002330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <BusFault_Handler+0x4>

08002336 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <UsageFault_Handler+0x4>

0800233c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <DMA1_Channel1_IRQHandler+0x10>)
 800234e:	f000 fe53 	bl	8002ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20001e3c 	.word	0x20001e3c

0800235c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <TIM2_IRQHandler+0x10>)
 8002362:	f002 fbfc 	bl	8004b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001ee4 	.word	0x20001ee4

08002370 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002378:	f001 f8e4 	bl	8003544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800237c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002380:	f001 f8e0 	bl	8003544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002384:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002388:	f001 f8dc 	bl	8003544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800238c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002390:	f001 f8d8 	bl	8003544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x50>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x16>
		heap_end = &end;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <_sbrk+0x50>)
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <_sbrk+0x54>)
 80023ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <_sbrk+0x50>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <_sbrk+0x50>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	466a      	mov	r2, sp
 80023be:	4293      	cmp	r3, r2
 80023c0:	d907      	bls.n	80023d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023c2:	f004 fb8b 	bl	8006adc <__errno>
 80023c6:	4602      	mov	r2, r0
 80023c8:	230c      	movs	r3, #12
 80023ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	e006      	b.n	80023e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <_sbrk+0x50>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <_sbrk+0x50>)
 80023dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000454 	.word	0x20000454
 80023ec:	20001f30 	.word	0x20001f30

080023f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <SystemInit+0x5c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <SystemInit+0x5c>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <SystemInit+0x5c>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4911      	ldr	r1, [pc, #68]	; (800244c <SystemInit+0x5c>)
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <SystemInit+0x60>)
 8002408:	4013      	ands	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <SystemInit+0x5c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <SystemInit+0x5c>)
 8002412:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <SystemInit+0x5c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <SystemInit+0x5c>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <SystemInit+0x5c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <SystemInit+0x5c>)
 800242e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002432:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SystemInit+0x5c>)
 8002436:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800243a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SystemInit+0x64>)
 800243e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002442:	609a      	str	r2, [r3, #8]
#endif 
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	f8ff0000 	.word	0xf8ff0000
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002458:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800247e:	f7ff ffb7 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f004 fb31 	bl	8006ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002486:	f7ff f85f 	bl	8001548 <main>
  bx lr
 800248a:	4770      	bx	lr
  ldr r3, =_sidata
 800248c:	08008f90 	.word	0x08008f90
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002494:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002498:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800249c:	20001f2c 	.word	0x20001f2c

080024a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC1_2_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_Init+0x28>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_Init+0x28>)
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 fcaf 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fed4 	bl	8002268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff fd1e 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000

080024d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_IncTick+0x1c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_IncTick+0x20>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_IncTick+0x20>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	20000008 	.word	0x20000008
 80024f0:	20001f24 	.word	0x20001f24

080024f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <HAL_GetTick+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20001f24 	.word	0x20001f24

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff fff0 	bl	80024f4 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_Delay+0x40>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffe0 	bl	80024f4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0be      	b.n	80026ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fcf0 	bl	8001f70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 faf7 	bl	8002b84 <ADC_ConversionStop_Disable>
 8002596:	4603      	mov	r3, r0
 8002598:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 8099 	bne.w	80026da <HAL_ADC_Init+0x18e>
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8095 	bne.w	80026da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025b8:	f023 0302 	bic.w	r3, r3, #2
 80025bc:	f043 0202 	orr.w	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7b1b      	ldrb	r3, [r3, #12]
 80025d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e4:	d003      	beq.n	80025ee <HAL_ADC_Init+0xa2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_ADC_Init+0xa8>
 80025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f2:	e000      	b.n	80025f6 <HAL_ADC_Init+0xaa>
 80025f4:	2300      	movs	r3, #0
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7d1b      	ldrb	r3, [r3, #20]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d119      	bne.n	8002638 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7b1b      	ldrb	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	3b01      	subs	r3, #1
 8002612:	035a      	lsls	r2, r3, #13
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e00b      	b.n	8002638 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_ADC_Init+0x1a8>)
 8002654:	4013      	ands	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	430b      	orrs	r3, r1
 800265e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002668:	d003      	beq.n	8002672 <HAL_ADC_Init+0x126>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d104      	bne.n	800267c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	3b01      	subs	r3, #1
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	430a      	orrs	r2, r1
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_ADC_Init+0x1ac>)
 8002698:	4013      	ands	r3, r2
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	429a      	cmp	r2, r3
 800269e:	d10b      	bne.n	80026b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026b6:	e018      	b.n	80026ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f023 0312 	bic.w	r3, r3, #18
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026d8:	e007      	b.n	80026ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	ffe1f7fd 	.word	0xffe1f7fd
 80026f8:	ff1f0efe 	.word	0xff1f0efe

080026fc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <HAL_ADC_Start_DMA+0x1a8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_Start_DMA+0x24>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_ADC_Start_DMA+0x1ac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d106      	bne.n	800272e <HAL_ADC_Start_DMA+0x32>
 8002720:	4b60      	ldr	r3, [pc, #384]	; (80028a4 <HAL_ADC_Start_DMA+0x1a8>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 80b3 	bne.w	8002894 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_ADC_Start_DMA+0x40>
 8002738:	2302      	movs	r3, #2
 800273a:	e0ae      	b.n	800289a <HAL_ADC_Start_DMA+0x19e>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f9cb 	bl	8002ae0 <ADC_Enable>
 800274a:	4603      	mov	r3, r0
 800274c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 809a 	bne.w	800288a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a4e      	ldr	r2, [pc, #312]	; (80028a8 <HAL_ADC_Start_DMA+0x1ac>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d105      	bne.n	8002780 <HAL_ADC_Start_DMA+0x84>
 8002774:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_ADC_Start_DMA+0x1a8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d115      	bne.n	80027ac <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d026      	beq.n	80027e8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027aa:	e01d      	b.n	80027e8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a39      	ldr	r2, [pc, #228]	; (80028a4 <HAL_ADC_Start_DMA+0x1a8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_Start_DMA+0xd0>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <HAL_ADC_Start_DMA+0x1ac>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10d      	bne.n	80027e8 <HAL_ADC_Start_DMA+0xec>
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <HAL_ADC_Start_DMA+0x1a8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f023 0206 	bic.w	r2, r3, #6
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002800:	e002      	b.n	8002808 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_ADC_Start_DMA+0x1b0>)
 8002816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <HAL_ADC_Start_DMA+0x1b4>)
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <HAL_ADC_Start_DMA+0x1b8>)
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0202 	mvn.w	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002840:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a18      	ldr	r0, [r3, #32]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	334c      	adds	r3, #76	; 0x4c
 800284c:	4619      	mov	r1, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f000 fb71 	bl	8002f38 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002860:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002864:	d108      	bne.n	8002878 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002874:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002876:	e00f      	b.n	8002898 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002886:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002888:	e006      	b.n	8002898 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002892:	e001      	b.n	8002898 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40012400 	.word	0x40012400
 80028a8:	40012800 	.word	0x40012800
 80028ac:	08002bf9 	.word	0x08002bf9
 80028b0:	08002c75 	.word	0x08002c75
 80028b4:	08002c91 	.word	0x08002c91

080028b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x20>
 800290c:	2302      	movs	r3, #2
 800290e:	e0dc      	b.n	8002aca <HAL_ADC_ConfigChannel+0x1da>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b06      	cmp	r3, #6
 800291e:	d81c      	bhi.n	800295a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b05      	subs	r3, #5
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b05      	subs	r3, #5
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	635a      	str	r2, [r3, #52]	; 0x34
 8002958:	e03c      	b.n	80029d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d81c      	bhi.n	800299c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b23      	subs	r3, #35	; 0x23
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	4019      	ands	r1, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b23      	subs	r3, #35	; 0x23
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
 800299a:	e01b      	b.n	80029d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b41      	subs	r3, #65	; 0x41
 80029ae:	221f      	movs	r2, #31
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b41      	subs	r3, #65	; 0x41
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d91c      	bls.n	8002a16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e019      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6919      	ldr	r1, [r3, #16]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	2207      	movs	r2, #7
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4019      	ands	r1, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6898      	ldr	r0, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d003      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a56:	2b11      	cmp	r3, #17
 8002a58:	d132      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d126      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a80:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d11a      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_ADC_ConfigChannel+0x1ec>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x1b2>
 8002aae:	e007      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012400 	.word	0x40012400
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d039      	beq.n	8002b72 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <ADC_Enable+0x9c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <ADC_Enable+0xa0>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b1c:	e002      	b.n	8002b24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fce3 	bl	80024f4 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b30:	e018      	b.n	8002b64 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b32:	f7ff fcdf 	bl	80024f4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d911      	bls.n	8002b64 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f043 0210 	orr.w	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d1df      	bne.n	8002b32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d127      	bne.n	8002bee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bae:	f7ff fca1 	bl	80024f4 <HAL_GetTick>
 8002bb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb4:	e014      	b.n	8002be0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bb6:	f7ff fc9d 	bl	80024f4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d90d      	bls.n	8002be0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d0e3      	beq.n	8002bb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d127      	bne.n	8002c62 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c2c:	d115      	bne.n	8002c5a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d111      	bne.n	8002c5a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff fe2c 	bl	80028b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c60:	e004      	b.n	8002c6c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fe21 	bl	80028ca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fe10 	bl	80028dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4906      	ldr	r1, [pc, #24]	; (8002d5c <__NVIC_EnableIRQ+0x34>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db0a      	blt.n	8002d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	490c      	ldr	r1, [pc, #48]	; (8002dac <__NVIC_SetPriority+0x4c>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d88:	e00a      	b.n	8002da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4908      	ldr	r1, [pc, #32]	; (8002db0 <__NVIC_SetPriority+0x50>)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	3b04      	subs	r3, #4
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	761a      	strb	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f1c3 0307 	rsb	r3, r3, #7
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf28      	it	cs
 8002dd2:	2304      	movcs	r3, #4
 8002dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d902      	bls.n	8002de4 <NVIC_EncodePriority+0x30>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3b03      	subs	r3, #3
 8002de2:	e000      	b.n	8002de6 <NVIC_EncodePriority+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	4313      	orrs	r3, r2
         );
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff4f 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff64 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ffb2 	bl	8002db4 <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff81 	bl	8002d60 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff57 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e043      	b.n	8002f22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_DMA_Init+0xa8>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_DMA_Init+0xac>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_DMA_Init+0xb0>)
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ece:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	bffdfff8 	.word	0xbffdfff8
 8002f30:	cccccccd 	.word	0xcccccccd
 8002f34:	40020000 	.word	0x40020000

08002f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Start_IT+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e04a      	b.n	8002fee <HAL_DMA_Start_IT+0xb6>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d13a      	bne.n	8002fe0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f938 	bl	8003204 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 020e 	orr.w	r2, r2, #14
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e00f      	b.n	8002fce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0204 	bic.w	r2, r2, #4
 8002fbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 020a 	orr.w	r2, r2, #10
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e005      	b.n	8002fec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2204      	movs	r2, #4
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04f      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xc8>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a66      	ldr	r2, [pc, #408]	; (80031e8 <HAL_DMA_IRQHandler+0x1f0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d029      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xae>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_DMA_IRQHandler+0x1f4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0xaa>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_DMA_IRQHandler+0x1f8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01a      	beq.n	800309c <HAL_DMA_IRQHandler+0xa4>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a62      	ldr	r2, [pc, #392]	; (80031f4 <HAL_DMA_IRQHandler+0x1fc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d012      	beq.n	8003096 <HAL_DMA_IRQHandler+0x9e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <HAL_DMA_IRQHandler+0x200>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00a      	beq.n	8003090 <HAL_DMA_IRQHandler+0x98>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_DMA_IRQHandler+0x204>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d102      	bne.n	800308a <HAL_DMA_IRQHandler+0x92>
 8003084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003088:	e00e      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 800308a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800308e:	e00b      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 8003090:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003094:	e008      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 8003096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800309a:	e005      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 800309c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a0:	e002      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 80030a2:	2340      	movs	r3, #64	; 0x40
 80030a4:	e000      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb0>
 80030a6:	2304      	movs	r3, #4
 80030a8:	4a55      	ldr	r2, [pc, #340]	; (8003200 <HAL_DMA_IRQHandler+0x208>)
 80030aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8094 	beq.w	80031de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030be:	e08e      	b.n	80031de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2202      	movs	r2, #2
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d056      	beq.n	800317e <HAL_DMA_IRQHandler+0x186>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d051      	beq.n	800317e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 020a 	bic.w	r2, r2, #10
 80030f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a38      	ldr	r2, [pc, #224]	; (80031e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d029      	beq.n	800315e <HAL_DMA_IRQHandler+0x166>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a37      	ldr	r2, [pc, #220]	; (80031ec <HAL_DMA_IRQHandler+0x1f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_IRQHandler+0x162>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a35      	ldr	r2, [pc, #212]	; (80031f0 <HAL_DMA_IRQHandler+0x1f8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01a      	beq.n	8003154 <HAL_DMA_IRQHandler+0x15c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a34      	ldr	r2, [pc, #208]	; (80031f4 <HAL_DMA_IRQHandler+0x1fc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d012      	beq.n	800314e <HAL_DMA_IRQHandler+0x156>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <HAL_DMA_IRQHandler+0x200>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00a      	beq.n	8003148 <HAL_DMA_IRQHandler+0x150>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a31      	ldr	r2, [pc, #196]	; (80031fc <HAL_DMA_IRQHandler+0x204>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d102      	bne.n	8003142 <HAL_DMA_IRQHandler+0x14a>
 800313c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003140:	e00e      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 8003142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003146:	e00b      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 8003148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314c:	e008      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 800314e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003152:	e005      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 8003154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003158:	e002      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 800315a:	2320      	movs	r3, #32
 800315c:	e000      	b.n	8003160 <HAL_DMA_IRQHandler+0x168>
 800315e:	2302      	movs	r3, #2
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <HAL_DMA_IRQHandler+0x208>)
 8003162:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d034      	beq.n	80031de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800317c:	e02f      	b.n	80031de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2208      	movs	r2, #8
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x1e8>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 020e 	bic.w	r2, r2, #14
 80031a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
    }
  }
  return;
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
}
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40020008 	.word	0x40020008
 80031ec:	4002001c 	.word	0x4002001c
 80031f0:	40020030 	.word	0x40020030
 80031f4:	40020044 	.word	0x40020044
 80031f8:	40020058 	.word	0x40020058
 80031fc:	4002006c 	.word	0x4002006c
 8003200:	40020000 	.word	0x40020000

08003204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f202 	lsl.w	r2, r1, r2
 8003220:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d108      	bne.n	8003244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003242:	e007      	b.n	8003254 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
	...

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b08b      	sub	sp, #44	; 0x2c
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003272:	e127      	b.n	80034c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003274:	2201      	movs	r2, #1
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	429a      	cmp	r2, r3
 800328e:	f040 8116 	bne.w	80034be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b12      	cmp	r3, #18
 8003298:	d034      	beq.n	8003304 <HAL_GPIO_Init+0xa4>
 800329a:	2b12      	cmp	r3, #18
 800329c:	d80d      	bhi.n	80032ba <HAL_GPIO_Init+0x5a>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d02b      	beq.n	80032fa <HAL_GPIO_Init+0x9a>
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d804      	bhi.n	80032b0 <HAL_GPIO_Init+0x50>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d031      	beq.n	800330e <HAL_GPIO_Init+0xae>
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d01c      	beq.n	80032e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032ae:	e048      	b.n	8003342 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d043      	beq.n	800333c <HAL_GPIO_Init+0xdc>
 80032b4:	2b11      	cmp	r3, #17
 80032b6:	d01b      	beq.n	80032f0 <HAL_GPIO_Init+0x90>
          break;
 80032b8:	e043      	b.n	8003342 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032ba:	4a89      	ldr	r2, [pc, #548]	; (80034e0 <HAL_GPIO_Init+0x280>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d026      	beq.n	800330e <HAL_GPIO_Init+0xae>
 80032c0:	4a87      	ldr	r2, [pc, #540]	; (80034e0 <HAL_GPIO_Init+0x280>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d806      	bhi.n	80032d4 <HAL_GPIO_Init+0x74>
 80032c6:	4a87      	ldr	r2, [pc, #540]	; (80034e4 <HAL_GPIO_Init+0x284>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d020      	beq.n	800330e <HAL_GPIO_Init+0xae>
 80032cc:	4a86      	ldr	r2, [pc, #536]	; (80034e8 <HAL_GPIO_Init+0x288>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_GPIO_Init+0xae>
          break;
 80032d2:	e036      	b.n	8003342 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032d4:	4a85      	ldr	r2, [pc, #532]	; (80034ec <HAL_GPIO_Init+0x28c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0xae>
 80032da:	4a85      	ldr	r2, [pc, #532]	; (80034f0 <HAL_GPIO_Init+0x290>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d016      	beq.n	800330e <HAL_GPIO_Init+0xae>
 80032e0:	4a84      	ldr	r2, [pc, #528]	; (80034f4 <HAL_GPIO_Init+0x294>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0xae>
          break;
 80032e6:	e02c      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	623b      	str	r3, [r7, #32]
          break;
 80032ee:	e028      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	623b      	str	r3, [r7, #32]
          break;
 80032f8:	e023      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	3308      	adds	r3, #8
 8003300:	623b      	str	r3, [r7, #32]
          break;
 8003302:	e01e      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	330c      	adds	r3, #12
 800330a:	623b      	str	r3, [r7, #32]
          break;
 800330c:	e019      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003316:	2304      	movs	r3, #4
 8003318:	623b      	str	r3, [r7, #32]
          break;
 800331a:	e012      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	611a      	str	r2, [r3, #16]
          break;
 800332e:	e008      	b.n	8003342 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003330:	2308      	movs	r3, #8
 8003332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	615a      	str	r2, [r3, #20]
          break;
 800333a:	e002      	b.n	8003342 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
          break;
 8003340:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2bff      	cmp	r3, #255	; 0xff
 8003346:	d801      	bhi.n	800334c <HAL_GPIO_Init+0xec>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	e001      	b.n	8003350 <HAL_GPIO_Init+0xf0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2bff      	cmp	r3, #255	; 0xff
 8003356:	d802      	bhi.n	800335e <HAL_GPIO_Init+0xfe>
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	e002      	b.n	8003364 <HAL_GPIO_Init+0x104>
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	3b08      	subs	r3, #8
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	210f      	movs	r1, #15
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	401a      	ands	r2, r3
 8003376:	6a39      	ldr	r1, [r7, #32]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	431a      	orrs	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8096 	beq.w	80034be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003392:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_GPIO_Init+0x298>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_GPIO_Init+0x298>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6193      	str	r3, [r2, #24]
 800339e:	4b56      	ldr	r3, [pc, #344]	; (80034f8 <HAL_GPIO_Init+0x298>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033aa:	4a54      	ldr	r2, [pc, #336]	; (80034fc <HAL_GPIO_Init+0x29c>)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_GPIO_Init+0x2a0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0x19e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4a      	ldr	r2, [pc, #296]	; (8003504 <HAL_GPIO_Init+0x2a4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_Init+0x19a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a49      	ldr	r2, [pc, #292]	; (8003508 <HAL_GPIO_Init+0x2a8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_Init+0x196>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a48      	ldr	r2, [pc, #288]	; (800350c <HAL_GPIO_Init+0x2ac>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_Init+0x192>
 80033ee:	2303      	movs	r3, #3
 80033f0:	e006      	b.n	8003400 <HAL_GPIO_Init+0x1a0>
 80033f2:	2304      	movs	r3, #4
 80033f4:	e004      	b.n	8003400 <HAL_GPIO_Init+0x1a0>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_Init+0x1a0>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_GPIO_Init+0x1a0>
 80033fe:	2300      	movs	r3, #0
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	f002 0203 	and.w	r2, r2, #3
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	4093      	lsls	r3, r2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003410:	493a      	ldr	r1, [pc, #232]	; (80034fc <HAL_GPIO_Init+0x29c>)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3302      	adds	r3, #2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4938      	ldr	r1, [pc, #224]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
 8003436:	e006      	b.n	8003446 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	43db      	mvns	r3, r3
 8003440:	4933      	ldr	r1, [pc, #204]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003442:	4013      	ands	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003452:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	492e      	ldr	r1, [pc, #184]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
 800345e:	e006      	b.n	800346e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	43db      	mvns	r3, r3
 8003468:	4929      	ldr	r1, [pc, #164]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 800346a:	4013      	ands	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4924      	ldr	r1, [pc, #144]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
 8003486:	e006      	b.n	8003496 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	43db      	mvns	r3, r3
 8003490:	491f      	ldr	r1, [pc, #124]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 8003492:	4013      	ands	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	491a      	ldr	r1, [pc, #104]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60cb      	str	r3, [r1, #12]
 80034ae:	e006      	b.n	80034be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	4915      	ldr	r1, [pc, #84]	; (8003510 <HAL_GPIO_Init+0x2b0>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	3301      	adds	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f47f aed0 	bne.w	8003274 <HAL_GPIO_Init+0x14>
  }
}
 80034d4:	bf00      	nop
 80034d6:	372c      	adds	r7, #44	; 0x2c
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	10210000 	.word	0x10210000
 80034e4:	10110000 	.word	0x10110000
 80034e8:	10120000 	.word	0x10120000
 80034ec:	10310000 	.word	0x10310000
 80034f0:	10320000 	.word	0x10320000
 80034f4:	10220000 	.word	0x10220000
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010800 	.word	0x40010800
 8003504:	40010c00 	.word	0x40010c00
 8003508:	40011000 	.word	0x40011000
 800350c:	40011400 	.word	0x40011400
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd ffa0 	bl	80014a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e10f      	b.n	80037a6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe fd94 	bl	80020c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035b8:	f000 ffd4 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 80035bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a7b      	ldr	r2, [pc, #492]	; (80037b0 <HAL_I2C_Init+0x23c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d807      	bhi.n	80035d8 <HAL_I2C_Init+0x64>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a7a      	ldr	r2, [pc, #488]	; (80037b4 <HAL_I2C_Init+0x240>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	bf94      	ite	ls
 80035d0:	2301      	movls	r3, #1
 80035d2:	2300      	movhi	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e006      	b.n	80035e6 <HAL_I2C_Init+0x72>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a77      	ldr	r2, [pc, #476]	; (80037b8 <HAL_I2C_Init+0x244>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0db      	b.n	80037a6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a72      	ldr	r2, [pc, #456]	; (80037bc <HAL_I2C_Init+0x248>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0c9b      	lsrs	r3, r3, #18
 80035f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a64      	ldr	r2, [pc, #400]	; (80037b0 <HAL_I2C_Init+0x23c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d802      	bhi.n	8003628 <HAL_I2C_Init+0xb4>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	e009      	b.n	800363c <HAL_I2C_Init+0xc8>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	4a63      	ldr	r2, [pc, #396]	; (80037c0 <HAL_I2C_Init+0x24c>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	3301      	adds	r3, #1
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	430b      	orrs	r3, r1
 8003642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800364e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4956      	ldr	r1, [pc, #344]	; (80037b0 <HAL_I2C_Init+0x23c>)
 8003658:	428b      	cmp	r3, r1
 800365a:	d80d      	bhi.n	8003678 <HAL_I2C_Init+0x104>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e59      	subs	r1, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fbb1 f3f3 	udiv	r3, r1, r3
 800366a:	3301      	adds	r3, #1
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	2b04      	cmp	r3, #4
 8003672:	bf38      	it	cc
 8003674:	2304      	movcc	r3, #4
 8003676:	e04f      	b.n	8003718 <HAL_I2C_Init+0x1a4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_I2C_Init+0x130>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_I2C_Init+0x156>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x15e>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_Init+0x1a4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_I2C_Init+0x184>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e58      	subs	r0, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	440b      	add	r3, r1
 80036e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Init+0x1a4>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6911      	ldr	r1, [r2, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	000186a0 	.word	0x000186a0
 80037b4:	001e847f 	.word	0x001e847f
 80037b8:	003d08ff 	.word	0x003d08ff
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	461a      	mov	r2, r3
 80037d0:	460b      	mov	r3, r1
 80037d2:	817b      	strh	r3, [r7, #10]
 80037d4:	4613      	mov	r3, r2
 80037d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7fe fe8c 	bl	80024f4 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f040 80e0 	bne.w	80039ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2319      	movs	r3, #25
 80037f2:	2201      	movs	r2, #1
 80037f4:	4970      	ldr	r1, [pc, #448]	; (80039b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f958 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
 8003804:	e0d3      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2C_Master_Transmit+0x50>
 8003810:	2302      	movs	r3, #2
 8003812:	e0cc      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d007      	beq.n	800383a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2210      	movs	r2, #16
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_I2C_Master_Transmit+0x1f8>)
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800387c:	8979      	ldrh	r1, [r7, #10]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f89c 	bl	80039c0 <I2C_MasterRequestWrite>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e08d      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038a8:	e066      	b.n	8003978 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9d2 	bl	8003c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d107      	bne.n	80038d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06b      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11b      	bne.n	800394c <HAL_I2C_Master_Transmit+0x188>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	6a39      	ldr	r1, [r7, #32]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f9c2 	bl	8003cda <I2C_WaitOnBTFFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b04      	cmp	r3, #4
 8003962:	d107      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e01a      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d194      	bne.n	80038aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	00100002 	.word	0x00100002
 80039bc:	ffff0000 	.word	0xffff0000

080039c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	460b      	mov	r3, r1
 80039ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d006      	beq.n	80039ea <I2C_MasterRequestWrite+0x2a>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d003      	beq.n	80039ea <I2C_MasterRequestWrite+0x2a>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e8:	d108      	bne.n	80039fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e00b      	b.n	8003a14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	2b12      	cmp	r3, #18
 8003a02:	d107      	bne.n	8003a14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f843 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e035      	b.n	8003a9c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a38:	d108      	bne.n	8003a4c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	e01b      	b.n	8003a84 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	11db      	asrs	r3, r3, #7
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0306 	and.w	r3, r3, #6
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f063 030f 	orn	r3, r3, #15
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <I2C_MasterRequestWrite+0xe4>)
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f875 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e010      	b.n	8003a9c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4907      	ldr	r1, [pc, #28]	; (8003aa8 <I2C_MasterRequestWrite+0xe8>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f865 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	00010008 	.word	0x00010008
 8003aa8:	00010002 	.word	0x00010002

08003aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abc:	e025      	b.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d021      	beq.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac6:	f7fe fd15 	bl	80024f4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d116      	bne.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e023      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10d      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	e00c      	b.n	8003b4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0b6      	beq.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b68:	e051      	b.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b78:	d123      	bne.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e046      	b.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d021      	beq.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fc93 	bl	80024f4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e020      	b.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10c      	bne.n	8003c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	e00b      	b.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d18d      	bne.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c64:	e02d      	b.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f878 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e02d      	b.n	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d021      	beq.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fe fc39 	bl	80024f4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d116      	bne.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e007      	b.n	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d1ca      	bne.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce6:	e02d      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f837 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e02d      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d021      	beq.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d00:	f7fe fbf8 	bl	80024f4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e007      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d1ca      	bne.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d11b      	bne.n	8003dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e26c      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8087 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd8:	4b92      	ldr	r3, [pc, #584]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d00c      	beq.n	8003dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003de4:	4b8f      	ldr	r3, [pc, #572]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d112      	bne.n	8003e16 <HAL_RCC_OscConfig+0x5e>
 8003df0:	4b8c      	ldr	r3, [pc, #560]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfe:	4b89      	ldr	r3, [pc, #548]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d06c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x12c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d168      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e246      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x76>
 8003e20:	4b80      	ldr	r3, [pc, #512]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7f      	ldr	r2, [pc, #508]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e02e      	b.n	8003e8c <HAL_RCC_OscConfig+0xd4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b7b      	ldr	r3, [pc, #492]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7a      	ldr	r2, [pc, #488]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b78      	ldr	r3, [pc, #480]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a77      	ldr	r2, [pc, #476]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e01d      	b.n	8003e8c <HAL_RCC_OscConfig+0xd4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0xbc>
 8003e5a:	4b72      	ldr	r3, [pc, #456]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a71      	ldr	r2, [pc, #452]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6e      	ldr	r2, [pc, #440]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0xd4>
 8003e74:	4b6b      	ldr	r3, [pc, #428]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6a      	ldr	r2, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a67      	ldr	r2, [pc, #412]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe fb2e 	bl	80024f4 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fe fb2a 	bl	80024f4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e1fa      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b5d      	ldr	r3, [pc, #372]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0xe4>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fb1a 	bl	80024f4 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fb16 	bl	80024f4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1e6      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x10c>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d063      	beq.n	8003fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x18c>
 8003f0a:	4b46      	ldr	r3, [pc, #280]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x176>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1ba      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4939      	ldr	r1, [pc, #228]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e03a      	b.n	8003fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fe facf 	bl	80024f4 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe facb 	bl	80024f4 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e19b      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4927      	ldr	r1, [pc, #156]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe faae 	bl	80024f4 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fe faaa 	bl	80024f4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e17a      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d03a      	beq.n	800403c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d019      	beq.n	8004002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_RCC_OscConfig+0x274>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fa8e 	bl	80024f4 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe fa8a 	bl	80024f4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e15a      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f000 faf6 	bl	80045ec <RCC_Delay>
 8004000:	e01c      	b.n	800403c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_RCC_OscConfig+0x274>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004008:	f7fe fa74 	bl	80024f4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400e:	e00f      	b.n	8004030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004010:	f7fe fa70 	bl	80024f4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d908      	bls.n	8004030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e140      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
 8004028:	42420000 	.word	0x42420000
 800402c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b9e      	ldr	r3, [pc, #632]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e9      	bne.n	8004010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a6 	beq.w	8004196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404e:	4b97      	ldr	r3, [pc, #604]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	4b94      	ldr	r3, [pc, #592]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	4a93      	ldr	r2, [pc, #588]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	61d3      	str	r3, [r2, #28]
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b8e      	ldr	r3, [pc, #568]	; (80042b0 <HAL_RCC_OscConfig+0x4f8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b8b      	ldr	r3, [pc, #556]	; (80042b0 <HAL_RCC_OscConfig+0x4f8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a8a      	ldr	r2, [pc, #552]	; (80042b0 <HAL_RCC_OscConfig+0x4f8>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fe fa31 	bl	80024f4 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fe fa2d 	bl	80024f4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	; 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e0fd      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <HAL_RCC_OscConfig+0x4f8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d106      	bne.n	80040ca <HAL_RCC_OscConfig+0x312>
 80040bc:	4b7b      	ldr	r3, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	4a7a      	ldr	r2, [pc, #488]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6213      	str	r3, [r2, #32]
 80040c8:	e02d      	b.n	8004126 <HAL_RCC_OscConfig+0x36e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x334>
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a75      	ldr	r2, [pc, #468]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	6213      	str	r3, [r2, #32]
 80040de:	4b73      	ldr	r3, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4a72      	ldr	r2, [pc, #456]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	6213      	str	r3, [r2, #32]
 80040ea:	e01c      	b.n	8004126 <HAL_RCC_OscConfig+0x36e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d10c      	bne.n	800410e <HAL_RCC_OscConfig+0x356>
 80040f4:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a6c      	ldr	r2, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80040fa:	f043 0304 	orr.w	r3, r3, #4
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4a69      	ldr	r2, [pc, #420]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6213      	str	r3, [r2, #32]
 800410c:	e00b      	b.n	8004126 <HAL_RCC_OscConfig+0x36e>
 800410e:	4b67      	ldr	r3, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a66      	ldr	r2, [pc, #408]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	4b64      	ldr	r3, [pc, #400]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a63      	ldr	r2, [pc, #396]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d015      	beq.n	800415a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe f9e1 	bl	80024f4 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe f9dd 	bl	80024f4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0ab      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414c:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ee      	beq.n	8004136 <HAL_RCC_OscConfig+0x37e>
 8004158:	e014      	b.n	8004184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fe f9cb 	bl	80024f4 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fe f9c7 	bl	80024f4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e095      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004178:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ee      	bne.n	8004162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4b48      	ldr	r3, [pc, #288]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4a47      	ldr	r2, [pc, #284]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8081 	beq.w	80042a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a0:	4b42      	ldr	r3, [pc, #264]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d061      	beq.n	8004270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d146      	bne.n	8004242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b4:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCC_OscConfig+0x4fc>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fe f99b 	bl	80024f4 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fe f997 	bl	80024f4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e067      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d4:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d108      	bne.n	80041fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041ea:	4b30      	ldr	r3, [pc, #192]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	492d      	ldr	r1, [pc, #180]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a19      	ldr	r1, [r3, #32]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	430b      	orrs	r3, r1
 800420e:	4927      	ldr	r1, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x4fc>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe f96b 	bl	80024f4 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe f967 	bl	80024f4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e037      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x46a>
 8004240:	e02f      	b.n	80042a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <HAL_RCC_OscConfig+0x4fc>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe f954 	bl	80024f4 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004250:	f7fe f950 	bl	80024f4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e020      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x498>
 800426e:	e018      	b.n	80042a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e013      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x4f4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	429a      	cmp	r2, r3
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	42420060 	.word	0x42420060

080042b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0d0      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b67      	ldr	r3, [pc, #412]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 0207 	bic.w	r2, r3, #7
 80042e2:	4965      	ldr	r1, [pc, #404]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800431e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d040      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d115      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e073      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3d      	ldr	r3, [pc, #244]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06b      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b39      	ldr	r3, [pc, #228]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4936      	ldr	r1, [pc, #216]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fe f8a4 	bl	80024f4 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fe f8a0 	bl	80024f4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e053      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2d      	ldr	r3, [pc, #180]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d210      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 0207 	bic.w	r2, r3, #7
 80043ee:	4922      	ldr	r1, [pc, #136]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4601      	mov	r1, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	fa21 f303 	lsr.w	r3, r1, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_RCC_ClockConfig+0x1cc>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1d0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fefe 	bl	8002268 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40022000 	.word	0x40022000
 800447c:	40021000 	.word	0x40021000
 8004480:	08008d14 	.word	0x08008d14
 8004484:	20000000 	.word	0x20000000
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b490      	push	{r4, r7}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004492:	4b2a      	ldr	r3, [pc, #168]	; (800453c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004494:	1d3c      	adds	r4, r7, #4
 8004496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_RCC_GetSysClockFreq+0xb4>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d002      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x40>
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x46>
 80044ca:	e02d      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ce:	623b      	str	r3, [r7, #32]
      break;
 80044d0:	e02d      	b.n	800452e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	0c9b      	lsrs	r3, r3, #18
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044de:	4413      	add	r3, r2
 80044e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	0c5b      	lsrs	r3, r3, #17
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044fe:	4413      	add	r3, r2
 8004500:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004504:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800450a:	fb02 f203 	mul.w	r2, r2, r3
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	e004      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4a0c      	ldr	r2, [pc, #48]	; (800454c <HAL_RCC_GetSysClockFreq+0xc0>)
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	623b      	str	r3, [r7, #32]
      break;
 8004526:	e002      	b.n	800452e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800452a:	623b      	str	r3, [r7, #32]
      break;
 800452c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452e:	6a3b      	ldr	r3, [r7, #32]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bc90      	pop	{r4, r7}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	08008cf8 	.word	0x08008cf8
 8004540:	08008d08 	.word	0x08008d08
 8004544:	40021000 	.word	0x40021000
 8004548:	007a1200 	.word	0x007a1200
 800454c:	003d0900 	.word	0x003d0900

08004550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <HAL_RCC_GetHCLKFreq+0x10>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	20000000 	.word	0x20000000

08004564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004568:	f7ff fff2 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 800456c:	4601      	mov	r1, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	08008d24 	.word	0x08008d24

0800458c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	220f      	movs	r2, #15
 800459a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_RCC_GetClockConfig+0x58>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0203 	and.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <HAL_RCC_GetClockConfig+0x58>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_GetClockConfig+0x58>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_GetClockConfig+0x58>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0207 	and.w	r2, r3, #7
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40022000 	.word	0x40022000

080045ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <RCC_Delay+0x34>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <RCC_Delay+0x38>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0a5b      	lsrs	r3, r3, #9
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004608:	bf00      	nop
  }
  while (Delay --);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e5a      	subs	r2, r3, #1
 800460e:	60fa      	str	r2, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f9      	bne.n	8004608 <RCC_Delay+0x1c>
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000
 8004624:	10624dd3 	.word	0x10624dd3

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d07d      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004644:	2300      	movs	r3, #0
 8004646:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004648:	4b4f      	ldr	r3, [pc, #316]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10d      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004654:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465e:	61d3      	str	r3, [r2, #28]
 8004660:	4b49      	ldr	r3, [pc, #292]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d118      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467c:	4b43      	ldr	r3, [pc, #268]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a42      	ldr	r2, [pc, #264]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004688:	f7fd ff34 	bl	80024f4 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	e008      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7fd ff30 	bl	80024f4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e06d      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b3a      	ldr	r3, [pc, #232]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ae:	4b36      	ldr	r3, [pc, #216]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d02e      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d027      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046cc:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046dc:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d014      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fd feff 	bl	80024f4 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd fefb 	bl	80024f4 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e036      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ee      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4917      	ldr	r1, [pc, #92]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	4313      	orrs	r3, r2
 800472c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	490b      	ldr	r1, [pc, #44]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4904      	ldr	r1, [pc, #16]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	42420440 	.word	0x42420440

08004794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e01d      	b.n	80047e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f815 	bl	80047ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fbb6 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b06      	cmp	r3, #6
 8004824:	d007      	beq.n	8004836 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e01d      	b.n	8004890 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd fc6d 	bl	8002148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f000 fb5f 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fd34 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <HAL_TIM_PWM_Start+0x60>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d107      	bne.n	80048ca <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d007      	beq.n	80048ec <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00

080048fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fd02 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_TIM_PWM_Stop+0x94>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d117      	bne.n	800494e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	f241 1311 	movw	r3, #4369	; 0x1111
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_TIM_PWM_Stop+0x52>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	f240 4344 	movw	r3, #1092	; 0x444
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_TIM_PWM_Stop+0x52>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	f241 1311 	movw	r3, #4369	; 0x1111
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10f      	bne.n	800497e <HAL_TIM_PWM_Stop+0x82>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a1a      	ldr	r2, [r3, #32]
 8004964:	f240 4344 	movw	r3, #1092	; 0x444
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <HAL_TIM_PWM_Stop+0x82>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40012c00 	.word	0x40012c00

08004994 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e07f      	b.n	8004aa8 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fd fbe1 	bl	8002184 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f000 faab 	bl	8004f44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	4313      	orrs	r3, r2
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a34:	f023 030c 	bic.w	r3, r3, #12
 8004a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	4313      	orrs	r3, r2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	011a      	lsls	r2, r3, #4
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	031b      	lsls	r3, r3, #12
 8004a64:	4313      	orrs	r3, r2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_TIM_Encoder_Start_IT+0x16>
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d010      	beq.n	8004ae6 <HAL_TIM_Encoder_Start_IT+0x36>
 8004ac4:	e01f      	b.n	8004b06 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fc22 	bl	8005318 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0202 	orr.w	r2, r2, #2
 8004ae2:	60da      	str	r2, [r3, #12]
      break;
 8004ae4:	e02e      	b.n	8004b44 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	2104      	movs	r1, #4
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fc12 	bl	8005318 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0204 	orr.w	r2, r2, #4
 8004b02:	60da      	str	r2, [r3, #12]
      break;
 8004b04:	e01e      	b.n	8004b44 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fc02 	bl	8005318 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fbfb 	bl	8005318 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0202 	orr.w	r2, r2, #2
 8004b30:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0204 	orr.w	r2, r2, #4
 8004b40:	60da      	str	r2, [r3, #12]
      break;
 8004b42:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d122      	bne.n	8004bba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d11b      	bne.n	8004bba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0202 	mvn.w	r2, #2
 8004b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f9b4 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004ba6:	e005      	b.n	8004bb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9a7 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f9b6 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d122      	bne.n	8004c0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d11b      	bne.n	8004c0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0204 	mvn.w	r2, #4
 8004bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f98a 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004bfa:	e005      	b.n	8004c08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f97d 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f98c 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d122      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d11b      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0208 	mvn.w	r2, #8
 8004c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2204      	movs	r2, #4
 8004c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f960 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004c4e:	e005      	b.n	8004c5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f953 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f962 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d122      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d11b      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0210 	mvn.w	r2, #16
 8004c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f936 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004ca2:	e005      	b.n	8004cb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f929 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f938 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d107      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0201 	mvn.w	r2, #1
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fd f8ad 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d10e      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d107      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fbc7 	bl	800549c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d10e      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8fc 	bl	8004f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d10e      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0220 	mvn.w	r2, #32
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb92 	bl	800548a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0b4      	b.n	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	f200 809f 	bhi.w	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004ddd 	.word	0x08004ddd
 8004dac:	08004ee1 	.word	0x08004ee1
 8004db0:	08004ee1 	.word	0x08004ee1
 8004db4:	08004ee1 	.word	0x08004ee1
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004ee1 	.word	0x08004ee1
 8004dc0:	08004ee1 	.word	0x08004ee1
 8004dc4:	08004ee1 	.word	0x08004ee1
 8004dc8:	08004e5f 	.word	0x08004e5f
 8004dcc:	08004ee1 	.word	0x08004ee1
 8004dd0:	08004ee1 	.word	0x08004ee1
 8004dd4:	08004ee1 	.word	0x08004ee1
 8004dd8:	08004e9f 	.word	0x08004e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f910 	bl	8005008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0208 	orr.w	r2, r2, #8
 8004df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0204 	bic.w	r2, r2, #4
 8004e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6999      	ldr	r1, [r3, #24]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	619a      	str	r2, [r3, #24]
      break;
 8004e1a:	e062      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f956 	bl	80050d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6999      	ldr	r1, [r3, #24]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	021a      	lsls	r2, r3, #8
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	619a      	str	r2, [r3, #24]
      break;
 8004e5c:	e041      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f99f 	bl	80051a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0208 	orr.w	r2, r2, #8
 8004e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0204 	bic.w	r2, r2, #4
 8004e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69d9      	ldr	r1, [r3, #28]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]
      break;
 8004e9c:	e021      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f9e9 	bl	800527c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69d9      	ldr	r1, [r3, #28]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	61da      	str	r2, [r3, #28]
      break;
 8004ede:	e000      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ee0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <TIM_Base_SetConfig+0xb8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x30>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x30>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a26      	ldr	r2, [pc, #152]	; (8005000 <TIM_Base_SetConfig+0xbc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x30>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a25      	ldr	r2, [pc, #148]	; (8005004 <TIM_Base_SetConfig+0xc0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <TIM_Base_SetConfig+0xb8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a19      	ldr	r2, [pc, #100]	; (8005000 <TIM_Base_SetConfig+0xbc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a18      	ldr	r2, [pc, #96]	; (8005004 <TIM_Base_SetConfig+0xc0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <TIM_Base_SetConfig+0xb8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d103      	bne.n	8004fec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	615a      	str	r2, [r3, #20]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800

08005008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 0302 	bic.w	r3, r3, #2
 8005050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <TIM_OC1_SetConfig+0xc8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d10c      	bne.n	800507e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0308 	bic.w	r3, r3, #8
 800506a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <TIM_OC1_SetConfig+0xc8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d111      	bne.n	80050aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00

080050d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0210 	bic.w	r2, r3, #16
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f023 0320 	bic.w	r3, r3, #32
 800511e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <TIM_OC2_SetConfig+0xd0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10d      	bne.n	8005150 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <TIM_OC2_SetConfig+0xd0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d113      	bne.n	8005180 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800515e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	40012c00 	.word	0x40012c00

080051a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <TIM_OC3_SetConfig+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d10d      	bne.n	8005222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800520c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <TIM_OC3_SetConfig+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d113      	bne.n	8005252 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	621a      	str	r2, [r3, #32]
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40012c00 	.word	0x40012c00

0800527c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a0f      	ldr	r2, [pc, #60]	; (8005314 <TIM_OC4_SetConfig+0x98>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d109      	bne.n	80052f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	40012c00 	.word	0x40012c00

08005318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005374:	2302      	movs	r3, #2
 8005376:	e032      	b.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e03d      	b.n	8005480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	4603      	mov	r3, r0
 80054b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054c0:	2b84      	cmp	r3, #132	; 0x84
 80054c2:	d005      	beq.n	80054d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	3303      	adds	r3, #3
 80054ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e2:	f3ef 8305 	mrs	r3, IPSR
 80054e6:	607b      	str	r3, [r7, #4]
  return(result);
 80054e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005502:	f000 fbbf 	bl	8005c84 <vTaskStartScheduler>
  
  return osOK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}

0800550c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005510:	f7ff ffe4 	bl	80054dc <inHandlerMode>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800551a:	f000 fcc9 	bl	8005eb0 <xTaskGetTickCountFromISR>
 800551e:	4603      	mov	r3, r0
 8005520:	e002      	b.n	8005528 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005522:	f000 fcb7 	bl	8005e94 <xTaskGetTickCount>
 8005526:	4603      	mov	r3, r0
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}

0800552c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800552c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af04      	add	r7, sp, #16
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d020      	beq.n	8005580 <osThreadCreate+0x54>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01c      	beq.n	8005580 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685c      	ldr	r4, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681d      	ldr	r5, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691e      	ldr	r6, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ffa8 	bl	80054ae <makeFreeRtosPriority>
 800555e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005568:	9202      	str	r2, [sp, #8]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	9100      	str	r1, [sp, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	4632      	mov	r2, r6
 8005572:	4629      	mov	r1, r5
 8005574:	4620      	mov	r0, r4
 8005576:	f000 f8f6 	bl	8005766 <xTaskCreateStatic>
 800557a:	4603      	mov	r3, r0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e01c      	b.n	80055ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685c      	ldr	r4, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800558c:	b29e      	uxth	r6, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff8a 	bl	80054ae <makeFreeRtosPriority>
 800559a:	4602      	mov	r2, r0
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	9200      	str	r2, [sp, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4632      	mov	r2, r6
 80055a8:	4629      	mov	r1, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 f934 	bl	8005818 <xTaskCreate>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d001      	beq.n	80055ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055c4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fa51 	bl	8005a74 <vTaskDelete>
  return osOK;
 80055d2:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <osDelayUntil+0x18>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e000      	b.n	80055f6 <osDelayUntil+0x1a>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fac9 	bl	8005b90 <vTaskDelayUntil>
  
  return osOK;
 80055fe:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f103 0208 	add.w	r2, r3, #8
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f04f 32ff 	mov.w	r2, #4294967295
 8005620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f103 0208 	add.w	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f103 0208 	add.w	r2, r3, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d103      	bne.n	80056c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e00c      	b.n	80056de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3308      	adds	r3, #8
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e002      	b.n	80056d2 <vListInsert+0x2e>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d2f6      	bcs.n	80056cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr

08005714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6852      	ldr	r2, [r2, #4]
 8005734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d103      	bne.n	8005748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr

08005766 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08e      	sub	sp, #56	; 0x38
 800576a:	af04      	add	r7, sp, #16
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	623b      	str	r3, [r7, #32]
 800578c:	e7fe      	b.n	800578c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <xTaskCreateStatic+0x42>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	e7fe      	b.n	80057a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057a8:	2354      	movs	r3, #84	; 0x54
 80057aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b54      	cmp	r3, #84	; 0x54
 80057b0:	d009      	beq.n	80057c6 <xTaskCreateStatic+0x60>
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e7fe      	b.n	80057c4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <xTaskCreateStatic+0xa4>
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01b      	beq.n	800580a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057e4:	2300      	movs	r3, #0
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f850 	bl	80058a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005804:	f000 f8cc 	bl	80059a0 <prvAddNewTaskToReadyList>
 8005808:	e001      	b.n	800580e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800580e:	697b      	ldr	r3, [r7, #20]
	}
 8005810:	4618      	mov	r0, r3
 8005812:	3728      	adds	r7, #40	; 0x28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	; 0x30
 800581c:	af04      	add	r7, sp, #16
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f000 ff81 	bl	8006734 <pvPortMalloc>
 8005832:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00e      	beq.n	8005858 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800583a:	2054      	movs	r0, #84	; 0x54
 800583c:	f000 ff7a 	bl	8006734 <pvPortMalloc>
 8005840:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
 800584e:	e005      	b.n	800585c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005850:	6978      	ldr	r0, [r7, #20]
 8005852:	f001 f831 	bl	80068b8 <vPortFree>
 8005856:	e001      	b.n	800585c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d017      	beq.n	8005892 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	2300      	movs	r3, #0
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	9302      	str	r3, [sp, #8]
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f80e 	bl	80058a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005886:	69f8      	ldr	r0, [r7, #28]
 8005888:	f000 f88a 	bl	80059a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800588c:	2301      	movs	r3, #1
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e002      	b.n	8005898 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005898:	69bb      	ldr	r3, [r7, #24]
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b088      	sub	sp, #32
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058ba:	3b01      	subs	r3, #1
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f023 0307 	bic.w	r3, r3, #7
 80058c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <prvInitialiseNewTask+0x46>
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e7fe      	b.n	80058e6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e8:	2300      	movs	r3, #0
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	e012      	b.n	8005914 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	7819      	ldrb	r1, [r3, #0]
 80058f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	3334      	adds	r3, #52	; 0x34
 80058fe:	460a      	mov	r2, r1
 8005900:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d006      	beq.n	800591c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3301      	adds	r3, #1
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d9e9      	bls.n	80058ee <prvInitialiseNewTask+0x4c>
 800591a:	e000      	b.n	800591e <prvInitialiseNewTask+0x7c>
		{
			break;
 800591c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2b06      	cmp	r3, #6
 800592a:	d901      	bls.n	8005930 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800592c:	2306      	movs	r3, #6
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fe7d 	bl	8005646 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	3318      	adds	r3, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fe78 	bl	8005646 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f1c3 0207 	rsb	r2, r3, #7
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	2200      	movs	r2, #0
 8005970:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	69b8      	ldr	r0, [r7, #24]
 8005980:	f000 fcfa 	bl	8006378 <pxPortInitialiseStack>
 8005984:	4602      	mov	r2, r0
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005996:	bf00      	nop
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059a8:	f000 fdce 	bl	8006548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059ac:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <prvAddNewTaskToReadyList+0xb8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <prvAddNewTaskToReadyList+0xb8>)
 80059b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059b6:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <prvAddNewTaskToReadyList+0xbc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059be:	4a27      	ldr	r2, [pc, #156]	; (8005a5c <prvAddNewTaskToReadyList+0xbc>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059c4:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <prvAddNewTaskToReadyList+0xb8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d110      	bne.n	80059ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059cc:	f000 fbb0 	bl	8006130 <prvInitialiseTaskLists>
 80059d0:	e00d      	b.n	80059ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <prvAddNewTaskToReadyList+0xc0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059da:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <prvAddNewTaskToReadyList+0xbc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d802      	bhi.n	80059ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059e8:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <prvAddNewTaskToReadyList+0xbc>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059ee:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <prvAddNewTaskToReadyList+0xc4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <prvAddNewTaskToReadyList+0xc4>)
 80059f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	2201      	movs	r2, #1
 80059fe:	409a      	lsls	r2, r3
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <prvAddNewTaskToReadyList+0xc8>)
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <prvAddNewTaskToReadyList+0xcc>)
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7ff fe1c 	bl	800565e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a26:	f000 fdbd 	bl	80065a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <prvAddNewTaskToReadyList+0xc0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <prvAddNewTaskToReadyList+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d207      	bcs.n	8005a50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <prvAddNewTaskToReadyList+0xd0>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000558 	.word	0x20000558
 8005a5c:	20000458 	.word	0x20000458
 8005a60:	20000564 	.word	0x20000564
 8005a64:	20000574 	.word	0x20000574
 8005a68:	20000560 	.word	0x20000560
 8005a6c:	2000045c 	.word	0x2000045c
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005a7c:	f000 fd64 	bl	8006548 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <vTaskDelete+0x18>
 8005a86:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <vTaskDelete+0xf4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	e000      	b.n	8005a8e <vTaskDelete+0x1a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fe3d 	bl	8005714 <uxListRemove>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d115      	bne.n	8005acc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4931      	ldr	r1, [pc, #196]	; (8005b6c <vTaskDelete+0xf8>)
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <vTaskDelete+0x58>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	2201      	movs	r2, #1
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43da      	mvns	r2, r3
 8005ac2:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <vTaskDelete+0xfc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	4a29      	ldr	r2, [pc, #164]	; (8005b70 <vTaskDelete+0xfc>)
 8005aca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3318      	adds	r3, #24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fe1b 	bl	8005714 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <vTaskDelete+0x100>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4a23      	ldr	r2, [pc, #140]	; (8005b74 <vTaskDelete+0x100>)
 8005ae6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005ae8:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <vTaskDelete+0xf4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d10b      	bne.n	8005b0a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	481f      	ldr	r0, [pc, #124]	; (8005b78 <vTaskDelete+0x104>)
 8005afa:	f7ff fdb0 	bl	800565e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005afe:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <vTaskDelete+0x108>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <vTaskDelete+0x108>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	e009      	b.n	8005b1e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <vTaskDelete+0x10c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <vTaskDelete+0x10c>)
 8005b12:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fb77 	bl	8006208 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005b1a:	f000 fba3 	bl	8006264 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005b1e:	f000 fd41 	bl	80065a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005b22:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <vTaskDelete+0x110>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01a      	beq.n	8005b60 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <vTaskDelete+0xf4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d115      	bne.n	8005b60 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005b34:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <vTaskDelete+0x114>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d009      	beq.n	8005b50 <vTaskDelete+0xdc>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	e7fe      	b.n	8005b4e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8005b50:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <vTaskDelete+0x118>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000458 	.word	0x20000458
 8005b6c:	2000045c 	.word	0x2000045c
 8005b70:	20000560 	.word	0x20000560
 8005b74:	20000574 	.word	0x20000574
 8005b78:	2000052c 	.word	0x2000052c
 8005b7c:	20000540 	.word	0x20000540
 8005b80:	20000558 	.word	0x20000558
 8005b84:	20000564 	.word	0x20000564
 8005b88:	20000580 	.word	0x20000580
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d109      	bne.n	8005bb8 <vTaskDelayUntil+0x28>
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	e7fe      	b.n	8005bb6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <vTaskDelayUntil+0x42>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e7fe      	b.n	8005bd0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005bd2:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <vTaskDelayUntil+0xe8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <vTaskDelayUntil+0x5e>
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e7fe      	b.n	8005bec <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005bee:	f000 f8a7 	bl	8005d40 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <vTaskDelayUntil+0xec>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	4413      	add	r3, r2
 8005c00:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d20b      	bcs.n	8005c24 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d211      	bcs.n	8005c3a <vTaskDelayUntil+0xaa>
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d90d      	bls.n	8005c3a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
 8005c22:	e00a      	b.n	8005c3a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d303      	bcc.n	8005c36 <vTaskDelayUntil+0xa6>
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d901      	bls.n	8005c3a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005c36:	2301      	movs	r3, #1
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fb2c 	bl	80062ac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005c54:	f000 f882 	bl	8005d5c <xTaskResumeAll>
 8005c58:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d107      	bne.n	8005c70 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <vTaskDelayUntil+0xf0>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c70:	bf00      	nop
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000580 	.word	0x20000580
 8005c7c:	2000055c 	.word	0x2000055c
 8005c80:	e000ed04 	.word	0xe000ed04

08005c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c92:	463a      	mov	r2, r7
 8005c94:	1d39      	adds	r1, r7, #4
 8005c96:	f107 0308 	add.w	r3, r7, #8
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fb fac4 	bl	8001228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	9202      	str	r2, [sp, #8]
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	2300      	movs	r3, #0
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	491d      	ldr	r1, [pc, #116]	; (8005d28 <vTaskStartScheduler+0xa4>)
 8005cb4:	481d      	ldr	r0, [pc, #116]	; (8005d2c <vTaskStartScheduler+0xa8>)
 8005cb6:	f7ff fd56 	bl	8005766 <xTaskCreateStatic>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <vTaskStartScheduler+0xac>)
 8005cbe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <vTaskStartScheduler+0xac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e001      	b.n	8005cd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d115      	bne.n	8005d04 <vTaskStartScheduler+0x80>
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <vTaskStartScheduler+0xb0>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <vTaskStartScheduler+0xb4>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <vTaskStartScheduler+0xb8>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cfe:	f000 fbb3 	bl	8006468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d02:	e00d      	b.n	8005d20 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d109      	bne.n	8005d20 <vTaskStartScheduler+0x9c>
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	e7fe      	b.n	8005d1e <vTaskStartScheduler+0x9a>
}
 8005d20:	bf00      	nop
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	08008d0c 	.word	0x08008d0c
 8005d2c:	08006101 	.word	0x08006101
 8005d30:	2000057c 	.word	0x2000057c
 8005d34:	20000578 	.word	0x20000578
 8005d38:	20000564 	.word	0x20000564
 8005d3c:	2000055c 	.word	0x2000055c

08005d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <vTaskSuspendAll+0x18>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	4a03      	ldr	r2, [pc, #12]	; (8005d58 <vTaskSuspendAll+0x18>)
 8005d4c:	6013      	str	r3, [r2, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000580 	.word	0x20000580

08005d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <xTaskResumeAll+0x114>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <xTaskResumeAll+0x2a>
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	e7fe      	b.n	8005d84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d86:	f000 fbdf 	bl	8006548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <xTaskResumeAll+0x114>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <xTaskResumeAll+0x114>)
 8005d92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <xTaskResumeAll+0x114>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d161      	bne.n	8005e60 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d9c:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <xTaskResumeAll+0x118>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d05d      	beq.n	8005e60 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005da4:	e02e      	b.n	8005e04 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005da6:	4b34      	ldr	r3, [pc, #208]	; (8005e78 <xTaskResumeAll+0x11c>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3318      	adds	r3, #24
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fcae 	bl	8005714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fca9 	bl	8005714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <xTaskResumeAll+0x120>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <xTaskResumeAll+0x120>)
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <xTaskResumeAll+0x124>)
 8005de2:	441a      	add	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f7ff fc37 	bl	800565e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <xTaskResumeAll+0x128>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005dfe:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <xTaskResumeAll+0x12c>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e04:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <xTaskResumeAll+0x11c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1cc      	bne.n	8005da6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e12:	f000 fa27 	bl	8006264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <xTaskResumeAll+0x130>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e22:	f000 f857 	bl	8005ed4 <xTaskIncrementTick>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005e2c:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <xTaskResumeAll+0x12c>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f1      	bne.n	8005e22 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <xTaskResumeAll+0x130>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <xTaskResumeAll+0x12c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <xTaskResumeAll+0x134>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e60:	f000 fba0 	bl	80065a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e64:	68bb      	ldr	r3, [r7, #8]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000580 	.word	0x20000580
 8005e74:	20000558 	.word	0x20000558
 8005e78:	20000518 	.word	0x20000518
 8005e7c:	20000560 	.word	0x20000560
 8005e80:	2000045c 	.word	0x2000045c
 8005e84:	20000458 	.word	0x20000458
 8005e88:	2000056c 	.word	0x2000056c
 8005e8c:	20000568 	.word	0x20000568
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <xTaskGetTickCount+0x18>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ea0:	687b      	ldr	r3, [r7, #4]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr
 8005eac:	2000055c 	.word	0x2000055c

08005eb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb6:	f000 fc01 	bl	80066bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005ebe:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <xTaskGetTickCountFromISR+0x20>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ec4:	683b      	ldr	r3, [r7, #0]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	2000055c 	.word	0x2000055c

08005ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ede:	4b50      	ldr	r3, [pc, #320]	; (8006020 <xTaskIncrementTick+0x14c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 808c 	bne.w	8006000 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ee8:	4b4e      	ldr	r3, [pc, #312]	; (8006024 <xTaskIncrementTick+0x150>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ef0:	4a4c      	ldr	r2, [pc, #304]	; (8006024 <xTaskIncrementTick+0x150>)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11f      	bne.n	8005f3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005efc:	4b4a      	ldr	r3, [pc, #296]	; (8006028 <xTaskIncrementTick+0x154>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <xTaskIncrementTick+0x46>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	e7fe      	b.n	8005f18 <xTaskIncrementTick+0x44>
 8005f1a:	4b43      	ldr	r3, [pc, #268]	; (8006028 <xTaskIncrementTick+0x154>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	4b42      	ldr	r3, [pc, #264]	; (800602c <xTaskIncrementTick+0x158>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a40      	ldr	r2, [pc, #256]	; (8006028 <xTaskIncrementTick+0x154>)
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	4a40      	ldr	r2, [pc, #256]	; (800602c <xTaskIncrementTick+0x158>)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b40      	ldr	r3, [pc, #256]	; (8006030 <xTaskIncrementTick+0x15c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	4a3e      	ldr	r2, [pc, #248]	; (8006030 <xTaskIncrementTick+0x15c>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	f000 f994 	bl	8006264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f3c:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <xTaskIncrementTick+0x160>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d34d      	bcc.n	8005fe2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f46:	4b38      	ldr	r3, [pc, #224]	; (8006028 <xTaskIncrementTick+0x154>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <xTaskIncrementTick+0x80>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <xTaskIncrementTick+0x82>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f5a:	4b36      	ldr	r3, [pc, #216]	; (8006034 <xTaskIncrementTick+0x160>)
 8005f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f60:	601a      	str	r2, [r3, #0]
					break;
 8005f62:	e03e      	b.n	8005fe2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f64:	4b30      	ldr	r3, [pc, #192]	; (8006028 <xTaskIncrementTick+0x154>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d203      	bcs.n	8005f84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f7c:	4a2d      	ldr	r2, [pc, #180]	; (8006034 <xTaskIncrementTick+0x160>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
						break;
 8005f82:	e02e      	b.n	8005fe2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fbc3 	bl	8005714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	3318      	adds	r3, #24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fbba 	bl	8005714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	4b23      	ldr	r3, [pc, #140]	; (8006038 <xTaskIncrementTick+0x164>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <xTaskIncrementTick+0x164>)
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <xTaskIncrementTick+0x168>)
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7ff fb48 	bl	800565e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <xTaskIncrementTick+0x16c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d3b4      	bcc.n	8005f46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe0:	e7b1      	b.n	8005f46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <xTaskIncrementTick+0x16c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	4914      	ldr	r1, [pc, #80]	; (800603c <xTaskIncrementTick+0x168>)
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d907      	bls.n	800600a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e004      	b.n	800600a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006000:	4b10      	ldr	r3, [pc, #64]	; (8006044 <xTaskIncrementTick+0x170>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a0f      	ldr	r2, [pc, #60]	; (8006044 <xTaskIncrementTick+0x170>)
 8006008:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800600a:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <xTaskIncrementTick+0x174>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006016:	697b      	ldr	r3, [r7, #20]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000580 	.word	0x20000580
 8006024:	2000055c 	.word	0x2000055c
 8006028:	20000510 	.word	0x20000510
 800602c:	20000514 	.word	0x20000514
 8006030:	20000570 	.word	0x20000570
 8006034:	20000578 	.word	0x20000578
 8006038:	20000560 	.word	0x20000560
 800603c:	2000045c 	.word	0x2000045c
 8006040:	20000458 	.word	0x20000458
 8006044:	20000568 	.word	0x20000568
 8006048:	2000056c 	.word	0x2000056c

0800604c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006052:	4b26      	ldr	r3, [pc, #152]	; (80060ec <vTaskSwitchContext+0xa0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800605a:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <vTaskSwitchContext+0xa4>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006060:	e03e      	b.n	80060e0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006062:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <vTaskSwitchContext+0xa4>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006068:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <vTaskSwitchContext+0xa8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	fab3 f383 	clz	r3, r3
 8006074:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	f1c3 031f 	rsb	r3, r3, #31
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	491e      	ldr	r1, [pc, #120]	; (80060f8 <vTaskSwitchContext+0xac>)
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	e7fe      	b.n	80060a4 <vTaskSwitchContext+0x58>
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <vTaskSwitchContext+0xac>)
 80060b2:	4413      	add	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3308      	adds	r3, #8
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d104      	bne.n	80060d6 <vTaskSwitchContext+0x8a>
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4a07      	ldr	r2, [pc, #28]	; (80060fc <vTaskSwitchContext+0xb0>)
 80060de:	6013      	str	r3, [r2, #0]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000580 	.word	0x20000580
 80060f0:	2000056c 	.word	0x2000056c
 80060f4:	20000560 	.word	0x20000560
 80060f8:	2000045c 	.word	0x2000045c
 80060fc:	20000458 	.word	0x20000458

08006100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006108:	f000 f852 	bl	80061b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <prvIdleTask+0x28>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d9f9      	bls.n	8006108 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <prvIdleTask+0x2c>)
 8006116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006124:	e7f0      	b.n	8006108 <prvIdleTask+0x8>
 8006126:	bf00      	nop
 8006128:	2000045c 	.word	0x2000045c
 800612c:	e000ed04 	.word	0xe000ed04

08006130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	e00c      	b.n	8006156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <prvInitialiseTaskLists+0x60>)
 8006148:	4413      	add	r3, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fa5c 	bl	8005608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3301      	adds	r3, #1
 8006154:	607b      	str	r3, [r7, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b06      	cmp	r3, #6
 800615a:	d9ef      	bls.n	800613c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800615c:	480d      	ldr	r0, [pc, #52]	; (8006194 <prvInitialiseTaskLists+0x64>)
 800615e:	f7ff fa53 	bl	8005608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006162:	480d      	ldr	r0, [pc, #52]	; (8006198 <prvInitialiseTaskLists+0x68>)
 8006164:	f7ff fa50 	bl	8005608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006168:	480c      	ldr	r0, [pc, #48]	; (800619c <prvInitialiseTaskLists+0x6c>)
 800616a:	f7ff fa4d 	bl	8005608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800616e:	480c      	ldr	r0, [pc, #48]	; (80061a0 <prvInitialiseTaskLists+0x70>)
 8006170:	f7ff fa4a 	bl	8005608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006174:	480b      	ldr	r0, [pc, #44]	; (80061a4 <prvInitialiseTaskLists+0x74>)
 8006176:	f7ff fa47 	bl	8005608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <prvInitialiseTaskLists+0x78>)
 800617c:	4a05      	ldr	r2, [pc, #20]	; (8006194 <prvInitialiseTaskLists+0x64>)
 800617e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <prvInitialiseTaskLists+0x7c>)
 8006182:	4a05      	ldr	r2, [pc, #20]	; (8006198 <prvInitialiseTaskLists+0x68>)
 8006184:	601a      	str	r2, [r3, #0]
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	2000045c 	.word	0x2000045c
 8006194:	200004e8 	.word	0x200004e8
 8006198:	200004fc 	.word	0x200004fc
 800619c:	20000518 	.word	0x20000518
 80061a0:	2000052c 	.word	0x2000052c
 80061a4:	20000544 	.word	0x20000544
 80061a8:	20000510 	.word	0x20000510
 80061ac:	20000514 	.word	0x20000514

080061b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b6:	e019      	b.n	80061ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061b8:	f000 f9c6 	bl	8006548 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <prvCheckTasksWaitingTermination+0x4c>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff faa3 	bl	8005714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <prvCheckTasksWaitingTermination+0x50>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <prvCheckTasksWaitingTermination+0x50>)
 80061d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <prvCheckTasksWaitingTermination+0x54>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3b01      	subs	r3, #1
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <prvCheckTasksWaitingTermination+0x54>)
 80061e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061e2:	f000 f9df 	bl	80065a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f80e 	bl	8006208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <prvCheckTasksWaitingTermination+0x54>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e1      	bne.n	80061b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	2000052c 	.word	0x2000052c
 8006200:	20000558 	.word	0x20000558
 8006204:	20000540 	.word	0x20000540

08006208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fb4a 	bl	80068b8 <vPortFree>
				vPortFree( pxTCB );
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb47 	bl	80068b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800622a:	e017      	b.n	800625c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006232:	2b01      	cmp	r3, #1
 8006234:	d103      	bne.n	800623e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb3e 	bl	80068b8 <vPortFree>
	}
 800623c:	e00e      	b.n	800625c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006244:	2b02      	cmp	r3, #2
 8006246:	d009      	beq.n	800625c <prvDeleteTCB+0x54>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e7fe      	b.n	800625a <prvDeleteTCB+0x52>
	}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626a:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <prvResetNextTaskUnblockTime+0x40>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <prvResetNextTaskUnblockTime+0x14>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <prvResetNextTaskUnblockTime+0x16>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800627e:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <prvResetNextTaskUnblockTime+0x44>)
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006286:	e008      	b.n	800629a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <prvResetNextTaskUnblockTime+0x40>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <prvResetNextTaskUnblockTime+0x44>)
 8006298:	6013      	str	r3, [r2, #0]
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr
 80062a4:	20000510 	.word	0x20000510
 80062a8:	20000578 	.word	0x20000578

080062ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062b6:	4b29      	ldr	r3, [pc, #164]	; (800635c <prvAddCurrentTaskToDelayedList+0xb0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062bc:	4b28      	ldr	r3, [pc, #160]	; (8006360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fa26 	bl	8005714 <uxListRemove>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	2201      	movs	r2, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	43da      	mvns	r2, r3
 80062dc:	4b21      	ldr	r3, [pc, #132]	; (8006364 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4013      	ands	r3, r2
 80062e2:	4a20      	ldr	r2, [pc, #128]	; (8006364 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d10a      	bne.n	8006304 <prvAddCurrentTaskToDelayedList+0x58>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	481a      	ldr	r0, [pc, #104]	; (8006368 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062fe:	f7ff f9ae 	bl	800565e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006302:	e026      	b.n	8006352 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800630c:	4b14      	ldr	r3, [pc, #80]	; (8006360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	429a      	cmp	r2, r3
 800631a:	d209      	bcs.n	8006330 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800631c:	4b13      	ldr	r3, [pc, #76]	; (800636c <prvAddCurrentTaskToDelayedList+0xc0>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7ff f9bb 	bl	80056a4 <vListInsert>
}
 800632e:	e010      	b.n	8006352 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3304      	adds	r3, #4
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7ff f9b1 	bl	80056a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d202      	bcs.n	8006352 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800634c:	4a09      	ldr	r2, [pc, #36]	; (8006374 <prvAddCurrentTaskToDelayedList+0xc8>)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6013      	str	r3, [r2, #0]
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	2000055c 	.word	0x2000055c
 8006360:	20000458 	.word	0x20000458
 8006364:	20000560 	.word	0x20000560
 8006368:	20000544 	.word	0x20000544
 800636c:	20000514 	.word	0x20000514
 8006370:	20000510 	.word	0x20000510
 8006374:	20000578 	.word	0x20000578

08006378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3b04      	subs	r3, #4
 8006388:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b04      	subs	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063a8:	4a08      	ldr	r2, [pc, #32]	; (80063cc <pxPortInitialiseStack+0x54>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3b14      	subs	r3, #20
 80063b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b20      	subs	r3, #32
 80063be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063c0:	68fb      	ldr	r3, [r7, #12]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr
 80063cc:	080063d1 	.word	0x080063d1

080063d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063da:	4b10      	ldr	r3, [pc, #64]	; (800641c <prvTaskExitError+0x4c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d009      	beq.n	80063f8 <prvTaskExitError+0x28>
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e7fe      	b.n	80063f6 <prvTaskExitError+0x26>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800640a:	bf00      	nop
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0fc      	beq.n	800640c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	2000000c 	.word	0x2000000c

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	f04e 0e0d 	orr.w	lr, lr, #13
 800643e:	4770      	bx	lr

08006440 <pxCurrentTCBConst2>:
 8006440:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006448:	4806      	ldr	r0, [pc, #24]	; (8006464 <prvPortStartFirstTask+0x1c>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	b662      	cpsie	i
 8006454:	b661      	cpsie	f
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	df00      	svc	0
 8006460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006462:	bf00      	nop
 8006464:	e000ed08 	.word	0xe000ed08

08006468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800646e:	4b31      	ldr	r3, [pc, #196]	; (8006534 <xPortStartScheduler+0xcc>)
 8006470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <xPortStartScheduler+0xd0>)
 8006494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006496:	4b29      	ldr	r3, [pc, #164]	; (800653c <xPortStartScheduler+0xd4>)
 8006498:	2207      	movs	r2, #7
 800649a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649c:	e009      	b.n	80064b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800649e:	4b27      	ldr	r3, [pc, #156]	; (800653c <xPortStartScheduler+0xd4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	4a25      	ldr	r2, [pc, #148]	; (800653c <xPortStartScheduler+0xd4>)
 80064a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d0ef      	beq.n	800649e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064be:	4b1f      	ldr	r3, [pc, #124]	; (800653c <xPortStartScheduler+0xd4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f1c3 0307 	rsb	r3, r3, #7
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d009      	beq.n	80064de <xPortStartScheduler+0x76>
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	e7fe      	b.n	80064dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064de:	4b17      	ldr	r3, [pc, #92]	; (800653c <xPortStartScheduler+0xd4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <xPortStartScheduler+0xd4>)
 80064e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <xPortStartScheduler+0xd4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064f0:	4a12      	ldr	r2, [pc, #72]	; (800653c <xPortStartScheduler+0xd4>)
 80064f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <xPortStartScheduler+0xd8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0f      	ldr	r2, [pc, #60]	; (8006540 <xPortStartScheduler+0xd8>)
 8006502:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <xPortStartScheduler+0xd8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0c      	ldr	r2, [pc, #48]	; (8006540 <xPortStartScheduler+0xd8>)
 800650e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006514:	f000 f8b0 	bl	8006678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <xPortStartScheduler+0xdc>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800651e:	f7ff ff93 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006522:	f7ff fd93 	bl	800604c <vTaskSwitchContext>
	prvTaskExitError();
 8006526:	f7ff ff53 	bl	80063d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	e000e400 	.word	0xe000e400
 8006538:	20000584 	.word	0x20000584
 800653c:	20000588 	.word	0x20000588
 8006540:	e000ed20 	.word	0xe000ed20
 8006544:	2000000c 	.word	0x2000000c

08006548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <vPortEnterCritical+0x54>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a0d      	ldr	r2, [pc, #52]	; (800659c <vPortEnterCritical+0x54>)
 8006568:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800656a:	4b0c      	ldr	r3, [pc, #48]	; (800659c <vPortEnterCritical+0x54>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10e      	bne.n	8006590 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006572:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <vPortEnterCritical+0x58>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <vPortEnterCritical+0x48>
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	e7fe      	b.n	800658e <vPortEnterCritical+0x46>
	}
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000000c 	.word	0x2000000c
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <vPortExitCritical+0x48>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <vPortExitCritical+0x22>
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	607b      	str	r3, [r7, #4]
 80065c4:	e7fe      	b.n	80065c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <vPortExitCritical+0x48>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a07      	ldr	r2, [pc, #28]	; (80065ec <vPortExitCritical+0x48>)
 80065ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <vPortExitCritical+0x48>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <vPortExitCritical+0x3e>
 80065d8:	2300      	movs	r3, #0
 80065da:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr
 80065ec:	2000000c 	.word	0x2000000c

080065f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065f0:	f3ef 8009 	mrs	r0, PSP
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <pxCurrentTCBConst>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006600:	6010      	str	r0, [r2, #0]
 8006602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800660a:	f380 8811 	msr	BASEPRI, r0
 800660e:	f7ff fd1d 	bl	800604c <vTaskSwitchContext>
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	6808      	ldr	r0, [r1, #0]
 8006622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006626:	f380 8809 	msr	PSP, r0
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	4770      	bx	lr

08006630 <pxCurrentTCBConst>:
 8006630:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006650:	f7ff fc40 	bl	8005ed4 <xTaskIncrementTick>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <SysTick_Handler+0x3c>)
 800665c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	2300      	movs	r3, #0
 8006664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <vPortSetupTimerInterrupt+0x30>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <vPortSetupTimerInterrupt+0x34>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <vPortSetupTimerInterrupt+0x38>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <vPortSetupTimerInterrupt+0x3c>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	099b      	lsrs	r3, r3, #6
 8006694:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <vPortSetupTimerInterrupt+0x40>)
 8006696:	3b01      	subs	r3, #1
 8006698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800669a:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <vPortSetupTimerInterrupt+0x30>)
 800669c:	2207      	movs	r2, #7
 800669e:	601a      	str	r2, [r3, #0]
}
 80066a0:	bf00      	nop
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	e000e010 	.word	0xe000e010
 80066ac:	e000e018 	.word	0xe000e018
 80066b0:	20000000 	.word	0x20000000
 80066b4:	10624dd3 	.word	0x10624dd3
 80066b8:	e000e014 	.word	0xe000e014

080066bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066c2:	f3ef 8305 	mrs	r3, IPSR
 80066c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	d913      	bls.n	80066f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ce:	4a15      	ldr	r2, [pc, #84]	; (8006724 <vPortValidateInterruptPriority+0x68>)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <vPortValidateInterruptPriority+0x6c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	7afa      	ldrb	r2, [r7, #11]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d209      	bcs.n	80066f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	e7fe      	b.n	80066f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <vPortValidateInterruptPriority+0x70>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <vPortValidateInterruptPriority+0x74>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d909      	bls.n	800671a <vPortValidateInterruptPriority+0x5e>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	e7fe      	b.n	8006718 <vPortValidateInterruptPriority+0x5c>
	}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr
 8006724:	e000e3f0 	.word	0xe000e3f0
 8006728:	20000584 	.word	0x20000584
 800672c:	e000ed0c 	.word	0xe000ed0c
 8006730:	20000588 	.word	0x20000588

08006734 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006740:	f7ff fafe 	bl	8005d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006744:	4b57      	ldr	r3, [pc, #348]	; (80068a4 <pvPortMalloc+0x170>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800674c:	f000 f90c 	bl	8006968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006750:	4b55      	ldr	r3, [pc, #340]	; (80068a8 <pvPortMalloc+0x174>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 808c 	bne.w	8006876 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01c      	beq.n	800679e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006764:	2208      	movs	r2, #8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	2b00      	cmp	r3, #0
 8006774:	d013      	beq.n	800679e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	3308      	adds	r3, #8
 800677e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <pvPortMalloc+0x6a>
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e7fe      	b.n	800679c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d068      	beq.n	8006876 <pvPortMalloc+0x142>
 80067a4:	4b41      	ldr	r3, [pc, #260]	; (80068ac <pvPortMalloc+0x178>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d863      	bhi.n	8006876 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067ae:	4b40      	ldr	r3, [pc, #256]	; (80068b0 <pvPortMalloc+0x17c>)
 80067b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067b2:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <pvPortMalloc+0x17c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067b8:	e004      	b.n	80067c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d903      	bls.n	80067d6 <pvPortMalloc+0xa2>
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f1      	bne.n	80067ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067d6:	4b33      	ldr	r3, [pc, #204]	; (80068a4 <pvPortMalloc+0x170>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	429a      	cmp	r2, r3
 80067de:	d04a      	beq.n	8006876 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2208      	movs	r2, #8
 80067e6:	4413      	add	r3, r2
 80067e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	2308      	movs	r3, #8
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	429a      	cmp	r2, r3
 8006800:	d91e      	bls.n	8006840 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	2b00      	cmp	r3, #0
 8006812:	d009      	beq.n	8006828 <pvPortMalloc+0xf4>
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	e7fe      	b.n	8006826 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800683a:	69b8      	ldr	r0, [r7, #24]
 800683c:	f000 f8f6 	bl	8006a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <pvPortMalloc+0x178>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	4a18      	ldr	r2, [pc, #96]	; (80068ac <pvPortMalloc+0x178>)
 800684c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800684e:	4b17      	ldr	r3, [pc, #92]	; (80068ac <pvPortMalloc+0x178>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b18      	ldr	r3, [pc, #96]	; (80068b4 <pvPortMalloc+0x180>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d203      	bcs.n	8006862 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <pvPortMalloc+0x178>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a15      	ldr	r2, [pc, #84]	; (80068b4 <pvPortMalloc+0x180>)
 8006860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <pvPortMalloc+0x174>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	431a      	orrs	r2, r3
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006876:	f7ff fa71 	bl	8005d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <pvPortMalloc+0x164>
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e7fe      	b.n	8006896 <pvPortMalloc+0x162>
	return pvReturn;
 8006898:	69fb      	ldr	r3, [r7, #28]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3728      	adds	r7, #40	; 0x28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20001d04 	.word	0x20001d04
 80068a8:	20001d10 	.word	0x20001d10
 80068ac:	20001d08 	.word	0x20001d08
 80068b0:	20001cfc 	.word	0x20001cfc
 80068b4:	20001d0c 	.word	0x20001d0c

080068b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d046      	beq.n	8006958 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068ca:	2308      	movs	r3, #8
 80068cc:	425b      	negs	r3, r3
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4b20      	ldr	r3, [pc, #128]	; (8006960 <vPortFree+0xa8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <vPortFree+0x42>
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e7fe      	b.n	80068f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d009      	beq.n	8006916 <vPortFree+0x5e>
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	e7fe      	b.n	8006914 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <vPortFree+0xa8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d019      	beq.n	8006958 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d115      	bne.n	8006958 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vPortFree+0xa8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	43db      	mvns	r3, r3
 8006936:	401a      	ands	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800693c:	f7ff fa00 	bl	8005d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <vPortFree+0xac>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4413      	add	r3, r2
 800694a:	4a06      	ldr	r2, [pc, #24]	; (8006964 <vPortFree+0xac>)
 800694c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800694e:	6938      	ldr	r0, [r7, #16]
 8006950:	f000 f86c 	bl	8006a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006954:	f7ff fa02 	bl	8005d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20001d10 	.word	0x20001d10
 8006964:	20001d08 	.word	0x20001d08

08006968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800696e:	f241 7370 	movw	r3, #6000	; 0x1770
 8006972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <prvHeapInit+0xac>)
 8006976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3307      	adds	r3, #7
 8006986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <prvHeapInit+0xac>)
 8006998:	4413      	add	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069a0:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <prvHeapInit+0xb0>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069a6:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <prvHeapInit+0xb0>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069b4:	2208      	movs	r2, #8
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <prvHeapInit+0xb4>)
 80069c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <prvHeapInit+0xb4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <prvHeapInit+0xb4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <prvHeapInit+0xb4>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <prvHeapInit+0xb8>)
 80069f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <prvHeapInit+0xbc>)
 80069fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <prvHeapInit+0xc0>)
 8006a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a06:	601a      	str	r2, [r3, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000058c 	.word	0x2000058c
 8006a18:	20001cfc 	.word	0x20001cfc
 8006a1c:	20001d04 	.word	0x20001d04
 8006a20:	20001d0c 	.word	0x20001d0c
 8006a24:	20001d08 	.word	0x20001d08
 8006a28:	20001d10 	.word	0x20001d10

08006a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a34:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <prvInsertBlockIntoFreeList+0xa8>)
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e002      	b.n	8006a40 <prvInsertBlockIntoFreeList+0x14>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d8f7      	bhi.n	8006a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4413      	add	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d108      	bne.n	8006a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d118      	bne.n	8006ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <prvInsertBlockIntoFreeList+0xac>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d00d      	beq.n	8006aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	441a      	add	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e008      	b.n	8006abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <prvInsertBlockIntoFreeList+0xac>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e003      	b.n	8006abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d002      	beq.n	8006aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	20001cfc 	.word	0x20001cfc
 8006ad8:	20001d04 	.word	0x20001d04

08006adc <__errno>:
 8006adc:	4b01      	ldr	r3, [pc, #4]	; (8006ae4 <__errno+0x8>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000010 	.word	0x20000010

08006ae8 <__libc_init_array>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	2500      	movs	r5, #0
 8006aec:	4e0c      	ldr	r6, [pc, #48]	; (8006b20 <__libc_init_array+0x38>)
 8006aee:	4c0d      	ldr	r4, [pc, #52]	; (8006b24 <__libc_init_array+0x3c>)
 8006af0:	1ba4      	subs	r4, r4, r6
 8006af2:	10a4      	asrs	r4, r4, #2
 8006af4:	42a5      	cmp	r5, r4
 8006af6:	d109      	bne.n	8006b0c <__libc_init_array+0x24>
 8006af8:	f002 f85c 	bl	8008bb4 <_init>
 8006afc:	2500      	movs	r5, #0
 8006afe:	4e0a      	ldr	r6, [pc, #40]	; (8006b28 <__libc_init_array+0x40>)
 8006b00:	4c0a      	ldr	r4, [pc, #40]	; (8006b2c <__libc_init_array+0x44>)
 8006b02:	1ba4      	subs	r4, r4, r6
 8006b04:	10a4      	asrs	r4, r4, #2
 8006b06:	42a5      	cmp	r5, r4
 8006b08:	d105      	bne.n	8006b16 <__libc_init_array+0x2e>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b10:	4798      	blx	r3
 8006b12:	3501      	adds	r5, #1
 8006b14:	e7ee      	b.n	8006af4 <__libc_init_array+0xc>
 8006b16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b1a:	4798      	blx	r3
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e7f2      	b.n	8006b06 <__libc_init_array+0x1e>
 8006b20:	08008f88 	.word	0x08008f88
 8006b24:	08008f88 	.word	0x08008f88
 8006b28:	08008f88 	.word	0x08008f88
 8006b2c:	08008f8c 	.word	0x08008f8c

08006b30 <memcpy>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	1e43      	subs	r3, r0, #1
 8006b34:	440a      	add	r2, r1
 8006b36:	4291      	cmp	r1, r2
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	bd10      	pop	{r4, pc}
 8006b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b44:	e7f7      	b.n	8006b36 <memcpy+0x6>

08006b46 <memset>:
 8006b46:	4603      	mov	r3, r0
 8006b48:	4402      	add	r2, r0
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d100      	bne.n	8006b50 <memset+0xa>
 8006b4e:	4770      	bx	lr
 8006b50:	f803 1b01 	strb.w	r1, [r3], #1
 8006b54:	e7f9      	b.n	8006b4a <memset+0x4>

08006b56 <__cvt>:
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	461e      	mov	r6, r3
 8006b5e:	bfbb      	ittet	lt
 8006b60:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	461e      	movlt	r6, r3
 8006b66:	2300      	movge	r3, #0
 8006b68:	232d      	movlt	r3, #45	; 0x2d
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b6e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006b72:	f027 0720 	bic.w	r7, r7, #32
 8006b76:	2f46      	cmp	r7, #70	; 0x46
 8006b78:	4614      	mov	r4, r2
 8006b7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b7c:	700b      	strb	r3, [r1, #0]
 8006b7e:	d004      	beq.n	8006b8a <__cvt+0x34>
 8006b80:	2f45      	cmp	r7, #69	; 0x45
 8006b82:	d100      	bne.n	8006b86 <__cvt+0x30>
 8006b84:	3501      	adds	r5, #1
 8006b86:	2302      	movs	r3, #2
 8006b88:	e000      	b.n	8006b8c <__cvt+0x36>
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	aa07      	add	r2, sp, #28
 8006b8e:	9204      	str	r2, [sp, #16]
 8006b90:	aa06      	add	r2, sp, #24
 8006b92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b96:	e9cd 3500 	strd	r3, r5, [sp]
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4633      	mov	r3, r6
 8006b9e:	f000 fcd7 	bl	8007550 <_dtoa_r>
 8006ba2:	2f47      	cmp	r7, #71	; 0x47
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	d102      	bne.n	8006bae <__cvt+0x58>
 8006ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006baa:	07db      	lsls	r3, r3, #31
 8006bac:	d526      	bpl.n	8006bfc <__cvt+0xa6>
 8006bae:	2f46      	cmp	r7, #70	; 0x46
 8006bb0:	eb08 0905 	add.w	r9, r8, r5
 8006bb4:	d111      	bne.n	8006bda <__cvt+0x84>
 8006bb6:	f898 3000 	ldrb.w	r3, [r8]
 8006bba:	2b30      	cmp	r3, #48	; 0x30
 8006bbc:	d10a      	bne.n	8006bd4 <__cvt+0x7e>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	f7f9 feef 	bl	80009a8 <__aeabi_dcmpeq>
 8006bca:	b918      	cbnz	r0, 8006bd4 <__cvt+0x7e>
 8006bcc:	f1c5 0501 	rsb	r5, r5, #1
 8006bd0:	f8ca 5000 	str.w	r5, [sl]
 8006bd4:	f8da 3000 	ldr.w	r3, [sl]
 8006bd8:	4499      	add	r9, r3
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4620      	mov	r0, r4
 8006be0:	4631      	mov	r1, r6
 8006be2:	f7f9 fee1 	bl	80009a8 <__aeabi_dcmpeq>
 8006be6:	b938      	cbnz	r0, 8006bf8 <__cvt+0xa2>
 8006be8:	2230      	movs	r2, #48	; 0x30
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	454b      	cmp	r3, r9
 8006bee:	d205      	bcs.n	8006bfc <__cvt+0xa6>
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	9107      	str	r1, [sp, #28]
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e7f8      	b.n	8006bea <__cvt+0x94>
 8006bf8:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	9b07      	ldr	r3, [sp, #28]
 8006c00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c02:	eba3 0308 	sub.w	r3, r3, r8
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	b008      	add	sp, #32
 8006c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006c0e <__exponent>:
 8006c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c10:	2900      	cmp	r1, #0
 8006c12:	bfb4      	ite	lt
 8006c14:	232d      	movlt	r3, #45	; 0x2d
 8006c16:	232b      	movge	r3, #43	; 0x2b
 8006c18:	4604      	mov	r4, r0
 8006c1a:	bfb8      	it	lt
 8006c1c:	4249      	neglt	r1, r1
 8006c1e:	2909      	cmp	r1, #9
 8006c20:	f804 2b02 	strb.w	r2, [r4], #2
 8006c24:	7043      	strb	r3, [r0, #1]
 8006c26:	dd21      	ble.n	8006c6c <__exponent+0x5e>
 8006c28:	f10d 0307 	add.w	r3, sp, #7
 8006c2c:	461f      	mov	r7, r3
 8006c2e:	260a      	movs	r6, #10
 8006c30:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c34:	fb06 1115 	mls	r1, r6, r5, r1
 8006c38:	2d09      	cmp	r5, #9
 8006c3a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006c3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c42:	f103 32ff 	add.w	r2, r3, #4294967295
 8006c46:	4629      	mov	r1, r5
 8006c48:	dc09      	bgt.n	8006c5e <__exponent+0x50>
 8006c4a:	3130      	adds	r1, #48	; 0x30
 8006c4c:	3b02      	subs	r3, #2
 8006c4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c52:	42bb      	cmp	r3, r7
 8006c54:	4622      	mov	r2, r4
 8006c56:	d304      	bcc.n	8006c62 <__exponent+0x54>
 8006c58:	1a10      	subs	r0, r2, r0
 8006c5a:	b003      	add	sp, #12
 8006c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5e:	4613      	mov	r3, r2
 8006c60:	e7e6      	b.n	8006c30 <__exponent+0x22>
 8006c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c66:	f804 2b01 	strb.w	r2, [r4], #1
 8006c6a:	e7f2      	b.n	8006c52 <__exponent+0x44>
 8006c6c:	2330      	movs	r3, #48	; 0x30
 8006c6e:	4419      	add	r1, r3
 8006c70:	7083      	strb	r3, [r0, #2]
 8006c72:	1d02      	adds	r2, r0, #4
 8006c74:	70c1      	strb	r1, [r0, #3]
 8006c76:	e7ef      	b.n	8006c58 <__exponent+0x4a>

08006c78 <_printf_float>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	b091      	sub	sp, #68	; 0x44
 8006c7e:	460c      	mov	r4, r1
 8006c80:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006c82:	4693      	mov	fp, r2
 8006c84:	461e      	mov	r6, r3
 8006c86:	4605      	mov	r5, r0
 8006c88:	f001 fa16 	bl	80080b8 <_localeconv_r>
 8006c8c:	6803      	ldr	r3, [r0, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	9309      	str	r3, [sp, #36]	; 0x24
 8006c92:	f7f9 fa5d 	bl	8000150 <strlen>
 8006c96:	2300      	movs	r3, #0
 8006c98:	930e      	str	r3, [sp, #56]	; 0x38
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	900a      	str	r0, [sp, #40]	; 0x28
 8006c9e:	3307      	adds	r3, #7
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	f103 0208 	add.w	r2, r3, #8
 8006ca8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006cac:	f8d4 a000 	ldr.w	sl, [r4]
 8006cb0:	603a      	str	r2, [r7, #0]
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cba:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006cbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc8:	4ba6      	ldr	r3, [pc, #664]	; (8006f64 <_printf_float+0x2ec>)
 8006cca:	4638      	mov	r0, r7
 8006ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cce:	f7f9 fe9d 	bl	8000a0c <__aeabi_dcmpun>
 8006cd2:	bb68      	cbnz	r0, 8006d30 <_printf_float+0xb8>
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	4ba2      	ldr	r3, [pc, #648]	; (8006f64 <_printf_float+0x2ec>)
 8006cda:	4638      	mov	r0, r7
 8006cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cde:	f7f9 fe77 	bl	80009d0 <__aeabi_dcmple>
 8006ce2:	bb28      	cbnz	r0, 8006d30 <_printf_float+0xb8>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4638      	mov	r0, r7
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 fe66 	bl	80009bc <__aeabi_dcmplt>
 8006cf0:	b110      	cbz	r0, 8006cf8 <_printf_float+0x80>
 8006cf2:	232d      	movs	r3, #45	; 0x2d
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	4f9b      	ldr	r7, [pc, #620]	; (8006f68 <_printf_float+0x2f0>)
 8006cfa:	4b9c      	ldr	r3, [pc, #624]	; (8006f6c <_printf_float+0x2f4>)
 8006cfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d00:	bf98      	it	ls
 8006d02:	461f      	movls	r7, r3
 8006d04:	2303      	movs	r3, #3
 8006d06:	f04f 0900 	mov.w	r9, #0
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	f02a 0304 	bic.w	r3, sl, #4
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	9600      	str	r6, [sp, #0]
 8006d14:	465b      	mov	r3, fp
 8006d16:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d18:	4621      	mov	r1, r4
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 f9e2 	bl	80070e4 <_printf_common>
 8006d20:	3001      	adds	r0, #1
 8006d22:	f040 8090 	bne.w	8006e46 <_printf_float+0x1ce>
 8006d26:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2a:	b011      	add	sp, #68	; 0x44
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	463a      	mov	r2, r7
 8006d32:	464b      	mov	r3, r9
 8006d34:	4638      	mov	r0, r7
 8006d36:	4649      	mov	r1, r9
 8006d38:	f7f9 fe68 	bl	8000a0c <__aeabi_dcmpun>
 8006d3c:	b110      	cbz	r0, 8006d44 <_printf_float+0xcc>
 8006d3e:	4f8c      	ldr	r7, [pc, #560]	; (8006f70 <_printf_float+0x2f8>)
 8006d40:	4b8c      	ldr	r3, [pc, #560]	; (8006f74 <_printf_float+0x2fc>)
 8006d42:	e7db      	b.n	8006cfc <_printf_float+0x84>
 8006d44:	6863      	ldr	r3, [r4, #4]
 8006d46:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	a80d      	add	r0, sp, #52	; 0x34
 8006d4e:	a90e      	add	r1, sp, #56	; 0x38
 8006d50:	d140      	bne.n	8006dd4 <_printf_float+0x15c>
 8006d52:	2306      	movs	r3, #6
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	f04f 0c00 	mov.w	ip, #0
 8006d5a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006d5e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	6022      	str	r2, [r4, #0]
 8006d66:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	463a      	mov	r2, r7
 8006d6e:	464b      	mov	r3, r9
 8006d70:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7ff feee 	bl	8006b56 <__cvt>
 8006d7a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006d7e:	2b47      	cmp	r3, #71	; 0x47
 8006d80:	4607      	mov	r7, r0
 8006d82:	d109      	bne.n	8006d98 <_printf_float+0x120>
 8006d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d86:	1cd8      	adds	r0, r3, #3
 8006d88:	db02      	blt.n	8006d90 <_printf_float+0x118>
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	dd47      	ble.n	8006e20 <_printf_float+0x1a8>
 8006d90:	f1a8 0802 	sub.w	r8, r8, #2
 8006d94:	fa5f f888 	uxtb.w	r8, r8
 8006d98:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006d9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d9e:	d824      	bhi.n	8006dea <_printf_float+0x172>
 8006da0:	3901      	subs	r1, #1
 8006da2:	4642      	mov	r2, r8
 8006da4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006da8:	910d      	str	r1, [sp, #52]	; 0x34
 8006daa:	f7ff ff30 	bl	8006c0e <__exponent>
 8006dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006db0:	4681      	mov	r9, r0
 8006db2:	1813      	adds	r3, r2, r0
 8006db4:	2a01      	cmp	r2, #1
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	dc02      	bgt.n	8006dc0 <_printf_float+0x148>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	07d1      	lsls	r1, r2, #31
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_float+0x14c>
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0a2      	beq.n	8006d12 <_printf_float+0x9a>
 8006dcc:	232d      	movs	r3, #45	; 0x2d
 8006dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd2:	e79e      	b.n	8006d12 <_printf_float+0x9a>
 8006dd4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006dd8:	f000 816e 	beq.w	80070b8 <_printf_float+0x440>
 8006ddc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006de0:	d1b9      	bne.n	8006d56 <_printf_float+0xde>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1b7      	bne.n	8006d56 <_printf_float+0xde>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e7b4      	b.n	8006d54 <_printf_float+0xdc>
 8006dea:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006dee:	d119      	bne.n	8006e24 <_printf_float+0x1ac>
 8006df0:	2900      	cmp	r1, #0
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	dd0c      	ble.n	8006e10 <_printf_float+0x198>
 8006df6:	6121      	str	r1, [r4, #16]
 8006df8:	b913      	cbnz	r3, 8006e00 <_printf_float+0x188>
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	07d2      	lsls	r2, r2, #31
 8006dfe:	d502      	bpl.n	8006e06 <_printf_float+0x18e>
 8006e00:	3301      	adds	r3, #1
 8006e02:	440b      	add	r3, r1
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e08:	f04f 0900 	mov.w	r9, #0
 8006e0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e0e:	e7d9      	b.n	8006dc4 <_printf_float+0x14c>
 8006e10:	b913      	cbnz	r3, 8006e18 <_printf_float+0x1a0>
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	07d0      	lsls	r0, r2, #31
 8006e16:	d501      	bpl.n	8006e1c <_printf_float+0x1a4>
 8006e18:	3302      	adds	r3, #2
 8006e1a:	e7f3      	b.n	8006e04 <_printf_float+0x18c>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e7f1      	b.n	8006e04 <_printf_float+0x18c>
 8006e20:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006e24:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	db05      	blt.n	8006e38 <_printf_float+0x1c0>
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	07d1      	lsls	r1, r2, #31
 8006e32:	d5e8      	bpl.n	8006e06 <_printf_float+0x18e>
 8006e34:	3301      	adds	r3, #1
 8006e36:	e7e5      	b.n	8006e04 <_printf_float+0x18c>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfcc      	ite	gt
 8006e3c:	2301      	movgt	r3, #1
 8006e3e:	f1c3 0302 	rsble	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	e7de      	b.n	8006e04 <_printf_float+0x18c>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	055a      	lsls	r2, r3, #21
 8006e4a:	d407      	bmi.n	8006e5c <_printf_float+0x1e4>
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4659      	mov	r1, fp
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b0      	blx	r6
 8006e56:	3001      	adds	r0, #1
 8006e58:	d129      	bne.n	8006eae <_printf_float+0x236>
 8006e5a:	e764      	b.n	8006d26 <_printf_float+0xae>
 8006e5c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006e60:	f240 80d7 	bls.w	8007012 <_printf_float+0x39a>
 8006e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f7f9 fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8006e70:	b388      	cbz	r0, 8006ed6 <_printf_float+0x25e>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <_printf_float+0x300>)
 8006e76:	4659      	mov	r1, fp
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b0      	blx	r6
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f af52 	beq.w	8006d26 <_printf_float+0xae>
 8006e82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e86:	429a      	cmp	r2, r3
 8006e88:	db02      	blt.n	8006e90 <_printf_float+0x218>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	07d8      	lsls	r0, r3, #31
 8006e8e:	d50e      	bpl.n	8006eae <_printf_float+0x236>
 8006e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e94:	4659      	mov	r1, fp
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b0      	blx	r6
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f af43 	beq.w	8006d26 <_printf_float+0xae>
 8006ea0:	2700      	movs	r7, #0
 8006ea2:	f104 081a 	add.w	r8, r4, #26
 8006ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	42bb      	cmp	r3, r7
 8006eac:	dc09      	bgt.n	8006ec2 <_printf_float+0x24a>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	079f      	lsls	r7, r3, #30
 8006eb2:	f100 80fd 	bmi.w	80070b0 <_printf_float+0x438>
 8006eb6:	68e0      	ldr	r0, [r4, #12]
 8006eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	bfb8      	it	lt
 8006ebe:	4618      	movlt	r0, r3
 8006ec0:	e733      	b.n	8006d2a <_printf_float+0xb2>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b0      	blx	r6
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f af2a 	beq.w	8006d26 <_printf_float+0xae>
 8006ed2:	3701      	adds	r7, #1
 8006ed4:	e7e7      	b.n	8006ea6 <_printf_float+0x22e>
 8006ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dc2b      	bgt.n	8006f34 <_printf_float+0x2bc>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4a26      	ldr	r2, [pc, #152]	; (8006f78 <_printf_float+0x300>)
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b0      	blx	r6
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f af1d 	beq.w	8006d26 <_printf_float+0xae>
 8006eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eee:	b923      	cbnz	r3, 8006efa <_printf_float+0x282>
 8006ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef2:	b913      	cbnz	r3, 8006efa <_printf_float+0x282>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	07d9      	lsls	r1, r3, #31
 8006ef8:	d5d9      	bpl.n	8006eae <_printf_float+0x236>
 8006efa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006efe:	4659      	mov	r1, fp
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b0      	blx	r6
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f af0e 	beq.w	8006d26 <_printf_float+0xae>
 8006f0a:	f04f 0800 	mov.w	r8, #0
 8006f0e:	f104 091a 	add.w	r9, r4, #26
 8006f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f14:	425b      	negs	r3, r3
 8006f16:	4543      	cmp	r3, r8
 8006f18:	dc01      	bgt.n	8006f1e <_printf_float+0x2a6>
 8006f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f1c:	e797      	b.n	8006e4e <_printf_float+0x1d6>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	464a      	mov	r2, r9
 8006f22:	4659      	mov	r1, fp
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b0      	blx	r6
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f aefc 	beq.w	8006d26 <_printf_float+0xae>
 8006f2e:	f108 0801 	add.w	r8, r8, #1
 8006f32:	e7ee      	b.n	8006f12 <_printf_float+0x29a>
 8006f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	bfa8      	it	ge
 8006f3c:	461a      	movge	r2, r3
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	4690      	mov	r8, r2
 8006f42:	dd07      	ble.n	8006f54 <_printf_float+0x2dc>
 8006f44:	4613      	mov	r3, r2
 8006f46:	4659      	mov	r1, fp
 8006f48:	463a      	mov	r2, r7
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b0      	blx	r6
 8006f4e:	3001      	adds	r0, #1
 8006f50:	f43f aee9 	beq.w	8006d26 <_printf_float+0xae>
 8006f54:	f104 031a 	add.w	r3, r4, #26
 8006f58:	f04f 0a00 	mov.w	sl, #0
 8006f5c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f62:	e015      	b.n	8006f90 <_printf_float+0x318>
 8006f64:	7fefffff 	.word	0x7fefffff
 8006f68:	08008d30 	.word	0x08008d30
 8006f6c:	08008d2c 	.word	0x08008d2c
 8006f70:	08008d38 	.word	0x08008d38
 8006f74:	08008d34 	.word	0x08008d34
 8006f78:	08008d3c 	.word	0x08008d3c
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f80:	4659      	mov	r1, fp
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b0      	blx	r6
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f aecd 	beq.w	8006d26 <_printf_float+0xae>
 8006f8c:	f10a 0a01 	add.w	sl, sl, #1
 8006f90:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006f94:	eba9 0308 	sub.w	r3, r9, r8
 8006f98:	4553      	cmp	r3, sl
 8006f9a:	dcef      	bgt.n	8006f7c <_printf_float+0x304>
 8006f9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	444f      	add	r7, r9
 8006fa4:	db14      	blt.n	8006fd0 <_printf_float+0x358>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	07da      	lsls	r2, r3, #31
 8006faa:	d411      	bmi.n	8006fd0 <_printf_float+0x358>
 8006fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fb0:	eba3 0209 	sub.w	r2, r3, r9
 8006fb4:	eba3 0901 	sub.w	r9, r3, r1
 8006fb8:	4591      	cmp	r9, r2
 8006fba:	bfa8      	it	ge
 8006fbc:	4691      	movge	r9, r2
 8006fbe:	f1b9 0f00 	cmp.w	r9, #0
 8006fc2:	dc0d      	bgt.n	8006fe0 <_printf_float+0x368>
 8006fc4:	2700      	movs	r7, #0
 8006fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fca:	f104 081a 	add.w	r8, r4, #26
 8006fce:	e018      	b.n	8007002 <_printf_float+0x38a>
 8006fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b0      	blx	r6
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d1e6      	bne.n	8006fac <_printf_float+0x334>
 8006fde:	e6a2      	b.n	8006d26 <_printf_float+0xae>
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b0      	blx	r6
 8006fea:	3001      	adds	r0, #1
 8006fec:	d1ea      	bne.n	8006fc4 <_printf_float+0x34c>
 8006fee:	e69a      	b.n	8006d26 <_printf_float+0xae>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	4642      	mov	r2, r8
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b0      	blx	r6
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f43f ae93 	beq.w	8006d26 <_printf_float+0xae>
 8007000:	3701      	adds	r7, #1
 8007002:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	eba3 0309 	sub.w	r3, r3, r9
 800700c:	42bb      	cmp	r3, r7
 800700e:	dcef      	bgt.n	8006ff0 <_printf_float+0x378>
 8007010:	e74d      	b.n	8006eae <_printf_float+0x236>
 8007012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007014:	2a01      	cmp	r2, #1
 8007016:	dc01      	bgt.n	800701c <_printf_float+0x3a4>
 8007018:	07db      	lsls	r3, r3, #31
 800701a:	d538      	bpl.n	800708e <_printf_float+0x416>
 800701c:	2301      	movs	r3, #1
 800701e:	463a      	mov	r2, r7
 8007020:	4659      	mov	r1, fp
 8007022:	4628      	mov	r0, r5
 8007024:	47b0      	blx	r6
 8007026:	3001      	adds	r0, #1
 8007028:	f43f ae7d 	beq.w	8006d26 <_printf_float+0xae>
 800702c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007030:	4659      	mov	r1, fp
 8007032:	4628      	mov	r0, r5
 8007034:	47b0      	blx	r6
 8007036:	3001      	adds	r0, #1
 8007038:	f107 0701 	add.w	r7, r7, #1
 800703c:	f43f ae73 	beq.w	8006d26 <_printf_float+0xae>
 8007040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007046:	2200      	movs	r2, #0
 8007048:	f103 38ff 	add.w	r8, r3, #4294967295
 800704c:	2300      	movs	r3, #0
 800704e:	f7f9 fcab 	bl	80009a8 <__aeabi_dcmpeq>
 8007052:	b9c0      	cbnz	r0, 8007086 <_printf_float+0x40e>
 8007054:	4643      	mov	r3, r8
 8007056:	463a      	mov	r2, r7
 8007058:	4659      	mov	r1, fp
 800705a:	4628      	mov	r0, r5
 800705c:	47b0      	blx	r6
 800705e:	3001      	adds	r0, #1
 8007060:	d10d      	bne.n	800707e <_printf_float+0x406>
 8007062:	e660      	b.n	8006d26 <_printf_float+0xae>
 8007064:	2301      	movs	r3, #1
 8007066:	4642      	mov	r2, r8
 8007068:	4659      	mov	r1, fp
 800706a:	4628      	mov	r0, r5
 800706c:	47b0      	blx	r6
 800706e:	3001      	adds	r0, #1
 8007070:	f43f ae59 	beq.w	8006d26 <_printf_float+0xae>
 8007074:	3701      	adds	r7, #1
 8007076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007078:	3b01      	subs	r3, #1
 800707a:	42bb      	cmp	r3, r7
 800707c:	dcf2      	bgt.n	8007064 <_printf_float+0x3ec>
 800707e:	464b      	mov	r3, r9
 8007080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007084:	e6e4      	b.n	8006e50 <_printf_float+0x1d8>
 8007086:	2700      	movs	r7, #0
 8007088:	f104 081a 	add.w	r8, r4, #26
 800708c:	e7f3      	b.n	8007076 <_printf_float+0x3fe>
 800708e:	2301      	movs	r3, #1
 8007090:	e7e1      	b.n	8007056 <_printf_float+0x3de>
 8007092:	2301      	movs	r3, #1
 8007094:	4642      	mov	r2, r8
 8007096:	4659      	mov	r1, fp
 8007098:	4628      	mov	r0, r5
 800709a:	47b0      	blx	r6
 800709c:	3001      	adds	r0, #1
 800709e:	f43f ae42 	beq.w	8006d26 <_printf_float+0xae>
 80070a2:	3701      	adds	r7, #1
 80070a4:	68e3      	ldr	r3, [r4, #12]
 80070a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	42bb      	cmp	r3, r7
 80070ac:	dcf1      	bgt.n	8007092 <_printf_float+0x41a>
 80070ae:	e702      	b.n	8006eb6 <_printf_float+0x23e>
 80070b0:	2700      	movs	r7, #0
 80070b2:	f104 0819 	add.w	r8, r4, #25
 80070b6:	e7f5      	b.n	80070a4 <_printf_float+0x42c>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f43f ae94 	beq.w	8006de6 <_printf_float+0x16e>
 80070be:	f04f 0c00 	mov.w	ip, #0
 80070c2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80070c6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80070d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	463a      	mov	r2, r7
 80070d8:	464b      	mov	r3, r9
 80070da:	4628      	mov	r0, r5
 80070dc:	f7ff fd3b 	bl	8006b56 <__cvt>
 80070e0:	4607      	mov	r7, r0
 80070e2:	e64f      	b.n	8006d84 <_printf_float+0x10c>

080070e4 <_printf_common>:
 80070e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	4691      	mov	r9, r2
 80070ea:	461f      	mov	r7, r3
 80070ec:	688a      	ldr	r2, [r1, #8]
 80070ee:	690b      	ldr	r3, [r1, #16]
 80070f0:	4606      	mov	r6, r0
 80070f2:	4293      	cmp	r3, r2
 80070f4:	bfb8      	it	lt
 80070f6:	4613      	movlt	r3, r2
 80070f8:	f8c9 3000 	str.w	r3, [r9]
 80070fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007100:	460c      	mov	r4, r1
 8007102:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007106:	b112      	cbz	r2, 800710e <_printf_common+0x2a>
 8007108:	3301      	adds	r3, #1
 800710a:	f8c9 3000 	str.w	r3, [r9]
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	0699      	lsls	r1, r3, #26
 8007112:	bf42      	ittt	mi
 8007114:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007118:	3302      	addmi	r3, #2
 800711a:	f8c9 3000 	strmi.w	r3, [r9]
 800711e:	6825      	ldr	r5, [r4, #0]
 8007120:	f015 0506 	ands.w	r5, r5, #6
 8007124:	d107      	bne.n	8007136 <_printf_common+0x52>
 8007126:	f104 0a19 	add.w	sl, r4, #25
 800712a:	68e3      	ldr	r3, [r4, #12]
 800712c:	f8d9 2000 	ldr.w	r2, [r9]
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	42ab      	cmp	r3, r5
 8007134:	dc29      	bgt.n	800718a <_printf_common+0xa6>
 8007136:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	3300      	adds	r3, #0
 800713e:	bf18      	it	ne
 8007140:	2301      	movne	r3, #1
 8007142:	0692      	lsls	r2, r2, #26
 8007144:	d42e      	bmi.n	80071a4 <_printf_common+0xc0>
 8007146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800714a:	4639      	mov	r1, r7
 800714c:	4630      	mov	r0, r6
 800714e:	47c0      	blx	r8
 8007150:	3001      	adds	r0, #1
 8007152:	d021      	beq.n	8007198 <_printf_common+0xb4>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	68e5      	ldr	r5, [r4, #12]
 8007158:	f003 0306 	and.w	r3, r3, #6
 800715c:	2b04      	cmp	r3, #4
 800715e:	bf18      	it	ne
 8007160:	2500      	movne	r5, #0
 8007162:	f8d9 2000 	ldr.w	r2, [r9]
 8007166:	f04f 0900 	mov.w	r9, #0
 800716a:	bf08      	it	eq
 800716c:	1aad      	subeq	r5, r5, r2
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	bf08      	it	eq
 8007174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007178:	4293      	cmp	r3, r2
 800717a:	bfc4      	itt	gt
 800717c:	1a9b      	subgt	r3, r3, r2
 800717e:	18ed      	addgt	r5, r5, r3
 8007180:	341a      	adds	r4, #26
 8007182:	454d      	cmp	r5, r9
 8007184:	d11a      	bne.n	80071bc <_printf_common+0xd8>
 8007186:	2000      	movs	r0, #0
 8007188:	e008      	b.n	800719c <_printf_common+0xb8>
 800718a:	2301      	movs	r3, #1
 800718c:	4652      	mov	r2, sl
 800718e:	4639      	mov	r1, r7
 8007190:	4630      	mov	r0, r6
 8007192:	47c0      	blx	r8
 8007194:	3001      	adds	r0, #1
 8007196:	d103      	bne.n	80071a0 <_printf_common+0xbc>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	3501      	adds	r5, #1
 80071a2:	e7c2      	b.n	800712a <_printf_common+0x46>
 80071a4:	2030      	movs	r0, #48	; 0x30
 80071a6:	18e1      	adds	r1, r4, r3
 80071a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b2:	4422      	add	r2, r4
 80071b4:	3302      	adds	r3, #2
 80071b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071ba:	e7c4      	b.n	8007146 <_printf_common+0x62>
 80071bc:	2301      	movs	r3, #1
 80071be:	4622      	mov	r2, r4
 80071c0:	4639      	mov	r1, r7
 80071c2:	4630      	mov	r0, r6
 80071c4:	47c0      	blx	r8
 80071c6:	3001      	adds	r0, #1
 80071c8:	d0e6      	beq.n	8007198 <_printf_common+0xb4>
 80071ca:	f109 0901 	add.w	r9, r9, #1
 80071ce:	e7d8      	b.n	8007182 <_printf_common+0x9e>

080071d0 <_printf_i>:
 80071d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071d8:	460c      	mov	r4, r1
 80071da:	7e09      	ldrb	r1, [r1, #24]
 80071dc:	b085      	sub	sp, #20
 80071de:	296e      	cmp	r1, #110	; 0x6e
 80071e0:	4617      	mov	r7, r2
 80071e2:	4606      	mov	r6, r0
 80071e4:	4698      	mov	r8, r3
 80071e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e8:	f000 80b3 	beq.w	8007352 <_printf_i+0x182>
 80071ec:	d822      	bhi.n	8007234 <_printf_i+0x64>
 80071ee:	2963      	cmp	r1, #99	; 0x63
 80071f0:	d036      	beq.n	8007260 <_printf_i+0x90>
 80071f2:	d80a      	bhi.n	800720a <_printf_i+0x3a>
 80071f4:	2900      	cmp	r1, #0
 80071f6:	f000 80b9 	beq.w	800736c <_printf_i+0x19c>
 80071fa:	2958      	cmp	r1, #88	; 0x58
 80071fc:	f000 8083 	beq.w	8007306 <_printf_i+0x136>
 8007200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007204:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007208:	e032      	b.n	8007270 <_printf_i+0xa0>
 800720a:	2964      	cmp	r1, #100	; 0x64
 800720c:	d001      	beq.n	8007212 <_printf_i+0x42>
 800720e:	2969      	cmp	r1, #105	; 0x69
 8007210:	d1f6      	bne.n	8007200 <_printf_i+0x30>
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	0605      	lsls	r5, r0, #24
 8007218:	f103 0104 	add.w	r1, r3, #4
 800721c:	d52a      	bpl.n	8007274 <_printf_i+0xa4>
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6011      	str	r1, [r2, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	da03      	bge.n	800722e <_printf_i+0x5e>
 8007226:	222d      	movs	r2, #45	; 0x2d
 8007228:	425b      	negs	r3, r3
 800722a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800722e:	486f      	ldr	r0, [pc, #444]	; (80073ec <_printf_i+0x21c>)
 8007230:	220a      	movs	r2, #10
 8007232:	e039      	b.n	80072a8 <_printf_i+0xd8>
 8007234:	2973      	cmp	r1, #115	; 0x73
 8007236:	f000 809d 	beq.w	8007374 <_printf_i+0x1a4>
 800723a:	d808      	bhi.n	800724e <_printf_i+0x7e>
 800723c:	296f      	cmp	r1, #111	; 0x6f
 800723e:	d020      	beq.n	8007282 <_printf_i+0xb2>
 8007240:	2970      	cmp	r1, #112	; 0x70
 8007242:	d1dd      	bne.n	8007200 <_printf_i+0x30>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	f043 0320 	orr.w	r3, r3, #32
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	e003      	b.n	8007256 <_printf_i+0x86>
 800724e:	2975      	cmp	r1, #117	; 0x75
 8007250:	d017      	beq.n	8007282 <_printf_i+0xb2>
 8007252:	2978      	cmp	r1, #120	; 0x78
 8007254:	d1d4      	bne.n	8007200 <_printf_i+0x30>
 8007256:	2378      	movs	r3, #120	; 0x78
 8007258:	4865      	ldr	r0, [pc, #404]	; (80073f0 <_printf_i+0x220>)
 800725a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800725e:	e055      	b.n	800730c <_printf_i+0x13c>
 8007260:	6813      	ldr	r3, [r2, #0]
 8007262:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007266:	1d19      	adds	r1, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6011      	str	r1, [r2, #0]
 800726c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007270:	2301      	movs	r3, #1
 8007272:	e08c      	b.n	800738e <_printf_i+0x1be>
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f010 0f40 	tst.w	r0, #64	; 0x40
 800727a:	6011      	str	r1, [r2, #0]
 800727c:	bf18      	it	ne
 800727e:	b21b      	sxthne	r3, r3
 8007280:	e7cf      	b.n	8007222 <_printf_i+0x52>
 8007282:	6813      	ldr	r3, [r2, #0]
 8007284:	6825      	ldr	r5, [r4, #0]
 8007286:	1d18      	adds	r0, r3, #4
 8007288:	6010      	str	r0, [r2, #0]
 800728a:	0628      	lsls	r0, r5, #24
 800728c:	d501      	bpl.n	8007292 <_printf_i+0xc2>
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	e002      	b.n	8007298 <_printf_i+0xc8>
 8007292:	0668      	lsls	r0, r5, #25
 8007294:	d5fb      	bpl.n	800728e <_printf_i+0xbe>
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	296f      	cmp	r1, #111	; 0x6f
 800729a:	bf14      	ite	ne
 800729c:	220a      	movne	r2, #10
 800729e:	2208      	moveq	r2, #8
 80072a0:	4852      	ldr	r0, [pc, #328]	; (80073ec <_printf_i+0x21c>)
 80072a2:	2100      	movs	r1, #0
 80072a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072a8:	6865      	ldr	r5, [r4, #4]
 80072aa:	2d00      	cmp	r5, #0
 80072ac:	60a5      	str	r5, [r4, #8]
 80072ae:	f2c0 8095 	blt.w	80073dc <_printf_i+0x20c>
 80072b2:	6821      	ldr	r1, [r4, #0]
 80072b4:	f021 0104 	bic.w	r1, r1, #4
 80072b8:	6021      	str	r1, [r4, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d13d      	bne.n	800733a <_printf_i+0x16a>
 80072be:	2d00      	cmp	r5, #0
 80072c0:	f040 808e 	bne.w	80073e0 <_printf_i+0x210>
 80072c4:	4665      	mov	r5, ip
 80072c6:	2a08      	cmp	r2, #8
 80072c8:	d10b      	bne.n	80072e2 <_printf_i+0x112>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	07db      	lsls	r3, r3, #31
 80072ce:	d508      	bpl.n	80072e2 <_printf_i+0x112>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	6862      	ldr	r2, [r4, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	bfde      	ittt	le
 80072d8:	2330      	movle	r3, #48	; 0x30
 80072da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072e2:	ebac 0305 	sub.w	r3, ip, r5
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	f8cd 8000 	str.w	r8, [sp]
 80072ec:	463b      	mov	r3, r7
 80072ee:	aa03      	add	r2, sp, #12
 80072f0:	4621      	mov	r1, r4
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff fef6 	bl	80070e4 <_printf_common>
 80072f8:	3001      	adds	r0, #1
 80072fa:	d14d      	bne.n	8007398 <_printf_i+0x1c8>
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	b005      	add	sp, #20
 8007302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007306:	4839      	ldr	r0, [pc, #228]	; (80073ec <_printf_i+0x21c>)
 8007308:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800730c:	6813      	ldr	r3, [r2, #0]
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	1d1d      	adds	r5, r3, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6015      	str	r5, [r2, #0]
 8007316:	060a      	lsls	r2, r1, #24
 8007318:	d50b      	bpl.n	8007332 <_printf_i+0x162>
 800731a:	07ca      	lsls	r2, r1, #31
 800731c:	bf44      	itt	mi
 800731e:	f041 0120 	orrmi.w	r1, r1, #32
 8007322:	6021      	strmi	r1, [r4, #0]
 8007324:	b91b      	cbnz	r3, 800732e <_printf_i+0x15e>
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	f022 0220 	bic.w	r2, r2, #32
 800732c:	6022      	str	r2, [r4, #0]
 800732e:	2210      	movs	r2, #16
 8007330:	e7b7      	b.n	80072a2 <_printf_i+0xd2>
 8007332:	064d      	lsls	r5, r1, #25
 8007334:	bf48      	it	mi
 8007336:	b29b      	uxthmi	r3, r3
 8007338:	e7ef      	b.n	800731a <_printf_i+0x14a>
 800733a:	4665      	mov	r5, ip
 800733c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007340:	fb02 3311 	mls	r3, r2, r1, r3
 8007344:	5cc3      	ldrb	r3, [r0, r3]
 8007346:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800734a:	460b      	mov	r3, r1
 800734c:	2900      	cmp	r1, #0
 800734e:	d1f5      	bne.n	800733c <_printf_i+0x16c>
 8007350:	e7b9      	b.n	80072c6 <_printf_i+0xf6>
 8007352:	6813      	ldr	r3, [r2, #0]
 8007354:	6825      	ldr	r5, [r4, #0]
 8007356:	1d18      	adds	r0, r3, #4
 8007358:	6961      	ldr	r1, [r4, #20]
 800735a:	6010      	str	r0, [r2, #0]
 800735c:	0628      	lsls	r0, r5, #24
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	d501      	bpl.n	8007366 <_printf_i+0x196>
 8007362:	6019      	str	r1, [r3, #0]
 8007364:	e002      	b.n	800736c <_printf_i+0x19c>
 8007366:	066a      	lsls	r2, r5, #25
 8007368:	d5fb      	bpl.n	8007362 <_printf_i+0x192>
 800736a:	8019      	strh	r1, [r3, #0]
 800736c:	2300      	movs	r3, #0
 800736e:	4665      	mov	r5, ip
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	e7b9      	b.n	80072e8 <_printf_i+0x118>
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	1d19      	adds	r1, r3, #4
 8007378:	6011      	str	r1, [r2, #0]
 800737a:	681d      	ldr	r5, [r3, #0]
 800737c:	6862      	ldr	r2, [r4, #4]
 800737e:	2100      	movs	r1, #0
 8007380:	4628      	mov	r0, r5
 8007382:	f000 feaf 	bl	80080e4 <memchr>
 8007386:	b108      	cbz	r0, 800738c <_printf_i+0x1bc>
 8007388:	1b40      	subs	r0, r0, r5
 800738a:	6060      	str	r0, [r4, #4]
 800738c:	6863      	ldr	r3, [r4, #4]
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	2300      	movs	r3, #0
 8007392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007396:	e7a7      	b.n	80072e8 <_printf_i+0x118>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	462a      	mov	r2, r5
 800739c:	4639      	mov	r1, r7
 800739e:	4630      	mov	r0, r6
 80073a0:	47c0      	blx	r8
 80073a2:	3001      	adds	r0, #1
 80073a4:	d0aa      	beq.n	80072fc <_printf_i+0x12c>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	079b      	lsls	r3, r3, #30
 80073aa:	d413      	bmi.n	80073d4 <_printf_i+0x204>
 80073ac:	68e0      	ldr	r0, [r4, #12]
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	4298      	cmp	r0, r3
 80073b2:	bfb8      	it	lt
 80073b4:	4618      	movlt	r0, r3
 80073b6:	e7a3      	b.n	8007300 <_printf_i+0x130>
 80073b8:	2301      	movs	r3, #1
 80073ba:	464a      	mov	r2, r9
 80073bc:	4639      	mov	r1, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	47c0      	blx	r8
 80073c2:	3001      	adds	r0, #1
 80073c4:	d09a      	beq.n	80072fc <_printf_i+0x12c>
 80073c6:	3501      	adds	r5, #1
 80073c8:	68e3      	ldr	r3, [r4, #12]
 80073ca:	9a03      	ldr	r2, [sp, #12]
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	42ab      	cmp	r3, r5
 80073d0:	dcf2      	bgt.n	80073b8 <_printf_i+0x1e8>
 80073d2:	e7eb      	b.n	80073ac <_printf_i+0x1dc>
 80073d4:	2500      	movs	r5, #0
 80073d6:	f104 0919 	add.w	r9, r4, #25
 80073da:	e7f5      	b.n	80073c8 <_printf_i+0x1f8>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1ac      	bne.n	800733a <_printf_i+0x16a>
 80073e0:	7803      	ldrb	r3, [r0, #0]
 80073e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073ea:	e76c      	b.n	80072c6 <_printf_i+0xf6>
 80073ec:	08008d3e 	.word	0x08008d3e
 80073f0:	08008d4f 	.word	0x08008d4f

080073f4 <siprintf>:
 80073f4:	b40e      	push	{r1, r2, r3}
 80073f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073fa:	b500      	push	{lr}
 80073fc:	b09c      	sub	sp, #112	; 0x70
 80073fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007400:	9002      	str	r0, [sp, #8]
 8007402:	9006      	str	r0, [sp, #24]
 8007404:	9107      	str	r1, [sp, #28]
 8007406:	9104      	str	r1, [sp, #16]
 8007408:	4808      	ldr	r0, [pc, #32]	; (800742c <siprintf+0x38>)
 800740a:	4909      	ldr	r1, [pc, #36]	; (8007430 <siprintf+0x3c>)
 800740c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007410:	9105      	str	r1, [sp, #20]
 8007412:	6800      	ldr	r0, [r0, #0]
 8007414:	a902      	add	r1, sp, #8
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	f001 fa5c 	bl	80088d4 <_svfiprintf_r>
 800741c:	2200      	movs	r2, #0
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	b01c      	add	sp, #112	; 0x70
 8007424:	f85d eb04 	ldr.w	lr, [sp], #4
 8007428:	b003      	add	sp, #12
 800742a:	4770      	bx	lr
 800742c:	20000010 	.word	0x20000010
 8007430:	ffff0208 	.word	0xffff0208

08007434 <quorem>:
 8007434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	6903      	ldr	r3, [r0, #16]
 800743a:	690c      	ldr	r4, [r1, #16]
 800743c:	4680      	mov	r8, r0
 800743e:	42a3      	cmp	r3, r4
 8007440:	f2c0 8084 	blt.w	800754c <quorem+0x118>
 8007444:	3c01      	subs	r4, #1
 8007446:	f101 0714 	add.w	r7, r1, #20
 800744a:	f100 0614 	add.w	r6, r0, #20
 800744e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007452:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007456:	3501      	adds	r5, #1
 8007458:	fbb0 f5f5 	udiv	r5, r0, r5
 800745c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007460:	eb06 030c 	add.w	r3, r6, ip
 8007464:	eb07 090c 	add.w	r9, r7, ip
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	b39d      	cbz	r5, 80074d4 <quorem+0xa0>
 800746c:	f04f 0a00 	mov.w	sl, #0
 8007470:	4638      	mov	r0, r7
 8007472:	46b6      	mov	lr, r6
 8007474:	46d3      	mov	fp, sl
 8007476:	f850 2b04 	ldr.w	r2, [r0], #4
 800747a:	b293      	uxth	r3, r2
 800747c:	fb05 a303 	mla	r3, r5, r3, sl
 8007480:	0c12      	lsrs	r2, r2, #16
 8007482:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007486:	fb05 a202 	mla	r2, r5, r2, sl
 800748a:	b29b      	uxth	r3, r3
 800748c:	ebab 0303 	sub.w	r3, fp, r3
 8007490:	f8de b000 	ldr.w	fp, [lr]
 8007494:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007498:	fa1f fb8b 	uxth.w	fp, fp
 800749c:	445b      	add	r3, fp
 800749e:	fa1f fb82 	uxth.w	fp, r2
 80074a2:	f8de 2000 	ldr.w	r2, [lr]
 80074a6:	4581      	cmp	r9, r0
 80074a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80074ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074b6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80074ba:	f84e 3b04 	str.w	r3, [lr], #4
 80074be:	d2da      	bcs.n	8007476 <quorem+0x42>
 80074c0:	f856 300c 	ldr.w	r3, [r6, ip]
 80074c4:	b933      	cbnz	r3, 80074d4 <quorem+0xa0>
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	3b04      	subs	r3, #4
 80074ca:	429e      	cmp	r6, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	d331      	bcc.n	8007534 <quorem+0x100>
 80074d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80074d4:	4640      	mov	r0, r8
 80074d6:	f001 f827 	bl	8008528 <__mcmp>
 80074da:	2800      	cmp	r0, #0
 80074dc:	db26      	blt.n	800752c <quorem+0xf8>
 80074de:	4630      	mov	r0, r6
 80074e0:	f04f 0c00 	mov.w	ip, #0
 80074e4:	3501      	adds	r5, #1
 80074e6:	f857 1b04 	ldr.w	r1, [r7], #4
 80074ea:	f8d0 e000 	ldr.w	lr, [r0]
 80074ee:	b28b      	uxth	r3, r1
 80074f0:	ebac 0303 	sub.w	r3, ip, r3
 80074f4:	fa1f f28e 	uxth.w	r2, lr
 80074f8:	4413      	add	r3, r2
 80074fa:	0c0a      	lsrs	r2, r1, #16
 80074fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007504:	b29b      	uxth	r3, r3
 8007506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800750a:	45b9      	cmp	r9, r7
 800750c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007510:	f840 3b04 	str.w	r3, [r0], #4
 8007514:	d2e7      	bcs.n	80074e6 <quorem+0xb2>
 8007516:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800751a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800751e:	b92a      	cbnz	r2, 800752c <quorem+0xf8>
 8007520:	3b04      	subs	r3, #4
 8007522:	429e      	cmp	r6, r3
 8007524:	461a      	mov	r2, r3
 8007526:	d30b      	bcc.n	8007540 <quorem+0x10c>
 8007528:	f8c8 4010 	str.w	r4, [r8, #16]
 800752c:	4628      	mov	r0, r5
 800752e:	b003      	add	sp, #12
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	3b04      	subs	r3, #4
 8007538:	2a00      	cmp	r2, #0
 800753a:	d1c9      	bne.n	80074d0 <quorem+0x9c>
 800753c:	3c01      	subs	r4, #1
 800753e:	e7c4      	b.n	80074ca <quorem+0x96>
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	3b04      	subs	r3, #4
 8007544:	2a00      	cmp	r2, #0
 8007546:	d1ef      	bne.n	8007528 <quorem+0xf4>
 8007548:	3c01      	subs	r4, #1
 800754a:	e7ea      	b.n	8007522 <quorem+0xee>
 800754c:	2000      	movs	r0, #0
 800754e:	e7ee      	b.n	800752e <quorem+0xfa>

08007550 <_dtoa_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	4616      	mov	r6, r2
 8007556:	461f      	mov	r7, r3
 8007558:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800755a:	b095      	sub	sp, #84	; 0x54
 800755c:	4604      	mov	r4, r0
 800755e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007562:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007566:	b93d      	cbnz	r5, 8007578 <_dtoa_r+0x28>
 8007568:	2010      	movs	r0, #16
 800756a:	f000 fdb3 	bl	80080d4 <malloc>
 800756e:	6260      	str	r0, [r4, #36]	; 0x24
 8007570:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007574:	6005      	str	r5, [r0, #0]
 8007576:	60c5      	str	r5, [r0, #12]
 8007578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	b151      	cbz	r1, 8007594 <_dtoa_r+0x44>
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	2301      	movs	r3, #1
 8007582:	4093      	lsls	r3, r2
 8007584:	604a      	str	r2, [r1, #4]
 8007586:	608b      	str	r3, [r1, #8]
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fded 	bl	8008168 <_Bfree>
 800758e:	2200      	movs	r2, #0
 8007590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	1e3b      	subs	r3, r7, #0
 8007596:	bfaf      	iteee	ge
 8007598:	2300      	movge	r3, #0
 800759a:	2201      	movlt	r2, #1
 800759c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80075a0:	9303      	strlt	r3, [sp, #12]
 80075a2:	bfac      	ite	ge
 80075a4:	f8c8 3000 	strge.w	r3, [r8]
 80075a8:	f8c8 2000 	strlt.w	r2, [r8]
 80075ac:	4bae      	ldr	r3, [pc, #696]	; (8007868 <_dtoa_r+0x318>)
 80075ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075b2:	ea33 0308 	bics.w	r3, r3, r8
 80075b6:	d11b      	bne.n	80075f0 <_dtoa_r+0xa0>
 80075b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80075bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	b923      	cbnz	r3, 80075ce <_dtoa_r+0x7e>
 80075c4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f000 8545 	beq.w	8008058 <_dtoa_r+0xb08>
 80075ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075d0:	b953      	cbnz	r3, 80075e8 <_dtoa_r+0x98>
 80075d2:	4ba6      	ldr	r3, [pc, #664]	; (800786c <_dtoa_r+0x31c>)
 80075d4:	e021      	b.n	800761a <_dtoa_r+0xca>
 80075d6:	4ba6      	ldr	r3, [pc, #664]	; (8007870 <_dtoa_r+0x320>)
 80075d8:	9306      	str	r3, [sp, #24]
 80075da:	3308      	adds	r3, #8
 80075dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	9806      	ldr	r0, [sp, #24]
 80075e2:	b015      	add	sp, #84	; 0x54
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	4ba0      	ldr	r3, [pc, #640]	; (800786c <_dtoa_r+0x31c>)
 80075ea:	9306      	str	r3, [sp, #24]
 80075ec:	3303      	adds	r3, #3
 80075ee:	e7f5      	b.n	80075dc <_dtoa_r+0x8c>
 80075f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8007600:	4682      	mov	sl, r0
 8007602:	b160      	cbz	r0, 800761e <_dtoa_r+0xce>
 8007604:	2301      	movs	r3, #1
 8007606:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8520 	beq.w	8008052 <_dtoa_r+0xb02>
 8007612:	4b98      	ldr	r3, [pc, #608]	; (8007874 <_dtoa_r+0x324>)
 8007614:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	3b01      	subs	r3, #1
 800761a:	9306      	str	r3, [sp, #24]
 800761c:	e7e0      	b.n	80075e0 <_dtoa_r+0x90>
 800761e:	ab12      	add	r3, sp, #72	; 0x48
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	ab13      	add	r3, sp, #76	; 0x4c
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4632      	mov	r2, r6
 8007628:	463b      	mov	r3, r7
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fff4 	bl	8008618 <__d2b>
 8007630:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007634:	4683      	mov	fp, r0
 8007636:	2d00      	cmp	r5, #0
 8007638:	d07d      	beq.n	8007736 <_dtoa_r+0x1e6>
 800763a:	46b0      	mov	r8, r6
 800763c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007640:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007644:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007648:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800764c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007650:	2200      	movs	r2, #0
 8007652:	4b89      	ldr	r3, [pc, #548]	; (8007878 <_dtoa_r+0x328>)
 8007654:	4640      	mov	r0, r8
 8007656:	4649      	mov	r1, r9
 8007658:	f7f8 fd86 	bl	8000168 <__aeabi_dsub>
 800765c:	a37c      	add	r3, pc, #496	; (adr r3, 8007850 <_dtoa_r+0x300>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f8 ff39 	bl	80004d8 <__aeabi_dmul>
 8007666:	a37c      	add	r3, pc, #496	; (adr r3, 8007858 <_dtoa_r+0x308>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 fd7e 	bl	800016c <__adddf3>
 8007670:	4606      	mov	r6, r0
 8007672:	4628      	mov	r0, r5
 8007674:	460f      	mov	r7, r1
 8007676:	f7f8 fec5 	bl	8000404 <__aeabi_i2d>
 800767a:	a379      	add	r3, pc, #484	; (adr r3, 8007860 <_dtoa_r+0x310>)
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f7f8 ff2a 	bl	80004d8 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f8 fd6e 	bl	800016c <__adddf3>
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	f7f9 f9d0 	bl	8000a38 <__aeabi_d2iz>
 8007698:	2200      	movs	r2, #0
 800769a:	4682      	mov	sl, r0
 800769c:	2300      	movs	r3, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 f98b 	bl	80009bc <__aeabi_dcmplt>
 80076a6:	b148      	cbz	r0, 80076bc <_dtoa_r+0x16c>
 80076a8:	4650      	mov	r0, sl
 80076aa:	f7f8 feab 	bl	8000404 <__aeabi_i2d>
 80076ae:	4632      	mov	r2, r6
 80076b0:	463b      	mov	r3, r7
 80076b2:	f7f9 f979 	bl	80009a8 <__aeabi_dcmpeq>
 80076b6:	b908      	cbnz	r0, 80076bc <_dtoa_r+0x16c>
 80076b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076bc:	f1ba 0f16 	cmp.w	sl, #22
 80076c0:	d85a      	bhi.n	8007778 <_dtoa_r+0x228>
 80076c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c6:	496d      	ldr	r1, [pc, #436]	; (800787c <_dtoa_r+0x32c>)
 80076c8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80076cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d0:	f7f9 f992 	bl	80009f8 <__aeabi_dcmpgt>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d051      	beq.n	800777c <_dtoa_r+0x22c>
 80076d8:	2300      	movs	r3, #0
 80076da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076de:	930d      	str	r3, [sp, #52]	; 0x34
 80076e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076e2:	1b5d      	subs	r5, r3, r5
 80076e4:	1e6b      	subs	r3, r5, #1
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	bf43      	ittte	mi
 80076ea:	2300      	movmi	r3, #0
 80076ec:	f1c5 0901 	rsbmi	r9, r5, #1
 80076f0:	9307      	strmi	r3, [sp, #28]
 80076f2:	f04f 0900 	movpl.w	r9, #0
 80076f6:	f1ba 0f00 	cmp.w	sl, #0
 80076fa:	db41      	blt.n	8007780 <_dtoa_r+0x230>
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007702:	4453      	add	r3, sl
 8007704:	9307      	str	r3, [sp, #28]
 8007706:	2300      	movs	r3, #0
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800770c:	2b09      	cmp	r3, #9
 800770e:	f200 808f 	bhi.w	8007830 <_dtoa_r+0x2e0>
 8007712:	2b05      	cmp	r3, #5
 8007714:	bfc4      	itt	gt
 8007716:	3b04      	subgt	r3, #4
 8007718:	931e      	strgt	r3, [sp, #120]	; 0x78
 800771a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800771c:	bfc8      	it	gt
 800771e:	2500      	movgt	r5, #0
 8007720:	f1a3 0302 	sub.w	r3, r3, #2
 8007724:	bfd8      	it	le
 8007726:	2501      	movle	r5, #1
 8007728:	2b03      	cmp	r3, #3
 800772a:	f200 808d 	bhi.w	8007848 <_dtoa_r+0x2f8>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	7d7b      	.short	0x7d7b
 8007734:	6f2f      	.short	0x6f2f
 8007736:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800773a:	441d      	add	r5, r3
 800773c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007740:	2820      	cmp	r0, #32
 8007742:	dd13      	ble.n	800776c <_dtoa_r+0x21c>
 8007744:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	fa08 f800 	lsl.w	r8, r8, r0
 800774e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007752:	fa23 f000 	lsr.w	r0, r3, r0
 8007756:	ea48 0000 	orr.w	r0, r8, r0
 800775a:	f7f8 fe43 	bl	80003e4 <__aeabi_ui2d>
 800775e:	2301      	movs	r3, #1
 8007760:	4680      	mov	r8, r0
 8007762:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007766:	3d01      	subs	r5, #1
 8007768:	9310      	str	r3, [sp, #64]	; 0x40
 800776a:	e771      	b.n	8007650 <_dtoa_r+0x100>
 800776c:	9b02      	ldr	r3, [sp, #8]
 800776e:	f1c0 0020 	rsb	r0, r0, #32
 8007772:	fa03 f000 	lsl.w	r0, r3, r0
 8007776:	e7f0      	b.n	800775a <_dtoa_r+0x20a>
 8007778:	2301      	movs	r3, #1
 800777a:	e7b0      	b.n	80076de <_dtoa_r+0x18e>
 800777c:	900d      	str	r0, [sp, #52]	; 0x34
 800777e:	e7af      	b.n	80076e0 <_dtoa_r+0x190>
 8007780:	f1ca 0300 	rsb	r3, sl, #0
 8007784:	9308      	str	r3, [sp, #32]
 8007786:	2300      	movs	r3, #0
 8007788:	eba9 090a 	sub.w	r9, r9, sl
 800778c:	930c      	str	r3, [sp, #48]	; 0x30
 800778e:	e7bc      	b.n	800770a <_dtoa_r+0x1ba>
 8007790:	2301      	movs	r3, #1
 8007792:	9309      	str	r3, [sp, #36]	; 0x24
 8007794:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd74      	ble.n	8007884 <_dtoa_r+0x334>
 800779a:	4698      	mov	r8, r3
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	2200      	movs	r2, #0
 80077a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077a2:	6072      	str	r2, [r6, #4]
 80077a4:	2204      	movs	r2, #4
 80077a6:	f102 0014 	add.w	r0, r2, #20
 80077aa:	4298      	cmp	r0, r3
 80077ac:	6871      	ldr	r1, [r6, #4]
 80077ae:	d96e      	bls.n	800788e <_dtoa_r+0x33e>
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fca5 	bl	8008100 <_Balloc>
 80077b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b8:	6030      	str	r0, [r6, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f1b8 0f0e 	cmp.w	r8, #14
 80077c0:	9306      	str	r3, [sp, #24]
 80077c2:	f200 80ed 	bhi.w	80079a0 <_dtoa_r+0x450>
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	f000 80ea 	beq.w	80079a0 <_dtoa_r+0x450>
 80077cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077d0:	f1ba 0f00 	cmp.w	sl, #0
 80077d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80077d8:	dd77      	ble.n	80078ca <_dtoa_r+0x37a>
 80077da:	4a28      	ldr	r2, [pc, #160]	; (800787c <_dtoa_r+0x32c>)
 80077dc:	f00a 030f 	and.w	r3, sl, #15
 80077e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80077e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077e8:	06f0      	lsls	r0, r6, #27
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80077f2:	d568      	bpl.n	80078c6 <_dtoa_r+0x376>
 80077f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80077f8:	4b21      	ldr	r3, [pc, #132]	; (8007880 <_dtoa_r+0x330>)
 80077fa:	2503      	movs	r5, #3
 80077fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007800:	f7f8 ff94 	bl	800072c <__aeabi_ddiv>
 8007804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007808:	f006 060f 	and.w	r6, r6, #15
 800780c:	4f1c      	ldr	r7, [pc, #112]	; (8007880 <_dtoa_r+0x330>)
 800780e:	e04f      	b.n	80078b0 <_dtoa_r+0x360>
 8007810:	2301      	movs	r3, #1
 8007812:	9309      	str	r3, [sp, #36]	; 0x24
 8007814:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007816:	4453      	add	r3, sl
 8007818:	f103 0801 	add.w	r8, r3, #1
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	4643      	mov	r3, r8
 8007820:	2b01      	cmp	r3, #1
 8007822:	bfb8      	it	lt
 8007824:	2301      	movlt	r3, #1
 8007826:	e7ba      	b.n	800779e <_dtoa_r+0x24e>
 8007828:	2300      	movs	r3, #0
 800782a:	e7b2      	b.n	8007792 <_dtoa_r+0x242>
 800782c:	2300      	movs	r3, #0
 800782e:	e7f0      	b.n	8007812 <_dtoa_r+0x2c2>
 8007830:	2501      	movs	r5, #1
 8007832:	2300      	movs	r3, #0
 8007834:	9509      	str	r5, [sp, #36]	; 0x24
 8007836:	931e      	str	r3, [sp, #120]	; 0x78
 8007838:	f04f 33ff 	mov.w	r3, #4294967295
 800783c:	2200      	movs	r2, #0
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	4698      	mov	r8, r3
 8007842:	2312      	movs	r3, #18
 8007844:	921f      	str	r2, [sp, #124]	; 0x7c
 8007846:	e7aa      	b.n	800779e <_dtoa_r+0x24e>
 8007848:	2301      	movs	r3, #1
 800784a:	9309      	str	r3, [sp, #36]	; 0x24
 800784c:	e7f4      	b.n	8007838 <_dtoa_r+0x2e8>
 800784e:	bf00      	nop
 8007850:	636f4361 	.word	0x636f4361
 8007854:	3fd287a7 	.word	0x3fd287a7
 8007858:	8b60c8b3 	.word	0x8b60c8b3
 800785c:	3fc68a28 	.word	0x3fc68a28
 8007860:	509f79fb 	.word	0x509f79fb
 8007864:	3fd34413 	.word	0x3fd34413
 8007868:	7ff00000 	.word	0x7ff00000
 800786c:	08008d69 	.word	0x08008d69
 8007870:	08008d60 	.word	0x08008d60
 8007874:	08008d3d 	.word	0x08008d3d
 8007878:	3ff80000 	.word	0x3ff80000
 800787c:	08008d98 	.word	0x08008d98
 8007880:	08008d70 	.word	0x08008d70
 8007884:	2301      	movs	r3, #1
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	4698      	mov	r8, r3
 800788a:	461a      	mov	r2, r3
 800788c:	e7da      	b.n	8007844 <_dtoa_r+0x2f4>
 800788e:	3101      	adds	r1, #1
 8007890:	6071      	str	r1, [r6, #4]
 8007892:	0052      	lsls	r2, r2, #1
 8007894:	e787      	b.n	80077a6 <_dtoa_r+0x256>
 8007896:	07f1      	lsls	r1, r6, #31
 8007898:	d508      	bpl.n	80078ac <_dtoa_r+0x35c>
 800789a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800789e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a2:	f7f8 fe19 	bl	80004d8 <__aeabi_dmul>
 80078a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078aa:	3501      	adds	r5, #1
 80078ac:	1076      	asrs	r6, r6, #1
 80078ae:	3708      	adds	r7, #8
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	d1f0      	bne.n	8007896 <_dtoa_r+0x346>
 80078b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078bc:	f7f8 ff36 	bl	800072c <__aeabi_ddiv>
 80078c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078c4:	e01b      	b.n	80078fe <_dtoa_r+0x3ae>
 80078c6:	2502      	movs	r5, #2
 80078c8:	e7a0      	b.n	800780c <_dtoa_r+0x2bc>
 80078ca:	f000 80a4 	beq.w	8007a16 <_dtoa_r+0x4c6>
 80078ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078d2:	f1ca 0600 	rsb	r6, sl, #0
 80078d6:	4ba0      	ldr	r3, [pc, #640]	; (8007b58 <_dtoa_r+0x608>)
 80078d8:	f006 020f 	and.w	r2, r6, #15
 80078dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f7f8 fdf8 	bl	80004d8 <__aeabi_dmul>
 80078e8:	2502      	movs	r5, #2
 80078ea:	2300      	movs	r3, #0
 80078ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f0:	4f9a      	ldr	r7, [pc, #616]	; (8007b5c <_dtoa_r+0x60c>)
 80078f2:	1136      	asrs	r6, r6, #4
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	f040 8083 	bne.w	8007a00 <_dtoa_r+0x4b0>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e0      	bne.n	80078c0 <_dtoa_r+0x370>
 80078fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 808a 	beq.w	8007a1a <_dtoa_r+0x4ca>
 8007906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800790a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800790e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007912:	2200      	movs	r2, #0
 8007914:	4b92      	ldr	r3, [pc, #584]	; (8007b60 <_dtoa_r+0x610>)
 8007916:	f7f9 f851 	bl	80009bc <__aeabi_dcmplt>
 800791a:	2800      	cmp	r0, #0
 800791c:	d07d      	beq.n	8007a1a <_dtoa_r+0x4ca>
 800791e:	f1b8 0f00 	cmp.w	r8, #0
 8007922:	d07a      	beq.n	8007a1a <_dtoa_r+0x4ca>
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd36      	ble.n	8007998 <_dtoa_r+0x448>
 800792a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800792e:	2200      	movs	r2, #0
 8007930:	4b8c      	ldr	r3, [pc, #560]	; (8007b64 <_dtoa_r+0x614>)
 8007932:	f7f8 fdd1 	bl	80004d8 <__aeabi_dmul>
 8007936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800793a:	9e04      	ldr	r6, [sp, #16]
 800793c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007940:	3501      	adds	r5, #1
 8007942:	4628      	mov	r0, r5
 8007944:	f7f8 fd5e 	bl	8000404 <__aeabi_i2d>
 8007948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800794c:	f7f8 fdc4 	bl	80004d8 <__aeabi_dmul>
 8007950:	2200      	movs	r2, #0
 8007952:	4b85      	ldr	r3, [pc, #532]	; (8007b68 <_dtoa_r+0x618>)
 8007954:	f7f8 fc0a 	bl	800016c <__adddf3>
 8007958:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800795c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007960:	950b      	str	r5, [sp, #44]	; 0x2c
 8007962:	2e00      	cmp	r6, #0
 8007964:	d15c      	bne.n	8007a20 <_dtoa_r+0x4d0>
 8007966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	4b7f      	ldr	r3, [pc, #508]	; (8007b6c <_dtoa_r+0x61c>)
 800796e:	f7f8 fbfb 	bl	8000168 <__aeabi_dsub>
 8007972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007974:	462b      	mov	r3, r5
 8007976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797a:	f7f9 f83d 	bl	80009f8 <__aeabi_dcmpgt>
 800797e:	2800      	cmp	r0, #0
 8007980:	f040 8281 	bne.w	8007e86 <_dtoa_r+0x936>
 8007984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800798a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800798e:	f7f9 f815 	bl	80009bc <__aeabi_dcmplt>
 8007992:	2800      	cmp	r0, #0
 8007994:	f040 8275 	bne.w	8007e82 <_dtoa_r+0x932>
 8007998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800799c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f2c0 814b 	blt.w	8007c3e <_dtoa_r+0x6ee>
 80079a8:	f1ba 0f0e 	cmp.w	sl, #14
 80079ac:	f300 8147 	bgt.w	8007c3e <_dtoa_r+0x6ee>
 80079b0:	4b69      	ldr	r3, [pc, #420]	; (8007b58 <_dtoa_r+0x608>)
 80079b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f280 80d7 	bge.w	8007b74 <_dtoa_r+0x624>
 80079c6:	f1b8 0f00 	cmp.w	r8, #0
 80079ca:	f300 80d3 	bgt.w	8007b74 <_dtoa_r+0x624>
 80079ce:	f040 8257 	bne.w	8007e80 <_dtoa_r+0x930>
 80079d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079d6:	2200      	movs	r2, #0
 80079d8:	4b64      	ldr	r3, [pc, #400]	; (8007b6c <_dtoa_r+0x61c>)
 80079da:	f7f8 fd7d 	bl	80004d8 <__aeabi_dmul>
 80079de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079e2:	f7f8 ffff 	bl	80009e4 <__aeabi_dcmpge>
 80079e6:	4646      	mov	r6, r8
 80079e8:	4647      	mov	r7, r8
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f040 822d 	bne.w	8007e4a <_dtoa_r+0x8fa>
 80079f0:	9b06      	ldr	r3, [sp, #24]
 80079f2:	9a06      	ldr	r2, [sp, #24]
 80079f4:	1c5d      	adds	r5, r3, #1
 80079f6:	2331      	movs	r3, #49	; 0x31
 80079f8:	f10a 0a01 	add.w	sl, sl, #1
 80079fc:	7013      	strb	r3, [r2, #0]
 80079fe:	e228      	b.n	8007e52 <_dtoa_r+0x902>
 8007a00:	07f2      	lsls	r2, r6, #31
 8007a02:	d505      	bpl.n	8007a10 <_dtoa_r+0x4c0>
 8007a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a08:	f7f8 fd66 	bl	80004d8 <__aeabi_dmul>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	3501      	adds	r5, #1
 8007a10:	1076      	asrs	r6, r6, #1
 8007a12:	3708      	adds	r7, #8
 8007a14:	e76e      	b.n	80078f4 <_dtoa_r+0x3a4>
 8007a16:	2502      	movs	r5, #2
 8007a18:	e771      	b.n	80078fe <_dtoa_r+0x3ae>
 8007a1a:	4657      	mov	r7, sl
 8007a1c:	4646      	mov	r6, r8
 8007a1e:	e790      	b.n	8007942 <_dtoa_r+0x3f2>
 8007a20:	4b4d      	ldr	r3, [pc, #308]	; (8007b58 <_dtoa_r+0x608>)
 8007a22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a26:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d048      	beq.n	8007ac2 <_dtoa_r+0x572>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	2000      	movs	r0, #0
 8007a36:	494e      	ldr	r1, [pc, #312]	; (8007b70 <_dtoa_r+0x620>)
 8007a38:	f7f8 fe78 	bl	800072c <__aeabi_ddiv>
 8007a3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a40:	f7f8 fb92 	bl	8000168 <__aeabi_dsub>
 8007a44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a48:	9d06      	ldr	r5, [sp, #24]
 8007a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4e:	f7f8 fff3 	bl	8000a38 <__aeabi_d2iz>
 8007a52:	9011      	str	r0, [sp, #68]	; 0x44
 8007a54:	f7f8 fcd6 	bl	8000404 <__aeabi_i2d>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a60:	f7f8 fb82 	bl	8000168 <__aeabi_dsub>
 8007a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a6a:	3330      	adds	r3, #48	; 0x30
 8007a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a74:	f7f8 ffa2 	bl	80009bc <__aeabi_dcmplt>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d163      	bne.n	8007b44 <_dtoa_r+0x5f4>
 8007a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a80:	2000      	movs	r0, #0
 8007a82:	4937      	ldr	r1, [pc, #220]	; (8007b60 <_dtoa_r+0x610>)
 8007a84:	f7f8 fb70 	bl	8000168 <__aeabi_dsub>
 8007a88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a8c:	f7f8 ff96 	bl	80009bc <__aeabi_dcmplt>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f040 80b5 	bne.w	8007c00 <_dtoa_r+0x6b0>
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	1aeb      	subs	r3, r5, r3
 8007a9a:	429e      	cmp	r6, r3
 8007a9c:	f77f af7c 	ble.w	8007998 <_dtoa_r+0x448>
 8007aa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <_dtoa_r+0x614>)
 8007aa8:	f7f8 fd16 	bl	80004d8 <__aeabi_dmul>
 8007aac:	2200      	movs	r2, #0
 8007aae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab6:	4b2b      	ldr	r3, [pc, #172]	; (8007b64 <_dtoa_r+0x614>)
 8007ab8:	f7f8 fd0e 	bl	80004d8 <__aeabi_dmul>
 8007abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac0:	e7c3      	b.n	8007a4a <_dtoa_r+0x4fa>
 8007ac2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ac6:	f7f8 fd07 	bl	80004d8 <__aeabi_dmul>
 8007aca:	9b06      	ldr	r3, [sp, #24]
 8007acc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ad0:	199d      	adds	r5, r3, r6
 8007ad2:	461e      	mov	r6, r3
 8007ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad8:	f7f8 ffae 	bl	8000a38 <__aeabi_d2iz>
 8007adc:	9011      	str	r0, [sp, #68]	; 0x44
 8007ade:	f7f8 fc91 	bl	8000404 <__aeabi_i2d>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aea:	f7f8 fb3d 	bl	8000168 <__aeabi_dsub>
 8007aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007af4:	3330      	adds	r3, #48	; 0x30
 8007af6:	f806 3b01 	strb.w	r3, [r6], #1
 8007afa:	42ae      	cmp	r6, r5
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	d124      	bne.n	8007b4c <_dtoa_r+0x5fc>
 8007b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <_dtoa_r+0x620>)
 8007b08:	f7f8 fb30 	bl	800016c <__adddf3>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b14:	f7f8 ff70 	bl	80009f8 <__aeabi_dcmpgt>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d171      	bne.n	8007c00 <_dtoa_r+0x6b0>
 8007b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b20:	2000      	movs	r0, #0
 8007b22:	4913      	ldr	r1, [pc, #76]	; (8007b70 <_dtoa_r+0x620>)
 8007b24:	f7f8 fb20 	bl	8000168 <__aeabi_dsub>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b30:	f7f8 ff44 	bl	80009bc <__aeabi_dcmplt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f43f af2f 	beq.w	8007998 <_dtoa_r+0x448>
 8007b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b3e:	1e6a      	subs	r2, r5, #1
 8007b40:	2b30      	cmp	r3, #48	; 0x30
 8007b42:	d001      	beq.n	8007b48 <_dtoa_r+0x5f8>
 8007b44:	46ba      	mov	sl, r7
 8007b46:	e04a      	b.n	8007bde <_dtoa_r+0x68e>
 8007b48:	4615      	mov	r5, r2
 8007b4a:	e7f6      	b.n	8007b3a <_dtoa_r+0x5ea>
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <_dtoa_r+0x614>)
 8007b4e:	f7f8 fcc3 	bl	80004d8 <__aeabi_dmul>
 8007b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b56:	e7bd      	b.n	8007ad4 <_dtoa_r+0x584>
 8007b58:	08008d98 	.word	0x08008d98
 8007b5c:	08008d70 	.word	0x08008d70
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	40240000 	.word	0x40240000
 8007b68:	401c0000 	.word	0x401c0000
 8007b6c:	40140000 	.word	0x40140000
 8007b70:	3fe00000 	.word	0x3fe00000
 8007b74:	9d06      	ldr	r5, [sp, #24]
 8007b76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 fdd3 	bl	800072c <__aeabi_ddiv>
 8007b86:	f7f8 ff57 	bl	8000a38 <__aeabi_d2iz>
 8007b8a:	4681      	mov	r9, r0
 8007b8c:	f7f8 fc3a 	bl	8000404 <__aeabi_i2d>
 8007b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b94:	f7f8 fca0 	bl	80004d8 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fae2 	bl	8000168 <__aeabi_dsub>
 8007ba4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8007bac:	9e06      	ldr	r6, [sp, #24]
 8007bae:	4602      	mov	r2, r0
 8007bb0:	1bae      	subs	r6, r5, r6
 8007bb2:	45b0      	cmp	r8, r6
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	d135      	bne.n	8007c24 <_dtoa_r+0x6d4>
 8007bb8:	f7f8 fad8 	bl	800016c <__adddf3>
 8007bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	f7f8 ff18 	bl	80009f8 <__aeabi_dcmpgt>
 8007bc8:	b9c8      	cbnz	r0, 8007bfe <_dtoa_r+0x6ae>
 8007bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bce:	4630      	mov	r0, r6
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd6:	b110      	cbz	r0, 8007bde <_dtoa_r+0x68e>
 8007bd8:	f019 0f01 	tst.w	r9, #1
 8007bdc:	d10f      	bne.n	8007bfe <_dtoa_r+0x6ae>
 8007bde:	4659      	mov	r1, fp
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fac1 	bl	8008168 <_Bfree>
 8007be6:	2300      	movs	r3, #0
 8007be8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bea:	702b      	strb	r3, [r5, #0]
 8007bec:	f10a 0301 	add.w	r3, sl, #1
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f43f acf3 	beq.w	80075e0 <_dtoa_r+0x90>
 8007bfa:	601d      	str	r5, [r3, #0]
 8007bfc:	e4f0      	b.n	80075e0 <_dtoa_r+0x90>
 8007bfe:	4657      	mov	r7, sl
 8007c00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c04:	1e6b      	subs	r3, r5, #1
 8007c06:	2a39      	cmp	r2, #57	; 0x39
 8007c08:	d106      	bne.n	8007c18 <_dtoa_r+0x6c8>
 8007c0a:	9a06      	ldr	r2, [sp, #24]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d107      	bne.n	8007c20 <_dtoa_r+0x6d0>
 8007c10:	2330      	movs	r3, #48	; 0x30
 8007c12:	7013      	strb	r3, [r2, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	3701      	adds	r7, #1
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e791      	b.n	8007b44 <_dtoa_r+0x5f4>
 8007c20:	461d      	mov	r5, r3
 8007c22:	e7ed      	b.n	8007c00 <_dtoa_r+0x6b0>
 8007c24:	2200      	movs	r2, #0
 8007c26:	4b99      	ldr	r3, [pc, #612]	; (8007e8c <_dtoa_r+0x93c>)
 8007c28:	f7f8 fc56 	bl	80004d8 <__aeabi_dmul>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4606      	mov	r6, r0
 8007c32:	460f      	mov	r7, r1
 8007c34:	f7f8 feb8 	bl	80009a8 <__aeabi_dcmpeq>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d09e      	beq.n	8007b7a <_dtoa_r+0x62a>
 8007c3c:	e7cf      	b.n	8007bde <_dtoa_r+0x68e>
 8007c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	f000 8088 	beq.w	8007d56 <_dtoa_r+0x806>
 8007c46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c48:	2a01      	cmp	r2, #1
 8007c4a:	dc6d      	bgt.n	8007d28 <_dtoa_r+0x7d8>
 8007c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d066      	beq.n	8007d20 <_dtoa_r+0x7d0>
 8007c52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c56:	464d      	mov	r5, r9
 8007c58:	9e08      	ldr	r6, [sp, #32]
 8007c5a:	9a07      	ldr	r2, [sp, #28]
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	441a      	add	r2, r3
 8007c60:	4620      	mov	r0, r4
 8007c62:	4499      	add	r9, r3
 8007c64:	9207      	str	r2, [sp, #28]
 8007c66:	f000 fb1f 	bl	80082a8 <__i2b>
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	2d00      	cmp	r5, #0
 8007c6e:	dd0b      	ble.n	8007c88 <_dtoa_r+0x738>
 8007c70:	9b07      	ldr	r3, [sp, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dd08      	ble.n	8007c88 <_dtoa_r+0x738>
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	bfa8      	it	ge
 8007c7a:	462b      	movge	r3, r5
 8007c7c:	9a07      	ldr	r2, [sp, #28]
 8007c7e:	eba9 0903 	sub.w	r9, r9, r3
 8007c82:	1aed      	subs	r5, r5, r3
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	9307      	str	r3, [sp, #28]
 8007c88:	9b08      	ldr	r3, [sp, #32]
 8007c8a:	b1eb      	cbz	r3, 8007cc8 <_dtoa_r+0x778>
 8007c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d065      	beq.n	8007d5e <_dtoa_r+0x80e>
 8007c92:	b18e      	cbz	r6, 8007cb8 <_dtoa_r+0x768>
 8007c94:	4639      	mov	r1, r7
 8007c96:	4632      	mov	r2, r6
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fba3 	bl	80083e4 <__pow5mult>
 8007c9e:	465a      	mov	r2, fp
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fb08 	bl	80082ba <__multiply>
 8007caa:	4659      	mov	r1, fp
 8007cac:	900a      	str	r0, [sp, #40]	; 0x28
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fa5a 	bl	8008168 <_Bfree>
 8007cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb6:	469b      	mov	fp, r3
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	1b9a      	subs	r2, r3, r6
 8007cbc:	d004      	beq.n	8007cc8 <_dtoa_r+0x778>
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fb8f 	bl	80083e4 <__pow5mult>
 8007cc6:	4683      	mov	fp, r0
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 faec 	bl	80082a8 <__i2b>
 8007cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 81c6 	beq.w	8008066 <_dtoa_r+0xb16>
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4601      	mov	r1, r0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 fb80 	bl	80083e4 <__pow5mult>
 8007ce4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	dc3e      	bgt.n	8007d6a <_dtoa_r+0x81a>
 8007cec:	9b02      	ldr	r3, [sp, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d137      	bne.n	8007d62 <_dtoa_r+0x812>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d134      	bne.n	8007d66 <_dtoa_r+0x816>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d02:	0d1b      	lsrs	r3, r3, #20
 8007d04:	051b      	lsls	r3, r3, #20
 8007d06:	b12b      	cbz	r3, 8007d14 <_dtoa_r+0x7c4>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	f109 0901 	add.w	r9, r9, #1
 8007d0e:	3301      	adds	r3, #1
 8007d10:	9307      	str	r3, [sp, #28]
 8007d12:	2301      	movs	r3, #1
 8007d14:	9308      	str	r3, [sp, #32]
 8007d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d128      	bne.n	8007d6e <_dtoa_r+0x81e>
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	e02e      	b.n	8007d7e <_dtoa_r+0x82e>
 8007d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d26:	e796      	b.n	8007c56 <_dtoa_r+0x706>
 8007d28:	9b08      	ldr	r3, [sp, #32]
 8007d2a:	f108 36ff 	add.w	r6, r8, #4294967295
 8007d2e:	42b3      	cmp	r3, r6
 8007d30:	bfb7      	itett	lt
 8007d32:	9b08      	ldrlt	r3, [sp, #32]
 8007d34:	1b9e      	subge	r6, r3, r6
 8007d36:	1af2      	sublt	r2, r6, r3
 8007d38:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007d3a:	bfbf      	itttt	lt
 8007d3c:	9608      	strlt	r6, [sp, #32]
 8007d3e:	189b      	addlt	r3, r3, r2
 8007d40:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007d42:	2600      	movlt	r6, #0
 8007d44:	f1b8 0f00 	cmp.w	r8, #0
 8007d48:	bfb9      	ittee	lt
 8007d4a:	eba9 0508 	sublt.w	r5, r9, r8
 8007d4e:	2300      	movlt	r3, #0
 8007d50:	464d      	movge	r5, r9
 8007d52:	4643      	movge	r3, r8
 8007d54:	e781      	b.n	8007c5a <_dtoa_r+0x70a>
 8007d56:	9e08      	ldr	r6, [sp, #32]
 8007d58:	464d      	mov	r5, r9
 8007d5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d5c:	e786      	b.n	8007c6c <_dtoa_r+0x71c>
 8007d5e:	9a08      	ldr	r2, [sp, #32]
 8007d60:	e7ad      	b.n	8007cbe <_dtoa_r+0x76e>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e7d6      	b.n	8007d14 <_dtoa_r+0x7c4>
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	e7d4      	b.n	8007d14 <_dtoa_r+0x7c4>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	6933      	ldr	r3, [r6, #16]
 8007d70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d74:	6918      	ldr	r0, [r3, #16]
 8007d76:	f000 fa49 	bl	800820c <__hi0bits>
 8007d7a:	f1c0 0020 	rsb	r0, r0, #32
 8007d7e:	9b07      	ldr	r3, [sp, #28]
 8007d80:	4418      	add	r0, r3
 8007d82:	f010 001f 	ands.w	r0, r0, #31
 8007d86:	d047      	beq.n	8007e18 <_dtoa_r+0x8c8>
 8007d88:	f1c0 0320 	rsb	r3, r0, #32
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	dd3b      	ble.n	8007e08 <_dtoa_r+0x8b8>
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	f1c0 001c 	rsb	r0, r0, #28
 8007d96:	4481      	add	r9, r0
 8007d98:	4405      	add	r5, r0
 8007d9a:	4403      	add	r3, r0
 8007d9c:	9307      	str	r3, [sp, #28]
 8007d9e:	f1b9 0f00 	cmp.w	r9, #0
 8007da2:	dd05      	ble.n	8007db0 <_dtoa_r+0x860>
 8007da4:	4659      	mov	r1, fp
 8007da6:	464a      	mov	r2, r9
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 fb69 	bl	8008480 <__lshift>
 8007dae:	4683      	mov	fp, r0
 8007db0:	9b07      	ldr	r3, [sp, #28]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dd05      	ble.n	8007dc2 <_dtoa_r+0x872>
 8007db6:	4631      	mov	r1, r6
 8007db8:	461a      	mov	r2, r3
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 fb60 	bl	8008480 <__lshift>
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc4:	b353      	cbz	r3, 8007e1c <_dtoa_r+0x8cc>
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4658      	mov	r0, fp
 8007dca:	f000 fbad 	bl	8008528 <__mcmp>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	da24      	bge.n	8007e1c <_dtoa_r+0x8cc>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4659      	mov	r1, fp
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 f9dc 	bl	8008196 <__multadd>
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007de4:	4683      	mov	fp, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 8144 	beq.w	8008074 <_dtoa_r+0xb24>
 8007dec:	2300      	movs	r3, #0
 8007dee:	4639      	mov	r1, r7
 8007df0:	220a      	movs	r2, #10
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 f9cf 	bl	8008196 <__multadd>
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dc4d      	bgt.n	8007e9c <_dtoa_r+0x94c>
 8007e00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	dd4a      	ble.n	8007e9c <_dtoa_r+0x94c>
 8007e06:	e011      	b.n	8007e2c <_dtoa_r+0x8dc>
 8007e08:	d0c9      	beq.n	8007d9e <_dtoa_r+0x84e>
 8007e0a:	9a07      	ldr	r2, [sp, #28]
 8007e0c:	331c      	adds	r3, #28
 8007e0e:	441a      	add	r2, r3
 8007e10:	4499      	add	r9, r3
 8007e12:	441d      	add	r5, r3
 8007e14:	4613      	mov	r3, r2
 8007e16:	e7c1      	b.n	8007d9c <_dtoa_r+0x84c>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	e7f6      	b.n	8007e0a <_dtoa_r+0x8ba>
 8007e1c:	f1b8 0f00 	cmp.w	r8, #0
 8007e20:	dc36      	bgt.n	8007e90 <_dtoa_r+0x940>
 8007e22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	dd33      	ble.n	8007e90 <_dtoa_r+0x940>
 8007e28:	f8cd 8010 	str.w	r8, [sp, #16]
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	b963      	cbnz	r3, 8007e4a <_dtoa_r+0x8fa>
 8007e30:	4631      	mov	r1, r6
 8007e32:	2205      	movs	r2, #5
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 f9ae 	bl	8008196 <__multadd>
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	4658      	mov	r0, fp
 8007e40:	f000 fb72 	bl	8008528 <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f73f add3 	bgt.w	80079f0 <_dtoa_r+0x4a0>
 8007e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e4c:	9d06      	ldr	r5, [sp, #24]
 8007e4e:	ea6f 0a03 	mvn.w	sl, r3
 8007e52:	f04f 0900 	mov.w	r9, #0
 8007e56:	4631      	mov	r1, r6
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 f985 	bl	8008168 <_Bfree>
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	f43f aebd 	beq.w	8007bde <_dtoa_r+0x68e>
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	d005      	beq.n	8007e76 <_dtoa_r+0x926>
 8007e6a:	45b9      	cmp	r9, r7
 8007e6c:	d003      	beq.n	8007e76 <_dtoa_r+0x926>
 8007e6e:	4649      	mov	r1, r9
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 f979 	bl	8008168 <_Bfree>
 8007e76:	4639      	mov	r1, r7
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f975 	bl	8008168 <_Bfree>
 8007e7e:	e6ae      	b.n	8007bde <_dtoa_r+0x68e>
 8007e80:	2600      	movs	r6, #0
 8007e82:	4637      	mov	r7, r6
 8007e84:	e7e1      	b.n	8007e4a <_dtoa_r+0x8fa>
 8007e86:	46ba      	mov	sl, r7
 8007e88:	4637      	mov	r7, r6
 8007e8a:	e5b1      	b.n	80079f0 <_dtoa_r+0x4a0>
 8007e8c:	40240000 	.word	0x40240000
 8007e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e92:	f8cd 8010 	str.w	r8, [sp, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 80f3 	beq.w	8008082 <_dtoa_r+0xb32>
 8007e9c:	2d00      	cmp	r5, #0
 8007e9e:	dd05      	ble.n	8007eac <_dtoa_r+0x95c>
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 faeb 	bl	8008480 <__lshift>
 8007eaa:	4607      	mov	r7, r0
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d04c      	beq.n	8007f4c <_dtoa_r+0x9fc>
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 f923 	bl	8008100 <_Balloc>
 8007eba:	4605      	mov	r5, r0
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	f107 010c 	add.w	r1, r7, #12
 8007ec2:	3202      	adds	r2, #2
 8007ec4:	0092      	lsls	r2, r2, #2
 8007ec6:	300c      	adds	r0, #12
 8007ec8:	f7fe fe32 	bl	8006b30 <memcpy>
 8007ecc:	2201      	movs	r2, #1
 8007ece:	4629      	mov	r1, r5
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fad5 	bl	8008480 <__lshift>
 8007ed6:	46b9      	mov	r9, r7
 8007ed8:	4607      	mov	r7, r0
 8007eda:	9b06      	ldr	r3, [sp, #24]
 8007edc:	9307      	str	r3, [sp, #28]
 8007ede:	9b02      	ldr	r3, [sp, #8]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	9308      	str	r3, [sp, #32]
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4658      	mov	r0, fp
 8007eea:	f7ff faa3 	bl	8007434 <quorem>
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ef6:	4658      	mov	r0, fp
 8007ef8:	f000 fb16 	bl	8008528 <__mcmp>
 8007efc:	463a      	mov	r2, r7
 8007efe:	9002      	str	r0, [sp, #8]
 8007f00:	4631      	mov	r1, r6
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fb2a 	bl	800855c <__mdiff>
 8007f08:	68c3      	ldr	r3, [r0, #12]
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	bb03      	cbnz	r3, 8007f50 <_dtoa_r+0xa00>
 8007f0e:	4601      	mov	r1, r0
 8007f10:	9009      	str	r0, [sp, #36]	; 0x24
 8007f12:	4658      	mov	r0, fp
 8007f14:	f000 fb08 	bl	8008528 <__mcmp>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4620      	mov	r0, r4
 8007f20:	9309      	str	r3, [sp, #36]	; 0x24
 8007f22:	f000 f921 	bl	8008168 <_Bfree>
 8007f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f28:	b9a3      	cbnz	r3, 8007f54 <_dtoa_r+0xa04>
 8007f2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f2c:	b992      	cbnz	r2, 8007f54 <_dtoa_r+0xa04>
 8007f2e:	9a08      	ldr	r2, [sp, #32]
 8007f30:	b982      	cbnz	r2, 8007f54 <_dtoa_r+0xa04>
 8007f32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f36:	d029      	beq.n	8007f8c <_dtoa_r+0xa3c>
 8007f38:	9b02      	ldr	r3, [sp, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd01      	ble.n	8007f42 <_dtoa_r+0x9f2>
 8007f3e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007f42:	9b07      	ldr	r3, [sp, #28]
 8007f44:	1c5d      	adds	r5, r3, #1
 8007f46:	f883 8000 	strb.w	r8, [r3]
 8007f4a:	e784      	b.n	8007e56 <_dtoa_r+0x906>
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	e7c2      	b.n	8007ed6 <_dtoa_r+0x986>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e7e3      	b.n	8007f1c <_dtoa_r+0x9cc>
 8007f54:	9a02      	ldr	r2, [sp, #8]
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	db04      	blt.n	8007f64 <_dtoa_r+0xa14>
 8007f5a:	d123      	bne.n	8007fa4 <_dtoa_r+0xa54>
 8007f5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f5e:	bb0a      	cbnz	r2, 8007fa4 <_dtoa_r+0xa54>
 8007f60:	9a08      	ldr	r2, [sp, #32]
 8007f62:	b9fa      	cbnz	r2, 8007fa4 <_dtoa_r+0xa54>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	ddec      	ble.n	8007f42 <_dtoa_r+0x9f2>
 8007f68:	4659      	mov	r1, fp
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fa87 	bl	8008480 <__lshift>
 8007f72:	4631      	mov	r1, r6
 8007f74:	4683      	mov	fp, r0
 8007f76:	f000 fad7 	bl	8008528 <__mcmp>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	dc03      	bgt.n	8007f86 <_dtoa_r+0xa36>
 8007f7e:	d1e0      	bne.n	8007f42 <_dtoa_r+0x9f2>
 8007f80:	f018 0f01 	tst.w	r8, #1
 8007f84:	d0dd      	beq.n	8007f42 <_dtoa_r+0x9f2>
 8007f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f8a:	d1d8      	bne.n	8007f3e <_dtoa_r+0x9ee>
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	9a07      	ldr	r2, [sp, #28]
 8007f90:	1c5d      	adds	r5, r3, #1
 8007f92:	2339      	movs	r3, #57	; 0x39
 8007f94:	7013      	strb	r3, [r2, #0]
 8007f96:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f9a:	1e6a      	subs	r2, r5, #1
 8007f9c:	2b39      	cmp	r3, #57	; 0x39
 8007f9e:	d04d      	beq.n	800803c <_dtoa_r+0xaec>
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	e052      	b.n	800804a <_dtoa_r+0xafa>
 8007fa4:	9a07      	ldr	r2, [sp, #28]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f102 0501 	add.w	r5, r2, #1
 8007fac:	dd06      	ble.n	8007fbc <_dtoa_r+0xa6c>
 8007fae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007fb2:	d0eb      	beq.n	8007f8c <_dtoa_r+0xa3c>
 8007fb4:	f108 0801 	add.w	r8, r8, #1
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	e7c4      	b.n	8007f46 <_dtoa_r+0x9f6>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	9a04      	ldr	r2, [sp, #16]
 8007fc0:	1aeb      	subs	r3, r5, r3
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007fc8:	d021      	beq.n	800800e <_dtoa_r+0xabe>
 8007fca:	4659      	mov	r1, fp
 8007fcc:	2300      	movs	r3, #0
 8007fce:	220a      	movs	r2, #10
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 f8e0 	bl	8008196 <__multadd>
 8007fd6:	45b9      	cmp	r9, r7
 8007fd8:	4683      	mov	fp, r0
 8007fda:	f04f 0300 	mov.w	r3, #0
 8007fde:	f04f 020a 	mov.w	r2, #10
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	d105      	bne.n	8007ff4 <_dtoa_r+0xaa4>
 8007fe8:	f000 f8d5 	bl	8008196 <__multadd>
 8007fec:	4681      	mov	r9, r0
 8007fee:	4607      	mov	r7, r0
 8007ff0:	9507      	str	r5, [sp, #28]
 8007ff2:	e778      	b.n	8007ee6 <_dtoa_r+0x996>
 8007ff4:	f000 f8cf 	bl	8008196 <__multadd>
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4681      	mov	r9, r0
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	220a      	movs	r2, #10
 8008000:	4620      	mov	r0, r4
 8008002:	f000 f8c8 	bl	8008196 <__multadd>
 8008006:	4607      	mov	r7, r0
 8008008:	e7f2      	b.n	8007ff0 <_dtoa_r+0xaa0>
 800800a:	f04f 0900 	mov.w	r9, #0
 800800e:	4659      	mov	r1, fp
 8008010:	2201      	movs	r2, #1
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fa34 	bl	8008480 <__lshift>
 8008018:	4631      	mov	r1, r6
 800801a:	4683      	mov	fp, r0
 800801c:	f000 fa84 	bl	8008528 <__mcmp>
 8008020:	2800      	cmp	r0, #0
 8008022:	dcb8      	bgt.n	8007f96 <_dtoa_r+0xa46>
 8008024:	d102      	bne.n	800802c <_dtoa_r+0xadc>
 8008026:	f018 0f01 	tst.w	r8, #1
 800802a:	d1b4      	bne.n	8007f96 <_dtoa_r+0xa46>
 800802c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008030:	1e6a      	subs	r2, r5, #1
 8008032:	2b30      	cmp	r3, #48	; 0x30
 8008034:	f47f af0f 	bne.w	8007e56 <_dtoa_r+0x906>
 8008038:	4615      	mov	r5, r2
 800803a:	e7f7      	b.n	800802c <_dtoa_r+0xadc>
 800803c:	9b06      	ldr	r3, [sp, #24]
 800803e:	4293      	cmp	r3, r2
 8008040:	d105      	bne.n	800804e <_dtoa_r+0xafe>
 8008042:	2331      	movs	r3, #49	; 0x31
 8008044:	9a06      	ldr	r2, [sp, #24]
 8008046:	f10a 0a01 	add.w	sl, sl, #1
 800804a:	7013      	strb	r3, [r2, #0]
 800804c:	e703      	b.n	8007e56 <_dtoa_r+0x906>
 800804e:	4615      	mov	r5, r2
 8008050:	e7a1      	b.n	8007f96 <_dtoa_r+0xa46>
 8008052:	4b17      	ldr	r3, [pc, #92]	; (80080b0 <_dtoa_r+0xb60>)
 8008054:	f7ff bae1 	b.w	800761a <_dtoa_r+0xca>
 8008058:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800805a:	2b00      	cmp	r3, #0
 800805c:	f47f aabb 	bne.w	80075d6 <_dtoa_r+0x86>
 8008060:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <_dtoa_r+0xb64>)
 8008062:	f7ff bada 	b.w	800761a <_dtoa_r+0xca>
 8008066:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008068:	2b01      	cmp	r3, #1
 800806a:	f77f ae3f 	ble.w	8007cec <_dtoa_r+0x79c>
 800806e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008070:	9308      	str	r3, [sp, #32]
 8008072:	e653      	b.n	8007d1c <_dtoa_r+0x7cc>
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dc03      	bgt.n	8008082 <_dtoa_r+0xb32>
 800807a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800807c:	2b02      	cmp	r3, #2
 800807e:	f73f aed5 	bgt.w	8007e2c <_dtoa_r+0x8dc>
 8008082:	9d06      	ldr	r5, [sp, #24]
 8008084:	4631      	mov	r1, r6
 8008086:	4658      	mov	r0, fp
 8008088:	f7ff f9d4 	bl	8007434 <quorem>
 800808c:	9b06      	ldr	r3, [sp, #24]
 800808e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008092:	f805 8b01 	strb.w	r8, [r5], #1
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	1aeb      	subs	r3, r5, r3
 800809a:	429a      	cmp	r2, r3
 800809c:	ddb5      	ble.n	800800a <_dtoa_r+0xaba>
 800809e:	4659      	mov	r1, fp
 80080a0:	2300      	movs	r3, #0
 80080a2:	220a      	movs	r2, #10
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 f876 	bl	8008196 <__multadd>
 80080aa:	4683      	mov	fp, r0
 80080ac:	e7ea      	b.n	8008084 <_dtoa_r+0xb34>
 80080ae:	bf00      	nop
 80080b0:	08008d3c 	.word	0x08008d3c
 80080b4:	08008d60 	.word	0x08008d60

080080b8 <_localeconv_r>:
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <_localeconv_r+0x14>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6a18      	ldr	r0, [r3, #32]
 80080be:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <_localeconv_r+0x18>)
 80080c0:	2800      	cmp	r0, #0
 80080c2:	bf08      	it	eq
 80080c4:	4618      	moveq	r0, r3
 80080c6:	30f0      	adds	r0, #240	; 0xf0
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000010 	.word	0x20000010
 80080d0:	20000074 	.word	0x20000074

080080d4 <malloc>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <malloc+0xc>)
 80080d6:	4601      	mov	r1, r0
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f000 bb47 	b.w	800876c <_malloc_r>
 80080de:	bf00      	nop
 80080e0:	20000010 	.word	0x20000010

080080e4 <memchr>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	b2c9      	uxtb	r1, r1
 80080e8:	4402      	add	r2, r0
 80080ea:	4290      	cmp	r0, r2
 80080ec:	4603      	mov	r3, r0
 80080ee:	d101      	bne.n	80080f4 <memchr+0x10>
 80080f0:	2300      	movs	r3, #0
 80080f2:	e003      	b.n	80080fc <memchr+0x18>
 80080f4:	781c      	ldrb	r4, [r3, #0]
 80080f6:	3001      	adds	r0, #1
 80080f8:	428c      	cmp	r4, r1
 80080fa:	d1f6      	bne.n	80080ea <memchr+0x6>
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd10      	pop	{r4, pc}

08008100 <_Balloc>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008104:	4604      	mov	r4, r0
 8008106:	460e      	mov	r6, r1
 8008108:	b93d      	cbnz	r5, 800811a <_Balloc+0x1a>
 800810a:	2010      	movs	r0, #16
 800810c:	f7ff ffe2 	bl	80080d4 <malloc>
 8008110:	6260      	str	r0, [r4, #36]	; 0x24
 8008112:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008116:	6005      	str	r5, [r0, #0]
 8008118:	60c5      	str	r5, [r0, #12]
 800811a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800811c:	68eb      	ldr	r3, [r5, #12]
 800811e:	b183      	cbz	r3, 8008142 <_Balloc+0x42>
 8008120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008128:	b9b8      	cbnz	r0, 800815a <_Balloc+0x5a>
 800812a:	2101      	movs	r1, #1
 800812c:	fa01 f506 	lsl.w	r5, r1, r6
 8008130:	1d6a      	adds	r2, r5, #5
 8008132:	0092      	lsls	r2, r2, #2
 8008134:	4620      	mov	r0, r4
 8008136:	f000 fabe 	bl	80086b6 <_calloc_r>
 800813a:	b160      	cbz	r0, 8008156 <_Balloc+0x56>
 800813c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008140:	e00e      	b.n	8008160 <_Balloc+0x60>
 8008142:	2221      	movs	r2, #33	; 0x21
 8008144:	2104      	movs	r1, #4
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fab5 	bl	80086b6 <_calloc_r>
 800814c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800814e:	60e8      	str	r0, [r5, #12]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e4      	bne.n	8008120 <_Balloc+0x20>
 8008156:	2000      	movs	r0, #0
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	6802      	ldr	r2, [r0, #0]
 800815c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008160:	2300      	movs	r3, #0
 8008162:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008166:	e7f7      	b.n	8008158 <_Balloc+0x58>

08008168 <_Bfree>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800816c:	4606      	mov	r6, r0
 800816e:	460d      	mov	r5, r1
 8008170:	b93c      	cbnz	r4, 8008182 <_Bfree+0x1a>
 8008172:	2010      	movs	r0, #16
 8008174:	f7ff ffae 	bl	80080d4 <malloc>
 8008178:	6270      	str	r0, [r6, #36]	; 0x24
 800817a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800817e:	6004      	str	r4, [r0, #0]
 8008180:	60c4      	str	r4, [r0, #12]
 8008182:	b13d      	cbz	r5, 8008194 <_Bfree+0x2c>
 8008184:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008186:	686a      	ldr	r2, [r5, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800818e:	6029      	str	r1, [r5, #0]
 8008190:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008194:	bd70      	pop	{r4, r5, r6, pc}

08008196 <__multadd>:
 8008196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819a:	461f      	mov	r7, r3
 800819c:	4606      	mov	r6, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	2300      	movs	r3, #0
 80081a2:	690d      	ldr	r5, [r1, #16]
 80081a4:	f101 0c14 	add.w	ip, r1, #20
 80081a8:	f8dc 0000 	ldr.w	r0, [ip]
 80081ac:	3301      	adds	r3, #1
 80081ae:	b281      	uxth	r1, r0
 80081b0:	fb02 7101 	mla	r1, r2, r1, r7
 80081b4:	0c00      	lsrs	r0, r0, #16
 80081b6:	0c0f      	lsrs	r7, r1, #16
 80081b8:	fb02 7000 	mla	r0, r2, r0, r7
 80081bc:	b289      	uxth	r1, r1
 80081be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80081c2:	429d      	cmp	r5, r3
 80081c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80081c8:	f84c 1b04 	str.w	r1, [ip], #4
 80081cc:	dcec      	bgt.n	80081a8 <__multadd+0x12>
 80081ce:	b1d7      	cbz	r7, 8008206 <__multadd+0x70>
 80081d0:	68a3      	ldr	r3, [r4, #8]
 80081d2:	42ab      	cmp	r3, r5
 80081d4:	dc12      	bgt.n	80081fc <__multadd+0x66>
 80081d6:	6861      	ldr	r1, [r4, #4]
 80081d8:	4630      	mov	r0, r6
 80081da:	3101      	adds	r1, #1
 80081dc:	f7ff ff90 	bl	8008100 <_Balloc>
 80081e0:	4680      	mov	r8, r0
 80081e2:	6922      	ldr	r2, [r4, #16]
 80081e4:	f104 010c 	add.w	r1, r4, #12
 80081e8:	3202      	adds	r2, #2
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	300c      	adds	r0, #12
 80081ee:	f7fe fc9f 	bl	8006b30 <memcpy>
 80081f2:	4621      	mov	r1, r4
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7ff ffb7 	bl	8008168 <_Bfree>
 80081fa:	4644      	mov	r4, r8
 80081fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008200:	3501      	adds	r5, #1
 8008202:	615f      	str	r7, [r3, #20]
 8008204:	6125      	str	r5, [r4, #16]
 8008206:	4620      	mov	r0, r4
 8008208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800820c <__hi0bits>:
 800820c:	0c02      	lsrs	r2, r0, #16
 800820e:	0412      	lsls	r2, r2, #16
 8008210:	4603      	mov	r3, r0
 8008212:	b9b2      	cbnz	r2, 8008242 <__hi0bits+0x36>
 8008214:	0403      	lsls	r3, r0, #16
 8008216:	2010      	movs	r0, #16
 8008218:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800821c:	bf04      	itt	eq
 800821e:	021b      	lsleq	r3, r3, #8
 8008220:	3008      	addeq	r0, #8
 8008222:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008226:	bf04      	itt	eq
 8008228:	011b      	lsleq	r3, r3, #4
 800822a:	3004      	addeq	r0, #4
 800822c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008230:	bf04      	itt	eq
 8008232:	009b      	lsleq	r3, r3, #2
 8008234:	3002      	addeq	r0, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	db06      	blt.n	8008248 <__hi0bits+0x3c>
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	d503      	bpl.n	8008246 <__hi0bits+0x3a>
 800823e:	3001      	adds	r0, #1
 8008240:	4770      	bx	lr
 8008242:	2000      	movs	r0, #0
 8008244:	e7e8      	b.n	8008218 <__hi0bits+0xc>
 8008246:	2020      	movs	r0, #32
 8008248:	4770      	bx	lr

0800824a <__lo0bits>:
 800824a:	6803      	ldr	r3, [r0, #0]
 800824c:	4601      	mov	r1, r0
 800824e:	f013 0207 	ands.w	r2, r3, #7
 8008252:	d00b      	beq.n	800826c <__lo0bits+0x22>
 8008254:	07da      	lsls	r2, r3, #31
 8008256:	d423      	bmi.n	80082a0 <__lo0bits+0x56>
 8008258:	0798      	lsls	r0, r3, #30
 800825a:	bf49      	itett	mi
 800825c:	085b      	lsrmi	r3, r3, #1
 800825e:	089b      	lsrpl	r3, r3, #2
 8008260:	2001      	movmi	r0, #1
 8008262:	600b      	strmi	r3, [r1, #0]
 8008264:	bf5c      	itt	pl
 8008266:	600b      	strpl	r3, [r1, #0]
 8008268:	2002      	movpl	r0, #2
 800826a:	4770      	bx	lr
 800826c:	b298      	uxth	r0, r3
 800826e:	b9a8      	cbnz	r0, 800829c <__lo0bits+0x52>
 8008270:	2010      	movs	r0, #16
 8008272:	0c1b      	lsrs	r3, r3, #16
 8008274:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008278:	bf04      	itt	eq
 800827a:	0a1b      	lsreq	r3, r3, #8
 800827c:	3008      	addeq	r0, #8
 800827e:	071a      	lsls	r2, r3, #28
 8008280:	bf04      	itt	eq
 8008282:	091b      	lsreq	r3, r3, #4
 8008284:	3004      	addeq	r0, #4
 8008286:	079a      	lsls	r2, r3, #30
 8008288:	bf04      	itt	eq
 800828a:	089b      	lsreq	r3, r3, #2
 800828c:	3002      	addeq	r0, #2
 800828e:	07da      	lsls	r2, r3, #31
 8008290:	d402      	bmi.n	8008298 <__lo0bits+0x4e>
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	d006      	beq.n	80082a4 <__lo0bits+0x5a>
 8008296:	3001      	adds	r0, #1
 8008298:	600b      	str	r3, [r1, #0]
 800829a:	4770      	bx	lr
 800829c:	4610      	mov	r0, r2
 800829e:	e7e9      	b.n	8008274 <__lo0bits+0x2a>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	2020      	movs	r0, #32
 80082a6:	4770      	bx	lr

080082a8 <__i2b>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	460c      	mov	r4, r1
 80082ac:	2101      	movs	r1, #1
 80082ae:	f7ff ff27 	bl	8008100 <_Balloc>
 80082b2:	2201      	movs	r2, #1
 80082b4:	6144      	str	r4, [r0, #20]
 80082b6:	6102      	str	r2, [r0, #16]
 80082b8:	bd10      	pop	{r4, pc}

080082ba <__multiply>:
 80082ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082be:	4614      	mov	r4, r2
 80082c0:	690a      	ldr	r2, [r1, #16]
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	4688      	mov	r8, r1
 80082c6:	429a      	cmp	r2, r3
 80082c8:	bfbe      	ittt	lt
 80082ca:	460b      	movlt	r3, r1
 80082cc:	46a0      	movlt	r8, r4
 80082ce:	461c      	movlt	r4, r3
 80082d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80082d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082e0:	eb07 0609 	add.w	r6, r7, r9
 80082e4:	42b3      	cmp	r3, r6
 80082e6:	bfb8      	it	lt
 80082e8:	3101      	addlt	r1, #1
 80082ea:	f7ff ff09 	bl	8008100 <_Balloc>
 80082ee:	f100 0514 	add.w	r5, r0, #20
 80082f2:	462b      	mov	r3, r5
 80082f4:	2200      	movs	r2, #0
 80082f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80082fa:	4573      	cmp	r3, lr
 80082fc:	d316      	bcc.n	800832c <__multiply+0x72>
 80082fe:	f104 0214 	add.w	r2, r4, #20
 8008302:	f108 0114 	add.w	r1, r8, #20
 8008306:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800830a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	9b00      	ldr	r3, [sp, #0]
 8008312:	9201      	str	r2, [sp, #4]
 8008314:	4293      	cmp	r3, r2
 8008316:	d80c      	bhi.n	8008332 <__multiply+0x78>
 8008318:	2e00      	cmp	r6, #0
 800831a:	dd03      	ble.n	8008324 <__multiply+0x6a>
 800831c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008320:	2b00      	cmp	r3, #0
 8008322:	d05d      	beq.n	80083e0 <__multiply+0x126>
 8008324:	6106      	str	r6, [r0, #16]
 8008326:	b003      	add	sp, #12
 8008328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832c:	f843 2b04 	str.w	r2, [r3], #4
 8008330:	e7e3      	b.n	80082fa <__multiply+0x40>
 8008332:	f8b2 b000 	ldrh.w	fp, [r2]
 8008336:	f1bb 0f00 	cmp.w	fp, #0
 800833a:	d023      	beq.n	8008384 <__multiply+0xca>
 800833c:	4689      	mov	r9, r1
 800833e:	46ac      	mov	ip, r5
 8008340:	f04f 0800 	mov.w	r8, #0
 8008344:	f859 4b04 	ldr.w	r4, [r9], #4
 8008348:	f8dc a000 	ldr.w	sl, [ip]
 800834c:	b2a3      	uxth	r3, r4
 800834e:	fa1f fa8a 	uxth.w	sl, sl
 8008352:	fb0b a303 	mla	r3, fp, r3, sl
 8008356:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800835a:	f8dc 4000 	ldr.w	r4, [ip]
 800835e:	4443      	add	r3, r8
 8008360:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008364:	fb0b 840a 	mla	r4, fp, sl, r8
 8008368:	46e2      	mov	sl, ip
 800836a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800836e:	b29b      	uxth	r3, r3
 8008370:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008374:	454f      	cmp	r7, r9
 8008376:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800837a:	f84a 3b04 	str.w	r3, [sl], #4
 800837e:	d82b      	bhi.n	80083d8 <__multiply+0x11e>
 8008380:	f8cc 8004 	str.w	r8, [ip, #4]
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	3204      	adds	r2, #4
 8008388:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800838c:	f1ba 0f00 	cmp.w	sl, #0
 8008390:	d020      	beq.n	80083d4 <__multiply+0x11a>
 8008392:	4689      	mov	r9, r1
 8008394:	46a8      	mov	r8, r5
 8008396:	f04f 0b00 	mov.w	fp, #0
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	f8b9 c000 	ldrh.w	ip, [r9]
 80083a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80083aa:	46c4      	mov	ip, r8
 80083ac:	445c      	add	r4, fp
 80083ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083b2:	f84c 3b04 	str.w	r3, [ip], #4
 80083b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80083ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80083be:	0c1b      	lsrs	r3, r3, #16
 80083c0:	fb0a b303 	mla	r3, sl, r3, fp
 80083c4:	454f      	cmp	r7, r9
 80083c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80083ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80083ce:	d805      	bhi.n	80083dc <__multiply+0x122>
 80083d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80083d4:	3504      	adds	r5, #4
 80083d6:	e79b      	b.n	8008310 <__multiply+0x56>
 80083d8:	46d4      	mov	ip, sl
 80083da:	e7b3      	b.n	8008344 <__multiply+0x8a>
 80083dc:	46e0      	mov	r8, ip
 80083de:	e7dd      	b.n	800839c <__multiply+0xe2>
 80083e0:	3e01      	subs	r6, #1
 80083e2:	e799      	b.n	8008318 <__multiply+0x5e>

080083e4 <__pow5mult>:
 80083e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	4615      	mov	r5, r2
 80083ea:	f012 0203 	ands.w	r2, r2, #3
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	d007      	beq.n	8008404 <__pow5mult+0x20>
 80083f4:	4c21      	ldr	r4, [pc, #132]	; (800847c <__pow5mult+0x98>)
 80083f6:	3a01      	subs	r2, #1
 80083f8:	2300      	movs	r3, #0
 80083fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fe:	f7ff feca 	bl	8008196 <__multadd>
 8008402:	4607      	mov	r7, r0
 8008404:	10ad      	asrs	r5, r5, #2
 8008406:	d035      	beq.n	8008474 <__pow5mult+0x90>
 8008408:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800840a:	b93c      	cbnz	r4, 800841c <__pow5mult+0x38>
 800840c:	2010      	movs	r0, #16
 800840e:	f7ff fe61 	bl	80080d4 <malloc>
 8008412:	6270      	str	r0, [r6, #36]	; 0x24
 8008414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008418:	6004      	str	r4, [r0, #0]
 800841a:	60c4      	str	r4, [r0, #12]
 800841c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008424:	b94c      	cbnz	r4, 800843a <__pow5mult+0x56>
 8008426:	f240 2171 	movw	r1, #625	; 0x271
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ff3c 	bl	80082a8 <__i2b>
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	f8c8 0008 	str.w	r0, [r8, #8]
 8008438:	6003      	str	r3, [r0, #0]
 800843a:	f04f 0800 	mov.w	r8, #0
 800843e:	07eb      	lsls	r3, r5, #31
 8008440:	d50a      	bpl.n	8008458 <__pow5mult+0x74>
 8008442:	4639      	mov	r1, r7
 8008444:	4622      	mov	r2, r4
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff ff37 	bl	80082ba <__multiply>
 800844c:	4681      	mov	r9, r0
 800844e:	4639      	mov	r1, r7
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff fe89 	bl	8008168 <_Bfree>
 8008456:	464f      	mov	r7, r9
 8008458:	106d      	asrs	r5, r5, #1
 800845a:	d00b      	beq.n	8008474 <__pow5mult+0x90>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	b938      	cbnz	r0, 8008470 <__pow5mult+0x8c>
 8008460:	4622      	mov	r2, r4
 8008462:	4621      	mov	r1, r4
 8008464:	4630      	mov	r0, r6
 8008466:	f7ff ff28 	bl	80082ba <__multiply>
 800846a:	6020      	str	r0, [r4, #0]
 800846c:	f8c0 8000 	str.w	r8, [r0]
 8008470:	4604      	mov	r4, r0
 8008472:	e7e4      	b.n	800843e <__pow5mult+0x5a>
 8008474:	4638      	mov	r0, r7
 8008476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847a:	bf00      	nop
 800847c:	08008e60 	.word	0x08008e60

08008480 <__lshift>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	4607      	mov	r7, r0
 8008488:	4616      	mov	r6, r2
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008490:	eb0a 0903 	add.w	r9, sl, r3
 8008494:	6849      	ldr	r1, [r1, #4]
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	f109 0501 	add.w	r5, r9, #1
 800849c:	42ab      	cmp	r3, r5
 800849e:	db32      	blt.n	8008506 <__lshift+0x86>
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff fe2d 	bl	8008100 <_Balloc>
 80084a6:	2300      	movs	r3, #0
 80084a8:	4680      	mov	r8, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	f100 0114 	add.w	r1, r0, #20
 80084b0:	4553      	cmp	r3, sl
 80084b2:	db2b      	blt.n	800850c <__lshift+0x8c>
 80084b4:	6920      	ldr	r0, [r4, #16]
 80084b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084ba:	f104 0314 	add.w	r3, r4, #20
 80084be:	f016 021f 	ands.w	r2, r6, #31
 80084c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084ca:	d025      	beq.n	8008518 <__lshift+0x98>
 80084cc:	2000      	movs	r0, #0
 80084ce:	f1c2 0e20 	rsb	lr, r2, #32
 80084d2:	468a      	mov	sl, r1
 80084d4:	681e      	ldr	r6, [r3, #0]
 80084d6:	4096      	lsls	r6, r2
 80084d8:	4330      	orrs	r0, r6
 80084da:	f84a 0b04 	str.w	r0, [sl], #4
 80084de:	f853 0b04 	ldr.w	r0, [r3], #4
 80084e2:	459c      	cmp	ip, r3
 80084e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80084e8:	d814      	bhi.n	8008514 <__lshift+0x94>
 80084ea:	6048      	str	r0, [r1, #4]
 80084ec:	b108      	cbz	r0, 80084f2 <__lshift+0x72>
 80084ee:	f109 0502 	add.w	r5, r9, #2
 80084f2:	3d01      	subs	r5, #1
 80084f4:	4638      	mov	r0, r7
 80084f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80084fa:	4621      	mov	r1, r4
 80084fc:	f7ff fe34 	bl	8008168 <_Bfree>
 8008500:	4640      	mov	r0, r8
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	3101      	adds	r1, #1
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	e7c7      	b.n	800849c <__lshift+0x1c>
 800850c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008510:	3301      	adds	r3, #1
 8008512:	e7cd      	b.n	80084b0 <__lshift+0x30>
 8008514:	4651      	mov	r1, sl
 8008516:	e7dc      	b.n	80084d2 <__lshift+0x52>
 8008518:	3904      	subs	r1, #4
 800851a:	f853 2b04 	ldr.w	r2, [r3], #4
 800851e:	459c      	cmp	ip, r3
 8008520:	f841 2f04 	str.w	r2, [r1, #4]!
 8008524:	d8f9      	bhi.n	800851a <__lshift+0x9a>
 8008526:	e7e4      	b.n	80084f2 <__lshift+0x72>

08008528 <__mcmp>:
 8008528:	6903      	ldr	r3, [r0, #16]
 800852a:	690a      	ldr	r2, [r1, #16]
 800852c:	b530      	push	{r4, r5, lr}
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	d10c      	bne.n	800854c <__mcmp+0x24>
 8008532:	0092      	lsls	r2, r2, #2
 8008534:	3014      	adds	r0, #20
 8008536:	3114      	adds	r1, #20
 8008538:	1884      	adds	r4, r0, r2
 800853a:	4411      	add	r1, r2
 800853c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008540:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008544:	4295      	cmp	r5, r2
 8008546:	d003      	beq.n	8008550 <__mcmp+0x28>
 8008548:	d305      	bcc.n	8008556 <__mcmp+0x2e>
 800854a:	2301      	movs	r3, #1
 800854c:	4618      	mov	r0, r3
 800854e:	bd30      	pop	{r4, r5, pc}
 8008550:	42a0      	cmp	r0, r4
 8008552:	d3f3      	bcc.n	800853c <__mcmp+0x14>
 8008554:	e7fa      	b.n	800854c <__mcmp+0x24>
 8008556:	f04f 33ff 	mov.w	r3, #4294967295
 800855a:	e7f7      	b.n	800854c <__mcmp+0x24>

0800855c <__mdiff>:
 800855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	460d      	mov	r5, r1
 8008562:	4607      	mov	r7, r0
 8008564:	4611      	mov	r1, r2
 8008566:	4628      	mov	r0, r5
 8008568:	4614      	mov	r4, r2
 800856a:	f7ff ffdd 	bl	8008528 <__mcmp>
 800856e:	1e06      	subs	r6, r0, #0
 8008570:	d108      	bne.n	8008584 <__mdiff+0x28>
 8008572:	4631      	mov	r1, r6
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff fdc3 	bl	8008100 <_Balloc>
 800857a:	2301      	movs	r3, #1
 800857c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008584:	bfa4      	itt	ge
 8008586:	4623      	movge	r3, r4
 8008588:	462c      	movge	r4, r5
 800858a:	4638      	mov	r0, r7
 800858c:	6861      	ldr	r1, [r4, #4]
 800858e:	bfa6      	itte	ge
 8008590:	461d      	movge	r5, r3
 8008592:	2600      	movge	r6, #0
 8008594:	2601      	movlt	r6, #1
 8008596:	f7ff fdb3 	bl	8008100 <_Balloc>
 800859a:	f04f 0e00 	mov.w	lr, #0
 800859e:	60c6      	str	r6, [r0, #12]
 80085a0:	692b      	ldr	r3, [r5, #16]
 80085a2:	6926      	ldr	r6, [r4, #16]
 80085a4:	f104 0214 	add.w	r2, r4, #20
 80085a8:	f105 0914 	add.w	r9, r5, #20
 80085ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80085b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80085b4:	f100 0114 	add.w	r1, r0, #20
 80085b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80085bc:	f859 5b04 	ldr.w	r5, [r9], #4
 80085c0:	fa1f f38a 	uxth.w	r3, sl
 80085c4:	4473      	add	r3, lr
 80085c6:	b2ac      	uxth	r4, r5
 80085c8:	1b1b      	subs	r3, r3, r4
 80085ca:	0c2c      	lsrs	r4, r5, #16
 80085cc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80085d0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80085da:	45c8      	cmp	r8, r9
 80085dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80085e0:	4694      	mov	ip, r2
 80085e2:	f841 4b04 	str.w	r4, [r1], #4
 80085e6:	d8e7      	bhi.n	80085b8 <__mdiff+0x5c>
 80085e8:	45bc      	cmp	ip, r7
 80085ea:	d304      	bcc.n	80085f6 <__mdiff+0x9a>
 80085ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80085f0:	b183      	cbz	r3, 8008614 <__mdiff+0xb8>
 80085f2:	6106      	str	r6, [r0, #16]
 80085f4:	e7c4      	b.n	8008580 <__mdiff+0x24>
 80085f6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80085fa:	b2a2      	uxth	r2, r4
 80085fc:	4472      	add	r2, lr
 80085fe:	1413      	asrs	r3, r2, #16
 8008600:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008604:	b292      	uxth	r2, r2
 8008606:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800860a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800860e:	f841 2b04 	str.w	r2, [r1], #4
 8008612:	e7e9      	b.n	80085e8 <__mdiff+0x8c>
 8008614:	3e01      	subs	r6, #1
 8008616:	e7e9      	b.n	80085ec <__mdiff+0x90>

08008618 <__d2b>:
 8008618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800861c:	461c      	mov	r4, r3
 800861e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008622:	2101      	movs	r1, #1
 8008624:	4690      	mov	r8, r2
 8008626:	f7ff fd6b 	bl	8008100 <_Balloc>
 800862a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800862e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008632:	4607      	mov	r7, r0
 8008634:	bb34      	cbnz	r4, 8008684 <__d2b+0x6c>
 8008636:	9201      	str	r2, [sp, #4]
 8008638:	f1b8 0200 	subs.w	r2, r8, #0
 800863c:	d027      	beq.n	800868e <__d2b+0x76>
 800863e:	a802      	add	r0, sp, #8
 8008640:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008644:	f7ff fe01 	bl	800824a <__lo0bits>
 8008648:	9900      	ldr	r1, [sp, #0]
 800864a:	b1f0      	cbz	r0, 800868a <__d2b+0x72>
 800864c:	9a01      	ldr	r2, [sp, #4]
 800864e:	f1c0 0320 	rsb	r3, r0, #32
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	430b      	orrs	r3, r1
 8008658:	40c2      	lsrs	r2, r0
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	9201      	str	r2, [sp, #4]
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf14      	ite	ne
 8008664:	2102      	movne	r1, #2
 8008666:	2101      	moveq	r1, #1
 8008668:	61bb      	str	r3, [r7, #24]
 800866a:	6139      	str	r1, [r7, #16]
 800866c:	b1c4      	cbz	r4, 80086a0 <__d2b+0x88>
 800866e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008672:	4404      	add	r4, r0
 8008674:	6034      	str	r4, [r6, #0]
 8008676:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800867a:	6028      	str	r0, [r5, #0]
 800867c:	4638      	mov	r0, r7
 800867e:	b002      	add	sp, #8
 8008680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008684:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008688:	e7d5      	b.n	8008636 <__d2b+0x1e>
 800868a:	6179      	str	r1, [r7, #20]
 800868c:	e7e7      	b.n	800865e <__d2b+0x46>
 800868e:	a801      	add	r0, sp, #4
 8008690:	f7ff fddb 	bl	800824a <__lo0bits>
 8008694:	2101      	movs	r1, #1
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	6139      	str	r1, [r7, #16]
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	3020      	adds	r0, #32
 800869e:	e7e5      	b.n	800866c <__d2b+0x54>
 80086a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086a4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80086a8:	6030      	str	r0, [r6, #0]
 80086aa:	6918      	ldr	r0, [r3, #16]
 80086ac:	f7ff fdae 	bl	800820c <__hi0bits>
 80086b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80086b4:	e7e1      	b.n	800867a <__d2b+0x62>

080086b6 <_calloc_r>:
 80086b6:	b538      	push	{r3, r4, r5, lr}
 80086b8:	fb02 f401 	mul.w	r4, r2, r1
 80086bc:	4621      	mov	r1, r4
 80086be:	f000 f855 	bl	800876c <_malloc_r>
 80086c2:	4605      	mov	r5, r0
 80086c4:	b118      	cbz	r0, 80086ce <_calloc_r+0x18>
 80086c6:	4622      	mov	r2, r4
 80086c8:	2100      	movs	r1, #0
 80086ca:	f7fe fa3c 	bl	8006b46 <memset>
 80086ce:	4628      	mov	r0, r5
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080086d4 <_free_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4605      	mov	r5, r0
 80086d8:	2900      	cmp	r1, #0
 80086da:	d043      	beq.n	8008764 <_free_r+0x90>
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f0c      	subs	r4, r1, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfb8      	it	lt
 80086e6:	18e4      	addlt	r4, r4, r3
 80086e8:	f000 fa27 	bl	8008b3a <__malloc_lock>
 80086ec:	4a1e      	ldr	r2, [pc, #120]	; (8008768 <_free_r+0x94>)
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	4610      	mov	r0, r2
 80086f2:	b933      	cbnz	r3, 8008702 <_free_r+0x2e>
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6014      	str	r4, [r2, #0]
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fe:	f000 ba1d 	b.w	8008b3c <__malloc_unlock>
 8008702:	42a3      	cmp	r3, r4
 8008704:	d90b      	bls.n	800871e <_free_r+0x4a>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	1862      	adds	r2, r4, r1
 800870a:	4293      	cmp	r3, r2
 800870c:	bf01      	itttt	eq
 800870e:	681a      	ldreq	r2, [r3, #0]
 8008710:	685b      	ldreq	r3, [r3, #4]
 8008712:	1852      	addeq	r2, r2, r1
 8008714:	6022      	streq	r2, [r4, #0]
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	6004      	str	r4, [r0, #0]
 800871a:	e7ed      	b.n	80086f8 <_free_r+0x24>
 800871c:	4613      	mov	r3, r2
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	b10a      	cbz	r2, 8008726 <_free_r+0x52>
 8008722:	42a2      	cmp	r2, r4
 8008724:	d9fa      	bls.n	800871c <_free_r+0x48>
 8008726:	6819      	ldr	r1, [r3, #0]
 8008728:	1858      	adds	r0, r3, r1
 800872a:	42a0      	cmp	r0, r4
 800872c:	d10b      	bne.n	8008746 <_free_r+0x72>
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	4401      	add	r1, r0
 8008732:	1858      	adds	r0, r3, r1
 8008734:	4282      	cmp	r2, r0
 8008736:	6019      	str	r1, [r3, #0]
 8008738:	d1de      	bne.n	80086f8 <_free_r+0x24>
 800873a:	6810      	ldr	r0, [r2, #0]
 800873c:	6852      	ldr	r2, [r2, #4]
 800873e:	4401      	add	r1, r0
 8008740:	6019      	str	r1, [r3, #0]
 8008742:	605a      	str	r2, [r3, #4]
 8008744:	e7d8      	b.n	80086f8 <_free_r+0x24>
 8008746:	d902      	bls.n	800874e <_free_r+0x7a>
 8008748:	230c      	movs	r3, #12
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	e7d4      	b.n	80086f8 <_free_r+0x24>
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	1821      	adds	r1, r4, r0
 8008752:	428a      	cmp	r2, r1
 8008754:	bf01      	itttt	eq
 8008756:	6811      	ldreq	r1, [r2, #0]
 8008758:	6852      	ldreq	r2, [r2, #4]
 800875a:	1809      	addeq	r1, r1, r0
 800875c:	6021      	streq	r1, [r4, #0]
 800875e:	6062      	str	r2, [r4, #4]
 8008760:	605c      	str	r4, [r3, #4]
 8008762:	e7c9      	b.n	80086f8 <_free_r+0x24>
 8008764:	bd38      	pop	{r3, r4, r5, pc}
 8008766:	bf00      	nop
 8008768:	20001d14 	.word	0x20001d14

0800876c <_malloc_r>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	1ccd      	adds	r5, r1, #3
 8008770:	f025 0503 	bic.w	r5, r5, #3
 8008774:	3508      	adds	r5, #8
 8008776:	2d0c      	cmp	r5, #12
 8008778:	bf38      	it	cc
 800877a:	250c      	movcc	r5, #12
 800877c:	2d00      	cmp	r5, #0
 800877e:	4606      	mov	r6, r0
 8008780:	db01      	blt.n	8008786 <_malloc_r+0x1a>
 8008782:	42a9      	cmp	r1, r5
 8008784:	d903      	bls.n	800878e <_malloc_r+0x22>
 8008786:	230c      	movs	r3, #12
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	2000      	movs	r0, #0
 800878c:	bd70      	pop	{r4, r5, r6, pc}
 800878e:	f000 f9d4 	bl	8008b3a <__malloc_lock>
 8008792:	4a21      	ldr	r2, [pc, #132]	; (8008818 <_malloc_r+0xac>)
 8008794:	6814      	ldr	r4, [r2, #0]
 8008796:	4621      	mov	r1, r4
 8008798:	b991      	cbnz	r1, 80087c0 <_malloc_r+0x54>
 800879a:	4c20      	ldr	r4, [pc, #128]	; (800881c <_malloc_r+0xb0>)
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	b91b      	cbnz	r3, 80087a8 <_malloc_r+0x3c>
 80087a0:	4630      	mov	r0, r6
 80087a2:	f000 f98f 	bl	8008ac4 <_sbrk_r>
 80087a6:	6020      	str	r0, [r4, #0]
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f000 f98a 	bl	8008ac4 <_sbrk_r>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d124      	bne.n	80087fe <_malloc_r+0x92>
 80087b4:	230c      	movs	r3, #12
 80087b6:	4630      	mov	r0, r6
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	f000 f9bf 	bl	8008b3c <__malloc_unlock>
 80087be:	e7e4      	b.n	800878a <_malloc_r+0x1e>
 80087c0:	680b      	ldr	r3, [r1, #0]
 80087c2:	1b5b      	subs	r3, r3, r5
 80087c4:	d418      	bmi.n	80087f8 <_malloc_r+0x8c>
 80087c6:	2b0b      	cmp	r3, #11
 80087c8:	d90f      	bls.n	80087ea <_malloc_r+0x7e>
 80087ca:	600b      	str	r3, [r1, #0]
 80087cc:	18cc      	adds	r4, r1, r3
 80087ce:	50cd      	str	r5, [r1, r3]
 80087d0:	4630      	mov	r0, r6
 80087d2:	f000 f9b3 	bl	8008b3c <__malloc_unlock>
 80087d6:	f104 000b 	add.w	r0, r4, #11
 80087da:	1d23      	adds	r3, r4, #4
 80087dc:	f020 0007 	bic.w	r0, r0, #7
 80087e0:	1ac3      	subs	r3, r0, r3
 80087e2:	d0d3      	beq.n	800878c <_malloc_r+0x20>
 80087e4:	425a      	negs	r2, r3
 80087e6:	50e2      	str	r2, [r4, r3]
 80087e8:	e7d0      	b.n	800878c <_malloc_r+0x20>
 80087ea:	684b      	ldr	r3, [r1, #4]
 80087ec:	428c      	cmp	r4, r1
 80087ee:	bf16      	itet	ne
 80087f0:	6063      	strne	r3, [r4, #4]
 80087f2:	6013      	streq	r3, [r2, #0]
 80087f4:	460c      	movne	r4, r1
 80087f6:	e7eb      	b.n	80087d0 <_malloc_r+0x64>
 80087f8:	460c      	mov	r4, r1
 80087fa:	6849      	ldr	r1, [r1, #4]
 80087fc:	e7cc      	b.n	8008798 <_malloc_r+0x2c>
 80087fe:	1cc4      	adds	r4, r0, #3
 8008800:	f024 0403 	bic.w	r4, r4, #3
 8008804:	42a0      	cmp	r0, r4
 8008806:	d005      	beq.n	8008814 <_malloc_r+0xa8>
 8008808:	1a21      	subs	r1, r4, r0
 800880a:	4630      	mov	r0, r6
 800880c:	f000 f95a 	bl	8008ac4 <_sbrk_r>
 8008810:	3001      	adds	r0, #1
 8008812:	d0cf      	beq.n	80087b4 <_malloc_r+0x48>
 8008814:	6025      	str	r5, [r4, #0]
 8008816:	e7db      	b.n	80087d0 <_malloc_r+0x64>
 8008818:	20001d14 	.word	0x20001d14
 800881c:	20001d18 	.word	0x20001d18

08008820 <__ssputs_r>:
 8008820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	688e      	ldr	r6, [r1, #8]
 8008826:	4682      	mov	sl, r0
 8008828:	429e      	cmp	r6, r3
 800882a:	460c      	mov	r4, r1
 800882c:	4690      	mov	r8, r2
 800882e:	4699      	mov	r9, r3
 8008830:	d837      	bhi.n	80088a2 <__ssputs_r+0x82>
 8008832:	898a      	ldrh	r2, [r1, #12]
 8008834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008838:	d031      	beq.n	800889e <__ssputs_r+0x7e>
 800883a:	2302      	movs	r3, #2
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	6909      	ldr	r1, [r1, #16]
 8008840:	1a6f      	subs	r7, r5, r1
 8008842:	6965      	ldr	r5, [r4, #20]
 8008844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008848:	fb95 f5f3 	sdiv	r5, r5, r3
 800884c:	f109 0301 	add.w	r3, r9, #1
 8008850:	443b      	add	r3, r7
 8008852:	429d      	cmp	r5, r3
 8008854:	bf38      	it	cc
 8008856:	461d      	movcc	r5, r3
 8008858:	0553      	lsls	r3, r2, #21
 800885a:	d530      	bpl.n	80088be <__ssputs_r+0x9e>
 800885c:	4629      	mov	r1, r5
 800885e:	f7ff ff85 	bl	800876c <_malloc_r>
 8008862:	4606      	mov	r6, r0
 8008864:	b950      	cbnz	r0, 800887c <__ssputs_r+0x5c>
 8008866:	230c      	movs	r3, #12
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	f8ca 3000 	str.w	r3, [sl]
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887c:	463a      	mov	r2, r7
 800887e:	6921      	ldr	r1, [r4, #16]
 8008880:	f7fe f956 	bl	8006b30 <memcpy>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800888a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	6126      	str	r6, [r4, #16]
 8008892:	443e      	add	r6, r7
 8008894:	6026      	str	r6, [r4, #0]
 8008896:	464e      	mov	r6, r9
 8008898:	6165      	str	r5, [r4, #20]
 800889a:	1bed      	subs	r5, r5, r7
 800889c:	60a5      	str	r5, [r4, #8]
 800889e:	454e      	cmp	r6, r9
 80088a0:	d900      	bls.n	80088a4 <__ssputs_r+0x84>
 80088a2:	464e      	mov	r6, r9
 80088a4:	4632      	mov	r2, r6
 80088a6:	4641      	mov	r1, r8
 80088a8:	6820      	ldr	r0, [r4, #0]
 80088aa:	f000 f92d 	bl	8008b08 <memmove>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	2000      	movs	r0, #0
 80088b2:	1b9b      	subs	r3, r3, r6
 80088b4:	60a3      	str	r3, [r4, #8]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	441e      	add	r6, r3
 80088ba:	6026      	str	r6, [r4, #0]
 80088bc:	e7dc      	b.n	8008878 <__ssputs_r+0x58>
 80088be:	462a      	mov	r2, r5
 80088c0:	f000 f93d 	bl	8008b3e <_realloc_r>
 80088c4:	4606      	mov	r6, r0
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d1e2      	bne.n	8008890 <__ssputs_r+0x70>
 80088ca:	6921      	ldr	r1, [r4, #16]
 80088cc:	4650      	mov	r0, sl
 80088ce:	f7ff ff01 	bl	80086d4 <_free_r>
 80088d2:	e7c8      	b.n	8008866 <__ssputs_r+0x46>

080088d4 <_svfiprintf_r>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	461d      	mov	r5, r3
 80088da:	898b      	ldrh	r3, [r1, #12]
 80088dc:	b09d      	sub	sp, #116	; 0x74
 80088de:	061f      	lsls	r7, r3, #24
 80088e0:	4680      	mov	r8, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	4616      	mov	r6, r2
 80088e6:	d50f      	bpl.n	8008908 <_svfiprintf_r+0x34>
 80088e8:	690b      	ldr	r3, [r1, #16]
 80088ea:	b96b      	cbnz	r3, 8008908 <_svfiprintf_r+0x34>
 80088ec:	2140      	movs	r1, #64	; 0x40
 80088ee:	f7ff ff3d 	bl	800876c <_malloc_r>
 80088f2:	6020      	str	r0, [r4, #0]
 80088f4:	6120      	str	r0, [r4, #16]
 80088f6:	b928      	cbnz	r0, 8008904 <_svfiprintf_r+0x30>
 80088f8:	230c      	movs	r3, #12
 80088fa:	f8c8 3000 	str.w	r3, [r8]
 80088fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008902:	e0c8      	b.n	8008a96 <_svfiprintf_r+0x1c2>
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	6163      	str	r3, [r4, #20]
 8008908:	2300      	movs	r3, #0
 800890a:	9309      	str	r3, [sp, #36]	; 0x24
 800890c:	2320      	movs	r3, #32
 800890e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008912:	2330      	movs	r3, #48	; 0x30
 8008914:	f04f 0b01 	mov.w	fp, #1
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800891c:	9503      	str	r5, [sp, #12]
 800891e:	4637      	mov	r7, r6
 8008920:	463d      	mov	r5, r7
 8008922:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008926:	b10b      	cbz	r3, 800892c <_svfiprintf_r+0x58>
 8008928:	2b25      	cmp	r3, #37	; 0x25
 800892a:	d13e      	bne.n	80089aa <_svfiprintf_r+0xd6>
 800892c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008930:	d00b      	beq.n	800894a <_svfiprintf_r+0x76>
 8008932:	4653      	mov	r3, sl
 8008934:	4632      	mov	r2, r6
 8008936:	4621      	mov	r1, r4
 8008938:	4640      	mov	r0, r8
 800893a:	f7ff ff71 	bl	8008820 <__ssputs_r>
 800893e:	3001      	adds	r0, #1
 8008940:	f000 80a4 	beq.w	8008a8c <_svfiprintf_r+0x1b8>
 8008944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008946:	4453      	add	r3, sl
 8008948:	9309      	str	r3, [sp, #36]	; 0x24
 800894a:	783b      	ldrb	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 809d 	beq.w	8008a8c <_svfiprintf_r+0x1b8>
 8008952:	2300      	movs	r3, #0
 8008954:	f04f 32ff 	mov.w	r2, #4294967295
 8008958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800895c:	9304      	str	r3, [sp, #16]
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008964:	931a      	str	r3, [sp, #104]	; 0x68
 8008966:	462f      	mov	r7, r5
 8008968:	2205      	movs	r2, #5
 800896a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800896e:	4850      	ldr	r0, [pc, #320]	; (8008ab0 <_svfiprintf_r+0x1dc>)
 8008970:	f7ff fbb8 	bl	80080e4 <memchr>
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	b9d0      	cbnz	r0, 80089ae <_svfiprintf_r+0xda>
 8008978:	06d9      	lsls	r1, r3, #27
 800897a:	bf44      	itt	mi
 800897c:	2220      	movmi	r2, #32
 800897e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008982:	071a      	lsls	r2, r3, #28
 8008984:	bf44      	itt	mi
 8008986:	222b      	movmi	r2, #43	; 0x2b
 8008988:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800898c:	782a      	ldrb	r2, [r5, #0]
 800898e:	2a2a      	cmp	r2, #42	; 0x2a
 8008990:	d015      	beq.n	80089be <_svfiprintf_r+0xea>
 8008992:	462f      	mov	r7, r5
 8008994:	2000      	movs	r0, #0
 8008996:	250a      	movs	r5, #10
 8008998:	9a07      	ldr	r2, [sp, #28]
 800899a:	4639      	mov	r1, r7
 800899c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089a0:	3b30      	subs	r3, #48	; 0x30
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	d94d      	bls.n	8008a42 <_svfiprintf_r+0x16e>
 80089a6:	b1b8      	cbz	r0, 80089d8 <_svfiprintf_r+0x104>
 80089a8:	e00f      	b.n	80089ca <_svfiprintf_r+0xf6>
 80089aa:	462f      	mov	r7, r5
 80089ac:	e7b8      	b.n	8008920 <_svfiprintf_r+0x4c>
 80089ae:	4a40      	ldr	r2, [pc, #256]	; (8008ab0 <_svfiprintf_r+0x1dc>)
 80089b0:	463d      	mov	r5, r7
 80089b2:	1a80      	subs	r0, r0, r2
 80089b4:	fa0b f000 	lsl.w	r0, fp, r0
 80089b8:	4318      	orrs	r0, r3
 80089ba:	9004      	str	r0, [sp, #16]
 80089bc:	e7d3      	b.n	8008966 <_svfiprintf_r+0x92>
 80089be:	9a03      	ldr	r2, [sp, #12]
 80089c0:	1d11      	adds	r1, r2, #4
 80089c2:	6812      	ldr	r2, [r2, #0]
 80089c4:	9103      	str	r1, [sp, #12]
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	db01      	blt.n	80089ce <_svfiprintf_r+0xfa>
 80089ca:	9207      	str	r2, [sp, #28]
 80089cc:	e004      	b.n	80089d8 <_svfiprintf_r+0x104>
 80089ce:	4252      	negs	r2, r2
 80089d0:	f043 0302 	orr.w	r3, r3, #2
 80089d4:	9207      	str	r2, [sp, #28]
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	783b      	ldrb	r3, [r7, #0]
 80089da:	2b2e      	cmp	r3, #46	; 0x2e
 80089dc:	d10c      	bne.n	80089f8 <_svfiprintf_r+0x124>
 80089de:	787b      	ldrb	r3, [r7, #1]
 80089e0:	2b2a      	cmp	r3, #42	; 0x2a
 80089e2:	d133      	bne.n	8008a4c <_svfiprintf_r+0x178>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	3702      	adds	r7, #2
 80089e8:	1d1a      	adds	r2, r3, #4
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	9203      	str	r2, [sp, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfb8      	it	lt
 80089f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	4d2e      	ldr	r5, [pc, #184]	; (8008ab4 <_svfiprintf_r+0x1e0>)
 80089fa:	2203      	movs	r2, #3
 80089fc:	7839      	ldrb	r1, [r7, #0]
 80089fe:	4628      	mov	r0, r5
 8008a00:	f7ff fb70 	bl	80080e4 <memchr>
 8008a04:	b138      	cbz	r0, 8008a16 <_svfiprintf_r+0x142>
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	1b40      	subs	r0, r0, r5
 8008a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	3701      	adds	r7, #1
 8008a12:	4303      	orrs	r3, r0
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	7839      	ldrb	r1, [r7, #0]
 8008a18:	2206      	movs	r2, #6
 8008a1a:	4827      	ldr	r0, [pc, #156]	; (8008ab8 <_svfiprintf_r+0x1e4>)
 8008a1c:	1c7e      	adds	r6, r7, #1
 8008a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a22:	f7ff fb5f 	bl	80080e4 <memchr>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d038      	beq.n	8008a9c <_svfiprintf_r+0x1c8>
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <_svfiprintf_r+0x1e8>)
 8008a2c:	bb13      	cbnz	r3, 8008a74 <_svfiprintf_r+0x1a0>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	3307      	adds	r3, #7
 8008a32:	f023 0307 	bic.w	r3, r3, #7
 8008a36:	3308      	adds	r3, #8
 8008a38:	9303      	str	r3, [sp, #12]
 8008a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3c:	444b      	add	r3, r9
 8008a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a40:	e76d      	b.n	800891e <_svfiprintf_r+0x4a>
 8008a42:	fb05 3202 	mla	r2, r5, r2, r3
 8008a46:	2001      	movs	r0, #1
 8008a48:	460f      	mov	r7, r1
 8008a4a:	e7a6      	b.n	800899a <_svfiprintf_r+0xc6>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	250a      	movs	r5, #10
 8008a50:	4619      	mov	r1, r3
 8008a52:	3701      	adds	r7, #1
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	4638      	mov	r0, r7
 8008a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a5c:	3a30      	subs	r2, #48	; 0x30
 8008a5e:	2a09      	cmp	r2, #9
 8008a60:	d903      	bls.n	8008a6a <_svfiprintf_r+0x196>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0c8      	beq.n	80089f8 <_svfiprintf_r+0x124>
 8008a66:	9105      	str	r1, [sp, #20]
 8008a68:	e7c6      	b.n	80089f8 <_svfiprintf_r+0x124>
 8008a6a:	fb05 2101 	mla	r1, r5, r1, r2
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4607      	mov	r7, r0
 8008a72:	e7f0      	b.n	8008a56 <_svfiprintf_r+0x182>
 8008a74:	ab03      	add	r3, sp, #12
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <_svfiprintf_r+0x1ec>)
 8008a7c:	a904      	add	r1, sp, #16
 8008a7e:	4640      	mov	r0, r8
 8008a80:	f7fe f8fa 	bl	8006c78 <_printf_float>
 8008a84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a88:	4681      	mov	r9, r0
 8008a8a:	d1d6      	bne.n	8008a3a <_svfiprintf_r+0x166>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	065b      	lsls	r3, r3, #25
 8008a90:	f53f af35 	bmi.w	80088fe <_svfiprintf_r+0x2a>
 8008a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a96:	b01d      	add	sp, #116	; 0x74
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	ab03      	add	r3, sp, #12
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <_svfiprintf_r+0x1ec>)
 8008aa4:	a904      	add	r1, sp, #16
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7fe fb92 	bl	80071d0 <_printf_i>
 8008aac:	e7ea      	b.n	8008a84 <_svfiprintf_r+0x1b0>
 8008aae:	bf00      	nop
 8008ab0:	08008e6c 	.word	0x08008e6c
 8008ab4:	08008e72 	.word	0x08008e72
 8008ab8:	08008e76 	.word	0x08008e76
 8008abc:	08006c79 	.word	0x08006c79
 8008ac0:	08008821 	.word	0x08008821

08008ac4 <_sbrk_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4c05      	ldr	r4, [pc, #20]	; (8008ae0 <_sbrk_r+0x1c>)
 8008aca:	4605      	mov	r5, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	f7f9 fc62 	bl	8002398 <_sbrk>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_sbrk_r+0x1a>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_sbrk_r+0x1a>
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20001f28 	.word	0x20001f28

08008ae4 <__ascii_mbtowc>:
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	b901      	cbnz	r1, 8008aea <__ascii_mbtowc+0x6>
 8008ae8:	a901      	add	r1, sp, #4
 8008aea:	b142      	cbz	r2, 8008afe <__ascii_mbtowc+0x1a>
 8008aec:	b14b      	cbz	r3, 8008b02 <__ascii_mbtowc+0x1e>
 8008aee:	7813      	ldrb	r3, [r2, #0]
 8008af0:	600b      	str	r3, [r1, #0]
 8008af2:	7812      	ldrb	r2, [r2, #0]
 8008af4:	1c10      	adds	r0, r2, #0
 8008af6:	bf18      	it	ne
 8008af8:	2001      	movne	r0, #1
 8008afa:	b002      	add	sp, #8
 8008afc:	4770      	bx	lr
 8008afe:	4610      	mov	r0, r2
 8008b00:	e7fb      	b.n	8008afa <__ascii_mbtowc+0x16>
 8008b02:	f06f 0001 	mvn.w	r0, #1
 8008b06:	e7f8      	b.n	8008afa <__ascii_mbtowc+0x16>

08008b08 <memmove>:
 8008b08:	4288      	cmp	r0, r1
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	eb01 0302 	add.w	r3, r1, r2
 8008b10:	d807      	bhi.n	8008b22 <memmove+0x1a>
 8008b12:	1e42      	subs	r2, r0, #1
 8008b14:	4299      	cmp	r1, r3
 8008b16:	d00a      	beq.n	8008b2e <memmove+0x26>
 8008b18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b20:	e7f8      	b.n	8008b14 <memmove+0xc>
 8008b22:	4283      	cmp	r3, r0
 8008b24:	d9f5      	bls.n	8008b12 <memmove+0xa>
 8008b26:	1881      	adds	r1, r0, r2
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	42d3      	cmn	r3, r2
 8008b2c:	d100      	bne.n	8008b30 <memmove+0x28>
 8008b2e:	bd10      	pop	{r4, pc}
 8008b30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b38:	e7f7      	b.n	8008b2a <memmove+0x22>

08008b3a <__malloc_lock>:
 8008b3a:	4770      	bx	lr

08008b3c <__malloc_unlock>:
 8008b3c:	4770      	bx	lr

08008b3e <_realloc_r>:
 8008b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b40:	4607      	mov	r7, r0
 8008b42:	4614      	mov	r4, r2
 8008b44:	460e      	mov	r6, r1
 8008b46:	b921      	cbnz	r1, 8008b52 <_realloc_r+0x14>
 8008b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	f7ff be0d 	b.w	800876c <_malloc_r>
 8008b52:	b922      	cbnz	r2, 8008b5e <_realloc_r+0x20>
 8008b54:	f7ff fdbe 	bl	80086d4 <_free_r>
 8008b58:	4625      	mov	r5, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b5e:	f000 f821 	bl	8008ba4 <_malloc_usable_size_r>
 8008b62:	42a0      	cmp	r0, r4
 8008b64:	d20f      	bcs.n	8008b86 <_realloc_r+0x48>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff fdff 	bl	800876c <_malloc_r>
 8008b6e:	4605      	mov	r5, r0
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d0f2      	beq.n	8008b5a <_realloc_r+0x1c>
 8008b74:	4631      	mov	r1, r6
 8008b76:	4622      	mov	r2, r4
 8008b78:	f7fd ffda 	bl	8006b30 <memcpy>
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f7ff fda8 	bl	80086d4 <_free_r>
 8008b84:	e7e9      	b.n	8008b5a <_realloc_r+0x1c>
 8008b86:	4635      	mov	r5, r6
 8008b88:	e7e7      	b.n	8008b5a <_realloc_r+0x1c>

08008b8a <__ascii_wctomb>:
 8008b8a:	b149      	cbz	r1, 8008ba0 <__ascii_wctomb+0x16>
 8008b8c:	2aff      	cmp	r2, #255	; 0xff
 8008b8e:	bf8b      	itete	hi
 8008b90:	238a      	movhi	r3, #138	; 0x8a
 8008b92:	700a      	strbls	r2, [r1, #0]
 8008b94:	6003      	strhi	r3, [r0, #0]
 8008b96:	2001      	movls	r0, #1
 8008b98:	bf88      	it	hi
 8008b9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b9e:	4770      	bx	lr
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	4770      	bx	lr

08008ba4 <_malloc_usable_size_r>:
 8008ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba8:	1f18      	subs	r0, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbc      	itt	lt
 8008bae:	580b      	ldrlt	r3, [r1, r0]
 8008bb0:	18c0      	addlt	r0, r0, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_init>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr

08008bc0 <_fini>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr
