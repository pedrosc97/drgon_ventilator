
drgon_ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800857c  0800857c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008584  08008584  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800858c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004348  20000074  08008600  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043bc  08008600  000243bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b118  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003925  00000000  00000000  0003b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  0003eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001610  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025040  00000000  00000000  000418c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013cd4  00000000  00000000  00066900  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc5eb  00000000  00000000  0007a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006658  00000000  00000000  00156c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008340 	.word	0x08008340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008340 	.word	0x08008340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BuzzerInit>:
 */

#include "buzzer_api.h"

void BuzzerInit(Buzzer_S *buzzer_)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	buzzer_->cycle_frequency_hz = DEFAULT_BUZZER_CYCLE_TIME_MS;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2202      	movs	r2, #2
 800057c:	80da      	strh	r2, [r3, #6]
	buzzer_->sound_volume_percentage = DEFAULT_BUZZER_DUTY_CYCLE;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	721a      	strb	r2, [r3, #8]
	buzzer_->sound_frequency_hz = DEFAULT_BUZZER_PERIOD_MS;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058a:	809a      	strh	r2, [r3, #4]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <DCMotorInit>:
 */

#include "dc_motor_api.h"

void DCMotorInit(DCMotor_S *dc_motor_, TIM_HandleTypeDef *timer_handler_)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	dc_motor_->motor_pwm_ctrl = timer_handler_;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	601a      	str	r2, [r3, #0]
	dc_motor_->pwm_value = 0;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	809a      	strh	r2, [r3, #4]
	dc_motor_->direction_flag = MOTOR_SPIN_STOP;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2202      	movs	r2, #2
 80005b2:	719a      	strb	r2, [r3, #6]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <DCMotorVoltageSet>:

void DCMotorVoltageSet(DCMotor_S *dc_motor_, float *voltage_)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    float abs_voltage = 0;
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24

	if (*voltage_ < 0)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	edd3 7a00 	vldr	s15, [r3]
 80005d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005de:	d50a      	bpl.n	80005f6 <DCMotorVoltageSet+0x36>
    {
		abs_voltage = -(*voltage_);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	edd3 7a00 	vldr	s15, [r3]
 80005e6:	eef1 7a67 	vneg.f32	s15, s15
 80005ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		dc_motor_->direction_flag = MOTOR_SPIN_CW;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	719a      	strb	r2, [r3, #6]
 80005f4:	e014      	b.n	8000620 <DCMotorVoltageSet+0x60>
    }
	else if (*voltage_ > 0)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000604:	dd06      	ble.n	8000614 <DCMotorVoltageSet+0x54>
	{
		abs_voltage = *voltage_;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
		dc_motor_->direction_flag = MOTOR_SPIN_CCW;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	719a      	strb	r2, [r3, #6]
 8000612:	e005      	b.n	8000620 <DCMotorVoltageSet+0x60>
	}
	else
	{
		abs_voltage = 0;
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
		dc_motor_->direction_flag = MOTOR_SPIN_STOP;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2202      	movs	r2, #2
 800061e:	719a      	strb	r2, [r3, #6]
	}

	dc_motor_->pwm_value = (uint16_t) (abs_voltage / MAX_MOTOR_VOLTAGE * MAX_MOTOR_PWM_VALUE);
 8000620:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000624:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8000628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800062c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80006e4 <DCMotorVoltageSet+0x124>
 8000630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000638:	ee17 3a90 	vmov	r3, s15
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	809a      	strh	r2, [r3, #4]

	TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000642:	2360      	movs	r3, #96	; 0x60
 8000644:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = dc_motor_->pwm_value - 1;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	889b      	ldrh	r3, [r3, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]

    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fae7 	bl	8004c3c <HAL_TIM_PWM_Stop>

    if (dc_motor_->direction_flag == MOTOR_SPIN_CW)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	799b      	ldrb	r3, [r3, #6]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10a      	bne.n	800068c <DCMotorVoltageSet+0xcc>
    {
		HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2110      	movs	r1, #16
 800067a:	481b      	ldr	r0, [pc, #108]	; (80006e8 <DCMotorVoltageSet+0x128>)
 800067c:	f003 f8d4 	bl	8003828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <DCMotorVoltageSet+0x128>)
 8000686:	f003 f8cf 	bl	8003828 <HAL_GPIO_WritePin>
 800068a:	e018      	b.n	80006be <DCMotorVoltageSet+0xfe>
    }
	else if (dc_motor_->direction_flag == MOTOR_SPIN_CCW)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	799b      	ldrb	r3, [r3, #6]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d10a      	bne.n	80006aa <DCMotorVoltageSet+0xea>
	{
		HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2110      	movs	r1, #16
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <DCMotorVoltageSet+0x128>)
 800069a:	f003 f8c5 	bl	8003828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2120      	movs	r1, #32
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <DCMotorVoltageSet+0x128>)
 80006a4:	f003 f8c0 	bl	8003828 <HAL_GPIO_WritePin>
 80006a8:	e009      	b.n	80006be <DCMotorVoltageSet+0xfe>
    }
	else
	{
		HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <DCMotorVoltageSet+0x128>)
 80006b0:	f003 f8ba 	bl	8003828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2120      	movs	r1, #32
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <DCMotorVoltageSet+0x128>)
 80006ba:	f003 f8b5 	bl	8003828 <HAL_GPIO_WritePin>
    }

    if (HAL_TIM_PWM_ConfigChannel(dc_motor_->motor_pwm_ctrl, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f107 0108 	add.w	r1, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fd01 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
    {
    	//Error_Handler();
    }

    HAL_TIM_PWM_Start(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fa73 	bl	8004bc0 <HAL_TIM_PWM_Start>
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	45fa0000 	.word	0x45fa0000
 80006e8:	40020c00 	.word	0x40020c00

080006ec <DCMotorStop>:

void DCMotorStop(DCMotor_S *dc_motor_)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(dc_motor_->motor_pwm_ctrl, TIM_CHANNEL_1);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fa9e 	bl	8004c3c <HAL_TIM_PWM_Stop>
    HAL_GPIO_WritePin(MotorCW_GPIO_Port, MotorCW_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2110      	movs	r1, #16
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <DCMotorStop+0x30>)
 8000706:	f003 f88f 	bl	8003828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MotorCCW_GPIO_Port, MotorCCW_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <DCMotorStop+0x30>)
 8000710:	f003 f88a 	bl	8003828 <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020c00 	.word	0x40020c00

08000720 <EncoderInit>:
 */

#include "encoder_api.h"

void EncoderInit(Encoder_S *encoder_, TIM_TypeDef *timer_, EncoderModel_E model_)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	4613      	mov	r3, r2
 800072c:	80fb      	strh	r3, [r7, #6]
	encoder_->model = model_;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	811a      	strh	r2, [r3, #8]
	encoder_->rpm = 0;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	encoder_->prev_pulse_count = 0;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	815a      	strh	r2, [r3, #10]
	encoder_->timer = timer_;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	60da      	str	r2, [r3, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <UpdateEncoderParams>:

void UpdateEncoderParams(Encoder_S *encoder_, uint16_t timestep_ms_)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
	int32_t delta_count;
	delta_count = ((uint16_t) encoder_->timer->CNT) - encoder_->prev_pulse_count;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	895b      	ldrh	r3, [r3, #10]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
	encoder_->prev_pulse_count = (uint16_t) encoder_->timer->CNT;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000778:	b29a      	uxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	815a      	strh	r2, [r3, #10]

	float pulses_per_second;
	pulses_per_second = ((float) delta_count / (float) timestep_ms_) * (float) MILISECONDS_PER_SECOND;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000796:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000824 <UpdateEncoderParams+0xd0>
 800079a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800079e:	edc7 7a04 	vstr	s15, [r7, #16]

	float revs_per_minute;
	revs_per_minute = (pulses_per_second / (float) encoder_->model) * (float) SECONDS_PER_MINUTE;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	891b      	ldrh	r3, [r3, #8]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007ae:	edd7 6a04 	vldr	s13, [r7, #16]
 80007b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000828 <UpdateEncoderParams+0xd4>
 80007ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007be:	edc7 7a03 	vstr	s15, [r7, #12]

	if (revs_per_minute < RPM_LPF_THRESHOLD && revs_per_minute > -RPM_LPF_THRESHOLD)
 80007c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800082c <UpdateEncoderParams+0xd8>
 80007ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d2:	d50b      	bpl.n	80007ec <UpdateEncoderParams+0x98>
 80007d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80007d8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000830 <UpdateEncoderParams+0xdc>
 80007dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e4:	dd02      	ble.n	80007ec <UpdateEncoderParams+0x98>
	{
		encoder_->rpm = revs_per_minute;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	601a      	str	r2, [r3, #0]
	}

	encoder_->angle = (float)  encoder_->timer->CNT / (float) encoder_->model * DEGREES_PER_REV;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f2:	ee07 3a90 	vmov	s15, r3
 80007f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	891b      	ldrh	r3, [r3, #8]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800080a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000834 <UpdateEncoderParams+0xe0>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000818:	bf00      	nop
 800081a:	371c      	adds	r7, #28
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	447a0000 	.word	0x447a0000
 8000828:	42700000 	.word	0x42700000
 800082c:	43160000 	.word	0x43160000
 8000830:	c3160000 	.word	0xc3160000
 8000834:	43b40000 	.word	0x43b40000

08000838 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <vApplicationGetIdleTaskMemory+0x2c>)
 8000848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <vApplicationGetIdleTaskMemory+0x30>)
 800084e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000090 	.word	0x20000090
 8000868:	200000e4 	.word	0x200000e4

0800086c <LCDSendCmd>:

#include "stm32f4xx_hal.h"
#include "lcd_display_api.h"

void LCDSendCmd(LCDDisplay_S *lcd_disp_, char cmd)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b087      	sub	sp, #28
 8000870:	af02      	add	r7, sp, #8
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	f023 030f 	bic.w	r3, r3, #15
 800087e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	f043 030c 	orr.w	r3, r3, #12
 800088c:	b2db      	uxtb	r3, r3
 800088e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	b2db      	uxtb	r3, r3
 8000898:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	f043 030c 	orr.w	r3, r3, #12
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	f043 0308 	orr.w	r3, r3, #8
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	b299      	uxth	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7a1b      	ldrb	r3, [r3, #8]
 80008bc:	b29c      	uxth	r4, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	88db      	ldrh	r3, [r3, #6]
 80008c2:	f107 0208 	add.w	r2, r7, #8
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	4623      	mov	r3, r4
 80008ca:	f003 f8ff 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd90      	pop	{r4, r7, pc}

080008d6 <LCDSendData>:

void LCDSendData(LCDDisplay_S *lcd_disp_, char data)
{
 80008d6:	b590      	push	{r4, r7, lr}
 80008d8:	b087      	sub	sp, #28
 80008da:	af02      	add	r7, sp, #8
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	f023 030f 	bic.w	r3, r3, #15
 80008e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f043 030d 	orr.w	r3, r3, #13
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	f043 0309 	orr.w	r3, r3, #9
 8000900:	b2db      	uxtb	r3, r3
 8000902:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	f043 030d 	orr.w	r3, r3, #13
 800090a:	b2db      	uxtb	r3, r3
 800090c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	f043 0309 	orr.w	r3, r3, #9
 8000914:	b2db      	uxtb	r3, r3
 8000916:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd_disp_->i2c_handler, lcd_disp_->i2c_address, (uint8_t *) data_t, lcd_disp_->byte_mode, lcd_disp_->i2c_timeout);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	b299      	uxth	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7a1b      	ldrb	r3, [r3, #8]
 8000926:	b29c      	uxth	r4, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	88db      	ldrh	r3, [r3, #6]
 800092c:	f107 0208 	add.w	r2, r7, #8
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4623      	mov	r3, r4
 8000934:	f003 f8ca 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bd90      	pop	{r4, r7, pc}

08000940 <LCDClear>:

void LCDClear(LCDDisplay_S *lcd_disp_)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	LCDSendCmd(lcd_disp_, 0x80);
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff8e 	bl	800086c <LCDSendCmd>
	for (int i = 0; i < 70; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e006      	b.n	8000964 <LCDClear+0x24>
	{
		LCDSendData(lcd_disp_, ' ');
 8000956:	2120      	movs	r1, #32
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ffbc 	bl	80008d6 <LCDSendData>
	for (int i = 0; i < 70; i++)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3301      	adds	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b45      	cmp	r3, #69	; 0x45
 8000968:	ddf5      	ble.n	8000956 <LCDClear+0x16>
	}
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <LCDSetCursorPos>:

void LCDSetCursorPos(LCDDisplay_S *lcd_disp_, uint8_t row, uint8_t col)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
 8000980:	4613      	mov	r3, r2
 8000982:	70bb      	strb	r3, [r7, #2]
	uint16_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <LCDSetCursorPos+0x50>)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCDSendCmd(lcd_disp_, (0x80 | (row_offsets[row] + col)) );
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	f107 0210 	add.w	r2, r7, #16
 800099a:	4413      	add	r3, r2
 800099c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	78bb      	ldrb	r3, [r7, #2]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff59 	bl	800086c <LCDSendCmd>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	08008358 	.word	0x08008358

080009c8 <LCDInit>:

void LCDInit(LCDDisplay_S *lcd_disp_, I2C_HandleTypeDef *i2c_handler_)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	lcd_disp_->i2c_handler = i2c_handler_;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	601a      	str	r2, [r3, #0]
	lcd_disp_->byte_mode = LCD_DISP_4_BYTE_MODE;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2204      	movs	r2, #4
 80009dc:	721a      	strb	r2, [r3, #8]
	lcd_disp_->i2c_address = LCD_I2C_ADDRESS;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	224e      	movs	r2, #78	; 0x4e
 80009e2:	711a      	strb	r2, [r3, #4]
	lcd_disp_->i2c_timeout = LCD_DISP_I2C_TIMEOUT_MS;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2264      	movs	r2, #100	; 0x64
 80009e8:	80da      	strh	r2, [r3, #6]

	HAL_Delay(50);
 80009ea:	2032      	movs	r0, #50	; 0x32
 80009ec:	f001 fd1c 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80009f0:	2130      	movs	r1, #48	; 0x30
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff3a 	bl	800086c <LCDSendCmd>
	HAL_Delay(5);
 80009f8:	2005      	movs	r0, #5
 80009fa:	f001 fd15 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 80009fe:	2130      	movs	r1, #48	; 0x30
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff33 	bl	800086c <LCDSendCmd>
	HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f001 fd0e 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x30);
 8000a0c:	2130      	movs	r1, #48	; 0x30
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff2c 	bl	800086c <LCDSendCmd>
	HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f001 fd07 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x20);
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff25 	bl	800086c <LCDSendCmd>
	HAL_Delay(10);
 8000a22:	200a      	movs	r0, #10
 8000a24:	f001 fd00 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a28:	2128      	movs	r1, #40	; 0x28
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ff1e 	bl	800086c <LCDSendCmd>
	HAL_Delay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f001 fcf9 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a36:	2108      	movs	r1, #8
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff17 	bl	800086c <LCDSendCmd>
	HAL_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f001 fcf2 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x01); // clear display
 8000a44:	2101      	movs	r1, #1
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff10 	bl	800086c <LCDSendCmd>
	HAL_Delay(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f001 fceb 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a52:	2106      	movs	r1, #6
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff09 	bl	800086c <LCDSendCmd>
	HAL_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f001 fce4 	bl	8002428 <HAL_Delay>
	LCDSendCmd(lcd_disp_, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a60:	210c      	movs	r1, #12
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ff02 	bl	800086c <LCDSendCmd>
	HAL_Delay(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f001 fcdd 	bl	8002428 <HAL_Delay>
	LCDClear(lcd_disp_);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ff66 	bl	8000940 <LCDClear>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <LCDSendString>:

void LCDSendString(LCDDisplay_S *lcd_disp_, char *str)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	while (*str)
 8000a86:	e007      	b.n	8000a98 <LCDSendString+0x1c>
	{
		LCDSendData(lcd_disp_, *str++);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	603a      	str	r2, [r7, #0]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff1f 	bl	80008d6 <LCDSendData>
	while (*str)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f3      	bne.n	8000a88 <LCDSendString+0xc>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b0c0      	sub	sp, #256	; 0x100
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f001 fc79 	bl	80023a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f913 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 fbff 	bl	80012b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aba:	f000 fbdd 	bl	8001278 <MX_DMA_Init>
  MX_ADC1_Init();
 8000abe:	f000 f977 	bl	8000db0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ac2:	f000 f9f1 	bl	8000ea8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ac6:	f000 fa1d 	bl	8000f04 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000aca:	f000 fa51 	bl	8000f70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ace:	f000 faa9 	bl	8001024 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ad2:	f000 fb01 	bl	80010d8 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000ad6:	f000 fb59 	bl	800118c <MX_TIM10_Init>
  MX_UART5_Init();
 8000ada:	f000 fba3 	bl	8001224 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  DCMotorInit(&dc_motor, &htim5);
 8000ade:	4963      	ldr	r1, [pc, #396]	; (8000c6c <main+0x1c4>)
 8000ae0:	4863      	ldr	r0, [pc, #396]	; (8000c70 <main+0x1c8>)
 8000ae2:	f7ff fd59 	bl	8000598 <DCMotorInit>
  EncoderInit(&motor_encoder, TIM3, MOTOR_MODEL);
 8000ae6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000aea:	4962      	ldr	r1, [pc, #392]	; (8000c74 <main+0x1cc>)
 8000aec:	4862      	ldr	r0, [pc, #392]	; (8000c78 <main+0x1d0>)
 8000aee:	f7ff fe17 	bl	8000720 <EncoderInit>
  EncoderInit(&arm_encoder, TIM4, ARM_MODEL);
 8000af2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000af6:	4961      	ldr	r1, [pc, #388]	; (8000c7c <main+0x1d4>)
 8000af8:	4861      	ldr	r0, [pc, #388]	; (8000c80 <main+0x1d8>)
 8000afa:	f7ff fe11 	bl	8000720 <EncoderInit>
  LCDInit(&lcd_display, &hi2c1);
 8000afe:	4961      	ldr	r1, [pc, #388]	; (8000c84 <main+0x1dc>)
 8000b00:	4861      	ldr	r0, [pc, #388]	; (8000c88 <main+0x1e0>)
 8000b02:	f7ff ff61 	bl	80009c8 <LCDInit>
  PotControlsInit(pot_controls_a);
 8000b06:	4861      	ldr	r0, [pc, #388]	; (8000c8c <main+0x1e4>)
 8000b08:	f000 feed 	bl	80018e6 <PotControlsInit>
  BuzzerInit(&buzzer);
 8000b0c:	4860      	ldr	r0, [pc, #384]	; (8000c90 <main+0x1e8>)
 8000b0e:	f7ff fd2f 	bl	8000570 <BuzzerInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of initTask */
  osThreadDef(initTask, initTaskFn, osPriorityRealtime, 0, 128);
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <main+0x1ec>)
 8000b14:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000b18:	461d      	mov	r5, r3
 8000b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(initTask), NULL);
 8000b26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 face 	bl	80060ce <osThreadCreate>
 8000b32:	4602      	mov	r2, r0
 8000b34:	4b58      	ldr	r3, [pc, #352]	; (8000c98 <main+0x1f0>)
 8000b36:	601a      	str	r2, [r3, #0]

  /* definition and creation of mainRoutine */
  osThreadDef(mainRoutine, mainRoutineFn, osPriorityHigh, 0, 128);
 8000b38:	4b58      	ldr	r3, [pc, #352]	; (8000c9c <main+0x1f4>)
 8000b3a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000b3e:	461d      	mov	r5, r3
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainRoutineHandle = osThreadCreate(osThread(mainRoutine), NULL);
 8000b4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 fabb 	bl	80060ce <osThreadCreate>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b51      	ldr	r3, [pc, #324]	; (8000ca0 <main+0x1f8>)
 8000b5c:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayUI */
  osThreadDef(displayUI, displayUIFn, osPriorityHigh, 0, 128);
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <main+0x1fc>)
 8000b60:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000b64:	461d      	mov	r5, r3
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUIHandle = osThreadCreate(osThread(displayUI), NULL);
 8000b72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 faa8 	bl	80060ce <osThreadCreate>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	4b49      	ldr	r3, [pc, #292]	; (8000ca8 <main+0x200>)
 8000b82:	601a      	str	r2, [r3, #0]

  /* definition and creation of motorEncoder */
  osThreadDef(motorEncoder, motorEncoderFn, osPriorityRealtime, 0, 128);
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <main+0x204>)
 8000b86:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorEncoderHandle = osThreadCreate(osThread(motorEncoder), NULL);
 8000b98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f005 fa95 	bl	80060ce <osThreadCreate>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <main+0x208>)
 8000ba8:	601a      	str	r2, [r3, #0]

  /* definition and creation of armEncoder */
  osThreadDef(armEncoder, armEncoderFn, osPriorityRealtime, 0, 128);
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <main+0x20c>)
 8000bac:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armEncoderHandle = osThreadCreate(osThread(armEncoder), NULL);
 8000bbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f005 fa82 	bl	80060ce <osThreadCreate>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <main+0x210>)
 8000bce:	601a      	str	r2, [r3, #0]

  /* definition and creation of diagnosticsSrv */
  osThreadDef(diagnosticsSrv, diagnosticsSrvFn, osPriorityHigh, 0, 128);
 8000bd0:	4b3a      	ldr	r3, [pc, #232]	; (8000cbc <main+0x214>)
 8000bd2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diagnosticsSrvHandle = osThreadCreate(osThread(diagnosticsSrv), NULL);
 8000be4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 fa6f 	bl	80060ce <osThreadCreate>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <main+0x218>)
 8000bf4:	601a      	str	r2, [r3, #0]

  /* definition and creation of userInput */
  osThreadDef(userInput, userInputFn, osPriorityHigh, 0, 128);
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <main+0x21c>)
 8000bf8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bfc:	461d      	mov	r5, r3
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userInputHandle = osThreadCreate(osThread(userInput), NULL);
 8000c0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f005 fa5c 	bl	80060ce <osThreadCreate>
 8000c16:	4602      	mov	r2, r0
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <main+0x220>)
 8000c1a:	601a      	str	r2, [r3, #0]

  /* definition and creation of alarmMonitor */
  osThreadDef(alarmMonitor, alarmMonitorFn, osPriorityRealtime, 0, 128);
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <main+0x224>)
 8000c1e:	f107 0420 	add.w	r4, r7, #32
 8000c22:	461d      	mov	r5, r3
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmMonitorHandle = osThreadCreate(osThread(alarmMonitor), NULL);
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 fa49 	bl	80060ce <osThreadCreate>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <main+0x228>)
 8000c40:	601a      	str	r2, [r3, #0]

  /* definition and creation of pressureSnsr */
  osThreadDef(pressureSnsr, pressureSnsrFn, osPriorityHigh, 0, 128);
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <main+0x22c>)
 8000c44:	1d3c      	adds	r4, r7, #4
 8000c46:	461d      	mov	r5, r3
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSnsrHandle = osThreadCreate(osThread(pressureSnsr), NULL);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f005 fa38 	bl	80060ce <osThreadCreate>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <main+0x230>)
 8000c62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c64:	f005 fa1c 	bl	80060a0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x1c0>
 8000c6a:	bf00      	nop
 8000c6c:	20004134 	.word	0x20004134
 8000c70:	2000428c 	.word	0x2000428c
 8000c74:	40000400 	.word	0x40000400
 8000c78:	20004278 	.word	0x20004278
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	20004118 	.word	0x20004118
 8000c84:	20004084 	.word	0x20004084
 8000c88:	20004128 	.word	0x20004128
 8000c8c:	20004360 	.word	0x20004360
 8000c90:	2000426c 	.word	0x2000426c
 8000c94:	0800836c 	.word	0x0800836c
 8000c98:	20004370 	.word	0x20004370
 8000c9c:	08008394 	.word	0x08008394
 8000ca0:	200042fc 	.word	0x200042fc
 8000ca4:	080083bc 	.word	0x080083bc
 8000ca8:	20004298 	.word	0x20004298
 8000cac:	080083e8 	.word	0x080083e8
 8000cb0:	20004288 	.word	0x20004288
 8000cb4:	08008410 	.word	0x08008410
 8000cb8:	20004294 	.word	0x20004294
 8000cbc:	0800843c 	.word	0x0800843c
 8000cc0:	20004040 	.word	0x20004040
 8000cc4:	08008464 	.word	0x08008464
 8000cc8:	2000403c 	.word	0x2000403c
 8000ccc:	08008490 	.word	0x08008490
 8000cd0:	20004304 	.word	0x20004304
 8000cd4:	080084bc 	.word	0x080084bc
 8000cd8:	20004300 	.word	0x20004300

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	; 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	; 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f006 ff23 	bl	8007b36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <SystemClock_Config+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <SystemClock_Config+0xd0>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 f9bb 	bl	80040dc <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d6c:	f000 fdb4 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fc14 	bl	80045bc <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d9a:	f000 fd9d 	bl	80018d8 <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3750      	adds	r7, #80	; 0x50
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40007000 	.word	0x40007000

08000db0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000dc4:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <MX_ADC1_Init+0xf0>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dda:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000df0:	4a2c      	ldr	r2, [pc, #176]	; (8000ea4 <MX_ADC1_Init+0xf4>)
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0e:	4823      	ldr	r0, [pc, #140]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e10:	f001 fb2c 	bl	800246c <HAL_ADC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 fd5d 	bl	80018d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481b      	ldr	r0, [pc, #108]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e30:	f001 fc70 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e3a:	f000 fd4d 	bl	80018d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4814      	ldr	r0, [pc, #80]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e4c:	f001 fc62 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e56:	f000 fd3f 	bl	80018d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e68:	f001 fc54 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e72:	f000 fd31 	bl	80018d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e76:	2309      	movs	r3, #9
 8000e78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_ADC1_Init+0xec>)
 8000e84:	f001 fc46 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e8e:	f000 fd23 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200041f4 	.word	0x200041f4
 8000ea0:	40012000 	.word	0x40012000
 8000ea4:	0f000001 	.word	0x0f000001

08000ea8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <MX_I2C1_Init+0x54>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x58>)
 8000eb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ec6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ee6:	f002 fcb9 	bl	800385c <HAL_I2C_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef0:	f000 fcf2 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20004084 	.word	0x20004084
 8000efc:	40005400 	.word	0x40005400
 8000f00:	000186a0 	.word	0x000186a0

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4e:	220a      	movs	r2, #10
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f54:	f003 fd56 	bl	8004a04 <HAL_SPI_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000f5e:	f000 fcbb 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20004308 	.word	0x20004308
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2224      	movs	r2, #36	; 0x24
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f006 fdd9 	bl	8007b36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_TIM3_Init+0xac>)
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <MX_TIM3_Init+0xb0>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_TIM3_Init+0xac>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_TIM3_Init+0xac>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_TIM3_Init+0xac>)
 8000fa0:	f240 623f 	movw	r2, #1599	; 0x63f
 8000fa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_TIM3_Init+0xac>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_TIM3_Init+0xac>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <MX_TIM3_Init+0xac>)
 8000fde:	f003 fe85 	bl	8004cec <HAL_TIM_Encoder_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fe8:	f000 fc76 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <MX_TIM3_Init+0xac>)
 8000ffa:	f004 fbcd 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001004:	f000 fc68 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, htim3.Channel);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <MX_TIM3_Init+0xac>)
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	4619      	mov	r1, r3
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM3_Init+0xac>)
 8001010:	f003 fefe 	bl	8004e10 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	; 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20004174 	.word	0x20004174
 8001020:	40000400 	.word	0x40000400

08001024 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2224      	movs	r2, #36	; 0x24
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fd7f 	bl	8007b36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MX_TIM4_Init+0xac>)
 8001042:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <MX_TIM4_Init+0xb0>)
 8001044:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_TIM4_Init+0xac>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_TIM4_Init+0xac>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2400-1;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM4_Init+0xac>)
 8001054:	f640 125f 	movw	r2, #2399	; 0x95f
 8001058:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_TIM4_Init+0xac>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM4_Init+0xac>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001066:	2303      	movs	r3, #3
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800107e:	2301      	movs	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <MX_TIM4_Init+0xac>)
 8001092:	f003 fe2b 	bl	8004cec <HAL_TIM_Encoder_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 fc1c 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_TIM4_Init+0xac>)
 80010ae:	f004 fb73 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010b8:	f000 fc0e 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim4, htim4.Channel);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <MX_TIM4_Init+0xac>)
 80010be:	7f1b      	ldrb	r3, [r3, #28]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM4_Init+0xac>)
 80010c4:	f003 fea4 	bl	8004e10 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20004044 	.word	0x20004044
 80010d4:	40000800 	.word	0x40000800

080010d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_TIM5_Init+0xac>)
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <MX_TIM5_Init+0xb0>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <MX_TIM5_Init+0xac>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_TIM5_Init+0xac>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8000-1;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_TIM5_Init+0xac>)
 800110e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001112:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_TIM5_Init+0xac>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_TIM5_Init+0xac>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <MX_TIM5_Init+0xac>)
 8001122:	f003 fd22 	bl	8004b6a <HAL_TIM_PWM_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 fbd4 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4619      	mov	r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <MX_TIM5_Init+0xac>)
 8001140:	f004 fb2a 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800114a:	f000 fbc5 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114e:	2360      	movs	r3, #96	; 0x60
 8001150:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2204      	movs	r2, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM5_Init+0xac>)
 8001166:	f003 ffb3 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001170:	f000 fbb2 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM5_Init+0xac>)
 8001176:	f000 fe3d 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20004134 	.word	0x20004134
 8001188:	40000c00 	.word	0x40000c00

0800118c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM10_Init+0x90>)
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <MX_TIM10_Init+0x94>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_TIM10_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM10_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_TIM10_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_TIM10_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_TIM10_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011c8:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_TIM10_Init+0x90>)
 80011ca:	f003 fc7f 	bl	8004acc <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 fb80 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <MX_TIM10_Init+0x90>)
 80011da:	f003 fcc6 	bl	8004b6a <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f000 fb78 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM10_Init+0x90>)
 8001200:	f003 ff66 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 800120a:	f000 fb65 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM10_Init+0x90>)
 8001210:	f000 fdf0 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200040d8 	.word	0x200040d8
 8001220:	40014400 	.word	0x40014400

08001224 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_UART5_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_UART5_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_UART5_Init+0x4c>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_UART5_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_UART5_Init+0x4c>)
 800123e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001242:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_UART5_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_UART5_Init+0x4c>)
 800124c:	220c      	movs	r2, #12
 800124e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_UART5_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_UART5_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_UART5_Init+0x4c>)
 800125e:	f004 fb2b 	bl	80058b8 <HAL_UART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8001268:	f000 fb36 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200041b4 	.word	0x200041b4
 8001274:	40005000 	.word	0x40005000

08001278 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_DMA_Init+0x3c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <MX_DMA_Init+0x3c>)
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_DMA_Init+0x3c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f001 fd90 	bl	8002dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a4:	2038      	movs	r0, #56	; 0x38
 80012a6:	f001 fda9 	bl	8002dfc <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	4b4e      	ldr	r3, [pc, #312]	; (800140c <MX_GPIO_Init+0x154>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a4d      	ldr	r2, [pc, #308]	; (800140c <MX_GPIO_Init+0x154>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b4b      	ldr	r3, [pc, #300]	; (800140c <MX_GPIO_Init+0x154>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <MX_GPIO_Init+0x154>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a46      	ldr	r2, [pc, #280]	; (800140c <MX_GPIO_Init+0x154>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <MX_GPIO_Init+0x154>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b40      	ldr	r3, [pc, #256]	; (800140c <MX_GPIO_Init+0x154>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <MX_GPIO_Init+0x154>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <MX_GPIO_Init+0x154>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <MX_GPIO_Init+0x154>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a38      	ldr	r2, [pc, #224]	; (800140c <MX_GPIO_Init+0x154>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <MX_GPIO_Init+0x154>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <MX_GPIO_Init+0x154>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a31      	ldr	r2, [pc, #196]	; (800140c <MX_GPIO_Init+0x154>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_GPIO_Init+0x154>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_GPIO_Init+0x154>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a2a      	ldr	r2, [pc, #168]	; (800140c <MX_GPIO_Init+0x154>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_GPIO_Init+0x154>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AlarmLED3_Pin|AlarmLED4_Pin|AlarmLED5_Pin|AlarmLED6_Pin 
 8001376:	2200      	movs	r2, #0
 8001378:	217f      	movs	r1, #127	; 0x7f
 800137a:	4825      	ldr	r0, [pc, #148]	; (8001410 <MX_GPIO_Init+0x158>)
 800137c:	f002 fa54 	bl	8003828 <HAL_GPIO_WritePin>
                          |AlarmLED7_Pin|AlarmLED1_Pin|AlarmLED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AlarmLED8_Pin|SysOnLED_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2103      	movs	r1, #3
 8001384:	4823      	ldr	r0, [pc, #140]	; (8001414 <MX_GPIO_Init+0x15c>)
 8001386:	f002 fa4f 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MotorCW_Pin|MotorCCW_Pin|PSnsrCSADCOut_Pin|PSnsrCSEEOut_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	21f0      	movs	r1, #240	; 0xf0
 800138e:	4822      	ldr	r0, [pc, #136]	; (8001418 <MX_GPIO_Init+0x160>)
 8001390:	f002 fa4a 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AlarmLED3_Pin AlarmLED4_Pin AlarmLED5_Pin AlarmLED6_Pin 
                           AlarmLED7_Pin AlarmLED1_Pin AlarmLED2_Pin */
  GPIO_InitStruct.Pin = AlarmLED3_Pin|AlarmLED4_Pin|AlarmLED5_Pin|AlarmLED6_Pin 
 8001394:	237f      	movs	r3, #127	; 0x7f
 8001396:	61fb      	str	r3, [r7, #28]
                          |AlarmLED7_Pin|AlarmLED1_Pin|AlarmLED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4819      	ldr	r0, [pc, #100]	; (8001410 <MX_GPIO_Init+0x158>)
 80013ac:	f002 f8a2 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AlarmLED8_Pin SysOnLED_Pin */
  GPIO_InitStruct.Pin = AlarmLED8_Pin|SysOnLED_Pin;
 80013b0:	2303      	movs	r3, #3
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <MX_GPIO_Init+0x15c>)
 80013c8:	f002 f894 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : StartStopBtnIn_Pin EditBtnIn_Pin CalibrationBtnIn_Pin AlarmSilenceBtnIn_Pin */
  GPIO_InitStruct.Pin = StartStopBtnIn_Pin|EditBtnIn_Pin|CalibrationBtnIn_Pin|AlarmSilenceBtnIn_Pin;
 80013cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_GPIO_Init+0x164>)
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x158>)
 80013e2:	f002 f887 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorCW_Pin MotorCCW_Pin PSnsrCSADCOut_Pin PSnsrCSEEOut_Pin */
  GPIO_InitStruct.Pin = MotorCW_Pin|MotorCCW_Pin|PSnsrCSADCOut_Pin|PSnsrCSEEOut_Pin;
 80013e6:	23f0      	movs	r3, #240	; 0xf0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_GPIO_Init+0x160>)
 80013fe:	f002 f879 	bl	80034f4 <HAL_GPIO_Init>

}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40021000 	.word	0x40021000
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	10110000 	.word	0x10110000

08001420 <initTaskFn>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_initTaskFn */
void initTaskFn(void const * argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	VentilatorInit(&ventilator);
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <initTaskFn+0x3c>)
 800142a:	f000 fe7b 	bl	8002124 <VentilatorInit>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2105      	movs	r1, #5
 8001432:	2028      	movs	r0, #40	; 0x28
 8001434:	f001 fcc6 	bl	8002dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001438:	2028      	movs	r0, #40	; 0x28
 800143a:	f001 fcdf 	bl	8002dfc <HAL_NVIC_EnableIRQ>

	osThreadResume(userInputHandle);
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <initTaskFn+0x40>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fea8 	bl	8006198 <osThreadResume>
	osThreadTerminate(initTaskHandle);
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <initTaskFn+0x44>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f004 fe8a 	bl	8006166 <osThreadTerminate>
  /* USER CODE END 5 */ 
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000423c 	.word	0x2000423c
 8001460:	2000403c 	.word	0x2000403c
 8001464:	20004370 	.word	0x20004370

08001468 <mainRoutineFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mainRoutineFn */
void mainRoutineFn(void const * argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainRoutineFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001470:	f004 fe1d 	bl	80060ae <osKernelSysTick>
 8001474:	4603      	mov	r3, r0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		switch(ventilator.main_state_machine)
 8001478:	4b83      	ldr	r3, [pc, #524]	; (8001688 <mainRoutineFn+0x220>)
 800147a:	7f1b      	ldrb	r3, [r3, #28]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d006      	beq.n	8001490 <mainRoutineFn+0x28>
 8001482:	2b02      	cmp	r3, #2
 8001484:	f000 80ae 	beq.w	80015e4 <mainRoutineFn+0x17c>
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80ef 	beq.w	800166c <mainRoutineFn+0x204>
 800148e:	e0f4      	b.n	800167a <mainRoutineFn+0x212>
		{
			case MAIN_STATE_SETUP:
				switch(ventilator.setup_state_machine)
 8001490:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <mainRoutineFn+0x220>)
 8001492:	7f5b      	ldrb	r3, [r3, #29]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d006      	beq.n	80014a8 <mainRoutineFn+0x40>
 800149a:	2b02      	cmp	r3, #2
 800149c:	f000 8082 	beq.w	80015a4 <mainRoutineFn+0x13c>
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8098 	beq.w	80015d6 <mainRoutineFn+0x16e>
 80014a6:	e09d      	b.n	80015e4 <mainRoutineFn+0x17c>
				{
					case SETUP_STATE_CALIBRATION:
						switch(ventilator.calibration_state_machine)
 80014a8:	4b77      	ldr	r3, [pc, #476]	; (8001688 <mainRoutineFn+0x220>)
 80014aa:	7fdb      	ldrb	r3, [r3, #31]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d878      	bhi.n	80015a4 <mainRoutineFn+0x13c>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <mainRoutineFn+0x50>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	08001523 	.word	0x08001523
 80014c4:	08001591 	.word	0x08001591
						{
							case CALIBRATION_STATE_UNWIND:
								if (ventilator.cycle_counter == 0)
 80014c8:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <mainRoutineFn+0x220>)
 80014ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10b      	bne.n	80014ea <mainRoutineFn+0x82>
								{
									DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_neg);
 80014d2:	496e      	ldr	r1, [pc, #440]	; (800168c <mainRoutineFn+0x224>)
 80014d4:	486e      	ldr	r0, [pc, #440]	; (8001690 <mainRoutineFn+0x228>)
 80014d6:	f7ff f873 	bl	80005c0 <DCMotorVoltageSet>
									ventilator.cycle_counter++;
 80014da:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <mainRoutineFn+0x220>)
 80014dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <mainRoutineFn+0x220>)
 80014e6:	849a      	strh	r2, [r3, #36]	; 0x24
								{
									DCMotorStop(&dc_motor);
									ventilator.cycle_counter = 0;
									ventilator.calibration_state_machine = CALIBRATION_STATE_WAIT_AMBU;
								}
								break;
 80014e8:	e05c      	b.n	80015a4 <mainRoutineFn+0x13c>
								else if (ventilator.cycle_counter < (CALIBRATION_UNWIND_TIME_MS / MAIN_ROUTINE_CYCLE_TIME_MS))
 80014ea:	4b67      	ldr	r3, [pc, #412]	; (8001688 <mainRoutineFn+0x220>)
 80014ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014f4:	d207      	bcs.n	8001506 <mainRoutineFn+0x9e>
									ventilator.cycle_counter++;
 80014f6:	4b64      	ldr	r3, [pc, #400]	; (8001688 <mainRoutineFn+0x220>)
 80014f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <mainRoutineFn+0x220>)
 8001502:	849a      	strh	r2, [r3, #36]	; 0x24
								break;
 8001504:	e04e      	b.n	80015a4 <mainRoutineFn+0x13c>
									DCMotorStop(&dc_motor);
 8001506:	4862      	ldr	r0, [pc, #392]	; (8001690 <mainRoutineFn+0x228>)
 8001508:	f7ff f8f0 	bl	80006ec <DCMotorStop>
									ventilator.cycle_counter = 0;
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <mainRoutineFn+0x220>)
 800150e:	2200      	movs	r2, #0
 8001510:	849a      	strh	r2, [r3, #36]	; 0x24
									ventilator.calibration_state_machine = CALIBRATION_STATE_WAIT_AMBU;
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <mainRoutineFn+0x220>)
 8001514:	2201      	movs	r2, #1
 8001516:	77da      	strb	r2, [r3, #31]
								break;
 8001518:	e044      	b.n	80015a4 <mainRoutineFn+0x13c>
							case CALIBRATION_STATE_WAIT_AMBU:
								DCMotorStop(&dc_motor);
 800151a:	485d      	ldr	r0, [pc, #372]	; (8001690 <mainRoutineFn+0x228>)
 800151c:	f7ff f8e6 	bl	80006ec <DCMotorStop>
								break;
 8001520:	e040      	b.n	80015a4 <mainRoutineFn+0x13c>
							case CALIBRATION_STATE_WIND:
								if (ventilator.cycle_counter == 0)
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <mainRoutineFn+0x220>)
 8001524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001526:	b29b      	uxth	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d110      	bne.n	800154e <mainRoutineFn+0xe6>
								{
									ventilator.arm_encoder_init_count = arm_encoder.timer->CNT;
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <mainRoutineFn+0x22c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	4a55      	ldr	r2, [pc, #340]	; (8001688 <mainRoutineFn+0x220>)
 8001534:	60d3      	str	r3, [r2, #12]
									DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_pos);
 8001536:	4958      	ldr	r1, [pc, #352]	; (8001698 <mainRoutineFn+0x230>)
 8001538:	4855      	ldr	r0, [pc, #340]	; (8001690 <mainRoutineFn+0x228>)
 800153a:	f7ff f841 	bl	80005c0 <DCMotorVoltageSet>
									ventilator.cycle_counter++;
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <mainRoutineFn+0x220>)
 8001540:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001542:	b29b      	uxth	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <mainRoutineFn+0x220>)
 800154a:	849a      	strh	r2, [r3, #36]	; 0x24
								}
								else
								{
									ventilator.cycle_counter++;
								}
								break;
 800154c:	e02a      	b.n	80015a4 <mainRoutineFn+0x13c>
								else if (arm_encoder.timer->CNT != ventilator.arm_encoder_init_count)
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <mainRoutineFn+0x22c>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <mainRoutineFn+0x220>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d011      	beq.n	8001580 <mainRoutineFn+0x118>
									DCMotorStop(&dc_motor);
 800155c:	484c      	ldr	r0, [pc, #304]	; (8001690 <mainRoutineFn+0x228>)
 800155e:	f7ff f8c5 	bl	80006ec <DCMotorStop>
									motor_encoder.timer->CNT = 0;
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <mainRoutineFn+0x234>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
									arm_encoder.timer->CNT = 0;
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <mainRoutineFn+0x22c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
									ventilator.cycle_counter = 0;
 8001572:	4b45      	ldr	r3, [pc, #276]	; (8001688 <mainRoutineFn+0x220>)
 8001574:	2200      	movs	r2, #0
 8001576:	849a      	strh	r2, [r3, #36]	; 0x24
									ventilator.calibration_state_machine = CALIBRATION_STATE_STOP;
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <mainRoutineFn+0x220>)
 800157a:	2203      	movs	r2, #3
 800157c:	77da      	strb	r2, [r3, #31]
								break;
 800157e:	e011      	b.n	80015a4 <mainRoutineFn+0x13c>
									ventilator.cycle_counter++;
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <mainRoutineFn+0x220>)
 8001582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001584:	b29b      	uxth	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <mainRoutineFn+0x220>)
 800158c:	849a      	strh	r2, [r3, #36]	; 0x24
								break;
 800158e:	e009      	b.n	80015a4 <mainRoutineFn+0x13c>
							case CALIBRATION_STATE_STOP:
								DCMotorStop(&dc_motor);
 8001590:	483f      	ldr	r0, [pc, #252]	; (8001690 <mainRoutineFn+0x228>)
 8001592:	f7ff f8ab 	bl	80006ec <DCMotorStop>
								ventilator.setup_state_machine = SETUP_STATE_STANDBY;
 8001596:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <mainRoutineFn+0x220>)
 8001598:	2200      	movs	r2, #0
 800159a:	775a      	strb	r2, [r3, #29]
								ventilator.main_state_machine = MAIN_STATE_STANDBY;
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <mainRoutineFn+0x220>)
 800159e:	2200      	movs	r2, #0
 80015a0:	771a      	strb	r2, [r3, #28]
								break;
 80015a2:	bf00      	nop
						}
					case SETUP_STATE_MANUAL_SPIN:
						switch(ventilator.manual_spin_state_machine)
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <mainRoutineFn+0x220>)
 80015a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d004      	beq.n	80015ba <mainRoutineFn+0x152>
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d007      	beq.n	80015c4 <mainRoutineFn+0x15c>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00a      	beq.n	80015ce <mainRoutineFn+0x166>
 80015b8:	e00d      	b.n	80015d6 <mainRoutineFn+0x16e>
						{
							case MANUAL_SPIN_STATE_UNWIND:
								DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_neg);
 80015ba:	4934      	ldr	r1, [pc, #208]	; (800168c <mainRoutineFn+0x224>)
 80015bc:	4834      	ldr	r0, [pc, #208]	; (8001690 <mainRoutineFn+0x228>)
 80015be:	f7fe ffff 	bl	80005c0 <DCMotorVoltageSet>
								break;
 80015c2:	e008      	b.n	80015d6 <mainRoutineFn+0x16e>
							case MANUAL_SPIN_STATE_WIND:
								DCMotorVoltageSet(&dc_motor, &ventilator.debug_motor_voltage_pos);
 80015c4:	4934      	ldr	r1, [pc, #208]	; (8001698 <mainRoutineFn+0x230>)
 80015c6:	4832      	ldr	r0, [pc, #200]	; (8001690 <mainRoutineFn+0x228>)
 80015c8:	f7fe fffa 	bl	80005c0 <DCMotorVoltageSet>
								break;
 80015cc:	e003      	b.n	80015d6 <mainRoutineFn+0x16e>
							case MANUAL_SPIN_STATE_STOP:
								DCMotorStop(&dc_motor);
 80015ce:	4830      	ldr	r0, [pc, #192]	; (8001690 <mainRoutineFn+0x228>)
 80015d0:	f7ff f88c 	bl	80006ec <DCMotorStop>
								break;
 80015d4:	bf00      	nop
						}
					case SETUP_STATE_STANDBY:
						DCMotorStop(&dc_motor);
 80015d6:	482e      	ldr	r0, [pc, #184]	; (8001690 <mainRoutineFn+0x228>)
 80015d8:	f7ff f888 	bl	80006ec <DCMotorStop>
						ventilator.cycle_counter = 0;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <mainRoutineFn+0x220>)
 80015de:	2200      	movs	r2, #0
 80015e0:	849a      	strh	r2, [r3, #36]	; 0x24
						break;
 80015e2:	bf00      	nop
				}
			case MAIN_STATE_RESPIRATION:
				switch(ventilator.respiration_state_machine)
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <mainRoutineFn+0x220>)
 80015e6:	7f9b      	ldrb	r3, [r3, #30]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d004      	beq.n	80015f8 <mainRoutineFn+0x190>
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d01a      	beq.n	8001628 <mainRoutineFn+0x1c0>
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d032      	beq.n	800165c <mainRoutineFn+0x1f4>
 80015f6:	e039      	b.n	800166c <mainRoutineFn+0x204>
				{
					case RESPIRATION_STATE_FORCED_VOLUME:
						switch(ventilator.forced_volume_state_machine)
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <mainRoutineFn+0x220>)
 80015fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b05      	cmp	r3, #5
 8001602:	d830      	bhi.n	8001666 <mainRoutineFn+0x1fe>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <mainRoutineFn+0x1a4>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	08001625 	.word	0x08001625
 8001610:	08001625 	.word	0x08001625
 8001614:	08001625 	.word	0x08001625
 8001618:	08001625 	.word	0x08001625
 800161c:	08001625 	.word	0x08001625
 8001620:	08001625 	.word	0x08001625
							case FORCED_VOLUME_STATE_EXHALE:
								break;
							case FORCED_VOLUME_STATE_EXHALE_PAUSE:
								break;
							case FORCED_VOLUME_STATE_STANDBY:
								break;
 8001624:	bf00      	nop
						}
						break;
 8001626:	e01e      	b.n	8001666 <mainRoutineFn+0x1fe>
					case RESPIRATION_STATE_ASSISTED_VOLUME:
						switch(ventilator.assisted_volume_state_machine)
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <mainRoutineFn+0x220>)
 800162a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b06      	cmp	r3, #6
 8001632:	d81a      	bhi.n	800166a <mainRoutineFn+0x202>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <mainRoutineFn+0x1d4>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	08001659 	.word	0x08001659
 8001640:	08001659 	.word	0x08001659
 8001644:	08001659 	.word	0x08001659
 8001648:	08001659 	.word	0x08001659
 800164c:	08001659 	.word	0x08001659
 8001650:	08001659 	.word	0x08001659
 8001654:	08001659 	.word	0x08001659
							case ASSISTED_VOLUME_STATE_EXHALE:
								break;
							case ASSISTED_VOLUME_STATE_EXHALE_PAUSE:
								break;
							case ASSISTED_VOLUME_STATE_STANDBY:
								break;
 8001658:	bf00      	nop
						}
						break;
 800165a:	e006      	b.n	800166a <mainRoutineFn+0x202>
						 * 			ventilator.respiration_state_machine = RESPIRATION_STATE_FORCED_VOLUME;
						 * 			ventilator.forced_volume_state_machine = FORCED_VOLUME_STATE_GENERATE_TRAJECTORY;
						 * 	}
						 * 	ventilator.parameters_changed = 0;
						 */
						ventilator.parameters_changed = 0;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <mainRoutineFn+0x220>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						break;
 8001664:	e002      	b.n	800166c <mainRoutineFn+0x204>
						break;
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <mainRoutineFn+0x204>
						break;
 800166a:	bf00      	nop
				}
			case MAIN_STATE_STANDBY:
				DCMotorStop(&dc_motor);
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <mainRoutineFn+0x228>)
 800166e:	f7ff f83d 	bl	80006ec <DCMotorStop>
				ventilator.cycle_counter = 0;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <mainRoutineFn+0x220>)
 8001674:	2200      	movs	r2, #0
 8001676:	849a      	strh	r2, [r3, #36]	; 0x24
				break;
 8001678:	bf00      	nop
		}
		osDelayUntil(&PreviousWakeTime, MAIN_ROUTINE_CYCLE_TIME_MS);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	210a      	movs	r1, #10
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fdab 	bl	80061dc <osDelayUntil>
		switch(ventilator.main_state_machine)
 8001686:	e6f7      	b.n	8001478 <mainRoutineFn+0x10>
 8001688:	2000423c 	.word	0x2000423c
 800168c:	20004250 	.word	0x20004250
 8001690:	2000428c 	.word	0x2000428c
 8001694:	20004118 	.word	0x20004118
 8001698:	2000424c 	.word	0x2000424c
 800169c:	20004278 	.word	0x20004278

080016a0 <displayUIFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayUIFn */
void displayUIFn(void const * argument)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b08d      	sub	sp, #52	; 0x34
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUIFn */
	char buffer[32];
	uint32_t PreviousWakeTime = osKernelSysTick();
 80016a8:	f004 fd01 	bl	80060ae <osKernelSysTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
	osThreadResume(userInputHandle);
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <displayUIFn+0xd4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fd6f 	bl	8006198 <osThreadResume>

  /* Infinite loop */
	for(;;)
	{
		LCDSetCursorPos(&lcd_display, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	482e      	ldr	r0, [pc, #184]	; (8001778 <displayUIFn+0xd8>)
 80016c0:	f7ff f958 	bl	8000974 <LCDSetCursorPos>
		sprintf(buffer, "I:E %03u  T %06lu", ventilator.i_e_ratio, HAL_GetTick());
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <displayUIFn+0xdc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461c      	mov	r4, r3
 80016ca:	f000 fea1 	bl	8002410 <HAL_GetTick>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f107 0010 	add.w	r0, r7, #16
 80016d4:	4622      	mov	r2, r4
 80016d6:	492a      	ldr	r1, [pc, #168]	; (8001780 <displayUIFn+0xe0>)
 80016d8:	f006 fa36 	bl	8007b48 <siprintf>
		LCDSendString(&lcd_display, buffer);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4825      	ldr	r0, [pc, #148]	; (8001778 <displayUIFn+0xd8>)
 80016e4:	f7ff f9ca 	bl	8000a7c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 1, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	4822      	ldr	r0, [pc, #136]	; (8001778 <displayUIFn+0xd8>)
 80016ee:	f7ff f941 	bl	8000974 <LCDSetCursorPos>
		sprintf(buffer, "VOL %03u T4 %03lu", ventilator.tidal_volume, TIM4->CNT);
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <displayUIFn+0xdc>)
 80016f4:	889b      	ldrh	r3, [r3, #4]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <displayUIFn+0xe4>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f107 0010 	add.w	r0, r7, #16
 8001700:	4921      	ldr	r1, [pc, #132]	; (8001788 <displayUIFn+0xe8>)
 8001702:	f006 fa21 	bl	8007b48 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	481a      	ldr	r0, [pc, #104]	; (8001778 <displayUIFn+0xd8>)
 800170e:	f7ff f9b5 	bl	8000a7c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 2, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2102      	movs	r1, #2
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <displayUIFn+0xd8>)
 8001718:	f7ff f92c 	bl	8000974 <LCDSetCursorPos>
		sprintf(buffer, "PRS %03u T3 %03lu", ventilator.pressure_level_alarm_value, TIM3->CNT);
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <displayUIFn+0xdc>)
 800171e:	789b      	ldrb	r3, [r3, #2]
 8001720:	461a      	mov	r2, r3
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <displayUIFn+0xec>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f107 0010 	add.w	r0, r7, #16
 800172a:	4919      	ldr	r1, [pc, #100]	; (8001790 <displayUIFn+0xf0>)
 800172c:	f006 fa0c 	bl	8007b48 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4810      	ldr	r0, [pc, #64]	; (8001778 <displayUIFn+0xd8>)
 8001738:	f7ff f9a0 	bl	8000a7c <LCDSendString>

		LCDSetCursorPos(&lcd_display, 3, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2103      	movs	r1, #3
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <displayUIFn+0xd8>)
 8001742:	f7ff f917 	bl	8000974 <LCDSetCursorPos>
		sprintf(buffer, "RFQ %03u", ventilator.respiration_frequency);
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <displayUIFn+0xdc>)
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	461a      	mov	r2, r3
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <displayUIFn+0xf4>)
 8001752:	4618      	mov	r0, r3
 8001754:	f006 f9f8 	bl	8007b48 <siprintf>
		LCDSendString(&lcd_display, buffer);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <displayUIFn+0xd8>)
 8001760:	f7ff f98c 	bl	8000a7c <LCDSendString>

		osDelayUntil(&PreviousWakeTime, LCD_DISPLAY_CYCLE_TIME_MS);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2164      	movs	r1, #100	; 0x64
 800176a:	4618      	mov	r0, r3
 800176c:	f004 fd36 	bl	80061dc <osDelayUntil>
		LCDSetCursorPos(&lcd_display, 0, 0);
 8001770:	e7a3      	b.n	80016ba <displayUIFn+0x1a>
 8001772:	bf00      	nop
 8001774:	2000403c 	.word	0x2000403c
 8001778:	20004128 	.word	0x20004128
 800177c:	2000423c 	.word	0x2000423c
 8001780:	080084d8 	.word	0x080084d8
 8001784:	40000800 	.word	0x40000800
 8001788:	080084ec 	.word	0x080084ec
 800178c:	40000400 	.word	0x40000400
 8001790:	08008500 	.word	0x08008500
 8001794:	08008514 	.word	0x08008514

08001798 <motorEncoderFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorEncoderFn */
void motorEncoderFn(void const * argument)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motorEncoderFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80017a0:	f004 fc85 	bl	80060ae <osKernelSysTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, MOTOR_ENCODER_CYCLE_TIME_MS);
 80017a8:	210a      	movs	r1, #10
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <motorEncoderFn+0x28>)
 80017ac:	f7fe ffd2 	bl	8000754 <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, MOTOR_ENCODER_CYCLE_TIME_MS);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	210a      	movs	r1, #10
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fd10 	bl	80061dc <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, MOTOR_ENCODER_CYCLE_TIME_MS);
 80017bc:	e7f4      	b.n	80017a8 <motorEncoderFn+0x10>
 80017be:	bf00      	nop
 80017c0:	20004278 	.word	0x20004278

080017c4 <armEncoderFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_armEncoderFn */
void armEncoderFn(void const * argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN armEncoderFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 80017cc:	f004 fc6f 	bl	80060ae <osKernelSysTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		UpdateEncoderParams(&motor_encoder, ARM_ENCODER_CYCLE_TIME_MS);
 80017d4:	210a      	movs	r1, #10
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <armEncoderFn+0x28>)
 80017d8:	f7fe ffbc 	bl	8000754 <UpdateEncoderParams>
		osDelayUntil(&PreviousWakeTime, ARM_ENCODER_CYCLE_TIME_MS);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	210a      	movs	r1, #10
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fcfa 	bl	80061dc <osDelayUntil>
		UpdateEncoderParams(&motor_encoder, ARM_ENCODER_CYCLE_TIME_MS);
 80017e8:	e7f4      	b.n	80017d4 <armEncoderFn+0x10>
 80017ea:	bf00      	nop
 80017ec:	20004278 	.word	0x20004278

080017f0 <diagnosticsSrvFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diagnosticsSrvFn */
void diagnosticsSrvFn(void const * argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diagnosticsSrvFn */
	osThreadSuspend(diagnosticsSrvHandle);
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <diagnosticsSrvFn+0x2c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fcbe 	bl	800617e <osThreadSuspend>
	//char buffer[21];
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001802:	f004 fc54 	bl	80060ae <osKernelSysTick>
 8001806:	4603      	mov	r3, r0
 8001808:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		if (ventilator.main_state_machine == MAIN_STATE_RESPIRATION)
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <diagnosticsSrvFn+0x30>)
 800180c:	7f1b      	ldrb	r3, [r3, #28]
		{
			//sprintf(buffer, "%04lu,%04lu,%04lu,%04u", HAL_GetTick(), TIM3->CNT, TIM4->CNT, dc_motor.pwm_value);
			//HAL_UART_Transmit(&huart5, (uint8_t *) buffer, sizeof(buffer), 100);
		}
		osDelayUntil(&PreviousWakeTime, DIAGNOSTICS_SRV_CYCLE_TIME_MS);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2164      	movs	r1, #100	; 0x64
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fce1 	bl	80061dc <osDelayUntil>
		if (ventilator.main_state_machine == MAIN_STATE_RESPIRATION)
 800181a:	e7f6      	b.n	800180a <diagnosticsSrvFn+0x1a>
 800181c:	20004040 	.word	0x20004040
 8001820:	2000423c 	.word	0x2000423c

08001824 <userInputFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_userInputFn */
void userInputFn(void const * argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN userInputFn */
  /* Infinite loop */
	for(;;)
	{
	  uint16_t adc_values[TOTAL_CONTROLS_COUNT] = {0,0,0,0};
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, TOTAL_CONTROLS_COUNT);
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2204      	movs	r2, #4
 800183c:	4619      	mov	r1, r3
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <userInputFn+0x48>)
 8001840:	f000 fe58 	bl	80024f4 <HAL_ADC_Start_DMA>
	  PotControlsValueUpdate(pot_controls_a, adc_values);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <userInputFn+0x4c>)
 800184c:	f000 f864 	bl	8001918 <PotControlsValueUpdate>
	  UpdateVentilatorParams(&ventilator, pot_controls_a);
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <userInputFn+0x4c>)
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <userInputFn+0x50>)
 8001854:	f000 fcaa 	bl	80021ac <UpdateVentilatorParams>
	  ventilator.parameters_changed = 1;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <userInputFn+0x50>)
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  osThreadSuspend(userInputHandle);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <userInputFn+0x54>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f004 fc8a 	bl	800617e <osThreadSuspend>
	{
 800186a:	e7df      	b.n	800182c <userInputFn+0x8>
 800186c:	200041f4 	.word	0x200041f4
 8001870:	20004360 	.word	0x20004360
 8001874:	2000423c 	.word	0x2000423c
 8001878:	2000403c 	.word	0x2000403c

0800187c <alarmMonitorFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alarmMonitorFn */
void alarmMonitorFn(void const * argument)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN alarmMonitorFn */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8001884:	f004 fc13 	bl	80060ae <osKernelSysTick>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
	for(;;)
	{
		osDelayUntil(&PreviousWakeTime, ALARM_MONITOR_CYCLE_TIME_MS);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	210a      	movs	r1, #10
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fca2 	bl	80061dc <osDelayUntil>
 8001898:	e7f8      	b.n	800188c <alarmMonitorFn+0x10>
	...

0800189c <pressureSnsrFn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pressureSnsrFn */
void pressureSnsrFn(void const * argument)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pressureSnsrFn */
  /* Infinite loop */
  for(;;)
  {
	  osThreadTerminate(pressureSnsrHandle);
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <pressureSnsrFn+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fc5c 	bl	8006166 <osThreadTerminate>
 80018ae:	e7f9      	b.n	80018a4 <pressureSnsrFn+0x8>
 80018b0:	20004300 	.word	0x20004300

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 fd8f 	bl	80023e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40010000 	.word	0x40010000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <PotControlsInit>:
 */

#include "potentiometer_api.h"

void PotControlsInit(volatile Potentiometer_S *pot_array_)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	pot_array_[TIDAL_VOLUME_CONTROL].rank 				= PIN_A0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
	pot_array_[I_E_RATIO_CONTROL].rank 					= PIN_A1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	2203      	movs	r2, #3
 80018fa:	701a      	strb	r2, [r3, #0]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank 		= PIN_A2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3308      	adds	r3, #8
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
	pot_array_[PRESSURE_VALUE_CONTROL].rank 			= PIN_A3;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	330c      	adds	r3, #12
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <PotControlsValueUpdate>:

void PotControlsValueUpdate(volatile Potentiometer_S *pot_array_, uint16_t *adc_values_)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	pot_array_[TIDAL_VOLUME_CONTROL].value 				= adc_values_[pot_array_[TIDAL_VOLUME_CONTROL].rank];
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	805a      	strh	r2, [r3, #2]
	pot_array_[I_E_RATIO_CONTROL].value 				= adc_values_[pot_array_[I_E_RATIO_CONTROL].rank];
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	441a      	add	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	805a      	strh	r2, [r3, #2]
	pot_array_[RESPIRATORY_FREQUENCY_CONTROL].value 	= adc_values_[pot_array_[RESPIRATORY_FREQUENCY_CONTROL].rank];
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3308      	adds	r3, #8
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	441a      	add	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3308      	adds	r3, #8
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	805a      	strh	r2, [r3, #2]
	pot_array_[PRESSURE_VALUE_CONTROL].value 			= adc_values_[pot_array_[PRESSURE_VALUE_CONTROL].rank];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	330c      	adds	r3, #12
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	441a      	add	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	330c      	adds	r3, #12
 8001972:	8812      	ldrh	r2, [r2, #0]
 8001974:	805a      	strh	r2, [r3, #2]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_MspInit+0x54>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_MspInit+0x54>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_MspInit+0x54>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_MspInit+0x54>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_MspInit+0x54>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_MspInit+0x54>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	210f      	movs	r1, #15
 80019c6:	f06f 0001 	mvn.w	r0, #1
 80019ca:	f001 f9fb 	bl	8002dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <HAL_ADC_MspInit+0x110>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d171      	bne.n	8001ae2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a3a      	ldr	r2, [pc, #232]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VolumePotIn_Pin|IERatioPotIn_Pin;
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4823      	ldr	r0, [pc, #140]	; (8001af4 <HAL_ADC_MspInit+0x118>)
 8001a66:	f001 fd45 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FrequencyPotIn_Pin|PressureLvlPotIn_Pin;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <HAL_ADC_MspInit+0x11c>)
 8001a7e:	f001 fd39 	bl	80034f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_ADC_MspInit+0x124>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ac8:	f001 f9a6 	bl	8002e18 <HAL_DMA_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ad2:	f7ff ff01 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	2000429c 	.word	0x2000429c
 8001b00:	40026410 	.word	0x40026410

08001b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_I2C_MspInit+0x84>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12b      	bne.n	8001b7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_I2C_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_I2C_MspInit+0x88>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_I2C_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b52:	2304      	movs	r3, #4
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <HAL_I2C_MspInit+0x8c>)
 8001b5e:	f001 fcc9 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_I2C_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_I2C_MspInit+0x88>)
 8001b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_I2C_MspInit+0x88>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020400 	.word	0x40020400

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_SPI_MspInit+0xc0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d149      	bne.n	8001c4a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_SPI_MspInit+0xc4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c0a:	2330      	movs	r3, #48	; 0x30
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <HAL_SPI_MspInit+0xc8>)
 8001c26:	f001 fc65 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c2a:	2330      	movs	r3, #48	; 0x30
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <HAL_SPI_MspInit+0xcc>)
 8001c46:	f001 fc55 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a30      	ldr	r2, [pc, #192]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = MotorEncoderA_Pin|MotorEncoderB_Pin;
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481e      	ldr	r0, [pc, #120]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001cda:	f001 fc0b 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cde:	e031      	b.n	8001d44 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12c      	bne.n	8001d44 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ArmEncoderA_Pin|ArmEncoderB_Pin;
 8001d22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d40:	f001 fbd8 	bl	80034f4 <HAL_GPIO_Init>
}
 8001d44:	bf00      	nop
 8001d46:	3730      	adds	r7, #48	; 0x30
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	40020c00 	.word	0x40020c00

08001d60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10d      	bne.n	8001d8e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_PWM_MspInit+0x40>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_TIM_PWM_MspInit+0x40>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_TIM_PWM_MspInit+0x40>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40000c00 	.word	0x40000c00
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_TIM_Base_MspInit+0x48>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d115      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2019      	movs	r0, #25
 8001dd8:	f000 fff4 	bl	8002dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ddc:	2019      	movs	r0, #25
 8001dde:	f001 f80d 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40014400 	.word	0x40014400
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_TIM_MspPostInit+0xb0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11e      	bne.n	8001e54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = MotorPWMOut_Pin;
 8001e32:	2302      	movs	r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e42:	2302      	movs	r3, #2
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MotorPWMOut_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4817      	ldr	r0, [pc, #92]	; (8001eac <HAL_TIM_MspPostInit+0xb8>)
 8001e4e:	f001 fb51 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001e52:	e023      	b.n	8001e9c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_TIM_MspPostInit+0xbc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d11e      	bne.n	8001e9c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BuzzerPWMOut_Pin;
 8001e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BuzzerPWMOut_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <HAL_TIM_MspPostInit+0xc0>)
 8001e98:	f001 fb2c 	bl	80034f4 <HAL_GPIO_Init>
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40014400 	.word	0x40014400
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_UART_MspInit+0xc0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d14a      	bne.n	8001f70 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_UART_MspInit+0xc4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f40:	2308      	movs	r3, #8
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <HAL_UART_MspInit+0xc8>)
 8001f4c:	f001 fad2 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f50:	2304      	movs	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f60:	2308      	movs	r3, #8
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <HAL_UART_MspInit+0xcc>)
 8001f6c:	f001 fac2 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40005000 	.word	0x40005000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00

08001f88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	2019      	movs	r0, #25
 8001f9e:	f000 ff11 	bl	8002dc4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001fa2:	2019      	movs	r0, #25
 8001fa4:	f000 ff2a 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_InitTick+0xa4>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_InitTick+0xa4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_InitTick+0xa4>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fce6 	bl	80049a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001fd4:	f002 fcd0 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_InitTick+0xa8>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_InitTick+0xac>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_InitTick+0xb0>)
 8001ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_InitTick+0xac>)
 8001ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_InitTick+0xac>)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_InitTick+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_InitTick+0xac>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <HAL_InitTick+0xac>)
 800200e:	f002 fd5d 	bl	8004acc <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_InitTick+0xac>)
 800201a:	f002 fd82 	bl	8004b22 <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3730      	adds	r7, #48	; 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	431bde83 	.word	0x431bde83
 8002034:	20004374 	.word	0x20004374
 8002038:	40010000 	.word	0x40010000

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002076:	f002 ff22 	bl	8004ebe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800207a:	4803      	ldr	r0, [pc, #12]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800207c:	f002 ff1f 	bl	8004ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20004374 	.word	0x20004374
 8002088:	200040d8 	.word	0x200040d8

0800208c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2_Stream0_IRQHandler+0x10>)
 8002092:	f000 ffc7 	bl	8003024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000429c 	.word	0x2000429c

080020a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x50>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x16>
		heap_end = &end;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <_sbrk+0x50>)
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <_sbrk+0x54>)
 80020b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <_sbrk+0x50>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <_sbrk+0x50>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	466a      	mov	r2, sp
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d907      	bls.n	80020da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ca:	f005 fcff 	bl	8007acc <__errno>
 80020ce:	4602      	mov	r2, r0
 80020d0:	230c      	movs	r3, #12
 80020d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	e006      	b.n	80020e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <_sbrk+0x50>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <_sbrk+0x50>)
 80020e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200002e4 	.word	0x200002e4
 80020f4:	200043c0 	.word	0x200043c0

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <SystemInit+0x28>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <SystemInit+0x28>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SystemInit+0x28>)
 800210e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002112:	609a      	str	r2, [r3, #8]
#endif
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <VentilatorInit>:
 */

#include "ventilator_api.h"

void VentilatorInit(Ventilator_S *ventilator_)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	ventilator_->i_e_ratio 						= I_E_RATIO_1_1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
	ventilator_->respiration_frequency 			= (RespirationFrequency_T) RESPIRATION_FREQ_MIN_VAL;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2208      	movs	r2, #8
 8002136:	705a      	strb	r2, [r3, #1]
	ventilator_->pressure_level_alarm_value 	= (PressureValue_T) PRESSURE_LEVEL_ALARM_MIN_VAL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	709a      	strb	r2, [r3, #2]
	ventilator_->tidal_volume 					= (TidalVolume_T) TIDAL_VOLUME_MIN_VAL;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	809a      	strh	r2, [r3, #4]

	ventilator_->arm_encoder_init_count 		= 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
	ventilator_->debug_motor_voltage_pos		= MOTOR_DEBUG_VOLTAGE_VALUE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002150:	611a      	str	r2, [r3, #16]
	ventilator_->debug_motor_voltage_neg		= -MOTOR_DEBUG_VOLTAGE_VALUE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002158:	615a      	str	r2, [r3, #20]

	ventilator_->ventilator_alarms 				= NO_ALARMS;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ventilator_->ventilator_alarms_config		= REPORT_ALARMS;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	ventilator_->main_state_machine 			= MAIN_STATE_STANDBY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
	ventilator_->setup_state_machine 			= SETUP_STATE_STANDBY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	775a      	strb	r2, [r3, #29]
	ventilator_->calibration_state_machine 		= CALIBRATION_STATE_STOP;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2203      	movs	r2, #3
 800217a:	77da      	strb	r2, [r3, #31]
	ventilator_->manual_spin_state_machine 		= MANUAL_SPIN_STATE_STOP;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2020 	strb.w	r2, [r3, #32]
	ventilator_->respiration_state_machine 		= RESPIRATION_STATE_STANDBY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	779a      	strb	r2, [r3, #30]
	ventilator_->forced_volume_state_machine 	= FORCED_VOLUME_STATE_STANDBY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ventilator_->assisted_volume_state_machine 	= ASSISTED_VOLUME_STATE_STANDBY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ventilator_->cycle_counter					= 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <UpdateVentilatorParams>:

void UpdateVentilatorParams(Ventilator_S *ventilator_, Potentiometer_S *potentiometer_)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
	if (potentiometer_[I_E_RATIO_CONTROL].value < (ADC_MAX_VAL / 4))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3304      	adds	r3, #4
 80021ba:	885b      	ldrh	r3, [r3, #2]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d203      	bcs.n	80021cc <UpdateVentilatorParams+0x20>
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_1;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e018      	b.n	80021fe <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < (ADC_MAX_VAL / 4 * 2))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3304      	adds	r3, #4
 80021d0:	885b      	ldrh	r3, [r3, #2]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d8:	d203      	bcs.n	80021e2 <UpdateVentilatorParams+0x36>
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_2;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2202      	movs	r2, #2
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e00d      	b.n	80021fe <UpdateVentilatorParams+0x52>
	}
	else if (potentiometer_[I_E_RATIO_CONTROL].value < (ADC_MAX_VAL / 4 * 3))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3304      	adds	r3, #4
 80021e6:	885b      	ldrh	r3, [r3, #2]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021ee:	d203      	bcs.n	80021f8 <UpdateVentilatorParams+0x4c>
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_3;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2203      	movs	r2, #3
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e002      	b.n	80021fe <UpdateVentilatorParams+0x52>
	}
	else
	{
		ventilator_->i_e_ratio = I_E_RATIO_1_4;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
	}

	ventilator_->tidal_volume 				= (TidalVolume_T) (((TIDAL_VOLUME_MAX_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[TIDAL_VOLUME_CONTROL].value));
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	885b      	ldrh	r3, [r3, #2]
 8002202:	b29b      	uxth	r3, r3
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220c:	eeb4 7a09 	vmov.f32	s14, #73	; 0x3e480000  0.1953125
 8002210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002218:	ee17 3a90 	vmov	r3, s15
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	809a      	strh	r2, [r3, #4]
	ventilator_->respiration_frequency 		= (RespirationFrequency_T) (((RESPIRATION_FREQ_MAX_VAL - RESPIRATION_FREQ_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[RESPIRATORY_FREQUENCY_CONTROL].value) + RESPIRATION_FREQ_MIN_VAL);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3308      	adds	r3, #8
 8002226:	885b      	ldrh	r3, [r3, #2]
 8002228:	b29b      	uxth	r3, r3
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002338 <UpdateVentilatorParams+0x18c>
 8002236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800223e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002246:	edc7 7a01 	vstr	s15, [r7, #4]
 800224a:	793b      	ldrb	r3, [r7, #4]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	705a      	strb	r2, [r3, #1]
	ventilator_->pressure_level_alarm_value = (PressureValue_T) (((PRESSURE_LEVEL_ALARM_MAX_VAL - PRESSURE_LEVEL_ALARM_MIN_VAL) / ADC_MAX_VAL) * (float)(potentiometer_[PRESSURE_VALUE_CONTROL].value) + PRESSURE_LEVEL_ALARM_MIN_VAL);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	330c      	adds	r3, #12
 8002256:	885b      	ldrh	r3, [r3, #2]
 8002258:	b29b      	uxth	r3, r3
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002262:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800233c <UpdateVentilatorParams+0x190>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002340 <UpdateVentilatorParams+0x194>
 800226e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002276:	edc7 7a01 	vstr	s15, [r7, #4]
 800227a:	793b      	ldrb	r3, [r7, #4]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	709a      	strb	r2, [r3, #2]

	ventilator_->respiration_period_ms		= (int) ((60000.0f / (float) ventilator_->respiration_frequency));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800228e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002344 <UpdateVentilatorParams+0x198>
 8002292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229a:	ee17 3a90 	vmov	r3, s15
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	80da      	strh	r2, [r3, #6]
	ventilator_->inhalation_period_ms		= (int) ((1.0f / ((float) ventilator_->i_e_ratio + 1.0f)) * ventilator_->respiration_period_ms);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	88db      	ldrh	r3, [r3, #6]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d4:	ee17 3a90 	vmov	r3, s15
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	811a      	strh	r2, [r3, #8]
	ventilator_->exhalation_period_ms		= (int) ((float) ventilator_->i_e_ratio * ventilator_->inhalation_period_ms);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	891b      	ldrh	r3, [r3, #8]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022fe:	ee17 3a90 	vmov	r3, s15
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	815a      	strh	r2, [r3, #10]
	ventilator_->end_angle 					= (((float) ventilator_->tidal_volume) / TIDAL_VOLUME_MAX_VAL * ARM_SWEEP_ANGLE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	889b      	ldrh	r3, [r3, #4]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002314:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002348 <UpdateVentilatorParams+0x19c>
 8002318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800234c <UpdateVentilatorParams+0x1a0>
 8002320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	3c000000 	.word	0x3c000000
 800233c:	3ca00000 	.word	0x3ca00000
 8002340:	00000000 	.word	0x00000000
 8002344:	476a6000 	.word	0x476a6000
 8002348:	44480000 	.word	0x44480000
 800234c:	41accccd 	.word	0x41accccd

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002356:	e003      	b.n	8002360 <LoopCopyDataInit>

08002358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800235a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800235c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800235e:	3104      	adds	r1, #4

08002360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002368:	d3f6      	bcc.n	8002358 <CopyDataInit>
  ldr  r2, =_sbss
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800236c:	e002      	b.n	8002374 <LoopFillZerobss>

0800236e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800236e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002370:	f842 3b04 	str.w	r3, [r2], #4

08002374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002378:	d3f9      	bcc.n	800236e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237a:	f7ff febd 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237e:	f005 fbab 	bl	8007ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7fe fb91 	bl	8000aa8 <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002388:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800238c:	0800858c 	.word	0x0800858c
  ldr  r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002394:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002398:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800239c:	200043bc 	.word	0x200043bc

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_Init+0x40>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_Init+0x40>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_Init+0x40>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 fcee 	bl	8002dae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fdd8 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7ff fad4 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_IncTick+0x20>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_IncTick+0x24>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_IncTick+0x24>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008
 800240c:	200043b4 	.word	0x200043b4

08002410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return uwTick;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_GetTick+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200043b4 	.word	0x200043b4

08002428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff ffee 	bl	8002410 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d005      	beq.n	800244e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_Delay+0x40>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244e:	bf00      	nop
 8002450:	f7ff ffde 	bl	8002410 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8f7      	bhi.n	8002450 <HAL_Delay+0x28>
  {
  }
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000008 	.word	0x20000008

0800246c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e033      	b.n	80024ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff faa6 	bl	80019dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024b2:	f023 0302 	bic.w	r3, r3, #2
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa4a 	bl	8002958 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
 80024da:	e001      	b.n	80024e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Start_DMA+0x1e>
 800250e:	2302      	movs	r3, #2
 8002510:	e0cc      	b.n	80026ac <HAL_ADC_Start_DMA+0x1b8>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d018      	beq.n	800255a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_ADC_Start_DMA+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5e      	ldr	r2, [pc, #376]	; (80026b8 <HAL_ADC_Start_DMA+0x1c4>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9a      	lsrs	r2, r3, #18
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800254c:	e002      	b.n	8002554 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	3b01      	subs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f9      	bne.n	800254e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	f040 80a0 	bne.w	80026aa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a8:	d106      	bne.n	80025b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f023 0206 	bic.w	r2, r3, #6
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
 80025b6:	e002      	b.n	80025be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_ADC_Start_DMA+0x1c8>)
 80025c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	4a3c      	ldr	r2, [pc, #240]	; (80026c0 <HAL_ADC_Start_DMA+0x1cc>)
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <HAL_ADC_Start_DMA+0x1d0>)
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_ADC_Start_DMA+0x1d4>)
 80025e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	334c      	adds	r3, #76	; 0x4c
 8002616:	4619      	mov	r1, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f000 fcaa 	bl	8002f74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2b00      	cmp	r3, #0
 800262a:	d12a      	bne.n	8002682 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_ADC_Start_DMA+0x1d8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d015      	beq.n	8002662 <HAL_ADC_Start_DMA+0x16e>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <HAL_ADC_Start_DMA+0x1dc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d105      	bne.n	800264c <HAL_ADC_Start_DMA+0x158>
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_ADC_Start_DMA+0x1c8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_ADC_Start_DMA+0x1e0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d129      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1b6>
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_ADC_Start_DMA+0x1c8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2b0f      	cmp	r3, #15
 8002660:	d823      	bhi.n	80026aa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11c      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e013      	b.n	80026aa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_ADC_Start_DMA+0x1d8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10e      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1b6>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d107      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	40012300 	.word	0x40012300
 80026c0:	08002b51 	.word	0x08002b51
 80026c4:	08002c0b 	.word	0x08002c0b
 80026c8:	08002c27 	.word	0x08002c27
 80026cc:	40012000 	.word	0x40012000
 80026d0:	40012100 	.word	0x40012100
 80026d4:	40012200 	.word	0x40012200

080026d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1c>
 800272c:	2302      	movs	r3, #2
 800272e:	e105      	b.n	800293c <HAL_ADC_ConfigChannel+0x228>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b09      	cmp	r3, #9
 800273e:	d925      	bls.n	800278c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	3b1e      	subs	r3, #30
 8002756:	2207      	movs	r2, #7
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43da      	mvns	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	400a      	ands	r2, r1
 8002764:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68d9      	ldr	r1, [r3, #12]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	4603      	mov	r3, r0
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4403      	add	r3, r0
 800277e:	3b1e      	subs	r3, #30
 8002780:	409a      	lsls	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	e022      	b.n	80027d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	2207      	movs	r2, #7
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	400a      	ands	r2, r1
 80027ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4403      	add	r3, r0
 80027c8:	409a      	lsls	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d824      	bhi.n	8002824 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b05      	subs	r3, #5
 80027ec:	221f      	movs	r2, #31
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	400a      	ands	r2, r1
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	3b05      	subs	r3, #5
 8002816:	fa00 f203 	lsl.w	r2, r0, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	635a      	str	r2, [r3, #52]	; 0x34
 8002822:	e04c      	b.n	80028be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b23      	subs	r3, #35	; 0x23
 800283e:	221f      	movs	r2, #31
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43da      	mvns	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	400a      	ands	r2, r1
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4618      	mov	r0, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b23      	subs	r3, #35	; 0x23
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
 8002874:	e023      	b.n	80028be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b41      	subs	r3, #65	; 0x41
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	400a      	ands	r2, r1
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	3b41      	subs	r3, #65	; 0x41
 80028b2:	fa00 f203 	lsl.w	r2, r0, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_ADC_ConfigChannel+0x234>)
 80028c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_ADC_ConfigChannel+0x238>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d109      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1cc>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b12      	cmp	r3, #18
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_ADC_ConfigChannel+0x238>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d123      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x21e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d003      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x1e6>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b11      	cmp	r3, #17
 80028f8:	d11b      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b10      	cmp	r3, #16
 800290c:	d111      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_ADC_ConfigChannel+0x23c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_ADC_ConfigChannel+0x240>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	0c9a      	lsrs	r2, r3, #18
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002924:	e002      	b.n	800292c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3b01      	subs	r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f9      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40012300 	.word	0x40012300
 800294c:	40012000 	.word	0x40012000
 8002950:	20000000 	.word	0x20000000
 8002954:	431bde83 	.word	0x431bde83

08002958 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002960:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <ADC_Init+0x1f0>)
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800298c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <ADC_Init+0x1f4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	e00f      	b.n	8002a56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0202 	bic.w	r2, r2, #2
 8002a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e1b      	ldrb	r3, [r3, #24]
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	035a      	lsls	r2, r3, #13
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	e007      	b.n	8002acc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	051a      	lsls	r2, r3, #20
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	025a      	lsls	r2, r3, #9
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	029a      	lsls	r2, r3, #10
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	0f000001 	.word	0x0f000001

08002b50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13c      	bne.n	8002be4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d12b      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d127      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d119      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0220 	bic.w	r2, r2, #32
 8002bb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff fd7b 	bl	80026d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002be2:	e00e      	b.n	8002c02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd85 	bl	8002700 <HAL_ADC_ErrorCallback>
}
 8002bf6:	e004      	b.n	8002c02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fd67 	bl	80026ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f043 0204 	orr.w	r2, r3, #4
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff fd5a 	bl	8002700 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff4c 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd6:	f7ff ff61 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6978      	ldr	r0, [r7, #20]
 8002de2:	f7ff ffb1 	bl	8002d48 <NVIC_EncodePriority>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff80 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff54 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff faf4 	bl	8002410 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e099      	b.n	8002f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e54:	e00f      	b.n	8002e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e56:	f7ff fadb 	bl	8002410 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d908      	bls.n	8002e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e078      	b.n	8002f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e8      	bne.n	8002e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_DMA_Init+0x158>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d107      	bne.n	8002ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d117      	bne.n	8002f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fa6f 	bl	8003400 <DMA_CheckFifoParam>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f36:	2301      	movs	r3, #1
 8002f38:	e016      	b.n	8002f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa26 	bl	8003394 <DMA_CalcBaseAndBitshift>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	223f      	movs	r2, #63	; 0x3f
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	f010803f 	.word	0xf010803f

08002f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_DMA_Start_IT+0x26>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e040      	b.n	800301c <HAL_DMA_Start_IT+0xa8>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12f      	bne.n	800300e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f9b8 	bl	8003338 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	223f      	movs	r2, #63	; 0x3f
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0216 	orr.w	r2, r2, #22
 8002fe2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0208 	orr.w	r2, r2, #8
 8002ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e005      	b.n	800301a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003016:	2302      	movs	r3, #2
 8003018:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003030:	4b92      	ldr	r3, [pc, #584]	; (800327c <HAL_DMA_IRQHandler+0x258>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a92      	ldr	r2, [pc, #584]	; (8003280 <HAL_DMA_IRQHandler+0x25c>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a9b      	lsrs	r3, r3, #10
 800303c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	2208      	movs	r2, #8
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01a      	beq.n	8003090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	2208      	movs	r2, #8
 800307e:	409a      	lsls	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d012      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	2201      	movs	r2, #1
 80030b4:	409a      	lsls	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2204      	movs	r2, #4
 80030cc:	409a      	lsls	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	2204      	movs	r2, #4
 80030ea:	409a      	lsls	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2210      	movs	r2, #16
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d043      	beq.n	8003194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d03c      	beq.n	8003194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2210      	movs	r2, #16
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d018      	beq.n	8003166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d108      	bne.n	8003154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d024      	beq.n	8003194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
 8003152:	e01f      	b.n	8003194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
 8003164:	e016      	b.n	8003194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0208 	bic.w	r2, r2, #8
 8003182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	2220      	movs	r2, #32
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 808e 	beq.w	80032c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8086 	beq.w	80032c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2220      	movs	r2, #32
 80031bc:	409a      	lsls	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d136      	bne.n	800323c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0216 	bic.w	r2, r2, #22
 80031dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_DMA_IRQHandler+0x1da>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0208 	bic.w	r2, r2, #8
 800320c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	223f      	movs	r2, #63	; 0x3f
 8003214:	409a      	lsls	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322e:	2b00      	cmp	r3, #0
 8003230:	d07d      	beq.n	800332e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
        }
        return;
 800323a:	e078      	b.n	800332e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01c      	beq.n	8003284 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	2b00      	cmp	r3, #0
 800325e:	d030      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
 8003268:	e02b      	b.n	80032c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d027      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
 800327a:	e022      	b.n	80032c2 <HAL_DMA_IRQHandler+0x29e>
 800327c:	20000000 	.word	0x20000000
 8003280:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0210 	bic.w	r2, r2, #16
 80032a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d032      	beq.n	8003330 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d022      	beq.n	800331c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2205      	movs	r2, #5
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d307      	bcc.n	800330a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f2      	bne.n	80032ee <HAL_DMA_IRQHandler+0x2ca>
 8003308:	e000      	b.n	800330c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800330a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
 800332c:	e000      	b.n	8003330 <HAL_DMA_IRQHandler+0x30c>
        return;
 800332e:	bf00      	nop
    }
  }
}
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop

08003338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003354:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d108      	bne.n	8003378 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003376:	e007      	b.n	8003388 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3b10      	subs	r3, #16
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <DMA_CalcBaseAndBitshift+0x64>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <DMA_CalcBaseAndBitshift+0x68>)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d909      	bls.n	80033d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	659a      	str	r2, [r3, #88]	; 0x58
 80033d4:	e007      	b.n	80033e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	aaaaaaab 	.word	0xaaaaaaab
 80033fc:	08008540 	.word	0x08008540

08003400 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11f      	bne.n	800345a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d855      	bhi.n	80034cc <DMA_CheckFifoParam+0xcc>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <DMA_CheckFifoParam+0x28>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	08003439 	.word	0x08003439
 800342c:	0800344b 	.word	0x0800344b
 8003430:	08003439 	.word	0x08003439
 8003434:	080034cd 	.word	0x080034cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d045      	beq.n	80034d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003448:	e042      	b.n	80034d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003452:	d13f      	bne.n	80034d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003458:	e03c      	b.n	80034d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	d121      	bne.n	80034a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d836      	bhi.n	80034d8 <DMA_CheckFifoParam+0xd8>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <DMA_CheckFifoParam+0x70>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	08003481 	.word	0x08003481
 8003474:	08003487 	.word	0x08003487
 8003478:	08003481 	.word	0x08003481
 800347c:	08003499 	.word	0x08003499
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      break;
 8003484:	e02f      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003496:	e021      	b.n	80034dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034a0:	d11e      	bne.n	80034e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034a6:	e01b      	b.n	80034e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d902      	bls.n	80034b4 <DMA_CheckFifoParam+0xb4>
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d003      	beq.n	80034ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034b2:	e018      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e015      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00e      	beq.n	80034e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ca:	e00b      	b.n	80034e4 <DMA_CheckFifoParam+0xe4>
      break;
 80034cc:	bf00      	nop
 80034ce:	e00a      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      break;
 80034d0:	bf00      	nop
 80034d2:	e008      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      break;
 80034d4:	bf00      	nop
 80034d6:	e006      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      break;
 80034d8:	bf00      	nop
 80034da:	e004      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      break;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <DMA_CheckFifoParam+0xe6>
      break;
 80034e4:	bf00      	nop
    }
  } 
  
  return status; 
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e16b      	b.n	80037e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 815a 	bne.w	80037e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00b      	beq.n	800354e <HAL_GPIO_Init+0x5a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003542:	2b11      	cmp	r3, #17
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b12      	cmp	r3, #18
 800354c:	d130      	bne.n	80035b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003584:	2201      	movs	r2, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 0201 	and.w	r2, r3, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0xfc>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b12      	cmp	r3, #18
 80035ee:	d123      	bne.n	8003638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80b4 	beq.w	80037e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_GPIO_Init+0x308>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <HAL_GPIO_Init+0x308>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_GPIO_Init+0x308>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003696:	4a5a      	ldr	r2, [pc, #360]	; (8003800 <HAL_GPIO_Init+0x30c>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a51      	ldr	r2, [pc, #324]	; (8003804 <HAL_GPIO_Init+0x310>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <HAL_GPIO_Init+0x226>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a50      	ldr	r2, [pc, #320]	; (8003808 <HAL_GPIO_Init+0x314>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_Init+0x222>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_GPIO_Init+0x318>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <HAL_GPIO_Init+0x21e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <HAL_GPIO_Init+0x31c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x21a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4d      	ldr	r2, [pc, #308]	; (8003814 <HAL_GPIO_Init+0x320>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x216>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4c      	ldr	r2, [pc, #304]	; (8003818 <HAL_GPIO_Init+0x324>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x212>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	; (800381c <HAL_GPIO_Init+0x328>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x20e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <HAL_GPIO_Init+0x32c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x20a>
 80036fa:	2307      	movs	r3, #7
 80036fc:	e00e      	b.n	800371c <HAL_GPIO_Init+0x228>
 80036fe:	2308      	movs	r3, #8
 8003700:	e00c      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003702:	2306      	movs	r3, #6
 8003704:	e00a      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003706:	2305      	movs	r3, #5
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x228>
 800370a:	2304      	movs	r3, #4
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x228>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x228>
 800371a:	2300      	movs	r3, #0
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372c:	4934      	ldr	r1, [pc, #208]	; (8003800 <HAL_GPIO_Init+0x30c>)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_GPIO_Init+0x330>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800375e:	4a31      	ldr	r2, [pc, #196]	; (8003824 <HAL_GPIO_Init+0x330>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <HAL_GPIO_Init+0x330>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_GPIO_Init+0x330>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_GPIO_Init+0x330>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_GPIO_Init+0x330>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_GPIO_Init+0x330>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_GPIO_Init+0x330>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	f67f ae90 	bls.w	8003510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	3724      	adds	r7, #36	; 0x24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40021400 	.word	0x40021400
 800381c:	40021800 	.word	0x40021800
 8003820:	40021c00 	.word	0x40021c00
 8003824:	40013c00 	.word	0x40013c00

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003844:	e003      	b.n	800384e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	041a      	lsls	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	619a      	str	r2, [r3, #24]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e11f      	b.n	8003aae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe f93e 	bl	8001b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c0:	f001 f846 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a7b      	ldr	r2, [pc, #492]	; (8003ab8 <HAL_I2C_Init+0x25c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d807      	bhi.n	80038e0 <HAL_I2C_Init+0x84>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_I2C_Init+0x260>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e006      	b.n	80038ee <HAL_I2C_Init+0x92>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a77      	ldr	r2, [pc, #476]	; (8003ac0 <HAL_I2C_Init+0x264>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0db      	b.n	8003aae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a72      	ldr	r2, [pc, #456]	; (8003ac4 <HAL_I2C_Init+0x268>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <HAL_I2C_Init+0x25c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d802      	bhi.n	8003930 <HAL_I2C_Init+0xd4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	e009      	b.n	8003944 <HAL_I2C_Init+0xe8>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <HAL_I2C_Init+0x26c>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4956      	ldr	r1, [pc, #344]	; (8003ab8 <HAL_I2C_Init+0x25c>)
 8003960:	428b      	cmp	r3, r1
 8003962:	d80d      	bhi.n	8003980 <HAL_I2C_Init+0x124>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e59      	subs	r1, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003972:	3301      	adds	r3, #1
 8003974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	bf38      	it	cc
 800397c:	2304      	movcc	r3, #4
 800397e:	e04f      	b.n	8003a20 <HAL_I2C_Init+0x1c4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_I2C_Init+0x150>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e012      	b.n	80039d2 <HAL_I2C_Init+0x176>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x17e>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_I2C_Init+0x1c4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_I2C_Init+0x1a4>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e58      	subs	r0, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Init+0x1c4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6911      	ldr	r1, [r2, #16]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	001e847f 	.word	0x001e847f
 8003ac0:	003d08ff 	.word	0x003d08ff
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7fe fc96 	bl	8002410 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 80e0 	bne.w	8003cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	4970      	ldr	r1, [pc, #448]	; (8003cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f964 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0d3      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0cc      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a50      	ldr	r2, [pc, #320]	; (8003cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f89c 	bl	8003cc8 <I2C_MasterRequestWrite>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e08d      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb0:	e066      	b.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9de 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	6a39      	ldr	r1, [r7, #32]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9ce 	bl	8003ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01a      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d194      	bne.n	8003bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d006      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d003      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e00b      	b.n	8003d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b12      	cmp	r3, #18
 8003d0a:	d107      	bne.n	8003d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f84f 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e035      	b.n	8003dba <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d56:	d108      	bne.n	8003d6a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d66:	611a      	str	r2, [r3, #16]
 8003d68:	e01b      	b.n	8003da2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d6a:	897b      	ldrh	r3, [r7, #10]
 8003d6c:	11db      	asrs	r3, r3, #7
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 0306 	and.w	r3, r3, #6
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f063 030f 	orn	r3, r3, #15
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	490f      	ldr	r1, [pc, #60]	; (8003dc4 <I2C_MasterRequestWrite+0xfc>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f876 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e010      	b.n	8003dba <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <I2C_MasterRequestWrite+0x100>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f866 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	00010008 	.word	0x00010008
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ddc:	e025      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d021      	beq.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fb13 	bl	8002410 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e023      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	e00c      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0b6      	beq.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e88:	e051      	b.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d123      	bne.n	8003ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e046      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d021      	beq.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fa91 	bl	8002410 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e020      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e00b      	b.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d18d      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	e02d      	b.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f878 	bl	800407c <I2C_IsAcknowledgeFailed>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02d      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d021      	beq.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe fa37 	bl	8002410 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d1ca      	bne.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004006:	e02d      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f837 	bl	800407c <I2C_IsAcknowledgeFailed>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e02d      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d021      	beq.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fe f9f6 	bl	8002410 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d1ca      	bne.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d11b      	bne.n	80040cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e25b      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d075      	beq.n	80041e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	4ba3      	ldr	r3, [pc, #652]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00c      	beq.n	8004120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4ba0      	ldr	r3, [pc, #640]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004112:	4b9d      	ldr	r3, [pc, #628]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411e:	d10b      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d157      	bne.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e236      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d106      	bne.n	8004150 <HAL_RCC_OscConfig+0x74>
 8004142:	4b91      	ldr	r3, [pc, #580]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a90      	ldr	r2, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01d      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x98>
 800415a:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a8a      	ldr	r2, [pc, #552]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a87      	ldr	r2, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004174:	4b84      	ldr	r3, [pc, #528]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a83      	ldr	r2, [pc, #524]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a80      	ldr	r2, [pc, #512]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe f93c 	bl	8002410 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe f938 	bl	8002410 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e1fb      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xc0>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe f928 	bl	8002410 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe f924 	bl	8002410 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1e7      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	4b6c      	ldr	r3, [pc, #432]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11c      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e1bb      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	4b56      	ldr	r3, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4952      	ldr	r1, [pc, #328]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	e03a      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fe f8dd 	bl	8002410 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425a:	f7fe f8d9 	bl	8002410 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e19c      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4940      	ldr	r1, [pc, #256]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f8bc 	bl	8002410 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe f8b8 	bl	8002410 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e17b      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d030      	beq.n	8004328 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe f89c 	bl	8002410 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fe f898 	bl	8002410 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e15b      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fe f885 	bl	8002410 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430a:	f7fe f881 	bl	8002410 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e144      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a0 	beq.w	8004476 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a07      	ldr	r2, [pc, #28]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fe f847 	bl	8002410 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e011      	b.n	80043aa <HAL_RCC_OscConfig+0x2ce>
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	42470e80 	.word	0x42470e80
 8004394:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fe f83a 	bl	8002410 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0fd      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b81      	ldr	r3, [pc, #516]	; (80045b0 <HAL_RCC_OscConfig+0x4d4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f0>
 80043be:	4b7d      	ldr	r3, [pc, #500]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a7c      	ldr	r2, [pc, #496]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	e01c      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0x312>
 80043d4:	4b77      	ldr	r3, [pc, #476]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a76      	ldr	r2, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b74      	ldr	r3, [pc, #464]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a73      	ldr	r2, [pc, #460]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	e00b      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043ee:	4b71      	ldr	r3, [pc, #452]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a70      	ldr	r2, [pc, #448]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	4b6e      	ldr	r3, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a6d      	ldr	r2, [pc, #436]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d015      	beq.n	800443a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd ffff 	bl	8002410 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fffb 	bl	8002410 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0bc      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ee      	beq.n	8004416 <HAL_RCC_OscConfig+0x33a>
 8004438:	e014      	b.n	8004464 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443a:	f7fd ffe9 	bl	8002410 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fd ffe5 	bl	8002410 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0a6      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004458:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8092 	beq.w	80045a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004480:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b08      	cmp	r3, #8
 800448a:	d05c      	beq.n	8004546 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d141      	bne.n	8004518 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b48      	ldr	r3, [pc, #288]	; (80045b8 <HAL_RCC_OscConfig+0x4dc>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fd ffb9 	bl	8002410 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd ffb5 	bl	8002410 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e078      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	019b      	lsls	r3, r3, #6
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	4933      	ldr	r1, [pc, #204]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ea:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <HAL_RCC_OscConfig+0x4dc>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fd ff8e 	bl	8002410 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fd ff8a 	bl	8002410 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e04d      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x41c>
 8004516:	e045      	b.n	80045a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_RCC_OscConfig+0x4dc>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fd ff77 	bl	8002410 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fd ff73 	bl	8002410 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e036      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x44a>
 8004544:	e02e      	b.n	80045a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e029      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_RCC_OscConfig+0x4d8>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	429a      	cmp	r2, r3
 8004564:	d11c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d115      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800457a:	4013      	ands	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004580:	4293      	cmp	r3, r2
 8004582:	d10d      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40007000 	.word	0x40007000
 80045b4:	40023800 	.word	0x40023800
 80045b8:	42470060 	.word	0x42470060

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cc      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d90c      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d044      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d003      	beq.n	800467a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e067      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4934      	ldr	r1, [pc, #208]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fd feb0 	bl	8002410 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fd feac 	bl	8002410 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e04f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d20c      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f821 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004746:	4601      	mov	r1, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	fa21 f303 	lsr.w	r3, r1, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd fc10 	bl	8001f88 <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023c00 	.word	0x40023c00
 8004778:	40023800 	.word	0x40023800
 800477c:	08008528 	.word	0x08008528
 8004780:	20000000 	.word	0x20000000
 8004784:	20000004 	.word	0x20000004

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	2300      	movs	r3, #0
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d007      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x32>
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d008      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x38>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 80b4 	bne.w	800491c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b5e      	ldr	r3, [pc, #376]	; (8004930 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047b6:	60bb      	str	r3, [r7, #8]
       break;
 80047b8:	e0b3      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ba:	4b5e      	ldr	r3, [pc, #376]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80047bc:	60bb      	str	r3, [r7, #8]
      break;
 80047be:	e0b0      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c0:	4b5a      	ldr	r3, [pc, #360]	; (800492c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04a      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b55      	ldr	r3, [pc, #340]	; (800492c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	f04f 0400 	mov.w	r4, #0
 80047e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	ea03 0501 	and.w	r5, r3, r1
 80047ec:	ea04 0602 	and.w	r6, r4, r2
 80047f0:	4629      	mov	r1, r5
 80047f2:	4632      	mov	r2, r6
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	f04f 0400 	mov.w	r4, #0
 80047fc:	0154      	lsls	r4, r2, #5
 80047fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004802:	014b      	lsls	r3, r1, #5
 8004804:	4619      	mov	r1, r3
 8004806:	4622      	mov	r2, r4
 8004808:	1b49      	subs	r1, r1, r5
 800480a:	eb62 0206 	sbc.w	r2, r2, r6
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	f04f 0400 	mov.w	r4, #0
 8004816:	0194      	lsls	r4, r2, #6
 8004818:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800481c:	018b      	lsls	r3, r1, #6
 800481e:	1a5b      	subs	r3, r3, r1
 8004820:	eb64 0402 	sbc.w	r4, r4, r2
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	00e2      	lsls	r2, r4, #3
 800482e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004832:	00d9      	lsls	r1, r3, #3
 8004834:	460b      	mov	r3, r1
 8004836:	4614      	mov	r4, r2
 8004838:	195b      	adds	r3, r3, r5
 800483a:	eb44 0406 	adc.w	r4, r4, r6
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	0262      	lsls	r2, r4, #9
 8004848:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800484c:	0259      	lsls	r1, r3, #9
 800484e:	460b      	mov	r3, r1
 8004850:	4614      	mov	r4, r2
 8004852:	4618      	mov	r0, r3
 8004854:	4621      	mov	r1, r4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f04f 0400 	mov.w	r4, #0
 800485c:	461a      	mov	r2, r3
 800485e:	4623      	mov	r3, r4
 8004860:	f7fb fd06 	bl	8000270 <__aeabi_uldivmod>
 8004864:	4603      	mov	r3, r0
 8004866:	460c      	mov	r4, r1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e049      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486c:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	f04f 0400 	mov.w	r4, #0
 8004876:	f240 11ff 	movw	r1, #511	; 0x1ff
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	ea03 0501 	and.w	r5, r3, r1
 8004882:	ea04 0602 	and.w	r6, r4, r2
 8004886:	4629      	mov	r1, r5
 8004888:	4632      	mov	r2, r6
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	f04f 0400 	mov.w	r4, #0
 8004892:	0154      	lsls	r4, r2, #5
 8004894:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004898:	014b      	lsls	r3, r1, #5
 800489a:	4619      	mov	r1, r3
 800489c:	4622      	mov	r2, r4
 800489e:	1b49      	subs	r1, r1, r5
 80048a0:	eb62 0206 	sbc.w	r2, r2, r6
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	0194      	lsls	r4, r2, #6
 80048ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048b2:	018b      	lsls	r3, r1, #6
 80048b4:	1a5b      	subs	r3, r3, r1
 80048b6:	eb64 0402 	sbc.w	r4, r4, r2
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048c8:	00d9      	lsls	r1, r3, #3
 80048ca:	460b      	mov	r3, r1
 80048cc:	4614      	mov	r4, r2
 80048ce:	195b      	adds	r3, r3, r5
 80048d0:	eb44 0406 	adc.w	r4, r4, r6
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	02a2      	lsls	r2, r4, #10
 80048de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048e2:	0299      	lsls	r1, r3, #10
 80048e4:	460b      	mov	r3, r1
 80048e6:	4614      	mov	r4, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	4621      	mov	r1, r4
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	461a      	mov	r2, r3
 80048f4:	4623      	mov	r3, r4
 80048f6:	f7fb fcbb 	bl	8000270 <__aeabi_uldivmod>
 80048fa:	4603      	mov	r3, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	3301      	adds	r3, #1
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	60bb      	str	r3, [r7, #8]
      break;
 800491a:	e002      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800491e:	60bb      	str	r3, [r7, #8]
      break;
 8004920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004922:	68bb      	ldr	r3, [r7, #8]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	00f42400 	.word	0x00f42400
 8004934:	007a1200 	.word	0x007a1200

08004938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <HAL_RCC_GetHCLKFreq+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000000 	.word	0x20000000

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004954:	f7ff fff0 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004958:	4601      	mov	r1, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0a9b      	lsrs	r3, r3, #10
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4a03      	ldr	r2, [pc, #12]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	fa21 f303 	lsr.w	r3, r1, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	08008538 	.word	0x08008538

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800497c:	f7ff ffdc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004980:	4601      	mov	r1, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0b5b      	lsrs	r3, r3, #13
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4a03      	ldr	r2, [pc, #12]	; (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 800498e:	5cd3      	ldrb	r3, [r2, r3]
 8004990:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	08008538 	.word	0x08008538

080049a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	220f      	movs	r2, #15
 80049ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0203 	and.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_GetClockConfig+0x5c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_RCC_GetClockConfig+0x60>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40023c00 	.word	0x40023c00

08004a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e056      	b.n	8004ac4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fd f8af 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	ea42 0103 	orr.w	r1, r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	f003 0104 	and.w	r1, r3, #4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e01d      	b.n	8004b1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd f956 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 fbce 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d007      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e01d      	b.n	8004bb8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fd f8e5 	bl	8001d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f000 fb7f 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fdba 	bl	800574c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <HAL_TIM_PWM_Start+0x74>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_PWM_Start+0x2c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <HAL_TIM_PWM_Start+0x78>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x30>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x32>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40010400 	.word	0x40010400

08004c3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fd7c 	bl	800574c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <HAL_TIM_PWM_Stop+0xa8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_PWM_Stop+0x2c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <HAL_TIM_PWM_Stop+0xac>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_PWM_Stop+0x30>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_TIM_PWM_Stop+0x32>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d017      	beq.n	8004ca2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <HAL_TIM_PWM_Stop+0x66>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1a      	ldr	r2, [r3, #32]
 8004c88:	f240 4344 	movw	r3, #1092	; 0x444
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_PWM_Stop+0x66>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_TIM_PWM_Stop+0x96>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	f240 4344 	movw	r3, #1092	; 0x444
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_PWM_Stop+0x96>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40010400 	.word	0x40010400

08004cec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e083      	b.n	8004e08 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fc ffa5 	bl	8001c64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d30:	f023 0307 	bic.w	r3, r3, #7
 8004d34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f000 fab3 	bl	80052ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d8c:	f023 030c 	bic.w	r3, r3, #12
 8004d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	4313      	orrs	r3, r2
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	011a      	lsls	r2, r3, #4
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	031b      	lsls	r3, r3, #12
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	4313      	orrs	r3, r2
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_TIM_Encoder_Start_IT+0x16>
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d010      	beq.n	8004e46 <HAL_TIM_Encoder_Start_IT+0x36>
 8004e24:	e01f      	b.n	8004e66 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fc8c 	bl	800574c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0202 	orr.w	r2, r2, #2
 8004e42:	60da      	str	r2, [r3, #12]
      break;
 8004e44:	e02e      	b.n	8004ea4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2104      	movs	r1, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fc7c 	bl	800574c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0204 	orr.w	r2, r2, #4
 8004e62:	60da      	str	r2, [r3, #12]
      break;
 8004e64:	e01e      	b.n	8004ea4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fc6c 	bl	800574c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fc65 	bl	800574c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0202 	orr.w	r2, r2, #2
 8004e90:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0204 	orr.w	r2, r2, #4
 8004ea0:	60da      	str	r2, [r3, #12]
      break;
 8004ea2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d122      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d11b      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f06f 0202 	mvn.w	r2, #2
 8004eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f9b5 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004f06:	e005      	b.n	8004f14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f9a7 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9b8 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d122      	bne.n	8004f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d11b      	bne.n	8004f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0204 	mvn.w	r2, #4
 8004f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f98b 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004f5a:	e005      	b.n	8004f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f97d 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f98e 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d122      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d11b      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f06f 0208 	mvn.w	r2, #8
 8004f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2204      	movs	r2, #4
 8004f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f961 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004fae:	e005      	b.n	8004fbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f953 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f964 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d122      	bne.n	8005016 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d11b      	bne.n	8005016 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0210 	mvn.w	r2, #16
 8004fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2208      	movs	r2, #8
 8004fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f937 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8005002:	e005      	b.n	8005010 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f929 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f93a 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10e      	bne.n	8005042 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0201 	mvn.w	r2, #1
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fc fc39 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d10e      	bne.n	800506e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d107      	bne.n	800506e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fc1b 	bl	80058a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d10e      	bne.n	800509a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d107      	bne.n	800509a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8ff 	bl	8005298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d10e      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d107      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f06f 0220 	mvn.w	r2, #32
 80050be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fbe5 	bl	8005890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e0b4      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	f200 809f 	bhi.w	8005240 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800513d 	.word	0x0800513d
 800510c:	08005241 	.word	0x08005241
 8005110:	08005241 	.word	0x08005241
 8005114:	08005241 	.word	0x08005241
 8005118:	0800517d 	.word	0x0800517d
 800511c:	08005241 	.word	0x08005241
 8005120:	08005241 	.word	0x08005241
 8005124:	08005241 	.word	0x08005241
 8005128:	080051bf 	.word	0x080051bf
 800512c:	08005241 	.word	0x08005241
 8005130:	08005241 	.word	0x08005241
 8005134:	08005241 	.word	0x08005241
 8005138:	080051ff 	.word	0x080051ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f952 	bl	80053ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6999      	ldr	r1, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
      break;
 800517a:	e062      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f9a2 	bl	80054cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]
      break;
 80051bc:	e041      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f9f7 	bl	80055b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0204 	bic.w	r2, r2, #4
 80051e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69d9      	ldr	r1, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	61da      	str	r2, [r3, #28]
      break;
 80051fc:	e021      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa4b 	bl	80056a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005240:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a40      	ldr	r2, [pc, #256]	; (80053c0 <TIM_Base_SetConfig+0x114>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d00f      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3d      	ldr	r2, [pc, #244]	; (80053c4 <TIM_Base_SetConfig+0x118>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00b      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3c      	ldr	r2, [pc, #240]	; (80053c8 <TIM_Base_SetConfig+0x11c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3b      	ldr	r2, [pc, #236]	; (80053cc <TIM_Base_SetConfig+0x120>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3a      	ldr	r2, [pc, #232]	; (80053d0 <TIM_Base_SetConfig+0x124>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2f      	ldr	r2, [pc, #188]	; (80053c0 <TIM_Base_SetConfig+0x114>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d02b      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d027      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <TIM_Base_SetConfig+0x118>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d023      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <TIM_Base_SetConfig+0x11c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01f      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <TIM_Base_SetConfig+0x120>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <TIM_Base_SetConfig+0x124>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a28      	ldr	r2, [pc, #160]	; (80053d4 <TIM_Base_SetConfig+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <TIM_Base_SetConfig+0x12c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a26      	ldr	r2, [pc, #152]	; (80053dc <TIM_Base_SetConfig+0x130>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <TIM_Base_SetConfig+0x134>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <TIM_Base_SetConfig+0x138>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <TIM_Base_SetConfig+0x13c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <TIM_Base_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0xf8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <TIM_Base_SetConfig+0x124>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	615a      	str	r2, [r3, #20]
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	40001800 	.word	0x40001800
 80053e4:	40001c00 	.word	0x40001c00
 80053e8:	40002000 	.word	0x40002000

080053ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 0302 	bic.w	r3, r3, #2
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <TIM_OC1_SetConfig+0xd8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC1_SetConfig+0x64>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <TIM_OC1_SetConfig+0xdc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <TIM_OC1_SetConfig+0xd8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_OC1_SetConfig+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <TIM_OC1_SetConfig+0xdc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d111      	bne.n	800549e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <TIM_OC2_SetConfig+0xe4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC2_SetConfig+0x68>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_OC2_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10d      	bne.n	8005550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <TIM_OC2_SetConfig+0xe4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC2_SetConfig+0x94>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_OC2_SetConfig+0xe8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d113      	bne.n	8005588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800556e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a21      	ldr	r2, [pc, #132]	; (8005698 <TIM_OC3_SetConfig+0xe0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <TIM_OC3_SetConfig+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10d      	bne.n	800563a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <TIM_OC3_SetConfig+0xe0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC3_SetConfig+0x92>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC3_SetConfig+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d113      	bne.n	8005672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40010000 	.word	0x40010000
 800569c:	40010400 	.word	0x40010400

080056a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <TIM_OC4_SetConfig+0xa4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC4_SetConfig+0x68>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a11      	ldr	r2, [pc, #68]	; (8005748 <TIM_OC4_SetConfig+0xa8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d109      	bne.n	800571c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800570e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	019b      	lsls	r3, r3, #6
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400

0800574c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2201      	movs	r2, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e05a      	b.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d01d      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10c      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40010000 	.word	0x40010000
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40010400 	.word	0x40010400
 8005888:	40014000 	.word	0x40014000
 800588c:	40001800 	.word	0x40001800

08005890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e03f      	b.n	800594a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc faea 	bl	8001eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2224      	movs	r2, #36	; 0x24
 80058e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f829 	bl	8005954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005996:	f023 030c 	bic.w	r3, r3, #12
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	f040 818b 	bne.w	8005cdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4ac1      	ldr	r2, [pc, #772]	; (8005cd0 <UART_SetConfig+0x37c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d005      	beq.n	80059dc <UART_SetConfig+0x88>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4abf      	ldr	r2, [pc, #764]	; (8005cd4 <UART_SetConfig+0x380>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f040 80bd 	bne.w	8005b56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe ffcc 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 80059e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	461d      	mov	r5, r3
 80059e6:	f04f 0600 	mov.w	r6, #0
 80059ea:	46a8      	mov	r8, r5
 80059ec:	46b1      	mov	r9, r6
 80059ee:	eb18 0308 	adds.w	r3, r8, r8
 80059f2:	eb49 0409 	adc.w	r4, r9, r9
 80059f6:	4698      	mov	r8, r3
 80059f8:	46a1      	mov	r9, r4
 80059fa:	eb18 0805 	adds.w	r8, r8, r5
 80059fe:	eb49 0906 	adc.w	r9, r9, r6
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a16:	4688      	mov	r8, r1
 8005a18:	4691      	mov	r9, r2
 8005a1a:	eb18 0005 	adds.w	r0, r8, r5
 8005a1e:	eb49 0106 	adc.w	r1, r9, r6
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	461d      	mov	r5, r3
 8005a28:	f04f 0600 	mov.w	r6, #0
 8005a2c:	196b      	adds	r3, r5, r5
 8005a2e:	eb46 0406 	adc.w	r4, r6, r6
 8005a32:	461a      	mov	r2, r3
 8005a34:	4623      	mov	r3, r4
 8005a36:	f7fa fc1b 	bl	8000270 <__aeabi_uldivmod>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4ba5      	ldr	r3, [pc, #660]	; (8005cd8 <UART_SetConfig+0x384>)
 8005a42:	fba3 2302 	umull	r2, r3, r3, r2
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	461d      	mov	r5, r3
 8005a50:	f04f 0600 	mov.w	r6, #0
 8005a54:	46a9      	mov	r9, r5
 8005a56:	46b2      	mov	sl, r6
 8005a58:	eb19 0309 	adds.w	r3, r9, r9
 8005a5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a60:	4699      	mov	r9, r3
 8005a62:	46a2      	mov	sl, r4
 8005a64:	eb19 0905 	adds.w	r9, r9, r5
 8005a68:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a80:	4689      	mov	r9, r1
 8005a82:	4692      	mov	sl, r2
 8005a84:	eb19 0005 	adds.w	r0, r9, r5
 8005a88:	eb4a 0106 	adc.w	r1, sl, r6
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	461d      	mov	r5, r3
 8005a92:	f04f 0600 	mov.w	r6, #0
 8005a96:	196b      	adds	r3, r5, r5
 8005a98:	eb46 0406 	adc.w	r4, r6, r6
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	f7fa fbe6 	bl	8000270 <__aeabi_uldivmod>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4b8b      	ldr	r3, [pc, #556]	; (8005cd8 <UART_SetConfig+0x384>)
 8005aac:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	2164      	movs	r1, #100	; 0x64
 8005ab4:	fb01 f303 	mul.w	r3, r1, r3
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	3332      	adds	r3, #50	; 0x32
 8005abe:	4a86      	ldr	r2, [pc, #536]	; (8005cd8 <UART_SetConfig+0x384>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005acc:	4498      	add	r8, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	461d      	mov	r5, r3
 8005ad2:	f04f 0600 	mov.w	r6, #0
 8005ad6:	46a9      	mov	r9, r5
 8005ad8:	46b2      	mov	sl, r6
 8005ada:	eb19 0309 	adds.w	r3, r9, r9
 8005ade:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	46a2      	mov	sl, r4
 8005ae6:	eb19 0905 	adds.w	r9, r9, r5
 8005aea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b02:	4689      	mov	r9, r1
 8005b04:	4692      	mov	sl, r2
 8005b06:	eb19 0005 	adds.w	r0, r9, r5
 8005b0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	461d      	mov	r5, r3
 8005b14:	f04f 0600 	mov.w	r6, #0
 8005b18:	196b      	adds	r3, r5, r5
 8005b1a:	eb46 0406 	adc.w	r4, r6, r6
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4623      	mov	r3, r4
 8005b22:	f7fa fba5 	bl	8000270 <__aeabi_uldivmod>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <UART_SetConfig+0x384>)
 8005b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a65      	ldr	r2, [pc, #404]	; (8005cd8 <UART_SetConfig+0x384>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f003 0207 	and.w	r2, r3, #7
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4442      	add	r2, r8
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	e26f      	b.n	8006036 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b56:	f7fe fefb 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8005b5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	461d      	mov	r5, r3
 8005b60:	f04f 0600 	mov.w	r6, #0
 8005b64:	46a8      	mov	r8, r5
 8005b66:	46b1      	mov	r9, r6
 8005b68:	eb18 0308 	adds.w	r3, r8, r8
 8005b6c:	eb49 0409 	adc.w	r4, r9, r9
 8005b70:	4698      	mov	r8, r3
 8005b72:	46a1      	mov	r9, r4
 8005b74:	eb18 0805 	adds.w	r8, r8, r5
 8005b78:	eb49 0906 	adc.w	r9, r9, r6
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b90:	4688      	mov	r8, r1
 8005b92:	4691      	mov	r9, r2
 8005b94:	eb18 0005 	adds.w	r0, r8, r5
 8005b98:	eb49 0106 	adc.w	r1, r9, r6
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	461d      	mov	r5, r3
 8005ba2:	f04f 0600 	mov.w	r6, #0
 8005ba6:	196b      	adds	r3, r5, r5
 8005ba8:	eb46 0406 	adc.w	r4, r6, r6
 8005bac:	461a      	mov	r2, r3
 8005bae:	4623      	mov	r3, r4
 8005bb0:	f7fa fb5e 	bl	8000270 <__aeabi_uldivmod>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4b47      	ldr	r3, [pc, #284]	; (8005cd8 <UART_SetConfig+0x384>)
 8005bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f04f 0600 	mov.w	r6, #0
 8005bce:	46a9      	mov	r9, r5
 8005bd0:	46b2      	mov	sl, r6
 8005bd2:	eb19 0309 	adds.w	r3, r9, r9
 8005bd6:	eb4a 040a 	adc.w	r4, sl, sl
 8005bda:	4699      	mov	r9, r3
 8005bdc:	46a2      	mov	sl, r4
 8005bde:	eb19 0905 	adds.w	r9, r9, r5
 8005be2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bfa:	4689      	mov	r9, r1
 8005bfc:	4692      	mov	sl, r2
 8005bfe:	eb19 0005 	adds.w	r0, r9, r5
 8005c02:	eb4a 0106 	adc.w	r1, sl, r6
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	461d      	mov	r5, r3
 8005c0c:	f04f 0600 	mov.w	r6, #0
 8005c10:	196b      	adds	r3, r5, r5
 8005c12:	eb46 0406 	adc.w	r4, r6, r6
 8005c16:	461a      	mov	r2, r3
 8005c18:	4623      	mov	r3, r4
 8005c1a:	f7fa fb29 	bl	8000270 <__aeabi_uldivmod>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	461a      	mov	r2, r3
 8005c24:	4b2c      	ldr	r3, [pc, #176]	; (8005cd8 <UART_SetConfig+0x384>)
 8005c26:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	2164      	movs	r1, #100	; 0x64
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	3332      	adds	r3, #50	; 0x32
 8005c38:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <UART_SetConfig+0x384>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c46:	4498      	add	r8, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	f04f 0600 	mov.w	r6, #0
 8005c50:	46a9      	mov	r9, r5
 8005c52:	46b2      	mov	sl, r6
 8005c54:	eb19 0309 	adds.w	r3, r9, r9
 8005c58:	eb4a 040a 	adc.w	r4, sl, sl
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	46a2      	mov	sl, r4
 8005c60:	eb19 0905 	adds.w	r9, r9, r5
 8005c64:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c68:	f04f 0100 	mov.w	r1, #0
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c7c:	4689      	mov	r9, r1
 8005c7e:	4692      	mov	sl, r2
 8005c80:	eb19 0005 	adds.w	r0, r9, r5
 8005c84:	eb4a 0106 	adc.w	r1, sl, r6
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	461d      	mov	r5, r3
 8005c8e:	f04f 0600 	mov.w	r6, #0
 8005c92:	196b      	adds	r3, r5, r5
 8005c94:	eb46 0406 	adc.w	r4, r6, r6
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	f7fa fae8 	bl	8000270 <__aeabi_uldivmod>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <UART_SetConfig+0x384>)
 8005ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	2164      	movs	r1, #100	; 0x64
 8005cb0:	fb01 f303 	mul.w	r3, r1, r3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	3332      	adds	r3, #50	; 0x32
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <UART_SetConfig+0x384>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	f003 0207 	and.w	r2, r3, #7
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4442      	add	r2, r8
 8005ccc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005cce:	e1b2      	b.n	8006036 <UART_SetConfig+0x6e2>
 8005cd0:	40011000 	.word	0x40011000
 8005cd4:	40011400 	.word	0x40011400
 8005cd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4ad7      	ldr	r2, [pc, #860]	; (8006040 <UART_SetConfig+0x6ec>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d005      	beq.n	8005cf2 <UART_SetConfig+0x39e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4ad6      	ldr	r2, [pc, #856]	; (8006044 <UART_SetConfig+0x6f0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	f040 80d1 	bne.w	8005e94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf2:	f7fe fe41 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8005cf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	469a      	mov	sl, r3
 8005cfc:	f04f 0b00 	mov.w	fp, #0
 8005d00:	46d0      	mov	r8, sl
 8005d02:	46d9      	mov	r9, fp
 8005d04:	eb18 0308 	adds.w	r3, r8, r8
 8005d08:	eb49 0409 	adc.w	r4, r9, r9
 8005d0c:	4698      	mov	r8, r3
 8005d0e:	46a1      	mov	r9, r4
 8005d10:	eb18 080a 	adds.w	r8, r8, sl
 8005d14:	eb49 090b 	adc.w	r9, r9, fp
 8005d18:	f04f 0100 	mov.w	r1, #0
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d2c:	4688      	mov	r8, r1
 8005d2e:	4691      	mov	r9, r2
 8005d30:	eb1a 0508 	adds.w	r5, sl, r8
 8005d34:	eb4b 0609 	adc.w	r6, fp, r9
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	0094      	lsls	r4, r2, #2
 8005d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d50:	008b      	lsls	r3, r1, #2
 8005d52:	461a      	mov	r2, r3
 8005d54:	4623      	mov	r3, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	4631      	mov	r1, r6
 8005d5a:	f7fa fa89 	bl	8000270 <__aeabi_uldivmod>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	461a      	mov	r2, r3
 8005d64:	4bb8      	ldr	r3, [pc, #736]	; (8006048 <UART_SetConfig+0x6f4>)
 8005d66:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	469b      	mov	fp, r3
 8005d74:	f04f 0c00 	mov.w	ip, #0
 8005d78:	46d9      	mov	r9, fp
 8005d7a:	46e2      	mov	sl, ip
 8005d7c:	eb19 0309 	adds.w	r3, r9, r9
 8005d80:	eb4a 040a 	adc.w	r4, sl, sl
 8005d84:	4699      	mov	r9, r3
 8005d86:	46a2      	mov	sl, r4
 8005d88:	eb19 090b 	adds.w	r9, r9, fp
 8005d8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d90:	f04f 0100 	mov.w	r1, #0
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005da4:	4689      	mov	r9, r1
 8005da6:	4692      	mov	sl, r2
 8005da8:	eb1b 0509 	adds.w	r5, fp, r9
 8005dac:	eb4c 060a 	adc.w	r6, ip, sl
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	f04f 0400 	mov.w	r4, #0
 8005dc2:	0094      	lsls	r4, r2, #2
 8005dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dc8:	008b      	lsls	r3, r1, #2
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4623      	mov	r3, r4
 8005dce:	4628      	mov	r0, r5
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	f7fa fa4d 	bl	8000270 <__aeabi_uldivmod>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4b9a      	ldr	r3, [pc, #616]	; (8006048 <UART_SetConfig+0x6f4>)
 8005dde:	fba3 1302 	umull	r1, r3, r3, r2
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	2164      	movs	r1, #100	; 0x64
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	3332      	adds	r3, #50	; 0x32
 8005df0:	4a95      	ldr	r2, [pc, #596]	; (8006048 <UART_SetConfig+0x6f4>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfc:	4498      	add	r8, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	469b      	mov	fp, r3
 8005e02:	f04f 0c00 	mov.w	ip, #0
 8005e06:	46d9      	mov	r9, fp
 8005e08:	46e2      	mov	sl, ip
 8005e0a:	eb19 0309 	adds.w	r3, r9, r9
 8005e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e12:	4699      	mov	r9, r3
 8005e14:	46a2      	mov	sl, r4
 8005e16:	eb19 090b 	adds.w	r9, r9, fp
 8005e1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e32:	4689      	mov	r9, r1
 8005e34:	4692      	mov	sl, r2
 8005e36:	eb1b 0509 	adds.w	r5, fp, r9
 8005e3a:	eb4c 060a 	adc.w	r6, ip, sl
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4619      	mov	r1, r3
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	f04f 0400 	mov.w	r4, #0
 8005e50:	0094      	lsls	r4, r2, #2
 8005e52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e56:	008b      	lsls	r3, r1, #2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	4631      	mov	r1, r6
 8005e60:	f7fa fa06 	bl	8000270 <__aeabi_uldivmod>
 8005e64:	4603      	mov	r3, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b77      	ldr	r3, [pc, #476]	; (8006048 <UART_SetConfig+0x6f4>)
 8005e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	2164      	movs	r1, #100	; 0x64
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	3332      	adds	r3, #50	; 0x32
 8005e7e:	4a72      	ldr	r2, [pc, #456]	; (8006048 <UART_SetConfig+0x6f4>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f003 020f 	and.w	r2, r3, #15
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4442      	add	r2, r8
 8005e90:	609a      	str	r2, [r3, #8]
 8005e92:	e0d0      	b.n	8006036 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fe fd5c 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8005e98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	469a      	mov	sl, r3
 8005e9e:	f04f 0b00 	mov.w	fp, #0
 8005ea2:	46d0      	mov	r8, sl
 8005ea4:	46d9      	mov	r9, fp
 8005ea6:	eb18 0308 	adds.w	r3, r8, r8
 8005eaa:	eb49 0409 	adc.w	r4, r9, r9
 8005eae:	4698      	mov	r8, r3
 8005eb0:	46a1      	mov	r9, r4
 8005eb2:	eb18 080a 	adds.w	r8, r8, sl
 8005eb6:	eb49 090b 	adc.w	r9, r9, fp
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ec6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005eca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ece:	4688      	mov	r8, r1
 8005ed0:	4691      	mov	r9, r2
 8005ed2:	eb1a 0508 	adds.w	r5, sl, r8
 8005ed6:	eb4b 0609 	adc.w	r6, fp, r9
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	f04f 0400 	mov.w	r4, #0
 8005eec:	0094      	lsls	r4, r2, #2
 8005eee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ef2:	008b      	lsls	r3, r1, #2
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	4631      	mov	r1, r6
 8005efc:	f7fa f9b8 	bl	8000270 <__aeabi_uldivmod>
 8005f00:	4603      	mov	r3, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b50      	ldr	r3, [pc, #320]	; (8006048 <UART_SetConfig+0x6f4>)
 8005f08:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	469b      	mov	fp, r3
 8005f16:	f04f 0c00 	mov.w	ip, #0
 8005f1a:	46d9      	mov	r9, fp
 8005f1c:	46e2      	mov	sl, ip
 8005f1e:	eb19 0309 	adds.w	r3, r9, r9
 8005f22:	eb4a 040a 	adc.w	r4, sl, sl
 8005f26:	4699      	mov	r9, r3
 8005f28:	46a2      	mov	sl, r4
 8005f2a:	eb19 090b 	adds.w	r9, r9, fp
 8005f2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f32:	f04f 0100 	mov.w	r1, #0
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f46:	4689      	mov	r9, r1
 8005f48:	4692      	mov	sl, r2
 8005f4a:	eb1b 0509 	adds.w	r5, fp, r9
 8005f4e:	eb4c 060a 	adc.w	r6, ip, sl
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4619      	mov	r1, r3
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	f04f 0400 	mov.w	r4, #0
 8005f64:	0094      	lsls	r4, r2, #2
 8005f66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f6a:	008b      	lsls	r3, r1, #2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4623      	mov	r3, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	4631      	mov	r1, r6
 8005f74:	f7fa f97c 	bl	8000270 <__aeabi_uldivmod>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4b32      	ldr	r3, [pc, #200]	; (8006048 <UART_SetConfig+0x6f4>)
 8005f80:	fba3 1302 	umull	r1, r3, r3, r2
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	2164      	movs	r1, #100	; 0x64
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	3332      	adds	r3, #50	; 0x32
 8005f92:	4a2d      	ldr	r2, [pc, #180]	; (8006048 <UART_SetConfig+0x6f4>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f9e:	4498      	add	r8, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	469b      	mov	fp, r3
 8005fa4:	f04f 0c00 	mov.w	ip, #0
 8005fa8:	46d9      	mov	r9, fp
 8005faa:	46e2      	mov	sl, ip
 8005fac:	eb19 0309 	adds.w	r3, r9, r9
 8005fb0:	eb4a 040a 	adc.w	r4, sl, sl
 8005fb4:	4699      	mov	r9, r3
 8005fb6:	46a2      	mov	sl, r4
 8005fb8:	eb19 090b 	adds.w	r9, r9, fp
 8005fbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fd4:	4689      	mov	r9, r1
 8005fd6:	4692      	mov	sl, r2
 8005fd8:	eb1b 0509 	adds.w	r5, fp, r9
 8005fdc:	eb4c 060a 	adc.w	r6, ip, sl
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f04f 0400 	mov.w	r4, #0
 8005ff2:	0094      	lsls	r4, r2, #2
 8005ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ff8:	008b      	lsls	r3, r1, #2
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4623      	mov	r3, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	4631      	mov	r1, r6
 8006002:	f7fa f935 	bl	8000270 <__aeabi_uldivmod>
 8006006:	4603      	mov	r3, r0
 8006008:	460c      	mov	r4, r1
 800600a:	461a      	mov	r2, r3
 800600c:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <UART_SetConfig+0x6f4>)
 800600e:	fba3 1302 	umull	r1, r3, r3, r2
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	2164      	movs	r1, #100	; 0x64
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	3332      	adds	r3, #50	; 0x32
 8006020:	4a09      	ldr	r2, [pc, #36]	; (8006048 <UART_SetConfig+0x6f4>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	f003 020f 	and.w	r2, r3, #15
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4442      	add	r2, r8
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	e7ff      	b.n	8006036 <UART_SetConfig+0x6e2>
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	40011000 	.word	0x40011000
 8006044:	40011400 	.word	0x40011400
 8006048:	51eb851f 	.word	0x51eb851f

0800604c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800605a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800605e:	2b84      	cmp	r3, #132	; 0x84
 8006060:	d005      	beq.n	800606e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006062:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	3303      	adds	r3, #3
 800606c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006082:	f3ef 8305 	mrs	r3, IPSR
 8006086:	607b      	str	r3, [r7, #4]
  return(result);
 8006088:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80060a4:	f000 fd8a 	bl	8006bbc <vTaskStartScheduler>
  
  return osOK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	bd80      	pop	{r7, pc}

080060ae <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80060b2:	f7ff ffe3 	bl	800607c <inHandlerMode>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80060bc:	f000 fe96 	bl	8006dec <xTaskGetTickCountFromISR>
 80060c0:	4603      	mov	r3, r0
 80060c2:	e002      	b.n	80060ca <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80060c4:	f000 fe82 	bl	8006dcc <xTaskGetTickCount>
 80060c8:	4603      	mov	r3, r0
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	bd80      	pop	{r7, pc}

080060ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d0:	b089      	sub	sp, #36	; 0x24
 80060d2:	af04      	add	r7, sp, #16
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <osThreadCreate+0x54>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01c      	beq.n	8006122 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685c      	ldr	r4, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681d      	ldr	r5, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691e      	ldr	r6, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff ffa6 	bl	800604c <makeFreeRtosPriority>
 8006100:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800610a:	9202      	str	r2, [sp, #8]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	9100      	str	r1, [sp, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	4632      	mov	r2, r6
 8006114:	4629      	mov	r1, r5
 8006116:	4620      	mov	r0, r4
 8006118:	f000 f92a 	bl	8006370 <xTaskCreateStatic>
 800611c:	4603      	mov	r3, r0
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e01c      	b.n	800615c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685c      	ldr	r4, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800612e:	b29e      	uxth	r6, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff ff88 	bl	800604c <makeFreeRtosPriority>
 800613c:	4602      	mov	r2, r0
 800613e:	f107 030c 	add.w	r3, r7, #12
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	9200      	str	r2, [sp, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	4632      	mov	r2, r6
 800614a:	4629      	mov	r1, r5
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f969 	bl	8006424 <xTaskCreate>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d001      	beq.n	800615c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006166 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa8e 	bl	8006690 <vTaskDelete>
  return osOK;
 8006174:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fb8a 	bl	80068a0 <vTaskSuspend>
  
  return osOK;
 800618c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80061a0:	f7ff ff6c 	bl	800607c <inHandlerMode>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00e      	beq.n	80061c8 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fc96 	bl	8006adc <xTaskResumeFromISR>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10b      	bne.n	80061ce <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <osThreadResume+0x40>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	e002      	b.n	80061ce <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fc2b 	bl	8006a24 <vTaskResume>
  }
  return osOK;
 80061ce:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <osDelayUntil+0x18>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	e000      	b.n	80061f6 <osDelayUntil+0x1a>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fad7 	bl	80067ac <vTaskDelayUntil>
  
  return osOK;
 80061fe:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 0208 	add.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f04f 32ff 	mov.w	r2, #4294967295
 8006220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f103 0208 	add.w	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f103 0208 	add.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d103      	bne.n	80062ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e00c      	b.n	80062e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3308      	adds	r3, #8
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e002      	b.n	80062d8 <vListInsert+0x2e>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d2f6      	bcs.n	80062d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]
}
 8006310:	bf00      	nop
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6892      	ldr	r2, [r2, #8]
 8006332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6852      	ldr	r2, [r2, #4]
 800633c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d103      	bne.n	8006350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08e      	sub	sp, #56	; 0x38
 8006374:	af04      	add	r7, sp, #16
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	e7fe      	b.n	8006396 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <xTaskCreateStatic+0x42>
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e7fe      	b.n	80063b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063b2:	2354      	movs	r3, #84	; 0x54
 80063b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b54      	cmp	r3, #84	; 0x54
 80063ba:	d009      	beq.n	80063d0 <xTaskCreateStatic+0x60>
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e7fe      	b.n	80063ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01e      	beq.n	8006416 <xTaskCreateStatic+0xa6>
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01b      	beq.n	8006416 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063f0:	2300      	movs	r3, #0
 80063f2:	9303      	str	r3, [sp, #12]
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	9302      	str	r3, [sp, #8]
 80063f8:	f107 0314 	add.w	r3, r7, #20
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f850 	bl	80064ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800640e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006410:	f000 f8d4 	bl	80065bc <prvAddNewTaskToReadyList>
 8006414:	e001      	b.n	800641a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800641a:	697b      	ldr	r3, [r7, #20]
	}
 800641c:	4618      	mov	r0, r3
 800641e:	3728      	adds	r7, #40	; 0x28
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08c      	sub	sp, #48	; 0x30
 8006428:	af04      	add	r7, sp, #16
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4618      	mov	r0, r3
 800643a:	f001 f971 	bl	8007720 <pvPortMalloc>
 800643e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006446:	2054      	movs	r0, #84	; 0x54
 8006448:	f001 f96a 	bl	8007720 <pvPortMalloc>
 800644c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
 800645a:	e005      	b.n	8006468 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800645c:	6978      	ldr	r0, [r7, #20]
 800645e:	f001 fa21 	bl	80078a4 <vPortFree>
 8006462:	e001      	b.n	8006468 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d017      	beq.n	800649e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	2300      	movs	r3, #0
 800647a:	9303      	str	r3, [sp, #12]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	9302      	str	r3, [sp, #8]
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f80e 	bl	80064ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006492:	69f8      	ldr	r0, [r7, #28]
 8006494:	f000 f892 	bl	80065bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006498:	2301      	movs	r3, #1
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	e002      	b.n	80064a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064a4:	69bb      	ldr	r3, [r7, #24]
	}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b088      	sub	sp, #32
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064c6:	3b01      	subs	r3, #1
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <prvInitialiseNewTask+0x46>
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e7fe      	b.n	80064f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01f      	beq.n	800653a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e012      	b.n	8006526 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	7819      	ldrb	r1, [r3, #0]
 8006508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	3334      	adds	r3, #52	; 0x34
 8006510:	460a      	mov	r2, r1
 8006512:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d006      	beq.n	800652e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b0f      	cmp	r3, #15
 800652a:	d9e9      	bls.n	8006500 <prvInitialiseNewTask+0x52>
 800652c:	e000      	b.n	8006530 <prvInitialiseNewTask+0x82>
			{
				break;
 800652e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006538:	e003      	b.n	8006542 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	2b06      	cmp	r3, #6
 8006546:	d901      	bls.n	800654c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006548:	2306      	movs	r3, #6
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006550:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	2200      	movs	r2, #0
 800655c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	3304      	adds	r3, #4
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fe70 	bl	8006248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	3318      	adds	r3, #24
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fe6b 	bl	8006248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006576:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	f1c3 0207 	rsb	r2, r3, #7
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006586:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	2200      	movs	r2, #0
 800658c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68f9      	ldr	r1, [r7, #12]
 800659a:	69b8      	ldr	r0, [r7, #24]
 800659c:	f000 fe82 	bl	80072a4 <pxPortInitialiseStack>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b2:	bf00      	nop
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065c4:	f000 ff92 	bl	80074ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065c8:	4b2a      	ldr	r3, [pc, #168]	; (8006674 <prvAddNewTaskToReadyList+0xb8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	4a29      	ldr	r2, [pc, #164]	; (8006674 <prvAddNewTaskToReadyList+0xb8>)
 80065d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065d2:	4b29      	ldr	r3, [pc, #164]	; (8006678 <prvAddNewTaskToReadyList+0xbc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065da:	4a27      	ldr	r2, [pc, #156]	; (8006678 <prvAddNewTaskToReadyList+0xbc>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065e0:	4b24      	ldr	r3, [pc, #144]	; (8006674 <prvAddNewTaskToReadyList+0xb8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d110      	bne.n	800660a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065e8:	f000 fd3c 	bl	8007064 <prvInitialiseTaskLists>
 80065ec:	e00d      	b.n	800660a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ee:	4b23      	ldr	r3, [pc, #140]	; (800667c <prvAddNewTaskToReadyList+0xc0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065f6:	4b20      	ldr	r3, [pc, #128]	; (8006678 <prvAddNewTaskToReadyList+0xbc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	429a      	cmp	r2, r3
 8006602:	d802      	bhi.n	800660a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006604:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <prvAddNewTaskToReadyList+0xbc>)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800660a:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <prvAddNewTaskToReadyList+0xc4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <prvAddNewTaskToReadyList+0xc4>)
 8006612:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	2201      	movs	r2, #1
 800661a:	409a      	lsls	r2, r3
 800661c:	4b19      	ldr	r3, [pc, #100]	; (8006684 <prvAddNewTaskToReadyList+0xc8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <prvAddNewTaskToReadyList+0xc8>)
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <prvAddNewTaskToReadyList+0xcc>)
 8006634:	441a      	add	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7ff fe10 	bl	8006262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006642:	f000 ff81 	bl	8007548 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <prvAddNewTaskToReadyList+0xc0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <prvAddNewTaskToReadyList+0xbc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	429a      	cmp	r2, r3
 800665a:	d207      	bcs.n	800666c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <prvAddNewTaskToReadyList+0xd0>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200003e8 	.word	0x200003e8
 8006678:	200002e8 	.word	0x200002e8
 800667c:	200003f4 	.word	0x200003f4
 8006680:	20000404 	.word	0x20000404
 8006684:	200003f0 	.word	0x200003f0
 8006688:	200002ec 	.word	0x200002ec
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006698:	f000 ff28 	bl	80074ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <vTaskDelete+0x18>
 80066a2:	4b38      	ldr	r3, [pc, #224]	; (8006784 <vTaskDelete+0xf4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	e000      	b.n	80066aa <vTaskDelete+0x1a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fe33 	bl	800631c <uxListRemove>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d115      	bne.n	80066e8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	4931      	ldr	r1, [pc, #196]	; (8006788 <vTaskDelete+0xf8>)
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <vTaskDelete+0x58>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	2201      	movs	r2, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	43da      	mvns	r2, r3
 80066de:	4b2b      	ldr	r3, [pc, #172]	; (800678c <vTaskDelete+0xfc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4013      	ands	r3, r2
 80066e4:	4a29      	ldr	r2, [pc, #164]	; (800678c <vTaskDelete+0xfc>)
 80066e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3318      	adds	r3, #24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff fe11 	bl	800631c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80066fa:	4b25      	ldr	r3, [pc, #148]	; (8006790 <vTaskDelete+0x100>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3301      	adds	r3, #1
 8006700:	4a23      	ldr	r2, [pc, #140]	; (8006790 <vTaskDelete+0x100>)
 8006702:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006704:	4b1f      	ldr	r3, [pc, #124]	; (8006784 <vTaskDelete+0xf4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	429a      	cmp	r2, r3
 800670c:	d10b      	bne.n	8006726 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4619      	mov	r1, r3
 8006714:	481f      	ldr	r0, [pc, #124]	; (8006794 <vTaskDelete+0x104>)
 8006716:	f7ff fda4 	bl	8006262 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800671a:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <vTaskDelete+0x108>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	4a1d      	ldr	r2, [pc, #116]	; (8006798 <vTaskDelete+0x108>)
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	e009      	b.n	800673a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <vTaskDelete+0x10c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3b01      	subs	r3, #1
 800672c:	4a1b      	ldr	r2, [pc, #108]	; (800679c <vTaskDelete+0x10c>)
 800672e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fd03 	bl	800713c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006736:	f000 fd2f 	bl	8007198 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800673a:	f000 ff05 	bl	8007548 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800673e:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <vTaskDelete+0x110>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01a      	beq.n	800677c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8006746:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <vTaskDelete+0xf4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	429a      	cmp	r2, r3
 800674e:	d115      	bne.n	800677c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006750:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <vTaskDelete+0x114>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <vTaskDelete+0xdc>
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	e7fe      	b.n	800676a <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800676c:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <vTaskDelete+0x118>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	200002e8 	.word	0x200002e8
 8006788:	200002ec 	.word	0x200002ec
 800678c:	200003f0 	.word	0x200003f0
 8006790:	20000404 	.word	0x20000404
 8006794:	200003bc 	.word	0x200003bc
 8006798:	200003d0 	.word	0x200003d0
 800679c:	200003e8 	.word	0x200003e8
 80067a0:	200003f4 	.word	0x200003f4
 80067a4:	20000410 	.word	0x20000410
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <vTaskDelayUntil+0x28>
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e7fe      	b.n	80067d2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <vTaskDelayUntil+0x42>
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	e7fe      	b.n	80067ec <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80067ee:	4b29      	ldr	r3, [pc, #164]	; (8006894 <vTaskDelayUntil+0xe8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <vTaskDelayUntil+0x5e>
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e7fe      	b.n	8006808 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800680a:	f000 fa35 	bl	8006c78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800680e:	4b22      	ldr	r3, [pc, #136]	; (8006898 <vTaskDelayUntil+0xec>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	4413      	add	r3, r2
 800681c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	429a      	cmp	r2, r3
 8006826:	d20b      	bcs.n	8006840 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	429a      	cmp	r2, r3
 8006830:	d211      	bcs.n	8006856 <vTaskDelayUntil+0xaa>
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	429a      	cmp	r2, r3
 8006838:	d90d      	bls.n	8006856 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
 800683e:	e00a      	b.n	8006856 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	429a      	cmp	r2, r3
 8006848:	d303      	bcc.n	8006852 <vTaskDelayUntil+0xa6>
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	429a      	cmp	r2, r3
 8006850:	d901      	bls.n	8006856 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006852:	2301      	movs	r3, #1
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d006      	beq.n	8006870 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fcb4 	bl	80071d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006870:	f000 fa10 	bl	8006c94 <xTaskResumeAll>
 8006874:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800687c:	4b07      	ldr	r3, [pc, #28]	; (800689c <vTaskDelayUntil+0xf0>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800688c:	bf00      	nop
 800688e:	3728      	adds	r7, #40	; 0x28
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000410 	.word	0x20000410
 8006898:	200003ec 	.word	0x200003ec
 800689c:	e000ed04 	.word	0xe000ed04

080068a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80068a8:	f000 fe20 	bl	80074ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <vTaskSuspend+0x18>
 80068b2:	4b3c      	ldr	r3, [pc, #240]	; (80069a4 <vTaskSuspend+0x104>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	e000      	b.n	80068ba <vTaskSuspend+0x1a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fd2b 	bl	800631c <uxListRemove>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d115      	bne.n	80068f8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	4935      	ldr	r1, [pc, #212]	; (80069a8 <vTaskSuspend+0x108>)
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <vTaskSuspend+0x58>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	2201      	movs	r2, #1
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	43da      	mvns	r2, r3
 80068ee:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <vTaskSuspend+0x10c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4013      	ands	r3, r2
 80068f4:	4a2d      	ldr	r2, [pc, #180]	; (80069ac <vTaskSuspend+0x10c>)
 80068f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3318      	adds	r3, #24
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fd09 	bl	800631c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3304      	adds	r3, #4
 800690e:	4619      	mov	r1, r3
 8006910:	4827      	ldr	r0, [pc, #156]	; (80069b0 <vTaskSuspend+0x110>)
 8006912:	f7ff fca6 	bl	8006262 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	d103      	bne.n	800692a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800692a:	f000 fe0d 	bl	8007548 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <vTaskSuspend+0x114>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006936:	f000 fdd9 	bl	80074ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800693a:	f000 fc2d 	bl	8007198 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800693e:	f000 fe03 	bl	8007548 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <vTaskSuspend+0x104>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d126      	bne.n	800699a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <vTaskSuspend+0x114>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006954:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <vTaskSuspend+0x118>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <vTaskSuspend+0xd0>
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	e7fe      	b.n	800696e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8006970:	4b12      	ldr	r3, [pc, #72]	; (80069bc <vTaskSuspend+0x11c>)
 8006972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006980:	e00b      	b.n	800699a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006982:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vTaskSuspend+0x110>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <vTaskSuspend+0x120>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d103      	bne.n	8006996 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <vTaskSuspend+0x104>)
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
	}
 8006994:	e001      	b.n	800699a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8006996:	f000 faf3 	bl	8006f80 <vTaskSwitchContext>
	}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200002e8 	.word	0x200002e8
 80069a8:	200002ec 	.word	0x200002ec
 80069ac:	200003f0 	.word	0x200003f0
 80069b0:	200003d4 	.word	0x200003d4
 80069b4:	200003f4 	.word	0x200003f4
 80069b8:	20000410 	.word	0x20000410
 80069bc:	e000ed04 	.word	0xe000ed04
 80069c0:	200003e8 	.word	0x200003e8

080069c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <prvTaskIsTaskSuspended+0x2a>
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e7fe      	b.n	80069ec <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <prvTaskIsTaskSuspended+0x58>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10a      	bne.n	8006a0e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <prvTaskIsTaskSuspended+0x5c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d005      	beq.n	8006a0e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a0e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006a10:	4618      	mov	r0, r3
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	200003d4 	.word	0x200003d4
 8006a20:	200003a8 	.word	0x200003a8

08006a24 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <vTaskResume+0x26>
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60bb      	str	r3, [r7, #8]
 8006a48:	e7fe      	b.n	8006a48 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006a4a:	4b20      	ldr	r3, [pc, #128]	; (8006acc <vTaskResume+0xa8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d037      	beq.n	8006ac4 <vTaskResume+0xa0>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d034      	beq.n	8006ac4 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8006a5a:	f000 fd47 	bl	80074ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ffb0 	bl	80069c4 <prvTaskIsTaskSuspended>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d02a      	beq.n	8006ac0 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fc54 	bl	800631c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	2201      	movs	r2, #1
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <vTaskResume+0xac>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <vTaskResume+0xac>)
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a10      	ldr	r2, [pc, #64]	; (8006ad4 <vTaskResume+0xb0>)
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f7ff fbe0 	bl	8006262 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <vTaskResume+0xa8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d307      	bcc.n	8006ac0 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <vTaskResume+0xb4>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006ac0:	f000 fd42 	bl	8007548 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	200002e8 	.word	0x200002e8
 8006ad0:	200003f0 	.word	0x200003f0
 8006ad4:	200002ec 	.word	0x200002ec
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <xTaskResumeFromISR+0x2a>
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	e7fe      	b.n	8006b04 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b06:	f000 fdcd 	bl	80076a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	617a      	str	r2, [r7, #20]
 8006b20:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b22:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b24:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006b26:	6a38      	ldr	r0, [r7, #32]
 8006b28:	f7ff ff4c 	bl	80069c4 <prvTaskIsTaskSuspended>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02f      	beq.n	8006b92 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <xTaskResumeFromISR+0xcc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d125      	bne.n	8006b86 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3e:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <xTaskResumeFromISR+0xd0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d301      	bcc.n	8006b4c <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fbe3 	bl	800631c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	409a      	lsls	r2, r3
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <xTaskResumeFromISR+0xd4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	4a12      	ldr	r2, [pc, #72]	; (8006bb0 <xTaskResumeFromISR+0xd4>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <xTaskResumeFromISR+0xd8>)
 8006b76:	441a      	add	r2, r3
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f7ff fb6f 	bl	8006262 <vListInsertEnd>
 8006b84:	e005      	b.n	8006b92 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	3318      	adds	r3, #24
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	480a      	ldr	r0, [pc, #40]	; (8006bb8 <xTaskResumeFromISR+0xdc>)
 8006b8e:	f7ff fb68 	bl	8006262 <vListInsertEnd>
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3728      	adds	r7, #40	; 0x28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000410 	.word	0x20000410
 8006bac:	200002e8 	.word	0x200002e8
 8006bb0:	200003f0 	.word	0x200003f0
 8006bb4:	200002ec 	.word	0x200002ec
 8006bb8:	200003a8 	.word	0x200003a8

08006bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bca:	463a      	mov	r2, r7
 8006bcc:	1d39      	adds	r1, r7, #4
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7f9 fe30 	bl	8000838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	460a      	mov	r2, r1
 8006bea:	491d      	ldr	r1, [pc, #116]	; (8006c60 <vTaskStartScheduler+0xa4>)
 8006bec:	481d      	ldr	r0, [pc, #116]	; (8006c64 <vTaskStartScheduler+0xa8>)
 8006bee:	f7ff fbbf 	bl	8006370 <xTaskCreateStatic>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <vTaskStartScheduler+0xac>)
 8006bf6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <vTaskStartScheduler+0xac>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e001      	b.n	8006c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d115      	bne.n	8006c3c <vTaskStartScheduler+0x80>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <vTaskStartScheduler+0xb0>)
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <vTaskStartScheduler+0xb4>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c30:	4b10      	ldr	r3, [pc, #64]	; (8006c74 <vTaskStartScheduler+0xb8>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c36:	f000 fbbb 	bl	80073b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c3a:	e00d      	b.n	8006c58 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d109      	bne.n	8006c58 <vTaskStartScheduler+0x9c>
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e7fe      	b.n	8006c56 <vTaskStartScheduler+0x9a>
}
 8006c58:	bf00      	nop
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	08008520 	.word	0x08008520
 8006c64:	08007035 	.word	0x08007035
 8006c68:	2000040c 	.word	0x2000040c
 8006c6c:	20000408 	.word	0x20000408
 8006c70:	200003f4 	.word	0x200003f4
 8006c74:	200003ec 	.word	0x200003ec

08006c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <vTaskSuspendAll+0x18>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a03      	ldr	r2, [pc, #12]	; (8006c90 <vTaskSuspendAll+0x18>)
 8006c84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c86:	bf00      	nop
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000410 	.word	0x20000410

08006c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ca2:	4b41      	ldr	r3, [pc, #260]	; (8006da8 <xTaskResumeAll+0x114>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <xTaskResumeAll+0x2a>
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	e7fe      	b.n	8006cbc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cbe:	f000 fc15 	bl	80074ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cc2:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <xTaskResumeAll+0x114>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	4a37      	ldr	r2, [pc, #220]	; (8006da8 <xTaskResumeAll+0x114>)
 8006cca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ccc:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <xTaskResumeAll+0x114>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d161      	bne.n	8006d98 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cd4:	4b35      	ldr	r3, [pc, #212]	; (8006dac <xTaskResumeAll+0x118>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d05d      	beq.n	8006d98 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cdc:	e02e      	b.n	8006d3c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <xTaskResumeAll+0x11c>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3318      	adds	r3, #24
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fb16 	bl	800631c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fb11 	bl	800631c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	2201      	movs	r2, #1
 8006d00:	409a      	lsls	r2, r3
 8006d02:	4b2c      	ldr	r3, [pc, #176]	; (8006db4 <xTaskResumeAll+0x120>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	4a2a      	ldr	r2, [pc, #168]	; (8006db4 <xTaskResumeAll+0x120>)
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <xTaskResumeAll+0x124>)
 8006d1a:	441a      	add	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7ff fa9d 	bl	8006262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4b23      	ldr	r3, [pc, #140]	; (8006dbc <xTaskResumeAll+0x128>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006d36:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <xTaskResumeAll+0x12c>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <xTaskResumeAll+0x11c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1cc      	bne.n	8006cde <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d4a:	f000 fa25 	bl	8007198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <xTaskResumeAll+0x130>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d5a:	f000 f859 	bl	8006e10 <xTaskIncrementTick>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006d64:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <xTaskResumeAll+0x12c>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f1      	bne.n	8006d5a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006d76:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <xTaskResumeAll+0x130>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <xTaskResumeAll+0x12c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <xTaskResumeAll+0x134>)
 8006d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d98:	f000 fbd6 	bl	8007548 <vPortExitCritical>

	return xAlreadyYielded;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20000410 	.word	0x20000410
 8006dac:	200003e8 	.word	0x200003e8
 8006db0:	200003a8 	.word	0x200003a8
 8006db4:	200003f0 	.word	0x200003f0
 8006db8:	200002ec 	.word	0x200002ec
 8006dbc:	200002e8 	.word	0x200002e8
 8006dc0:	200003fc 	.word	0x200003fc
 8006dc4:	200003f8 	.word	0x200003f8
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <xTaskGetTickCount+0x1c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dd8:	687b      	ldr	r3, [r7, #4]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	200003ec 	.word	0x200003ec

08006dec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006df2:	f000 fc57 	bl	80076a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006dfa:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <xTaskGetTickCountFromISR+0x20>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e00:	683b      	ldr	r3, [r7, #0]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200003ec 	.word	0x200003ec

08006e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e1a:	4b4e      	ldr	r3, [pc, #312]	; (8006f54 <xTaskIncrementTick+0x144>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 8087 	bne.w	8006f32 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e24:	4b4c      	ldr	r3, [pc, #304]	; (8006f58 <xTaskIncrementTick+0x148>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e2c:	4a4a      	ldr	r2, [pc, #296]	; (8006f58 <xTaskIncrementTick+0x148>)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11f      	bne.n	8006e78 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e38:	4b48      	ldr	r3, [pc, #288]	; (8006f5c <xTaskIncrementTick+0x14c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <xTaskIncrementTick+0x46>
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	e7fe      	b.n	8006e54 <xTaskIncrementTick+0x44>
 8006e56:	4b41      	ldr	r3, [pc, #260]	; (8006f5c <xTaskIncrementTick+0x14c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <xTaskIncrementTick+0x150>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a3e      	ldr	r2, [pc, #248]	; (8006f5c <xTaskIncrementTick+0x14c>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4a3e      	ldr	r2, [pc, #248]	; (8006f60 <xTaskIncrementTick+0x150>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4b3e      	ldr	r3, [pc, #248]	; (8006f64 <xTaskIncrementTick+0x154>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	4a3c      	ldr	r2, [pc, #240]	; (8006f64 <xTaskIncrementTick+0x154>)
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	f000 f990 	bl	8007198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e78:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <xTaskIncrementTick+0x158>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d348      	bcc.n	8006f14 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e82:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <xTaskIncrementTick+0x14c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8c:	4b36      	ldr	r3, [pc, #216]	; (8006f68 <xTaskIncrementTick+0x158>)
 8006e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e92:	601a      	str	r2, [r3, #0]
					break;
 8006e94:	e03e      	b.n	8006f14 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e96:	4b31      	ldr	r3, [pc, #196]	; (8006f5c <xTaskIncrementTick+0x14c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d203      	bcs.n	8006eb6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eae:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <xTaskIncrementTick+0x158>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006eb4:	e02e      	b.n	8006f14 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fa2e 	bl	800631c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	3318      	adds	r3, #24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fa25 	bl	800631c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <xTaskIncrementTick+0x15c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	4a22      	ldr	r2, [pc, #136]	; (8006f6c <xTaskIncrementTick+0x15c>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <xTaskIncrementTick+0x160>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7ff f9b1 	bl	8006262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <xTaskIncrementTick+0x164>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d3b9      	bcc.n	8006e82 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f12:	e7b6      	b.n	8006e82 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <xTaskIncrementTick+0x164>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1a:	4915      	ldr	r1, [pc, #84]	; (8006f70 <xTaskIncrementTick+0x160>)
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d907      	bls.n	8006f3c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e004      	b.n	8006f3c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f32:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <xTaskIncrementTick+0x168>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	4a0f      	ldr	r2, [pc, #60]	; (8006f78 <xTaskIncrementTick+0x168>)
 8006f3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <xTaskIncrementTick+0x16c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f48:	697b      	ldr	r3, [r7, #20]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000410 	.word	0x20000410
 8006f58:	200003ec 	.word	0x200003ec
 8006f5c:	200003a0 	.word	0x200003a0
 8006f60:	200003a4 	.word	0x200003a4
 8006f64:	20000400 	.word	0x20000400
 8006f68:	20000408 	.word	0x20000408
 8006f6c:	200003f0 	.word	0x200003f0
 8006f70:	200002ec 	.word	0x200002ec
 8006f74:	200002e8 	.word	0x200002e8
 8006f78:	200003f8 	.word	0x200003f8
 8006f7c:	200003fc 	.word	0x200003fc

08006f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f86:	4b26      	ldr	r3, [pc, #152]	; (8007020 <vTaskSwitchContext+0xa0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f8e:	4b25      	ldr	r3, [pc, #148]	; (8007024 <vTaskSwitchContext+0xa4>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f94:	e03e      	b.n	8007014 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006f96:	4b23      	ldr	r3, [pc, #140]	; (8007024 <vTaskSwitchContext+0xa4>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9c:	4b22      	ldr	r3, [pc, #136]	; (8007028 <vTaskSwitchContext+0xa8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	fab3 f383 	clz	r3, r3
 8006fa8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	f1c3 031f 	rsb	r3, r3, #31
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	491e      	ldr	r1, [pc, #120]	; (800702c <vTaskSwitchContext+0xac>)
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <vTaskSwitchContext+0x5a>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	e7fe      	b.n	8006fd8 <vTaskSwitchContext+0x58>
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a11      	ldr	r2, [pc, #68]	; (800702c <vTaskSwitchContext+0xac>)
 8006fe6:	4413      	add	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d104      	bne.n	800700a <vTaskSwitchContext+0x8a>
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a07      	ldr	r2, [pc, #28]	; (8007030 <vTaskSwitchContext+0xb0>)
 8007012:	6013      	str	r3, [r2, #0]
}
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000410 	.word	0x20000410
 8007024:	200003fc 	.word	0x200003fc
 8007028:	200003f0 	.word	0x200003f0
 800702c:	200002ec 	.word	0x200002ec
 8007030:	200002e8 	.word	0x200002e8

08007034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800703c:	f000 f852 	bl	80070e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <prvIdleTask+0x28>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d9f9      	bls.n	800703c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <prvIdleTask+0x2c>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007058:	e7f0      	b.n	800703c <prvIdleTask+0x8>
 800705a:	bf00      	nop
 800705c:	200002ec 	.word	0x200002ec
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	e00c      	b.n	800708a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <prvInitialiseTaskLists+0x60>)
 800707c:	4413      	add	r3, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff f8c2 	bl	8006208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d9ef      	bls.n	8007070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007090:	480d      	ldr	r0, [pc, #52]	; (80070c8 <prvInitialiseTaskLists+0x64>)
 8007092:	f7ff f8b9 	bl	8006208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007096:	480d      	ldr	r0, [pc, #52]	; (80070cc <prvInitialiseTaskLists+0x68>)
 8007098:	f7ff f8b6 	bl	8006208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800709c:	480c      	ldr	r0, [pc, #48]	; (80070d0 <prvInitialiseTaskLists+0x6c>)
 800709e:	f7ff f8b3 	bl	8006208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070a2:	480c      	ldr	r0, [pc, #48]	; (80070d4 <prvInitialiseTaskLists+0x70>)
 80070a4:	f7ff f8b0 	bl	8006208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070a8:	480b      	ldr	r0, [pc, #44]	; (80070d8 <prvInitialiseTaskLists+0x74>)
 80070aa:	f7ff f8ad 	bl	8006208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <prvInitialiseTaskLists+0x78>)
 80070b0:	4a05      	ldr	r2, [pc, #20]	; (80070c8 <prvInitialiseTaskLists+0x64>)
 80070b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070b4:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <prvInitialiseTaskLists+0x7c>)
 80070b6:	4a05      	ldr	r2, [pc, #20]	; (80070cc <prvInitialiseTaskLists+0x68>)
 80070b8:	601a      	str	r2, [r3, #0]
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200002ec 	.word	0x200002ec
 80070c8:	20000378 	.word	0x20000378
 80070cc:	2000038c 	.word	0x2000038c
 80070d0:	200003a8 	.word	0x200003a8
 80070d4:	200003bc 	.word	0x200003bc
 80070d8:	200003d4 	.word	0x200003d4
 80070dc:	200003a0 	.word	0x200003a0
 80070e0:	200003a4 	.word	0x200003a4

080070e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ea:	e019      	b.n	8007120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070ec:	f000 f9fe 	bl	80074ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <prvCheckTasksWaitingTermination+0x4c>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff f90d 	bl	800631c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007102:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <prvCheckTasksWaitingTermination+0x50>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3b01      	subs	r3, #1
 8007108:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <prvCheckTasksWaitingTermination+0x50>)
 800710a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <prvCheckTasksWaitingTermination+0x54>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3b01      	subs	r3, #1
 8007112:	4a09      	ldr	r2, [pc, #36]	; (8007138 <prvCheckTasksWaitingTermination+0x54>)
 8007114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007116:	f000 fa17 	bl	8007548 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f80e 	bl	800713c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <prvCheckTasksWaitingTermination+0x54>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e1      	bne.n	80070ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	200003bc 	.word	0x200003bc
 8007134:	200003e8 	.word	0x200003e8
 8007138:	200003d0 	.word	0x200003d0

0800713c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800714a:	2b00      	cmp	r3, #0
 800714c:	d108      	bne.n	8007160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fba6 	bl	80078a4 <vPortFree>
				vPortFree( pxTCB );
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fba3 	bl	80078a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800715e:	e017      	b.n	8007190 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007166:	2b01      	cmp	r3, #1
 8007168:	d103      	bne.n	8007172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fb9a 	bl	80078a4 <vPortFree>
	}
 8007170:	e00e      	b.n	8007190 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007178:	2b02      	cmp	r3, #2
 800717a:	d009      	beq.n	8007190 <prvDeleteTCB+0x54>
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e7fe      	b.n	800718e <prvDeleteTCB+0x52>
	}
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719e:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <prvResetNextTaskUnblockTime+0x38>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <prvResetNextTaskUnblockTime+0x3c>)
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071b0:	e008      	b.n	80071c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b2:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvResetNextTaskUnblockTime+0x38>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <prvResetNextTaskUnblockTime+0x3c>)
 80071c2:	6013      	str	r3, [r2, #0]
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	200003a0 	.word	0x200003a0
 80071d4:	20000408 	.word	0x20000408

080071d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071e2:	4b29      	ldr	r3, [pc, #164]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071e8:	4b28      	ldr	r3, [pc, #160]	; (800728c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff f894 	bl	800631c <uxListRemove>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071fa:	4b24      	ldr	r3, [pc, #144]	; (800728c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	2201      	movs	r2, #1
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43da      	mvns	r2, r3
 8007208:	4b21      	ldr	r3, [pc, #132]	; (8007290 <prvAddCurrentTaskToDelayedList+0xb8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4013      	ands	r3, r2
 800720e:	4a20      	ldr	r2, [pc, #128]	; (8007290 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007210:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d10a      	bne.n	8007230 <prvAddCurrentTaskToDelayedList+0x58>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007220:	4b1a      	ldr	r3, [pc, #104]	; (800728c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	481a      	ldr	r0, [pc, #104]	; (8007294 <prvAddCurrentTaskToDelayedList+0xbc>)
 800722a:	f7ff f81a 	bl	8006262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800722e:	e026      	b.n	800727e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007238:	4b14      	ldr	r3, [pc, #80]	; (800728c <prvAddCurrentTaskToDelayedList+0xb4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	429a      	cmp	r2, r3
 8007246:	d209      	bcs.n	800725c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <prvAddCurrentTaskToDelayedList+0xc0>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4b0f      	ldr	r3, [pc, #60]	; (800728c <prvAddCurrentTaskToDelayedList+0xb4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3304      	adds	r3, #4
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f7ff f828 	bl	80062aa <vListInsert>
}
 800725a:	e010      	b.n	800727e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <prvAddCurrentTaskToDelayedList+0xc4>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3304      	adds	r3, #4
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f7ff f81e 	bl	80062aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800726e:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	429a      	cmp	r2, r3
 8007276:	d202      	bcs.n	800727e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007278:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6013      	str	r3, [r2, #0]
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	200003ec 	.word	0x200003ec
 800728c:	200002e8 	.word	0x200002e8
 8007290:	200003f0 	.word	0x200003f0
 8007294:	200003d4 	.word	0x200003d4
 8007298:	200003a4 	.word	0x200003a4
 800729c:	200003a0 	.word	0x200003a0
 80072a0:	20000408 	.word	0x20000408

080072a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3b04      	subs	r3, #4
 80072b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d4:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <pxPortInitialiseStack+0x64>)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3b14      	subs	r3, #20
 80072de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f06f 0202 	mvn.w	r2, #2
 80072f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b20      	subs	r3, #32
 80072f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	0800730d 	.word	0x0800730d

0800730c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007316:	4b11      	ldr	r3, [pc, #68]	; (800735c <prvTaskExitError+0x50>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d009      	beq.n	8007334 <prvTaskExitError+0x28>
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e7fe      	b.n	8007332 <prvTaskExitError+0x26>
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007346:	bf00      	nop
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0fc      	beq.n	8007348 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	2000000c 	.word	0x2000000c

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007388:	4808      	ldr	r0, [pc, #32]	; (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073aa:	bf00      	nop
 80073ac:	e000ed08 	.word	0xe000ed08

080073b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073b6:	4b44      	ldr	r3, [pc, #272]	; (80074c8 <xPortStartScheduler+0x118>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a44      	ldr	r2, [pc, #272]	; (80074cc <xPortStartScheduler+0x11c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d109      	bne.n	80073d4 <xPortStartScheduler+0x24>
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e7fe      	b.n	80073d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073d4:	4b3c      	ldr	r3, [pc, #240]	; (80074c8 <xPortStartScheduler+0x118>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3d      	ldr	r2, [pc, #244]	; (80074d0 <xPortStartScheduler+0x120>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d109      	bne.n	80073f2 <xPortStartScheduler+0x42>
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e7fe      	b.n	80073f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073f2:	4b38      	ldr	r3, [pc, #224]	; (80074d4 <xPortStartScheduler+0x124>)
 80073f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	22ff      	movs	r2, #255	; 0xff
 8007402:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007414:	b2da      	uxtb	r2, r3
 8007416:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <xPortStartScheduler+0x128>)
 8007418:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800741a:	4b30      	ldr	r3, [pc, #192]	; (80074dc <xPortStartScheduler+0x12c>)
 800741c:	2207      	movs	r2, #7
 800741e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007420:	e009      	b.n	8007436 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007422:	4b2e      	ldr	r3, [pc, #184]	; (80074dc <xPortStartScheduler+0x12c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3b01      	subs	r3, #1
 8007428:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <xPortStartScheduler+0x12c>)
 800742a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	b2db      	uxtb	r3, r3
 8007434:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d0ef      	beq.n	8007422 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007442:	4b26      	ldr	r3, [pc, #152]	; (80074dc <xPortStartScheduler+0x12c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1c3 0307 	rsb	r3, r3, #7
 800744a:	2b04      	cmp	r3, #4
 800744c:	d009      	beq.n	8007462 <xPortStartScheduler+0xb2>
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	e7fe      	b.n	8007460 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007462:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <xPortStartScheduler+0x12c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <xPortStartScheduler+0x12c>)
 800746a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800746c:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <xPortStartScheduler+0x12c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007474:	4a19      	ldr	r2, [pc, #100]	; (80074dc <xPortStartScheduler+0x12c>)
 8007476:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <xPortStartScheduler+0x130>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <xPortStartScheduler+0x130>)
 8007486:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800748a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <xPortStartScheduler+0x130>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <xPortStartScheduler+0x130>)
 8007492:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007496:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007498:	f000 f8d6 	bl	8007648 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <xPortStartScheduler+0x134>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074a2:	f000 f8f5 	bl	8007690 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <xPortStartScheduler+0x138>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a0f      	ldr	r2, [pc, #60]	; (80074e8 <xPortStartScheduler+0x138>)
 80074ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074b2:	f7ff ff69 	bl	8007388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074b6:	f7ff fd63 	bl	8006f80 <vTaskSwitchContext>
	prvTaskExitError();
 80074ba:	f7ff ff27 	bl	800730c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	e000ed00 	.word	0xe000ed00
 80074cc:	410fc271 	.word	0x410fc271
 80074d0:	410fc270 	.word	0x410fc270
 80074d4:	e000e400 	.word	0xe000e400
 80074d8:	20000414 	.word	0x20000414
 80074dc:	20000418 	.word	0x20000418
 80074e0:	e000ed20 	.word	0xe000ed20
 80074e4:	2000000c 	.word	0x2000000c
 80074e8:	e000ef34 	.word	0xe000ef34

080074ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007504:	4b0e      	ldr	r3, [pc, #56]	; (8007540 <vPortEnterCritical+0x54>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	4a0d      	ldr	r2, [pc, #52]	; (8007540 <vPortEnterCritical+0x54>)
 800750c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <vPortEnterCritical+0x54>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d10e      	bne.n	8007534 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <vPortEnterCritical+0x58>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <vPortEnterCritical+0x48>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	e7fe      	b.n	8007532 <vPortEnterCritical+0x46>
	}
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	2000000c 	.word	0x2000000c
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <vPortExitCritical+0x4c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <vPortExitCritical+0x22>
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	e7fe      	b.n	8007568 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <vPortExitCritical+0x4c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a08      	ldr	r2, [pc, #32]	; (8007594 <vPortExitCritical+0x4c>)
 8007572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <vPortExitCritical+0x4c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <vPortExitCritical+0x3e>
 800757c:	2300      	movs	r3, #0
 800757e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c
	...

080075a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075a0:	f3ef 8009 	mrs	r0, PSP
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <pxCurrentTCBConst>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f01e 0f10 	tst.w	lr, #16
 80075b0:	bf08      	it	eq
 80075b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	6010      	str	r0, [r2, #0]
 80075bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075c4:	f380 8811 	msr	BASEPRI, r0
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f7ff fcd6 	bl	8006f80 <vTaskSwitchContext>
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	f380 8811 	msr	BASEPRI, r0
 80075dc:	bc09      	pop	{r0, r3}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e6:	f01e 0f10 	tst.w	lr, #16
 80075ea:	bf08      	it	eq
 80075ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075f0:	f380 8809 	msr	PSP, r0
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w

08007600 <pxCurrentTCBConst>:
 8007600:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop

08007608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007620:	f7ff fbf6 	bl	8006e10 <xTaskIncrementTick>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <SysTick_Handler+0x3c>)
 800762c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <vPortSetupTimerInterrupt+0x34>)
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <vPortSetupTimerInterrupt+0x38>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <vPortSetupTimerInterrupt+0x3c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <vPortSetupTimerInterrupt+0x40>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	099b      	lsrs	r3, r3, #6
 8007664:	4a09      	ldr	r2, [pc, #36]	; (800768c <vPortSetupTimerInterrupt+0x44>)
 8007666:	3b01      	subs	r3, #1
 8007668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800766a:	4b04      	ldr	r3, [pc, #16]	; (800767c <vPortSetupTimerInterrupt+0x34>)
 800766c:	2207      	movs	r2, #7
 800766e:	601a      	str	r2, [r3, #0]
}
 8007670:	bf00      	nop
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	e000e010 	.word	0xe000e010
 8007680:	e000e018 	.word	0xe000e018
 8007684:	20000000 	.word	0x20000000
 8007688:	10624dd3 	.word	0x10624dd3
 800768c:	e000e014 	.word	0xe000e014

08007690 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007690:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076a0 <vPortEnableVFP+0x10>
 8007694:	6801      	ldr	r1, [r0, #0]
 8007696:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800769a:	6001      	str	r1, [r0, #0]
 800769c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800769e:	bf00      	nop
 80076a0:	e000ed88 	.word	0xe000ed88

080076a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076aa:	f3ef 8305 	mrs	r3, IPSR
 80076ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d913      	bls.n	80076de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076b6:	4a16      	ldr	r2, [pc, #88]	; (8007710 <vPortValidateInterruptPriority+0x6c>)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076c0:	4b14      	ldr	r3, [pc, #80]	; (8007714 <vPortValidateInterruptPriority+0x70>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	7afa      	ldrb	r2, [r7, #11]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d209      	bcs.n	80076de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e7fe      	b.n	80076dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076de:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <vPortValidateInterruptPriority+0x74>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <vPortValidateInterruptPriority+0x78>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d909      	bls.n	8007702 <vPortValidateInterruptPriority+0x5e>
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	e7fe      	b.n	8007700 <vPortValidateInterruptPriority+0x5c>
	}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000e3f0 	.word	0xe000e3f0
 8007714:	20000414 	.word	0x20000414
 8007718:	e000ed0c 	.word	0xe000ed0c
 800771c:	20000418 	.word	0x20000418

08007720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800772c:	f7ff faa4 	bl	8006c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007730:	4b57      	ldr	r3, [pc, #348]	; (8007890 <pvPortMalloc+0x170>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007738:	f000 f90c 	bl	8007954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800773c:	4b55      	ldr	r3, [pc, #340]	; (8007894 <pvPortMalloc+0x174>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4013      	ands	r3, r2
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 808c 	bne.w	8007862 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01c      	beq.n	800778a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007750:	2208      	movs	r2, #8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	2b00      	cmp	r3, #0
 8007760:	d013      	beq.n	800778a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f023 0307 	bic.w	r3, r3, #7
 8007768:	3308      	adds	r3, #8
 800776a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <pvPortMalloc+0x6a>
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e7fe      	b.n	8007788 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d068      	beq.n	8007862 <pvPortMalloc+0x142>
 8007790:	4b41      	ldr	r3, [pc, #260]	; (8007898 <pvPortMalloc+0x178>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d863      	bhi.n	8007862 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800779a:	4b40      	ldr	r3, [pc, #256]	; (800789c <pvPortMalloc+0x17c>)
 800779c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800779e:	4b3f      	ldr	r3, [pc, #252]	; (800789c <pvPortMalloc+0x17c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077a4:	e004      	b.n	80077b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d903      	bls.n	80077c2 <pvPortMalloc+0xa2>
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f1      	bne.n	80077a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077c2:	4b33      	ldr	r3, [pc, #204]	; (8007890 <pvPortMalloc+0x170>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d04a      	beq.n	8007862 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2208      	movs	r2, #8
 80077d2:	4413      	add	r3, r2
 80077d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	1ad2      	subs	r2, r2, r3
 80077e6:	2308      	movs	r3, #8
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d91e      	bls.n	800782c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <pvPortMalloc+0xf4>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	e7fe      	b.n	8007812 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007826:	69b8      	ldr	r0, [r7, #24]
 8007828:	f000 f8f6 	bl	8007a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800782c:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <pvPortMalloc+0x178>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	4a18      	ldr	r2, [pc, #96]	; (8007898 <pvPortMalloc+0x178>)
 8007838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800783a:	4b17      	ldr	r3, [pc, #92]	; (8007898 <pvPortMalloc+0x178>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <pvPortMalloc+0x180>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d203      	bcs.n	800784e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <pvPortMalloc+0x178>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <pvPortMalloc+0x180>)
 800784c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b10      	ldr	r3, [pc, #64]	; (8007894 <pvPortMalloc+0x174>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	431a      	orrs	r2, r3
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007862:	f7ff fa17 	bl	8006c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <pvPortMalloc+0x164>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e7fe      	b.n	8007882 <pvPortMalloc+0x162>
	return pvReturn;
 8007884:	69fb      	ldr	r3, [r7, #28]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3728      	adds	r7, #40	; 0x28
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20004024 	.word	0x20004024
 8007894:	20004030 	.word	0x20004030
 8007898:	20004028 	.word	0x20004028
 800789c:	2000401c 	.word	0x2000401c
 80078a0:	2000402c 	.word	0x2000402c

080078a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d046      	beq.n	8007944 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078b6:	2308      	movs	r3, #8
 80078b8:	425b      	negs	r3, r3
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4413      	add	r3, r2
 80078be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	4b20      	ldr	r3, [pc, #128]	; (800794c <vPortFree+0xa8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4013      	ands	r3, r2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <vPortFree+0x42>
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e7fe      	b.n	80078e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <vPortFree+0x5e>
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60bb      	str	r3, [r7, #8]
 8007900:	e7fe      	b.n	8007900 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <vPortFree+0xa8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d019      	beq.n	8007944 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d115      	bne.n	8007944 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <vPortFree+0xa8>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	43db      	mvns	r3, r3
 8007922:	401a      	ands	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007928:	f7ff f9a6 	bl	8006c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <vPortFree+0xac>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4413      	add	r3, r2
 8007936:	4a06      	ldr	r2, [pc, #24]	; (8007950 <vPortFree+0xac>)
 8007938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f000 f86c 	bl	8007a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007940:	f7ff f9a8 	bl	8006c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20004030 	.word	0x20004030
 8007950:	20004028 	.word	0x20004028

08007954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800795a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800795e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007960:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <prvHeapInit+0xac>)
 8007962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3307      	adds	r3, #7
 8007972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <prvHeapInit+0xac>)
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800798c:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <prvHeapInit+0xb0>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007992:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <prvHeapInit+0xb0>)
 8007994:	2200      	movs	r2, #0
 8007996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079a0:	2208      	movs	r2, #8
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <prvHeapInit+0xb4>)
 80079b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <prvHeapInit+0xb4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <prvHeapInit+0xb4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <prvHeapInit+0xb4>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4a0a      	ldr	r2, [pc, #40]	; (8007a0c <prvHeapInit+0xb8>)
 80079e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <prvHeapInit+0xbc>)
 80079ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079ec:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <prvHeapInit+0xc0>)
 80079ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	2000041c 	.word	0x2000041c
 8007a04:	2000401c 	.word	0x2000401c
 8007a08:	20004024 	.word	0x20004024
 8007a0c:	2000402c 	.word	0x2000402c
 8007a10:	20004028 	.word	0x20004028
 8007a14:	20004030 	.word	0x20004030

08007a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <prvInsertBlockIntoFreeList+0xac>)
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <prvInsertBlockIntoFreeList+0x14>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8f7      	bhi.n	8007a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d108      	bne.n	8007a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	441a      	add	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d118      	bne.n	8007aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d00d      	beq.n	8007a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e008      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e003      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d002      	beq.n	8007ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	2000401c 	.word	0x2000401c
 8007ac8:	20004024 	.word	0x20004024

08007acc <__errno>:
 8007acc:	4b01      	ldr	r3, [pc, #4]	; (8007ad4 <__errno+0x8>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20000010 	.word	0x20000010

08007ad8 <__libc_init_array>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4e0d      	ldr	r6, [pc, #52]	; (8007b10 <__libc_init_array+0x38>)
 8007adc:	4c0d      	ldr	r4, [pc, #52]	; (8007b14 <__libc_init_array+0x3c>)
 8007ade:	1ba4      	subs	r4, r4, r6
 8007ae0:	10a4      	asrs	r4, r4, #2
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	42a5      	cmp	r5, r4
 8007ae6:	d109      	bne.n	8007afc <__libc_init_array+0x24>
 8007ae8:	4e0b      	ldr	r6, [pc, #44]	; (8007b18 <__libc_init_array+0x40>)
 8007aea:	4c0c      	ldr	r4, [pc, #48]	; (8007b1c <__libc_init_array+0x44>)
 8007aec:	f000 fc28 	bl	8008340 <_init>
 8007af0:	1ba4      	subs	r4, r4, r6
 8007af2:	10a4      	asrs	r4, r4, #2
 8007af4:	2500      	movs	r5, #0
 8007af6:	42a5      	cmp	r5, r4
 8007af8:	d105      	bne.n	8007b06 <__libc_init_array+0x2e>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b00:	4798      	blx	r3
 8007b02:	3501      	adds	r5, #1
 8007b04:	e7ee      	b.n	8007ae4 <__libc_init_array+0xc>
 8007b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b0a:	4798      	blx	r3
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	e7f2      	b.n	8007af6 <__libc_init_array+0x1e>
 8007b10:	08008584 	.word	0x08008584
 8007b14:	08008584 	.word	0x08008584
 8007b18:	08008584 	.word	0x08008584
 8007b1c:	08008588 	.word	0x08008588

08007b20 <memcpy>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	1e43      	subs	r3, r0, #1
 8007b24:	440a      	add	r2, r1
 8007b26:	4291      	cmp	r1, r2
 8007b28:	d100      	bne.n	8007b2c <memcpy+0xc>
 8007b2a:	bd10      	pop	{r4, pc}
 8007b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b34:	e7f7      	b.n	8007b26 <memcpy+0x6>

08007b36 <memset>:
 8007b36:	4402      	add	r2, r0
 8007b38:	4603      	mov	r3, r0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d100      	bne.n	8007b40 <memset+0xa>
 8007b3e:	4770      	bx	lr
 8007b40:	f803 1b01 	strb.w	r1, [r3], #1
 8007b44:	e7f9      	b.n	8007b3a <memset+0x4>
	...

08007b48 <siprintf>:
 8007b48:	b40e      	push	{r1, r2, r3}
 8007b4a:	b500      	push	{lr}
 8007b4c:	b09c      	sub	sp, #112	; 0x70
 8007b4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b50:	9002      	str	r0, [sp, #8]
 8007b52:	9006      	str	r0, [sp, #24]
 8007b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b58:	4809      	ldr	r0, [pc, #36]	; (8007b80 <siprintf+0x38>)
 8007b5a:	9107      	str	r1, [sp, #28]
 8007b5c:	9104      	str	r1, [sp, #16]
 8007b5e:	4909      	ldr	r1, [pc, #36]	; (8007b84 <siprintf+0x3c>)
 8007b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b64:	9105      	str	r1, [sp, #20]
 8007b66:	6800      	ldr	r0, [r0, #0]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	a902      	add	r1, sp, #8
 8007b6c:	f000 f866 	bl	8007c3c <_svfiprintf_r>
 8007b70:	9b02      	ldr	r3, [sp, #8]
 8007b72:	2200      	movs	r2, #0
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	b01c      	add	sp, #112	; 0x70
 8007b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b7c:	b003      	add	sp, #12
 8007b7e:	4770      	bx	lr
 8007b80:	20000010 	.word	0x20000010
 8007b84:	ffff0208 	.word	0xffff0208

08007b88 <__ssputs_r>:
 8007b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8c:	688e      	ldr	r6, [r1, #8]
 8007b8e:	429e      	cmp	r6, r3
 8007b90:	4682      	mov	sl, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4690      	mov	r8, r2
 8007b96:	4699      	mov	r9, r3
 8007b98:	d837      	bhi.n	8007c0a <__ssputs_r+0x82>
 8007b9a:	898a      	ldrh	r2, [r1, #12]
 8007b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ba0:	d031      	beq.n	8007c06 <__ssputs_r+0x7e>
 8007ba2:	6825      	ldr	r5, [r4, #0]
 8007ba4:	6909      	ldr	r1, [r1, #16]
 8007ba6:	1a6f      	subs	r7, r5, r1
 8007ba8:	6965      	ldr	r5, [r4, #20]
 8007baa:	2302      	movs	r3, #2
 8007bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007bb4:	f109 0301 	add.w	r3, r9, #1
 8007bb8:	443b      	add	r3, r7
 8007bba:	429d      	cmp	r5, r3
 8007bbc:	bf38      	it	cc
 8007bbe:	461d      	movcc	r5, r3
 8007bc0:	0553      	lsls	r3, r2, #21
 8007bc2:	d530      	bpl.n	8007c26 <__ssputs_r+0x9e>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f000 fb21 	bl	800820c <_malloc_r>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	b950      	cbnz	r0, 8007be4 <__ssputs_r+0x5c>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	f8ca 3000 	str.w	r3, [sl]
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be4:	463a      	mov	r2, r7
 8007be6:	6921      	ldr	r1, [r4, #16]
 8007be8:	f7ff ff9a 	bl	8007b20 <memcpy>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	6126      	str	r6, [r4, #16]
 8007bfa:	6165      	str	r5, [r4, #20]
 8007bfc:	443e      	add	r6, r7
 8007bfe:	1bed      	subs	r5, r5, r7
 8007c00:	6026      	str	r6, [r4, #0]
 8007c02:	60a5      	str	r5, [r4, #8]
 8007c04:	464e      	mov	r6, r9
 8007c06:	454e      	cmp	r6, r9
 8007c08:	d900      	bls.n	8007c0c <__ssputs_r+0x84>
 8007c0a:	464e      	mov	r6, r9
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	4641      	mov	r1, r8
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	f000 fa93 	bl	800813c <memmove>
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	1b9b      	subs	r3, r3, r6
 8007c1a:	60a3      	str	r3, [r4, #8]
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	441e      	add	r6, r3
 8007c20:	6026      	str	r6, [r4, #0]
 8007c22:	2000      	movs	r0, #0
 8007c24:	e7dc      	b.n	8007be0 <__ssputs_r+0x58>
 8007c26:	462a      	mov	r2, r5
 8007c28:	f000 fb4a 	bl	80082c0 <_realloc_r>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d1e2      	bne.n	8007bf8 <__ssputs_r+0x70>
 8007c32:	6921      	ldr	r1, [r4, #16]
 8007c34:	4650      	mov	r0, sl
 8007c36:	f000 fa9b 	bl	8008170 <_free_r>
 8007c3a:	e7c8      	b.n	8007bce <__ssputs_r+0x46>

08007c3c <_svfiprintf_r>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	461d      	mov	r5, r3
 8007c42:	898b      	ldrh	r3, [r1, #12]
 8007c44:	061f      	lsls	r7, r3, #24
 8007c46:	b09d      	sub	sp, #116	; 0x74
 8007c48:	4680      	mov	r8, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	d50f      	bpl.n	8007c70 <_svfiprintf_r+0x34>
 8007c50:	690b      	ldr	r3, [r1, #16]
 8007c52:	b96b      	cbnz	r3, 8007c70 <_svfiprintf_r+0x34>
 8007c54:	2140      	movs	r1, #64	; 0x40
 8007c56:	f000 fad9 	bl	800820c <_malloc_r>
 8007c5a:	6020      	str	r0, [r4, #0]
 8007c5c:	6120      	str	r0, [r4, #16]
 8007c5e:	b928      	cbnz	r0, 8007c6c <_svfiprintf_r+0x30>
 8007c60:	230c      	movs	r3, #12
 8007c62:	f8c8 3000 	str.w	r3, [r8]
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	e0c8      	b.n	8007dfe <_svfiprintf_r+0x1c2>
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	6163      	str	r3, [r4, #20]
 8007c70:	2300      	movs	r3, #0
 8007c72:	9309      	str	r3, [sp, #36]	; 0x24
 8007c74:	2320      	movs	r3, #32
 8007c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7a:	2330      	movs	r3, #48	; 0x30
 8007c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c80:	9503      	str	r5, [sp, #12]
 8007c82:	f04f 0b01 	mov.w	fp, #1
 8007c86:	4637      	mov	r7, r6
 8007c88:	463d      	mov	r5, r7
 8007c8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c8e:	b10b      	cbz	r3, 8007c94 <_svfiprintf_r+0x58>
 8007c90:	2b25      	cmp	r3, #37	; 0x25
 8007c92:	d13e      	bne.n	8007d12 <_svfiprintf_r+0xd6>
 8007c94:	ebb7 0a06 	subs.w	sl, r7, r6
 8007c98:	d00b      	beq.n	8007cb2 <_svfiprintf_r+0x76>
 8007c9a:	4653      	mov	r3, sl
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	f7ff ff71 	bl	8007b88 <__ssputs_r>
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f000 80a4 	beq.w	8007df4 <_svfiprintf_r+0x1b8>
 8007cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cae:	4453      	add	r3, sl
 8007cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb2:	783b      	ldrb	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 809d 	beq.w	8007df4 <_svfiprintf_r+0x1b8>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	9307      	str	r3, [sp, #28]
 8007cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8007cce:	462f      	mov	r7, r5
 8007cd0:	2205      	movs	r2, #5
 8007cd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007cd6:	4850      	ldr	r0, [pc, #320]	; (8007e18 <_svfiprintf_r+0x1dc>)
 8007cd8:	f7f8 fa7a 	bl	80001d0 <memchr>
 8007cdc:	9b04      	ldr	r3, [sp, #16]
 8007cde:	b9d0      	cbnz	r0, 8007d16 <_svfiprintf_r+0xda>
 8007ce0:	06d9      	lsls	r1, r3, #27
 8007ce2:	bf44      	itt	mi
 8007ce4:	2220      	movmi	r2, #32
 8007ce6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cea:	071a      	lsls	r2, r3, #28
 8007cec:	bf44      	itt	mi
 8007cee:	222b      	movmi	r2, #43	; 0x2b
 8007cf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cf4:	782a      	ldrb	r2, [r5, #0]
 8007cf6:	2a2a      	cmp	r2, #42	; 0x2a
 8007cf8:	d015      	beq.n	8007d26 <_svfiprintf_r+0xea>
 8007cfa:	9a07      	ldr	r2, [sp, #28]
 8007cfc:	462f      	mov	r7, r5
 8007cfe:	2000      	movs	r0, #0
 8007d00:	250a      	movs	r5, #10
 8007d02:	4639      	mov	r1, r7
 8007d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d08:	3b30      	subs	r3, #48	; 0x30
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	d94d      	bls.n	8007daa <_svfiprintf_r+0x16e>
 8007d0e:	b1b8      	cbz	r0, 8007d40 <_svfiprintf_r+0x104>
 8007d10:	e00f      	b.n	8007d32 <_svfiprintf_r+0xf6>
 8007d12:	462f      	mov	r7, r5
 8007d14:	e7b8      	b.n	8007c88 <_svfiprintf_r+0x4c>
 8007d16:	4a40      	ldr	r2, [pc, #256]	; (8007e18 <_svfiprintf_r+0x1dc>)
 8007d18:	1a80      	subs	r0, r0, r2
 8007d1a:	fa0b f000 	lsl.w	r0, fp, r0
 8007d1e:	4318      	orrs	r0, r3
 8007d20:	9004      	str	r0, [sp, #16]
 8007d22:	463d      	mov	r5, r7
 8007d24:	e7d3      	b.n	8007cce <_svfiprintf_r+0x92>
 8007d26:	9a03      	ldr	r2, [sp, #12]
 8007d28:	1d11      	adds	r1, r2, #4
 8007d2a:	6812      	ldr	r2, [r2, #0]
 8007d2c:	9103      	str	r1, [sp, #12]
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	db01      	blt.n	8007d36 <_svfiprintf_r+0xfa>
 8007d32:	9207      	str	r2, [sp, #28]
 8007d34:	e004      	b.n	8007d40 <_svfiprintf_r+0x104>
 8007d36:	4252      	negs	r2, r2
 8007d38:	f043 0302 	orr.w	r3, r3, #2
 8007d3c:	9207      	str	r2, [sp, #28]
 8007d3e:	9304      	str	r3, [sp, #16]
 8007d40:	783b      	ldrb	r3, [r7, #0]
 8007d42:	2b2e      	cmp	r3, #46	; 0x2e
 8007d44:	d10c      	bne.n	8007d60 <_svfiprintf_r+0x124>
 8007d46:	787b      	ldrb	r3, [r7, #1]
 8007d48:	2b2a      	cmp	r3, #42	; 0x2a
 8007d4a:	d133      	bne.n	8007db4 <_svfiprintf_r+0x178>
 8007d4c:	9b03      	ldr	r3, [sp, #12]
 8007d4e:	1d1a      	adds	r2, r3, #4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	9203      	str	r2, [sp, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfb8      	it	lt
 8007d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d5c:	3702      	adds	r7, #2
 8007d5e:	9305      	str	r3, [sp, #20]
 8007d60:	4d2e      	ldr	r5, [pc, #184]	; (8007e1c <_svfiprintf_r+0x1e0>)
 8007d62:	7839      	ldrb	r1, [r7, #0]
 8007d64:	2203      	movs	r2, #3
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7f8 fa32 	bl	80001d0 <memchr>
 8007d6c:	b138      	cbz	r0, 8007d7e <_svfiprintf_r+0x142>
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	1b40      	subs	r0, r0, r5
 8007d72:	fa03 f000 	lsl.w	r0, r3, r0
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	4303      	orrs	r3, r0
 8007d7a:	3701      	adds	r7, #1
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	7839      	ldrb	r1, [r7, #0]
 8007d80:	4827      	ldr	r0, [pc, #156]	; (8007e20 <_svfiprintf_r+0x1e4>)
 8007d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d86:	2206      	movs	r2, #6
 8007d88:	1c7e      	adds	r6, r7, #1
 8007d8a:	f7f8 fa21 	bl	80001d0 <memchr>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d038      	beq.n	8007e04 <_svfiprintf_r+0x1c8>
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <_svfiprintf_r+0x1e8>)
 8007d94:	bb13      	cbnz	r3, 8007ddc <_svfiprintf_r+0x1a0>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	3307      	adds	r3, #7
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	3308      	adds	r3, #8
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	444b      	add	r3, r9
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	e76d      	b.n	8007c86 <_svfiprintf_r+0x4a>
 8007daa:	fb05 3202 	mla	r2, r5, r2, r3
 8007dae:	2001      	movs	r0, #1
 8007db0:	460f      	mov	r7, r1
 8007db2:	e7a6      	b.n	8007d02 <_svfiprintf_r+0xc6>
 8007db4:	2300      	movs	r3, #0
 8007db6:	3701      	adds	r7, #1
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	250a      	movs	r5, #10
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc4:	3a30      	subs	r2, #48	; 0x30
 8007dc6:	2a09      	cmp	r2, #9
 8007dc8:	d903      	bls.n	8007dd2 <_svfiprintf_r+0x196>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0c8      	beq.n	8007d60 <_svfiprintf_r+0x124>
 8007dce:	9105      	str	r1, [sp, #20]
 8007dd0:	e7c6      	b.n	8007d60 <_svfiprintf_r+0x124>
 8007dd2:	fb05 2101 	mla	r1, r5, r1, r2
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4607      	mov	r7, r0
 8007dda:	e7f0      	b.n	8007dbe <_svfiprintf_r+0x182>
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	4622      	mov	r2, r4
 8007de2:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <_svfiprintf_r+0x1ec>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	4640      	mov	r0, r8
 8007de8:	f3af 8000 	nop.w
 8007dec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007df0:	4681      	mov	r9, r0
 8007df2:	d1d6      	bne.n	8007da2 <_svfiprintf_r+0x166>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	065b      	lsls	r3, r3, #25
 8007df8:	f53f af35 	bmi.w	8007c66 <_svfiprintf_r+0x2a>
 8007dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dfe:	b01d      	add	sp, #116	; 0x74
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <_svfiprintf_r+0x1ec>)
 8007e0c:	a904      	add	r1, sp, #16
 8007e0e:	4640      	mov	r0, r8
 8007e10:	f000 f882 	bl	8007f18 <_printf_i>
 8007e14:	e7ea      	b.n	8007dec <_svfiprintf_r+0x1b0>
 8007e16:	bf00      	nop
 8007e18:	08008548 	.word	0x08008548
 8007e1c:	0800854e 	.word	0x0800854e
 8007e20:	08008552 	.word	0x08008552
 8007e24:	00000000 	.word	0x00000000
 8007e28:	08007b89 	.word	0x08007b89

08007e2c <_printf_common>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	4691      	mov	r9, r2
 8007e32:	461f      	mov	r7, r3
 8007e34:	688a      	ldr	r2, [r1, #8]
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	bfb8      	it	lt
 8007e40:	4613      	movlt	r3, r2
 8007e42:	f8c9 3000 	str.w	r3, [r9]
 8007e46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	b112      	cbz	r2, 8007e56 <_printf_common+0x2a>
 8007e50:	3301      	adds	r3, #1
 8007e52:	f8c9 3000 	str.w	r3, [r9]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	0699      	lsls	r1, r3, #26
 8007e5a:	bf42      	ittt	mi
 8007e5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e60:	3302      	addmi	r3, #2
 8007e62:	f8c9 3000 	strmi.w	r3, [r9]
 8007e66:	6825      	ldr	r5, [r4, #0]
 8007e68:	f015 0506 	ands.w	r5, r5, #6
 8007e6c:	d107      	bne.n	8007e7e <_printf_common+0x52>
 8007e6e:	f104 0a19 	add.w	sl, r4, #25
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	f8d9 2000 	ldr.w	r2, [r9]
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	42ab      	cmp	r3, r5
 8007e7c:	dc28      	bgt.n	8007ed0 <_printf_common+0xa4>
 8007e7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	3300      	adds	r3, #0
 8007e86:	bf18      	it	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	0692      	lsls	r2, r2, #26
 8007e8c:	d42d      	bmi.n	8007eea <_printf_common+0xbe>
 8007e8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e92:	4639      	mov	r1, r7
 8007e94:	4630      	mov	r0, r6
 8007e96:	47c0      	blx	r8
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d020      	beq.n	8007ede <_printf_common+0xb2>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	68e5      	ldr	r5, [r4, #12]
 8007ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ea4:	f003 0306 	and.w	r3, r3, #6
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	bf08      	it	eq
 8007eac:	1aad      	subeq	r5, r5, r2
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	bf0c      	ite	eq
 8007eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb8:	2500      	movne	r5, #0
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	bfc4      	itt	gt
 8007ebe:	1a9b      	subgt	r3, r3, r2
 8007ec0:	18ed      	addgt	r5, r5, r3
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	341a      	adds	r4, #26
 8007ec8:	454d      	cmp	r5, r9
 8007eca:	d11a      	bne.n	8007f02 <_printf_common+0xd6>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e008      	b.n	8007ee2 <_printf_common+0xb6>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	47c0      	blx	r8
 8007eda:	3001      	adds	r0, #1
 8007edc:	d103      	bne.n	8007ee6 <_printf_common+0xba>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	e7c3      	b.n	8007e72 <_printf_common+0x46>
 8007eea:	18e1      	adds	r1, r4, r3
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	2030      	movs	r0, #48	; 0x30
 8007ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ef4:	4422      	add	r2, r4
 8007ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007efe:	3302      	adds	r3, #2
 8007f00:	e7c5      	b.n	8007e8e <_printf_common+0x62>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4622      	mov	r2, r4
 8007f06:	4639      	mov	r1, r7
 8007f08:	4630      	mov	r0, r6
 8007f0a:	47c0      	blx	r8
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0e6      	beq.n	8007ede <_printf_common+0xb2>
 8007f10:	f109 0901 	add.w	r9, r9, #1
 8007f14:	e7d8      	b.n	8007ec8 <_printf_common+0x9c>
	...

08007f18 <_printf_i>:
 8007f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f20:	460c      	mov	r4, r1
 8007f22:	7e09      	ldrb	r1, [r1, #24]
 8007f24:	b085      	sub	sp, #20
 8007f26:	296e      	cmp	r1, #110	; 0x6e
 8007f28:	4617      	mov	r7, r2
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f30:	f000 80b3 	beq.w	800809a <_printf_i+0x182>
 8007f34:	d822      	bhi.n	8007f7c <_printf_i+0x64>
 8007f36:	2963      	cmp	r1, #99	; 0x63
 8007f38:	d036      	beq.n	8007fa8 <_printf_i+0x90>
 8007f3a:	d80a      	bhi.n	8007f52 <_printf_i+0x3a>
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	f000 80b9 	beq.w	80080b4 <_printf_i+0x19c>
 8007f42:	2958      	cmp	r1, #88	; 0x58
 8007f44:	f000 8083 	beq.w	800804e <_printf_i+0x136>
 8007f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f50:	e032      	b.n	8007fb8 <_printf_i+0xa0>
 8007f52:	2964      	cmp	r1, #100	; 0x64
 8007f54:	d001      	beq.n	8007f5a <_printf_i+0x42>
 8007f56:	2969      	cmp	r1, #105	; 0x69
 8007f58:	d1f6      	bne.n	8007f48 <_printf_i+0x30>
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	6813      	ldr	r3, [r2, #0]
 8007f5e:	0605      	lsls	r5, r0, #24
 8007f60:	f103 0104 	add.w	r1, r3, #4
 8007f64:	d52a      	bpl.n	8007fbc <_printf_i+0xa4>
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da03      	bge.n	8007f76 <_printf_i+0x5e>
 8007f6e:	222d      	movs	r2, #45	; 0x2d
 8007f70:	425b      	negs	r3, r3
 8007f72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f76:	486f      	ldr	r0, [pc, #444]	; (8008134 <_printf_i+0x21c>)
 8007f78:	220a      	movs	r2, #10
 8007f7a:	e039      	b.n	8007ff0 <_printf_i+0xd8>
 8007f7c:	2973      	cmp	r1, #115	; 0x73
 8007f7e:	f000 809d 	beq.w	80080bc <_printf_i+0x1a4>
 8007f82:	d808      	bhi.n	8007f96 <_printf_i+0x7e>
 8007f84:	296f      	cmp	r1, #111	; 0x6f
 8007f86:	d020      	beq.n	8007fca <_printf_i+0xb2>
 8007f88:	2970      	cmp	r1, #112	; 0x70
 8007f8a:	d1dd      	bne.n	8007f48 <_printf_i+0x30>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	f043 0320 	orr.w	r3, r3, #32
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	e003      	b.n	8007f9e <_printf_i+0x86>
 8007f96:	2975      	cmp	r1, #117	; 0x75
 8007f98:	d017      	beq.n	8007fca <_printf_i+0xb2>
 8007f9a:	2978      	cmp	r1, #120	; 0x78
 8007f9c:	d1d4      	bne.n	8007f48 <_printf_i+0x30>
 8007f9e:	2378      	movs	r3, #120	; 0x78
 8007fa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fa4:	4864      	ldr	r0, [pc, #400]	; (8008138 <_printf_i+0x220>)
 8007fa6:	e055      	b.n	8008054 <_printf_i+0x13c>
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	1d19      	adds	r1, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6011      	str	r1, [r2, #0]
 8007fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e08c      	b.n	80080d6 <_printf_i+0x1be>
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6011      	str	r1, [r2, #0]
 8007fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fc4:	bf18      	it	ne
 8007fc6:	b21b      	sxthne	r3, r3
 8007fc8:	e7cf      	b.n	8007f6a <_printf_i+0x52>
 8007fca:	6813      	ldr	r3, [r2, #0]
 8007fcc:	6825      	ldr	r5, [r4, #0]
 8007fce:	1d18      	adds	r0, r3, #4
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	0628      	lsls	r0, r5, #24
 8007fd4:	d501      	bpl.n	8007fda <_printf_i+0xc2>
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	e002      	b.n	8007fe0 <_printf_i+0xc8>
 8007fda:	0668      	lsls	r0, r5, #25
 8007fdc:	d5fb      	bpl.n	8007fd6 <_printf_i+0xbe>
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	4854      	ldr	r0, [pc, #336]	; (8008134 <_printf_i+0x21c>)
 8007fe2:	296f      	cmp	r1, #111	; 0x6f
 8007fe4:	bf14      	ite	ne
 8007fe6:	220a      	movne	r2, #10
 8007fe8:	2208      	moveq	r2, #8
 8007fea:	2100      	movs	r1, #0
 8007fec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ff0:	6865      	ldr	r5, [r4, #4]
 8007ff2:	60a5      	str	r5, [r4, #8]
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	f2c0 8095 	blt.w	8008124 <_printf_i+0x20c>
 8007ffa:	6821      	ldr	r1, [r4, #0]
 8007ffc:	f021 0104 	bic.w	r1, r1, #4
 8008000:	6021      	str	r1, [r4, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d13d      	bne.n	8008082 <_printf_i+0x16a>
 8008006:	2d00      	cmp	r5, #0
 8008008:	f040 808e 	bne.w	8008128 <_printf_i+0x210>
 800800c:	4665      	mov	r5, ip
 800800e:	2a08      	cmp	r2, #8
 8008010:	d10b      	bne.n	800802a <_printf_i+0x112>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	07db      	lsls	r3, r3, #31
 8008016:	d508      	bpl.n	800802a <_printf_i+0x112>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	6862      	ldr	r2, [r4, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	bfde      	ittt	le
 8008020:	2330      	movle	r3, #48	; 0x30
 8008022:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008026:	f105 35ff 	addle.w	r5, r5, #4294967295
 800802a:	ebac 0305 	sub.w	r3, ip, r5
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	f8cd 8000 	str.w	r8, [sp]
 8008034:	463b      	mov	r3, r7
 8008036:	aa03      	add	r2, sp, #12
 8008038:	4621      	mov	r1, r4
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff fef6 	bl	8007e2c <_printf_common>
 8008040:	3001      	adds	r0, #1
 8008042:	d14d      	bne.n	80080e0 <_printf_i+0x1c8>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b005      	add	sp, #20
 800804a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800804e:	4839      	ldr	r0, [pc, #228]	; (8008134 <_printf_i+0x21c>)
 8008050:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008054:	6813      	ldr	r3, [r2, #0]
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	1d1d      	adds	r5, r3, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6015      	str	r5, [r2, #0]
 800805e:	060a      	lsls	r2, r1, #24
 8008060:	d50b      	bpl.n	800807a <_printf_i+0x162>
 8008062:	07ca      	lsls	r2, r1, #31
 8008064:	bf44      	itt	mi
 8008066:	f041 0120 	orrmi.w	r1, r1, #32
 800806a:	6021      	strmi	r1, [r4, #0]
 800806c:	b91b      	cbnz	r3, 8008076 <_printf_i+0x15e>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	f022 0220 	bic.w	r2, r2, #32
 8008074:	6022      	str	r2, [r4, #0]
 8008076:	2210      	movs	r2, #16
 8008078:	e7b7      	b.n	8007fea <_printf_i+0xd2>
 800807a:	064d      	lsls	r5, r1, #25
 800807c:	bf48      	it	mi
 800807e:	b29b      	uxthmi	r3, r3
 8008080:	e7ef      	b.n	8008062 <_printf_i+0x14a>
 8008082:	4665      	mov	r5, ip
 8008084:	fbb3 f1f2 	udiv	r1, r3, r2
 8008088:	fb02 3311 	mls	r3, r2, r1, r3
 800808c:	5cc3      	ldrb	r3, [r0, r3]
 800808e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008092:	460b      	mov	r3, r1
 8008094:	2900      	cmp	r1, #0
 8008096:	d1f5      	bne.n	8008084 <_printf_i+0x16c>
 8008098:	e7b9      	b.n	800800e <_printf_i+0xf6>
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	6825      	ldr	r5, [r4, #0]
 800809e:	6961      	ldr	r1, [r4, #20]
 80080a0:	1d18      	adds	r0, r3, #4
 80080a2:	6010      	str	r0, [r2, #0]
 80080a4:	0628      	lsls	r0, r5, #24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	d501      	bpl.n	80080ae <_printf_i+0x196>
 80080aa:	6019      	str	r1, [r3, #0]
 80080ac:	e002      	b.n	80080b4 <_printf_i+0x19c>
 80080ae:	066a      	lsls	r2, r5, #25
 80080b0:	d5fb      	bpl.n	80080aa <_printf_i+0x192>
 80080b2:	8019      	strh	r1, [r3, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	4665      	mov	r5, ip
 80080ba:	e7b9      	b.n	8008030 <_printf_i+0x118>
 80080bc:	6813      	ldr	r3, [r2, #0]
 80080be:	1d19      	adds	r1, r3, #4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	681d      	ldr	r5, [r3, #0]
 80080c4:	6862      	ldr	r2, [r4, #4]
 80080c6:	2100      	movs	r1, #0
 80080c8:	4628      	mov	r0, r5
 80080ca:	f7f8 f881 	bl	80001d0 <memchr>
 80080ce:	b108      	cbz	r0, 80080d4 <_printf_i+0x1bc>
 80080d0:	1b40      	subs	r0, r0, r5
 80080d2:	6060      	str	r0, [r4, #4]
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	6123      	str	r3, [r4, #16]
 80080d8:	2300      	movs	r3, #0
 80080da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080de:	e7a7      	b.n	8008030 <_printf_i+0x118>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4639      	mov	r1, r7
 80080e6:	4630      	mov	r0, r6
 80080e8:	47c0      	blx	r8
 80080ea:	3001      	adds	r0, #1
 80080ec:	d0aa      	beq.n	8008044 <_printf_i+0x12c>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	079b      	lsls	r3, r3, #30
 80080f2:	d413      	bmi.n	800811c <_printf_i+0x204>
 80080f4:	68e0      	ldr	r0, [r4, #12]
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	4298      	cmp	r0, r3
 80080fa:	bfb8      	it	lt
 80080fc:	4618      	movlt	r0, r3
 80080fe:	e7a3      	b.n	8008048 <_printf_i+0x130>
 8008100:	2301      	movs	r3, #1
 8008102:	464a      	mov	r2, r9
 8008104:	4639      	mov	r1, r7
 8008106:	4630      	mov	r0, r6
 8008108:	47c0      	blx	r8
 800810a:	3001      	adds	r0, #1
 800810c:	d09a      	beq.n	8008044 <_printf_i+0x12c>
 800810e:	3501      	adds	r5, #1
 8008110:	68e3      	ldr	r3, [r4, #12]
 8008112:	9a03      	ldr	r2, [sp, #12]
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	42ab      	cmp	r3, r5
 8008118:	dcf2      	bgt.n	8008100 <_printf_i+0x1e8>
 800811a:	e7eb      	b.n	80080f4 <_printf_i+0x1dc>
 800811c:	2500      	movs	r5, #0
 800811e:	f104 0919 	add.w	r9, r4, #25
 8008122:	e7f5      	b.n	8008110 <_printf_i+0x1f8>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ac      	bne.n	8008082 <_printf_i+0x16a>
 8008128:	7803      	ldrb	r3, [r0, #0]
 800812a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800812e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008132:	e76c      	b.n	800800e <_printf_i+0xf6>
 8008134:	08008559 	.word	0x08008559
 8008138:	0800856a 	.word	0x0800856a

0800813c <memmove>:
 800813c:	4288      	cmp	r0, r1
 800813e:	b510      	push	{r4, lr}
 8008140:	eb01 0302 	add.w	r3, r1, r2
 8008144:	d807      	bhi.n	8008156 <memmove+0x1a>
 8008146:	1e42      	subs	r2, r0, #1
 8008148:	4299      	cmp	r1, r3
 800814a:	d00a      	beq.n	8008162 <memmove+0x26>
 800814c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008150:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008154:	e7f8      	b.n	8008148 <memmove+0xc>
 8008156:	4283      	cmp	r3, r0
 8008158:	d9f5      	bls.n	8008146 <memmove+0xa>
 800815a:	1881      	adds	r1, r0, r2
 800815c:	1ad2      	subs	r2, r2, r3
 800815e:	42d3      	cmn	r3, r2
 8008160:	d100      	bne.n	8008164 <memmove+0x28>
 8008162:	bd10      	pop	{r4, pc}
 8008164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008168:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800816c:	e7f7      	b.n	800815e <memmove+0x22>
	...

08008170 <_free_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4605      	mov	r5, r0
 8008174:	2900      	cmp	r1, #0
 8008176:	d045      	beq.n	8008204 <_free_r+0x94>
 8008178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800817c:	1f0c      	subs	r4, r1, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	bfb8      	it	lt
 8008182:	18e4      	addlt	r4, r4, r3
 8008184:	f000 f8d2 	bl	800832c <__malloc_lock>
 8008188:	4a1f      	ldr	r2, [pc, #124]	; (8008208 <_free_r+0x98>)
 800818a:	6813      	ldr	r3, [r2, #0]
 800818c:	4610      	mov	r0, r2
 800818e:	b933      	cbnz	r3, 800819e <_free_r+0x2e>
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	6014      	str	r4, [r2, #0]
 8008194:	4628      	mov	r0, r5
 8008196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800819a:	f000 b8c8 	b.w	800832e <__malloc_unlock>
 800819e:	42a3      	cmp	r3, r4
 80081a0:	d90c      	bls.n	80081bc <_free_r+0x4c>
 80081a2:	6821      	ldr	r1, [r4, #0]
 80081a4:	1862      	adds	r2, r4, r1
 80081a6:	4293      	cmp	r3, r2
 80081a8:	bf04      	itt	eq
 80081aa:	681a      	ldreq	r2, [r3, #0]
 80081ac:	685b      	ldreq	r3, [r3, #4]
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	bf04      	itt	eq
 80081b2:	1852      	addeq	r2, r2, r1
 80081b4:	6022      	streq	r2, [r4, #0]
 80081b6:	6004      	str	r4, [r0, #0]
 80081b8:	e7ec      	b.n	8008194 <_free_r+0x24>
 80081ba:	4613      	mov	r3, r2
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	b10a      	cbz	r2, 80081c4 <_free_r+0x54>
 80081c0:	42a2      	cmp	r2, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x4a>
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	1858      	adds	r0, r3, r1
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x74>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	4401      	add	r1, r0
 80081d0:	1858      	adds	r0, r3, r1
 80081d2:	4282      	cmp	r2, r0
 80081d4:	6019      	str	r1, [r3, #0]
 80081d6:	d1dd      	bne.n	8008194 <_free_r+0x24>
 80081d8:	6810      	ldr	r0, [r2, #0]
 80081da:	6852      	ldr	r2, [r2, #4]
 80081dc:	605a      	str	r2, [r3, #4]
 80081de:	4401      	add	r1, r0
 80081e0:	6019      	str	r1, [r3, #0]
 80081e2:	e7d7      	b.n	8008194 <_free_r+0x24>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x7c>
 80081e6:	230c      	movs	r3, #12
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	e7d3      	b.n	8008194 <_free_r+0x24>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	1821      	adds	r1, r4, r0
 80081f0:	428a      	cmp	r2, r1
 80081f2:	bf04      	itt	eq
 80081f4:	6811      	ldreq	r1, [r2, #0]
 80081f6:	6852      	ldreq	r2, [r2, #4]
 80081f8:	6062      	str	r2, [r4, #4]
 80081fa:	bf04      	itt	eq
 80081fc:	1809      	addeq	r1, r1, r0
 80081fe:	6021      	streq	r1, [r4, #0]
 8008200:	605c      	str	r4, [r3, #4]
 8008202:	e7c7      	b.n	8008194 <_free_r+0x24>
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	20004034 	.word	0x20004034

0800820c <_malloc_r>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	1ccd      	adds	r5, r1, #3
 8008210:	f025 0503 	bic.w	r5, r5, #3
 8008214:	3508      	adds	r5, #8
 8008216:	2d0c      	cmp	r5, #12
 8008218:	bf38      	it	cc
 800821a:	250c      	movcc	r5, #12
 800821c:	2d00      	cmp	r5, #0
 800821e:	4606      	mov	r6, r0
 8008220:	db01      	blt.n	8008226 <_malloc_r+0x1a>
 8008222:	42a9      	cmp	r1, r5
 8008224:	d903      	bls.n	800822e <_malloc_r+0x22>
 8008226:	230c      	movs	r3, #12
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	2000      	movs	r0, #0
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	f000 f87d 	bl	800832c <__malloc_lock>
 8008232:	4a21      	ldr	r2, [pc, #132]	; (80082b8 <_malloc_r+0xac>)
 8008234:	6814      	ldr	r4, [r2, #0]
 8008236:	4621      	mov	r1, r4
 8008238:	b991      	cbnz	r1, 8008260 <_malloc_r+0x54>
 800823a:	4c20      	ldr	r4, [pc, #128]	; (80082bc <_malloc_r+0xb0>)
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	b91b      	cbnz	r3, 8008248 <_malloc_r+0x3c>
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f863 	bl	800830c <_sbrk_r>
 8008246:	6020      	str	r0, [r4, #0]
 8008248:	4629      	mov	r1, r5
 800824a:	4630      	mov	r0, r6
 800824c:	f000 f85e 	bl	800830c <_sbrk_r>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d124      	bne.n	800829e <_malloc_r+0x92>
 8008254:	230c      	movs	r3, #12
 8008256:	6033      	str	r3, [r6, #0]
 8008258:	4630      	mov	r0, r6
 800825a:	f000 f868 	bl	800832e <__malloc_unlock>
 800825e:	e7e4      	b.n	800822a <_malloc_r+0x1e>
 8008260:	680b      	ldr	r3, [r1, #0]
 8008262:	1b5b      	subs	r3, r3, r5
 8008264:	d418      	bmi.n	8008298 <_malloc_r+0x8c>
 8008266:	2b0b      	cmp	r3, #11
 8008268:	d90f      	bls.n	800828a <_malloc_r+0x7e>
 800826a:	600b      	str	r3, [r1, #0]
 800826c:	50cd      	str	r5, [r1, r3]
 800826e:	18cc      	adds	r4, r1, r3
 8008270:	4630      	mov	r0, r6
 8008272:	f000 f85c 	bl	800832e <__malloc_unlock>
 8008276:	f104 000b 	add.w	r0, r4, #11
 800827a:	1d23      	adds	r3, r4, #4
 800827c:	f020 0007 	bic.w	r0, r0, #7
 8008280:	1ac3      	subs	r3, r0, r3
 8008282:	d0d3      	beq.n	800822c <_malloc_r+0x20>
 8008284:	425a      	negs	r2, r3
 8008286:	50e2      	str	r2, [r4, r3]
 8008288:	e7d0      	b.n	800822c <_malloc_r+0x20>
 800828a:	428c      	cmp	r4, r1
 800828c:	684b      	ldr	r3, [r1, #4]
 800828e:	bf16      	itet	ne
 8008290:	6063      	strne	r3, [r4, #4]
 8008292:	6013      	streq	r3, [r2, #0]
 8008294:	460c      	movne	r4, r1
 8008296:	e7eb      	b.n	8008270 <_malloc_r+0x64>
 8008298:	460c      	mov	r4, r1
 800829a:	6849      	ldr	r1, [r1, #4]
 800829c:	e7cc      	b.n	8008238 <_malloc_r+0x2c>
 800829e:	1cc4      	adds	r4, r0, #3
 80082a0:	f024 0403 	bic.w	r4, r4, #3
 80082a4:	42a0      	cmp	r0, r4
 80082a6:	d005      	beq.n	80082b4 <_malloc_r+0xa8>
 80082a8:	1a21      	subs	r1, r4, r0
 80082aa:	4630      	mov	r0, r6
 80082ac:	f000 f82e 	bl	800830c <_sbrk_r>
 80082b0:	3001      	adds	r0, #1
 80082b2:	d0cf      	beq.n	8008254 <_malloc_r+0x48>
 80082b4:	6025      	str	r5, [r4, #0]
 80082b6:	e7db      	b.n	8008270 <_malloc_r+0x64>
 80082b8:	20004034 	.word	0x20004034
 80082bc:	20004038 	.word	0x20004038

080082c0 <_realloc_r>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	4607      	mov	r7, r0
 80082c4:	4614      	mov	r4, r2
 80082c6:	460e      	mov	r6, r1
 80082c8:	b921      	cbnz	r1, 80082d4 <_realloc_r+0x14>
 80082ca:	4611      	mov	r1, r2
 80082cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082d0:	f7ff bf9c 	b.w	800820c <_malloc_r>
 80082d4:	b922      	cbnz	r2, 80082e0 <_realloc_r+0x20>
 80082d6:	f7ff ff4b 	bl	8008170 <_free_r>
 80082da:	4625      	mov	r5, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e0:	f000 f826 	bl	8008330 <_malloc_usable_size_r>
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d20f      	bcs.n	8008308 <_realloc_r+0x48>
 80082e8:	4621      	mov	r1, r4
 80082ea:	4638      	mov	r0, r7
 80082ec:	f7ff ff8e 	bl	800820c <_malloc_r>
 80082f0:	4605      	mov	r5, r0
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0f2      	beq.n	80082dc <_realloc_r+0x1c>
 80082f6:	4631      	mov	r1, r6
 80082f8:	4622      	mov	r2, r4
 80082fa:	f7ff fc11 	bl	8007b20 <memcpy>
 80082fe:	4631      	mov	r1, r6
 8008300:	4638      	mov	r0, r7
 8008302:	f7ff ff35 	bl	8008170 <_free_r>
 8008306:	e7e9      	b.n	80082dc <_realloc_r+0x1c>
 8008308:	4635      	mov	r5, r6
 800830a:	e7e7      	b.n	80082dc <_realloc_r+0x1c>

0800830c <_sbrk_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4c06      	ldr	r4, [pc, #24]	; (8008328 <_sbrk_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4605      	mov	r5, r0
 8008314:	4608      	mov	r0, r1
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	f7f9 fec2 	bl	80020a0 <_sbrk>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_sbrk_r+0x1a>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	b103      	cbz	r3, 8008326 <_sbrk_r+0x1a>
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	200043b8 	.word	0x200043b8

0800832c <__malloc_lock>:
 800832c:	4770      	bx	lr

0800832e <__malloc_unlock>:
 800832e:	4770      	bx	lr

08008330 <_malloc_usable_size_r>:
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	1f18      	subs	r0, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfbc      	itt	lt
 800833a:	580b      	ldrlt	r3, [r1, r0]
 800833c:	18c0      	addlt	r0, r0, r3
 800833e:	4770      	bx	lr

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
